successful pairs of spells and potions You are given two positive integer arrays spells and potions of length n and m respectively where spells i represents the strength of the ith spell and potions j represents the strength of the jth potion You are also given an integer success A spell and potion pair is considered successful if the product of their strengths is at least success Return an integer array pairs of length n where pairs i is the number of potions that will form a successful pair with the ith spell Example Input spells potions success Output Explanation spell pairs are successful spell pairs are successful spell pairs are successful Thus is returned Example Input spells potions success Output Explanation spell pairs are successful spell pairs are successful spell pairs are successful Thus is returned Constraints n spells length m potions length n m spells i potions i success
find the difference of two arrays Given two indexed integer arrays and return a list answer of size where answer is a list of all distinct integers in which are not present in answer is a list of all distinct integers in which are not present in Note that the integers in the lists may be returned in any order Example Input Output Explanation For is present at index of whereas and are not present in Therefore answer For is present at index of whereas and are not present in Therefore answer Example Input Output Explanation For and are not present in Since their value is only included once and answer Every integer in is present in Therefore answer Constraints length length i i
dota2 senate In the world of there are two parties the Radiant and the Dire The senate consists of senators coming from two parties Now the Senate wants to decide on a change in the game The voting for this change is a round based procedure In each round each senator can exercise one of the two rights Ban one senator s right A senator can make another senator lose all his rights in this and all the following rounds Announce the victory If this senator found the senators who still have rights to vote are all from the same party he can announce the victory and decide on the change in the game Given a string senate representing each senator s party belonging The character R and D represent the Radiant party and the Dire party Then if there are n senators the size of the given string will be n The round based procedure starts from the first senator to the last senator in the given order This procedure will last until the end of voting All the senators who have lost their rights will be skipped during the procedure Suppose every senator is smart enough and will play the best strategy for his own party Predict which party will finally announce the victory and change the game The output should be Radiant or Dire Example Input senate RD Output Radiant Explanation The first senator comes from Radiant and he can just ban the next senator s right in round And the second senator can t exercise any rights anymore since his right has been banned And in round the first senator can just announce the victory since he is the only guy in the senate who can vote Example Input senate RDD Output Dire Explanation The first senator comes from Radiant and he can just ban the next senator s right in round And the second senator can t exercise any rights anymore since his right has been banned And the third senator comes from Dire and he can ban the first senator s right in round And in round the third senator can just announce the victory since he is the only guy in the senate who can vote Constraints n senate length n senate i is either R or D
decode string Given an encoded string return its decoded string The encoding rule is k where the inside the square brackets is being repeated exactly k times Note that k is guaranteed to be a positive integer You may assume that the input string is always valid there are no extra white spaces square brackets are well formed etc Furthermore you may assume that the original data does not contain any digits and that digits are only for those repeat numbers k For example there will not be input like or The test cases are generated so that the length of the output will never exceed Example Input s a bc Output aaabcbc Example Input s c Output accaccacc Example Input s abc cd ef Output abcabccdcdcdef Constraints s length s consists of lowercase English letters digits and square brackets s is guaranteed to be a valid input All the integers in s are in the range
execute cancellable function with delay Given a function fn an array or arguments args and a timeout t in milliseconds return a cancel function cancelFn After a delay of t fn should be called with args passed as parameters unless cancelFn was called first In that case fn should never be called Example Input fn x x args t cancelTime Output time returned Explanation const cancel cancellable fn fn called at t setTimeout cancel the cancelTime is after the delay time so fn should be called at t The value returned from fn is Example Input fn x x args t cancelTime Output Explanation fn was never called because cancelTime is before the delay time Example Input fn args t cancelTime Output time returned Explanation fn was called at t because cancelTime t Constraints fn is a function args is a valid JSON array args length t cancelT
minimum operations to make array equal ii You are given two integer arrays and of equal length n and an integer k You can perform the following operation on Choose two indexes i and j and increment i by k and decrement j by k In other words i i k and j j k is said to be equal to if for all indices i such that i n i i Return the minimum number of operations required to make equal to If it is impossible to make them equal return Example Input k Output Explanation In operations we can transform to operation i j After applying the operation operation i j After applying the operation One can prove that it is impossible to make arrays equal in fewer operations Example Input k Output Explanation It can be proved that it is impossible to make the two arrays equal Constraints n length length n i j k
maximum side length of a square with sum less than or equal to threshold Given a m x n matrix mat and an integer threshold return the maximum side length of a square with a sum less than or equal to threshold or return if there is no such square Example Input mat threshold Output Explanation The maximum side length of square with sum less than is as shown Example Input mat threshold Output Constraints m mat length n mat i length m n mat i j threshold
immediate food delivery ii SQL Schema Table Delivery Column Name Type int int date date is the primary key of this table The table holds information about food delivery to customers that make orders at some date and specify a preferred delivery date on the same order date or after it If the customer s preferred delivery date is the same as the order date then the order is called immediate otherwise it is called scheduled The first order of a customer is the order with the earliest order date that the customer made It is guaranteed that a customer has precisely one first order Write an SQL query to find the percentage of immediate orders in the first orders of all customers rounded to decimal places The query result format is in the following example Example Input Delivery table Output Explanation The customer id has a first order with delivery id and it is scheduled The customer id has a first order with delivery id and it is immediate The customer id has a first order with delivery id and it is scheduled The customer id has a first order with delivery id and it is immediate Hence half the customers have immediate first orders
consecutive numbers sum Given an integer n return the number of ways you can write n as the sum of consecutive positive integers Example Input n Output Explanation Example Input n Output Explanation Example Input n Output Explanation Constraints n
json deep equal Given two objects and check if they are deeply equal For two objects to be deeply equal they must contain the same keys and the associated values must also be deeply equal Two objects are also considered deeply equal if they pass the equality check You may assume both objects are the output of JSON parse In other words they are valid JSON Please solve it without using lodash s isEqual function Example Input x y x y Output true Explanation The keys and values match exactly Example Input y x x y Output true Explanation Although the keys are in a different order they still match exactly Example Input x null L x null L Output false Explanation The array of numbers is different from the array of strings Example Input true false Output false Explanation true false Constraints JSON stringify length JSON stringify length maxNestingDepth
matrix cells in distance order You are given four integers row cols rCenter and cCenter There is a rows x cols matrix and you are on the cell with the coordinates rCenter cCenter Return the coordinates of all cells in the matrix sorted by their distance from rCenter cCenter from the smallest distance to the largest distance You may return the answer in any order that satisfies this condition The distance between two cells and is Example Input rows cols rCenter cCenter Output Explanation The distances from to other cells are Example Input rows cols rCenter cCenter Output Explanation The distances from to other cells are The answer would also be accepted as correct Example Input rows cols rCenter cCenter Output Explanation The distances from to other cells are There are other answers that would also be accepted as correct such as Constraints rows cols rCenter rows cCenter cols
number of ways to separate numbers You wrote down many positive integers in a string called num However you realized that you forgot to add commas to seperate the different numbers You remember that the list of integers was non decreasing and that no integer had leading zeros Return the number of possible lists of integers that you could have written down to get the string num Since the answer may be large return it modulo Example Input num Output Explanation You could have written down the numbers Example Input num Output Explanation No numbers can have leading zeros and all numbers must be positive Example Input num Output Explanation No numbers can have leading zeros and all numbers must be positive Constraints num length num consists of digits through
count hills and valleys in an array You are given a indexed integer array nums An index i is part of a hill in nums if the closest non equal neighbors of i are smaller than nums i Similarly an index i is part of a valley in nums if the closest non equal neighbors of i are larger than nums i Adjacent indices i and j are part of the same hill or valley if nums i nums j Note that for an index to be part of a hill or valley it must have a non equal neighbor on both the left and right of the index Return the number of hills and valleys in nums Example Input nums Output Explanation At index There is no non equal neighbor of on the left so index is neither a hill nor a valley At index The closest non equal neighbors of are and Since and index is a hill At index The closest non equal neighbors of are and Since and index is a valley At index The closest non equal neighbors of are and Since and index is a valley but note that it is part of the same valley as index At index The closest non equal neighbors of are and Since and index is a hill At index There is no non equal neighbor of on the right so index is neither a hill nor a valley There are hills and valleys so we return Example Input nums Output Explanation At index There is no non equal neighbor of on the left so index is neither a hill nor a valley At index There is no non equal neighbor of on the left so index is neither a hill nor a valley At index The closest non equal neighbors of are and Since and index is neither a hill nor a valley At index The closest non equal neighbors of are and Since and index is neither a hill nor a valley At index The closest non equal neighbors of are and Since and index is neither a hill nor a valley At index There is no non equal neighbor of on the right so index is neither a hill nor a valley There are hills and valleys so we return Constraints nums length nums i
delete node in a linked list There is a singly linked list head and we want to delete a node node in it You are given the node to be deleted node You will not be given access to the first node of head All the values of the linked list are unique and it is guaranteed that the given node node is not the last node in the linked list Delete the given node Note that by deleting the node we do not mean removing it from memory We mean The value of the given node should not exist in the linked list The number of nodes in the linked list should decrease by one All the values before node should be in the same order All the values after node should be in the same order Custom testing For the input you should provide the entire linked list head and the node to be given node node should not be the last node of the list and should be an actual node in the list We will build the linked list and pass the node to your function The output will be the entire list after calling your function Example Input head node Output Explanation You are given the second node with value the linked list should become after calling your function Example Input head node Output Explanation You are given the third node with value the linked list should become after calling your function Constraints The number of the nodes in the given list is in the range Node val The value of each node in the list is unique The node to be deleted is in the list and is not a tail node
plus one You are given a large integer represented as an integer array digits where each digits i is the ith digit of the integer The digits are ordered from most significant to least significant in left to right order The large integer does not contain any leading s Increment the large integer by one and return the resulting array of digits Example Input digits Output Explanation The array represents the integer Incrementing by one gives Thus the result should be Example Input digits Output Explanation The array represents the integer Incrementing by one gives Thus the result should be Example Input digits Output Explanation The array represents the integer Incrementing by one gives Thus the result should be Constraints digits length digits i digits does not contain any leading s
flatten binary tree to linked list Given the root of a binary tree flatten the tree into a linked list The linked list should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null The linked list should be in the same order as a pre order traversal of the binary tree Example Input root null Output null null null null null Example Input root Output Example Input root Output Constraints The number of nodes in the tree is in the range Node val Follow up Can you flatten the tree in place with O extra space
peak index in a mountain array An array arr a mountain if the following properties hold arr length There exists some i with i arr length such that arr arr arr i arr i arr i arr i arr arr length Given a mountain array arr return the index i such that arr arr arr i arr i arr i arr arr length You must solve it in O log arr length time complexity Example Input arr Output Example Input arr Output Example Input arr Output Constraints arr length arr i arr is guaranteed to be a mountain array
number of subarrays with bounded maximum Given an integer array nums and two integers left and right return the number of contiguous non empty subarrays such that the value of the maximum array element in that subarray is in the range left right The test cases are generated so that the answer will fit in a bit integer Example Input nums left right Output Explanation There are three subarrays that meet the requirements Example Input nums left right Output Constraints nums length nums i left right
k highest ranked items within a price range You are given a indexed integer array grid of size m x n that represents a map of the items in a shop The integers in the grid represent the following represents a wall that you cannot pass through represents an empty cell that you can freely move to and from All other positive integers represent the price of an item in that cell You may also freely move to and from these item cells It takes step to travel between adjacent grid cells You are also given integer arrays pricing and start where pricing low high and start row col indicates that you start at the position row col and are interested only in items with a price in the range of low high inclusive You are further given an integer k You are interested in the positions of the k highest ranked items whose prices are within the given price range The rank is determined by the first of these criteria that is different Distance defined as the length of the shortest path from the start shorter distance has a higher rank Price lower price has a higher rank but it must be in the price range The row number smaller row number has a higher rank The column number smaller column number has a higher rank Return the k highest ranked items within the price range sorted by their rank highest to lowest If there are fewer than k reachable items within the price range return all of them Example Input grid pricing start k Output Explanation You start at With a price range of we can take items from and The ranks of these items are with distance with distance with distance with distance Thus the highest ranked items in the price range are and Example Input grid pricing start k Output Explanation You start at With a price range of we can take items from and The ranks of these items are with distance price with distance price with distance with distance Thus the highest ranked items in the price range are and Example Input grid pricing start k Output Explanation You start at With a price range of we can take items from and The ranks of these items are with distance with distance Thus the highest ranked items in the price range are and Note that k but there are only reachable items within the price range Constraints m grid length n grid i length m n m n grid i j pricing length low high start length row m col n grid row col k m n
maximum xor for each query You are given a sorted array nums of n non negative integers and an integer maximumBit You want to perform the following query n times Find a non negative integer k such that nums XOR nums XOR XOR nums nums length XOR k is maximized k is the answer to the ith query Remove the last element from the current array nums Return an array answer where answer i is the answer to the ith query Example Input nums maximumBit Output Explanation The queries are answered as follows query nums k since XOR XOR XOR XOR query nums k since XOR XOR XOR query nums k since XOR XOR query nums k since XOR Example Input nums maximumBit Output Explanation The queries are answered as follows query nums k since XOR XOR XOR XOR query nums k since XOR XOR XOR query nums k since XOR XOR query nums k since XOR Example Input nums maximumBit Output Constraints nums length n n maximumBit nums i nums is sorted in ascending order
number of islands Given an m x n binary grid grid which represents a map of s land and s water return the number of islands An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically You may assume all four edges of the grid are all surrounded by water Example Input grid Output Example Input grid Output Constraints m grid length n grid i length m n grid i j is or
baseball game You are keeping the scores for a baseball game with strange rules At the beginning of the game you start with an empty record You are given a list of strings operations where operations i is the ith operation you must apply to the record and is one of the following An integer x Record a new score of x Record a new score that is the sum of the previous two scores D Record a new score that is the double of the previous score C Invalidate the previous score removing it from the record Return the sum of all the scores on the record after applying all the operations The test cases are generated such that the answer and all intermediate calculations fit in a bit integer and that all operations are valid Example Input ops C D Output Explanation Add to the record record is now Add to the record record is now C Invalidate and remove the previous score record is now D Add to the record record is now Add to the record record is now The total sum is Example Input ops C D Output Explanation Add to the record record is now Add to the record record is now Add to the record record is now C Invalidate and remove the previous score record is now D Add to the record record is now Add to the record record is now Add to the record record is now Add to the record record is now The total sum is Example Input ops C Output Explanation Add to the record record is now C Invalidate and remove the previous score record is now Since the record is empty the total sum is Constraints operations length operations i is C D or a string representing an integer in the range For operation there will always be at least two previous scores on the record For operations C and D there will always be at least one previous score on the record
adding spaces to a string You are given a indexed string s and a indexed integer array spaces that describes the indices in the original string where spaces will be added Each space should be inserted before the character at the given index For example given s EnjoyYourCoffee and spaces we place spaces before Y and C which are at indices and respectively Thus we obtain Enjoy Your Coffee Return the modified string after the spaces have been added Example Input s LeetcodeHelpsMeLearn spaces Output Leetcode Helps Me Learn Explanation The indices and correspond to the underlined characters in LeetcodeHelpsMeLearn We then place spaces before those characters Example Input s icodeinpython spaces Output i code in py thon Explanation The indices and correspond to the underlined characters in icodeinpython We then place spaces before those characters Example Input s spacing spaces Output s p a c i n g Explanation We are also able to place spaces before the first character of the string Constraints s length s consists only of lowercase and uppercase English letters spaces length spaces i s length All the values of spaces are strictly increasing
map of highest peak You are given an integer matrix isWater of size m x n that represents a map of land and water cells If isWater i j cell i j is a land cell If isWater i j cell i j is a water cell You must assign each cell a height in a way that follows these rules The height of each cell must be non negative If the cell is a water cell its height must be Any two adjacent cells must have an absolute height difference of at most A cell is adjacent to another cell if the former is directly north east south or west of the latter i e their sides are touching Find an assignment of heights such that the maximum height in the matrix is maximized Return an integer matrix height of size m x n where height i j is cell i j s height If there are multiple solutions return any of them Example Input isWater Output Explanation The image shows the assigned heights of each cell The blue cell is the water cell and the green cells are the land cells Example Input isWater Output Explanation A height of is the maximum possible height of any assignment Any height assignment that has a maximum height of while still meeting the rules will also be accepted Constraints m isWater length n isWater i length m n isWater i j is or There is at least one water cell
smallest range covering elements from k lists You have k lists of sorted integers in non decreasing order Find the smallest range that includes at least one number from each of the k lists We define the range a b is smaller than range c d if b a d c or a c if b a d c Example Input nums Output Explanation List is in range List is in range List is in range Example Input nums Output Constraints nums length k k nums i length nums i j nums i is sorted in non decreasing order
find all duplicates in an array Given an integer array nums of length n where all the integers of nums are in the range n and each integer appears once or twice return an array of all the integers that appears twice You must write an algorithm that runs in O n time and uses only constant extra space Example Input nums Output Example Input nums Output Example Input nums Output Constraints n nums length n nums i n Each element in nums appears once or twice
queue reconstruction by height You are given an array of people people which are the attributes of some people in a queue not necessarily in order Each people i hi ki represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi Reconstruct and return the queue that is represented by the input array people The returned queue should be formatted as an array queue where queue j hj kj is the attributes of the jth person in the queue queue is the person at the front of the queue Example Input people Output Explanation Person has height with no other people taller or the same height in front Person has height with no other people taller or the same height in front Person has height with two persons taller or the same height in front which is person and Person has height with one person taller or the same height in front which is person Person has height with four people taller or the same height in front which are people and Person has height with one person taller or the same height in front which is person Hence is the reconstructed queue Example Input people Output Constraints people length hi ki people length It is guaranteed that the queue can be reconstructed
isomorphic strings Given two strings s and t determine if they are isomorphic Two strings s and t are isomorphic if the characters in s can be replaced to get t All occurrences of a character must be replaced with another character while preserving the order of characters No two characters may map to the same character but a character may map to itself Example Input s egg t add Output true Example Input s foo t bar Output false Example Input s paper t title Output true Constraints s length t length s length s and t consist of any valid ascii character
reorder routes to make all paths lead to the city zero There are n cities numbered from to n and n roads such that there is only one way to travel between two different cities this network form a tree Last year The ministry of transport decided to orient the roads in one direction because they are too narrow Roads are represented by connections where connections i ai bi represents a road from city ai to city bi This year there will be a big event in the capital city and many people want to travel to this city Your task consists of reorienting some roads such that each city can visit the city Return the minimum number of edges changed It s guaranteed that each city can reach city after reorder Example Input n connections Output Explanation Change the direction of edges show in red such that each node can reach the node capital Example Input n connections Output Explanation Change the direction of edges show in red such that each node can reach the node capital Example Input n connections Output Constraints n connections length n connections i length ai bi n ai bi
product price at a given date SQL Schema Table Products Column Name Type int int date is the primary key of this table Each row of this table indicates that the price of some product was changed to a new price at some date Write an SQL query to find the prices of all products on Assume the price of all products before any change is Return the result table in any order The query result format is in the following example Example Input Products table Output price
minimum moves to convert string You are given a string s consisting of n characters which are either X or O A move is defined as selecting three consecutive characters of s and converting them to O Note that if a move is applied to the character O it will stay the same Return the minimum number of moves required so that all the characters of s are converted to O Example Input s XXX Output Explanation XXX OOO We select all the characters and convert them in one move Example Input s XXOX Output Explanation XXOX OOOX OOOO We select the first characters in the first move and convert them to O Then we select the last characters and convert them so that the final string contains all O s Example Input s OOOO Output Explanation There are no X s in s to convert Constraints s length s i is either X or O
count subarrays with score less than k The score of an array is defined as the product of its sum and its length For example the score of is Given a positive integer array nums and an integer k return the number of non empty subarrays of nums whose score is strictly less than k A subarray is a contiguous sequence of elements within an array Example Input nums k Output Explanation The subarrays having scores less than are with score with score with score with score with score with score Note that subarrays such as and are not considered because their scores are and respectively while we need scores strictly less than Example Input nums k Output Explanation Every subarray except has a score less than has a score which is greater than Thus there are subarrays having scores less than Constraints nums length nums i k
building boxes You have a cubic storeroom where the width length and height of the room are all equal to n units You are asked to place n boxes in this room where each box is a cube of unit side length There are however some rules to placing the boxes You can place the boxes anywhere on the floor If box x is placed on top of the box y then each side of the four vertical sides of the box y must either be adjacent to another box or to a wall Given an integer n return the minimum possible number of boxes touching the floor Example Input n Output Explanation The figure above is for the placement of the three boxes These boxes are placed in the corner of the room where the corner is on the left side Example Input n Output Explanation The figure above is for the placement of the four boxes These boxes are placed in the corner of the room where the corner is on the left side Example Input n Output Explanation The figure above is for the placement of the ten boxes These boxes are placed in the corner of the room where the corner is on the back side Constraints n
the number of employees which report to each employee SQL Schema Table Employees Column Name Type int name varchar int age int is the primary key for this table This table contains information about the employees and the id of the manager they report to Some employees do not report to anyone is null For this problem we will consider a manager an employee who has at least other employee reporting to them Write an SQL query to report the ids and the names of all managers the number of employees who report directly to them and the average age of the reports rounded to the nearest integer Return the result table ordered by The query result format is in the following example Example Input Employees table name age Hercy null Alice Bob Winston null Output name Hercy Explanation Hercy has people report directly to him Alice and Bob Their average age is which is after rounding it to the nearest integer
minimum additions to make valid string Given a string word to which you can insert letters a b or c anywhere and any number of times return the minimum number of letters that must be inserted so that word becomes valid A string is called valid if it can be formed by concatenating the string abc several times Example Input word b Output Explanation Insert the letter a right before b and the letter c right next to a to obtain the valid string abc Example Input word aaa Output Explanation Insert letters b and c next to each a to obtain the valid string abcabcabc Example Input word abc Output Explanation word is already valid No modifications are needed Constraints word length word consists of letters a b and c only
jump game iii Given an array of non negative integers arr you are initially positioned at start index of the array When you are at index i you can jump to i arr i or i arr i check if you can reach to any index with value Notice that you can not jump outside of the array at any time Example Input arr start Output true Explanation All possible ways to reach at index with value are index index index index index index index index index Example Input arr start Output true Explanation One possible way to reach at index with value is index index index index Example Input arr start Output false Explanation There is no way to reach at index with value Constraints arr length arr i arr length start arr length
customers who never order SQL Schema Table Customers Column Name Type id int name varchar id is the primary key column for this table Each row of this table indicates the ID and name of a customer Table Orders Column Name Type id int customerId int id is the primary key column for this table customerId is a foreign key of the ID from the Customers table Each row of this table indicates the ID of an order and the ID of the customer who ordered it Write an SQL query to report all customers who never order anything Return the result table in any order The query result format is in the following example Example Input Customers table id name Joe Henry Sam Max Orders table id customerId Output Customers Henry Max
time needed to buy tickets There are n people in a line queuing to buy tickets where the person is at the front of the line and the n th person is at the back of the line You are given a indexed integer array tickets of length n where the number of tickets that the ith person would like to buy is tickets i Each person takes exactly second to buy a ticket A person can only buy ticket at a time and has to go back to the end of the line which happens instantaneously in order to buy more tickets If a person does not have any tickets left to buy the person will leave the line Return the time taken for the person at position k indexed to finish buying tickets Example Input tickets k Output Explanation In the first pass everyone in the line buys a ticket and the line becomes In the second pass everyone in the line buys a ticket and the line becomes The person at position has successfully bought tickets and it took seconds Example Input tickets k Output Explanation In the first pass everyone in the line buys a ticket and the line becomes In the next passes only the person in position is buying tickets The person at position has successfully bought tickets and it took seconds Constraints n tickets length n tickets i k n
odd string difference You are given an array of equal length strings words Assume that the length of each string is n Each string words i can be converted into a difference integer array difference i of length n where difference i j words i j words i j where j n Note that the difference between two letters is the difference between their positions in the alphabet i e the position of a is b is and z is For example for the string acb the difference integer array is All the strings in words have the same difference integer array except one You should find that string Return the string in words that has different difference integer array Example Input words adc wzy abc Output abc Explanation The difference integer array of adc is The difference integer array of wzy is The difference integer array of abc is The odd array out is so we return the corresponding string abc Example Input words aaa bob ccc ddd Output bob Explanation All the integer arrays are except for bob which corresponds to Constraints words length n words i length n words i consists of lowercase English letters
number complement The complement of an integer is the integer you get when you flip all the s to s and all the s to s in its binary representation For example The integer is in binary and its complement is which is the integer Given an integer num return its complement Example Input num Output Explanation The binary representation of is no leading zero bits and its complement is So you need to output Example Input num Output Explanation The binary representation of is no leading zero bits and its complement is So you need to output Constraints num Note This question is the same as https leetcode com problems complement of base integer
equal row and column pairs Given a indexed n x n integer matrix grid return the number of pairs ri cj such that row ri and column cj are equal A row and column pair is considered equal if they contain the same elements in the same order i e an equal array Example Input grid Output Explanation There is equal row and column pair Row Column Example Input grid Output Explanation There are equal row and column pairs Row Column Row Column Row Column Constraints n grid length grid i length n grid i j
projection area of 3d shapes You are given an n x n grid where we place some x x cubes that are axis aligned with the x y and z axes Each value v grid i j represents a tower of v cubes placed on top of the cell i j We view the projection of these cubes onto the xy yz and zx planes A projection is like a shadow that maps our dimensional figure to a dimensional plane We are viewing the shadow when looking at the cubes from the top the front and the side Return the total area of all three projections Example Input grid Output Explanation Here are the three projections shadows of the shape made with each axis aligned plane Example Input grid Output Example Input grid Output Constraints n grid length grid i length n grid i j
serialize and deserialize bst Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer or transmitted across a network connection link to be reconstructed later in the same or another computer environment Design an algorithm to serialize and deserialize a binary search tree There is no restriction on how your serialization deserialization algorithm should work You need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure The encoded string should be as compact as possible Example Input root Output Example Input root Output Constraints The number of nodes in the tree is in the range Node val The input tree is guaranteed to be a binary search tree
longest common prefix Write a function to find the longest common prefix string amongst an array of strings If there is no common prefix return an empty string Example Input strs flower flow flight Output fl Example Input strs dog racecar car Output Explanation There is no common prefix among the input strings Constraints strs length strs i length strs i consists of only lowercase English letters
stone game iii Alice and Bob continue their games with piles of stones There are several stones arranged in a row and each stone has an associated value which is an integer given in the array stoneValue Alice and Bob take turns with Alice starting first On each player s turn that player can take or stones from the first remaining stones in the row The score of each player is the sum of the values of the stones taken The score of each player is initially The objective of the game is to end with the highest score and the winner is the player with the highest score and there could be a tie The game continues until all the stones have been taken Assume Alice and Bob play optimally Return Alice if Alice will win Bob if Bob will win or Tie if they will end the game with the same score Example Input values Output Bob Explanation Alice will always lose Her best move will be to take three piles and the score become Now the score of Bob is and Bob wins Example Input values Output Alice Explanation Alice must choose all the three piles at the first move to win and leave Bob with negative score If Alice chooses one pile her score will be and the next move Bob s score becomes In the next move Alice will take the pile with value and lose If Alice chooses two piles her score will be and the next move Bob s score becomes In the next move Alice will take the pile with value and also lose Remember that both play optimally so here Alice will choose the scenario that makes her win Example Input values Output Tie Explanation Alice cannot win this game She can end the game in a draw if she decided to choose all the first three piles otherwise she will lose Constraints stoneValue length stoneValue i
longest absolute file path Suppose we have a file system that stores both files and directories An example of one system is represented in the following picture Here we have dir as the only directory in the root dir contains two subdirectories and contains a file ext and subdirectory contains a subdirectory which contains a file ext In text form it looks like this with representing the tab character dir ext ext If we were to write this representation in code it will look like this dir n n t ext n t n n t n t t ext Note that the n and t are the new line and tab characters Every file and directory has a unique absolute path in the file system which is the order of directories that must be opened to reach the file directory itself all concatenated by s Using the above example the absolute path to ext is dir ext Each directory name consists of letters digits and or spaces Each file name is of the form name extension where name and extension consist of letters digits and or spaces Given a string input representing the file system in the explained format return the length of the longest absolute path to a file in the abstracted file system If there is no file in the system return Note that the testcases are generated such that the file system is valid and no file or directory name has length Example Input input dir n n n t tfile ext Output Explanation We have only one file and the absolute path is dir file ext of length Example Input input dir n n t ext n t n n t n t t ext Output Explanation We have two files dir ext of length dir ext of length We return since it is the longest absolute path to a file Example Input input a Output Explanation We do not have any files just a single directory named a Constraints input length input may contain lowercase or uppercase English letters a new line character n a tab character t a dot a space and digits All file and directory names have positive length
univalued binary tree A binary tree is uni valued if every node in the tree has the same value Given the root of a binary tree return true if the given tree is uni valued or false otherwise Example Input root null Output true Example Input root Output false Constraints The number of nodes in the tree is in the range Node val
minimum absolute difference in bst Given the root of a Binary Search Tree BST return the minimum absolute difference between the values of any two different nodes in the tree Example Input root Output Example Input root null null Output Constraints The number of nodes in the tree is in the range Node val Note This question is the same as https leetcode com problems minimum distance between bst nodes
distribute coins in binary tree You are given the root of a binary tree with n nodes where each node in the tree has node val coins There are n coins in total throughout the whole tree In one move we may choose two adjacent nodes and move one coin from one node to another A move may be from parent to child or from child to parent Return the minimum number of moves required to make every node have exactly one coin Example Input root Output Explanation From the root of the tree we move one coin to its left child and one coin to its right child Example Input root Output Explanation From the left child of the root we move two coins to the root taking two moves Then we move one coin from the root of the tree to the right child Constraints The number of nodes in the tree is n n Node val n The sum of all Node val is n
maximum score from performing multiplication operations You are given two indexed integer arrays nums and multipliers of size n and m respectively where n m You begin with a score of You want to perform exactly m operations On the ith operation indexed you will Choose one integer x from either the start or the end of the array nums Add multipliers i x to your score Note that multipliers corresponds to the first operation multipliers to the second operation and so on Remove x from nums Return the maximum score after performing m operations Example Input nums multipliers Output Explanation An optimal solution is as follows Choose from the end adding to the score Choose from the end adding to the score Choose from the end adding to the score The total score is Example Input nums multipliers Output Explanation An optimal solution is as follows Choose from the start adding to the score Choose from the start adding to the score Choose from the start adding to the score Choose from the end adding to the score Choose from the end adding to the score The total score is Constraints n nums length m multipliers length m m n nums i multipliers i
add strings Given two non negative integers and represented as string return the sum of and as a string You must solve the problem without using any built in library for handling large integers such as BigInteger You must also not convert the inputs to integers directly Example Input Output Example Input Output Example Input Output Constraints length length and consist of only digits and don t have any leading zeros except for the zero itself
minimum total space wasted with k resizing operations You are currently designing a dynamic array You are given a indexed integer array nums where nums i is the number of elements that will be in the array at time i In addition you are given an integer k the maximum number of times you can resize the array to any size The size of the array at time t sizet must be at least nums t because there needs to be enough space in the array to hold all the elements The space wasted at time t is defined as sizet nums t and the total space wasted is the sum of the space wasted across every time t where t nums length Return the minimum total space wasted if you can resize the array at most k times Note The array can have any size at the start and does not count towards the number of resizing operations Example Input nums k Output Explanation size We can set the initial size to be The total wasted space is Example Input nums k Output Explanation size We can set the initial size to be and resize to at time The total wasted space is Example Input nums k Output Explanation size We can set the initial size to resize to at time and resize to at time The total wasted space is Constraints nums length nums i k nums length
single number Given a non empty array of integers nums every element appears twice except for one Find that single one You must implement a solution with a linear runtime complexity and use only constant extra space Example Input nums Output Example Input nums Output Example Input nums Output Constraints nums length nums i Each element in the array appears twice except for one element which appears only once
shortest unsorted continuous subarray Given an integer array nums you need to find one continuous subarray such that if you only sort this subarray in non decreasing order then the whole array will be sorted in non decreasing order Return the shortest such subarray and output its length Example Input nums Output Explanation You need to sort in ascending order to make the whole array sorted in ascending order Example Input nums Output Example Input nums Output Constraints nums length nums i Follow up Can you solve it in O n time complexity
replace all digits with characters You are given a indexed string s that has lowercase English letters in its even indices and digits in its odd indices There is a function shift c x where c is a character and x is a digit that returns the xth character after c For example shift a f and shift x x For every odd index i you want to replace the digit s i with shift s i s i Return s after replacing all digits It is guaranteed that shift s i s i will never exceed z Example Input s Output abcdef Explanation The digits are replaced as follows s shift a b s shift c d s shift e f Example Input s Output abbdcfdhe Explanation The digits are replaced as follows s shift a b s shift b d s shift c f s shift d h Constraints s length s consists only of lowercase English letters and digits shift s i s i z for all odd indices i
random pick index Given an integer array nums with possible duplicates randomly output the index of a given target number You can assume that the given target number must exist in the array Implement the Solution class Solution int nums Initializes the object with the array nums int pick int target Picks a random index i from nums where nums i target If there are multiple valid i s then each index should have an equal probability of returning Example Input Solution pick pick pick Output null Explanation Solution solution new Solution solution pick It should return either index or randomly Each index should have equal probability of returning solution pick It should return Since in the array only nums is equal to solution pick It should return either index or randomly Each index should have equal probability of returning Constraints nums length nums i target is an integer from nums At most calls will be made to pick
can make palindrome from substring You are given a string s and array queries where queries i lefti righti ki We may rearrange the substring s lefti righti for each query and then choose up to ki of them to replace with any lowercase English letter If the substring is possible to be a palindrome string after the operations above the result of the query is true Otherwise the result is false Return a boolean array answer where answer i is the result of the ith query queries i Note that each letter is counted individually for replacement so if for example s lefti righti aaa and ki we can only replace two of the letters Also note that no query modifies the initial string s Example Input s abcda queries Output true false false true true Explanation queries substring d is palidrome queries substring bc is not palidrome queries substring abcd is not palidrome after replacing only character queries substring abcd could be changed to abba which is palidrome Also this can be changed to baab first rearrange it bacd then replace cd with ab queries substring abcda could be changed to abcba which is palidrome Example Input s lyb queries Output false true Constraints s length queries length lefti righti s length ki s length s consists of lowercase English letters
convert integer to the sum of two no-zero integers No Zero integer is a positive integer that does not contain any in its decimal representation Given an integer n return a list of two integers a b where a and b are No Zero integers a b n The test cases are generated so that there is at least one valid solution If there are many valid solutions you can return any of them Example Input n Output Explanation Let a and b Both a and b are no zero integers and a b n Example Input n Output Explanation Let a and b Both a and b are no zero integers and a b n Note that there are other valid answers as that can be accepted Constraints n
duplicate zeros Given a fixed length integer array arr duplicate each occurrence of zero shifting the remaining elements to the right Note that elements beyond the length of the original array are not written Do the above modifications to the input array in place and do not return anything Example Input arr Output Explanation After calling your function the input array is modified to Example Input arr Output Explanation After calling your function the input array is modified to Constraints arr length arr i
check if an original string exists given two encoded strings An original string consisting of lowercase English letters can be encoded by the following steps Arbitrarily split it into a sequence of some number of non empty substrings Arbitrarily choose some elements possibly none of the sequence and replace each with its length as a numeric string Concatenate the sequence as the encoded string For example one way to encode an original string abcdefghijklmnop might be Split it as a sequence ab cdefghijklmn o p Choose the second and third elements to be replaced by their lengths respectively The sequence becomes ab p Concatenate the elements of the sequence to get the encoded string Given two encoded strings and consisting of lowercase English letters and digits inclusive return true if there exists an original string that could be encoded as both and Otherwise return false Note The test cases are generated such that the number of consecutive digits in and does not exceed Example Input internationalization Output true Explanation It is possible that internationalization was the original string internationalization Split internationalization Do not replace any element Concatenate internationalization which is internationalization Split i nternationalizatio n Replace i n Concatenate which is Example Input Output true Explanation It is possible that leetcode was the original string leetcode Split l e et cod e Replace l e Concatenate which is leetcode Split leet code Replace Concatenate which is Example Input Output false Explanation It is impossible The original string encoded as must start with the letter a The original string encoded as must start with the letter c Constraints length length and consist of digits inclusive and lowercase English letters only The number of consecutive digits in and does not exceed
sort colors Given an array nums with n objects colored red white or blue sort them in place so that objects of the same color are adjacent with the colors in the order red white and blue We will use the integers and to represent the color red white and blue respectively You must solve this problem without using the library s sort function Example Input nums Output Example Input nums Output Constraints n nums length n nums i is either or Follow up Could you come up with a one pass algorithm using only constant extra space
count all valid pickup and delivery options Given n orders each order consist in pickup and delivery services Count all valid pickup delivery possible sequences such that delivery i is always after of pickup i Since the answer may be too large return it modulo Example Input n Output Explanation Unique order Delivery always is after of Pickup Example Input n Output Explanation All possible orders and This is an invalid order because Pickup is after of Delivery Example Input n Output Constraints n
additive number An additive number is a string whose digits can form an additive sequence A valid additive sequence should contain at least three numbers Except for the first two numbers each subsequent number in the sequence must be the sum of the preceding two Given a string containing only digits return true if it is an additive number or false otherwise Note Numbers in the additive sequence cannot have leading zeros so sequence or is invalid Example Input Output true Explanation The digits can form an additive sequence Example Input Output true Explanation The additive sequence is Constraints num length num consists only of digits Follow up How would you handle overflow for very large input integers
longest palindromic subsequence Given a string s find the longest palindromic subsequence s length in s A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements Example Input s bbbab Output Explanation One possible longest palindromic subsequence is bbbb Example Input s cbbd Output Explanation One possible longest palindromic subsequence is bb Constraints s length s consists only of lowercase English letters
last day where you can still cross There is a based binary matrix where represents land and represents water You are given integers row and col representing the number of rows and columns in the matrix respectively Initially on day the entire matrix is land However each day a new cell becomes flooded with water You are given a based array cells where cells i ri ci represents that on the ith day the cell on the rith row and cith column based coordinates will be covered with water i e changed to You want to find the last day that it is possible to walk from the top to the bottom by only walking on land cells You can start from any cell in the top row and end at any cell in the bottom row You can only travel in the four cardinal directions left right up and down Return the last day where it is possible to walk from the top to the bottom by only walking on land cells Example Input row col cells Output Explanation The above image depicts how the matrix changes each day starting from day The last day where it is possible to cross from top to bottom is on day Example Input row col cells Output Explanation The above image depicts how the matrix changes each day starting from day The last day where it is possible to cross from top to bottom is on day Example Input row col cells Output Explanation The above image depicts how the matrix changes each day starting from day The last day where it is possible to cross from top to bottom is on day Constraints row col row col cells length row col ri row ci col All the values of cells are unique
number of ways to rearrange sticks with k sticks visible There are n uniquely sized sticks whose lengths are integers from to n You want to arrange the sticks such that exactly k sticks are visible from the left A stick is visible from the left if there are no longer sticks to the left of it For example if the sticks are arranged then the sticks with lengths and are visible from the left Given n and k return the number of such arrangements Since the answer may be large return it modulo Example Input n k Output Explanation and are the only arrangements such that exactly sticks are visible The visible sticks are underlined Example Input n k Output Explanation is the only arrangement such that all sticks are visible The visible sticks are underlined Example Input n k Output Explanation There are mod ways to rearrange the sticks such that exactly sticks are visible Constraints n k n
minimum number of arrows to burst balloons There are some spherical balloons taped onto a flat wall that represents the XY plane The balloons are represented as a integer array points where points i xstart xend denotes a balloon whose horizontal diameter stretches between xstart and xend You do not know the exact y coordinates of the balloons Arrows can be shot up directly vertically in the positive y direction from different points along the x axis A balloon with xstart and xend is burst by an arrow shot at x if xstart x xend There is no limit to the number of arrows that can be shot A shot arrow keeps traveling up infinitely bursting any balloons in its path Given the array points return the minimum number of arrows that must be shot to burst all balloons Example Input points Output Explanation The balloons can be burst by arrows Shoot an arrow at x bursting the balloons and Shoot an arrow at x bursting the balloons and Example Input points Output Explanation One arrow needs to be shot for each balloon for a total of arrows Example Input points Output Explanation The balloons can be burst by arrows Shoot an arrow at x bursting the balloons and Shoot an arrow at x bursting the balloons and Constraints points length points i length xstart xend
sales person SQL Schema Table SalesPerson Column Name Type int name varchar salary int int date is the primary key column for this table Each row of this table indicates the name and the ID of a salesperson alongside their salary commission rate and hire date Table Company Column Name Type int name varchar city varchar is the primary key column for this table Each row of this table indicates the name and the ID of a company and the city in which the company is located Table Orders Column Name Type int date int int amount int is the primary key column for this table is a foreign key to from the Company table is a foreign key to from the SalesPerson table Each row of this table contains information about one order This includes the ID of the company the ID of the salesperson the date of the order and the amount paid Write an SQL query to report the names of all the salespersons who did not have any orders related to the company with the name RED Return the result table in any order The query result format is in the following example Example Input SalesPerson table name salary John Amy Mark Pam Alex Company table name city RED Boston ORANGE New York YELLOW Boston GREEN Austin Orders table amount Output name Amy Mark Alex Explanation According to orders and in the Orders table it is easy to tell that only salesperson John and Pam have sales to company RED so we report all the other names in the table salesperson
find largest value in each tree row Given the root of a binary tree return an array of the largest value in each row of the tree indexed Example Input root null Output Example Input root Output Constraints The number of nodes in the tree will be in the range Node val
find the smallest divisor given a threshold Given an array of integers nums and an integer threshold we will choose a positive integer divisor divide all the array by it and sum the division s result Find the smallest divisor such that the result mentioned above is less than or equal to threshold Each result of the division is rounded to the nearest integer greater than or equal to that element For example and The test cases are generated so that there will be an answer Example Input nums threshold Output Explanation We can get a sum to if the divisor is If the divisor is we can get a sum of and if the divisor is the sum will be Example Input nums threshold Output Constraints nums length nums i nums length threshold
eliminate maximum number of monsters You are playing a video game where you are defending your city from a group of n monsters You are given a indexed integer array dist of size n where dist i is the initial distance in kilometers of the ith monster from the city The monsters walk toward the city at a constant speed The speed of each monster is given to you in an integer array speed of size n where speed i is the speed of the ith monster in kilometers per minute You have a weapon that once fully charged can eliminate a single monster However the weapon takes one minute to charge The weapon is fully charged at the very start You lose when any monster reaches your city If a monster reaches the city at the exact moment the weapon is fully charged it counts as a loss and the game ends before you can use your weapon Return the maximum number of monsters that you can eliminate before you lose or n if you can eliminate all the monsters before they reach the city Example Input dist speed Output Explanation In the beginning the distances of the monsters are You eliminate the first monster After a minute the distances of the monsters are X You eliminate the second monster After a minute the distances of the monsters are X X You eliminate the thrid monster All monsters can be eliminated Example Input dist speed Output Explanation In the beginning the distances of the monsters are You eliminate the first monster After a minute the distances of the monsters are X so you lose You can only eliminate monster Example Input dist speed Output Explanation In the beginning the distances of the monsters are You eliminate the first monster After a minute the distances of the monsters are X so you lose You can only eliminate monster Constraints n dist length speed length n dist i speed i
number of even and odd bits You are given a positive integer n Let even denote the number of even indices in the binary representation of n indexed with value Let odd denote the number of odd indices in the binary representation of n indexed with value Return an integer array answer where answer even odd Example Input n Output Explanation The binary representation of is It contains on the and indices There are even and odd indices Example Input n Output Explanation The binary representation of is It contains on the index There are even and odd indices Constraints n
function composition Given an array of functions fn return a new function fn that is the function composition of the array of functions The function composition of f x g x h x is fn x f g h x The function composition of an empty list of functions is the identity function f x x You may assume each function in the array accepts one integer as input and returns one integer as output Example Input functions x x x x x x x x Output Explanation Evaluating from right to left Starting with x Example Input functions x x x x x x x Output Explanation Evaluating from right to left Example Input functions x Output Explanation The composition of zero functions is the identity function Constraints x functions length all functions accept and return a single integer
count vowel substrings of a string A substring is a contiguous non empty sequence of characters within a string A vowel substring is a substring that only consists of vowels a e i o and u and has all five vowels present in it Given a string word return the number of vowel substrings in word Example Input word aeiouu Output Explanation The vowel substrings of word are as follows underlined aeiouu aeiouu Example Input word unicornarihan Output Explanation Not all vowels are present so there are no vowel substrings Example Input word cuaieuouac Output Explanation The vowel substrings of word are as follows underlined cuaieuouac cuaieuouac cuaieuouac cuaieuouac cuaieuouac cuaieuouac cuaieuouac Constraints word length word consists of lowercase English letters only
count unguarded cells in the grid You are given two integers m and n representing a indexed m x n grid You are also given two integer arrays guards and walls where guards i rowi coli and walls j rowj colj represent the positions of the ith guard and jth wall respectively A guard can see every cell in the four cardinal directions north east south or west starting from their position unless obstructed by a wall or another guard A cell is guarded if there is at least one guard that can see it Return the number of unoccupied cells that are not guarded Example Input m n guards walls Output Explanation The guarded and unguarded cells are shown in red and green respectively in the above diagram There are a total of unguarded cells so we return Example Input m n guards walls Output Explanation The unguarded cells are shown in green in the above diagram There are a total of unguarded cells so we return Constraints m n m n guards length walls length guards length walls length m n guards i length walls j length rowi rowj m coli colj n All the positions in guards and walls are unique
reverse words in a string Given an input string s reverse the order of the words A word is defined as a sequence of non space characters The words in s will be separated by at least one space Return a string of the words in reverse order concatenated by a single space Note that s may contain leading or trailing spaces or multiple spaces between two words The returned string should only have a single space separating the words Do not include any extra spaces Example Input s the sky is blue Output blue is sky the Example Input s hello world Output world hello Explanation Your reversed string should not contain leading or trailing spaces Example Input s a good example Output example good a Explanation You need to reduce multiple spaces between two words to a single space in the reversed string Constraints s length s contains English letters upper case and lower case digits and spaces There is at least one word in s Follow up If the string data type is mutable in your language can you solve it in place with O extra space
maximum number of robots within budget You have n robots You are given two indexed integer arrays chargeTimes and runningCosts both of length n The ith robot costs chargeTimes i units to charge and costs runningCosts i units to run You are also given an integer budget The total cost of running k chosen robots is equal to max chargeTimes k sum runningCosts where max chargeTimes is the largest charge cost among the k robots and sum runningCosts is the sum of running costs among the k robots Return the maximum number of consecutive robots you can run such that the total cost does not exceed budget Example Input chargeTimes runningCosts budget Output Explanation It is possible to run all individual and consecutive pairs of robots within budget To obtain answer consider the first robots The total cost will be max sum which is less than It can be shown that it is not possible to run more than consecutive robots within budget so we return Example Input chargeTimes runningCosts budget Output Explanation No robot can be run that does not exceed the budget so we return Constraints chargeTimes length runningCosts length n n chargeTimes i runningCosts i budget
my calendar ii You are implementing a program to use as your calendar We can add a new event if adding the event will not cause a triple booking A triple booking happens when three events have some non empty intersection i e some moment is common to all the three events The event can be represented as a pair of integers start and end that represents a booking on the half open interval start end the range of real numbers x such that start x end Implement the MyCalendarTwo class MyCalendarTwo Initializes the calendar object boolean book int start int end Returns true if the event can be added to the calendar successfully without causing a triple booking Otherwise return false and do not add the event to the calendar Example Input MyCalendarTwo book book book book book book Output null true true true false true true Explanation MyCalendarTwo myCalendarTwo new MyCalendarTwo myCalendarTwo book return True The event can be booked myCalendarTwo book return True The event can be booked myCalendarTwo book return True The event can be double booked myCalendarTwo book return False The event cannot be booked because it would result in a triple booking myCalendarTwo book return True The event can be booked as it does not use time which is already double booked myCalendarTwo book return True The event can be booked as the time in will be double booked with the third event the time will be single booked and the time will be double booked with the second event Constraints start end At most calls will be made to book
beautiful arrangement ii Given two integers n and k construct a list answer that contains n different positive integers ranging from to n and obeys the following requirement Suppose this list is answer an then the list an an has exactly k distinct integers Return the list answer If there multiple valid answers return any of them Example Input n k Output Explanation The has three different positive integers ranging from to and the has exactly distinct integer Example Input n k Output Explanation The has three different positive integers ranging from to and the has exactly distinct integers and Constraints k n
find original array from doubled array An integer array original is transformed into a doubled array changed by appending twice the value of every element in original and then randomly shuffling the resulting array Given an array changed return original if changed is a doubled array If changed is not a doubled array return an empty array The elements in original may be returned in any order Example Input changed Output Explanation One possible original array could be Twice the value of is Twice the value of is Twice the value of is Other original arrays could be or Example Input changed Output Explanation changed is not a doubled array Example Input changed Output Explanation changed is not a doubled array Constraints changed length changed i
n-queens The n queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other Given an integer n return all distinct solutions to the n queens puzzle You may return the answer in any order Each solution contains a distinct board configuration of the n queens placement where Q and both indicate a queen and an empty space respectively Example Input n Output Q Q Q Q Q Q Q Q Explanation There exist two distinct solutions to the queens puzzle as shown above Example Input n Output Q Constraints n
maximum ascending subarray sum Given an array of positive integers nums return the maximum possible sum of an ascending subarray in nums A subarray is defined as a contiguous sequence of numbers in an array A subarray numsl numsl numsr numsr is ascending if for all i where l i r numsi numsi Note that a subarray of size is ascending Example Input nums Output Explanation is the ascending subarray with the maximum sum of Example Input nums Output Explanation is the ascending subarray with the maximum sum of Example Input nums Output Explanation is the ascending subarray with the maximum sum of Constraints nums length nums i
verifying an alien dictionary In an alien language surprisingly they also use English lowercase letters but possibly in a different order The order of the alphabet is some permutation of lowercase letters Given a sequence of words written in the alien language and the order of the alphabet return true if and only if the given words are sorted lexicographically in this alien language Example Input words hello leetcode order hlabcdefgijkmnopqrstuvwxyz Output true Explanation As h comes before l in this language then the sequence is sorted Example Input words word world row order worldabcefghijkmnpqstuvxyz Output false Explanation As d comes after l in this language then words words hence the sequence is unsorted Example Input words apple app order abcdefghijklmnopqrstuvwxyz Output false Explanation The first three characters app match and the second string is shorter in size According to lexicographical rules apple app because l where is defined as the blank character which is less than any other character More info Constraints words length words i length order length All characters in words i and order are English lowercase letters
max sum of rectangle no larger than k Given an m x n matrix matrix and an integer k return the max sum of a rectangle in the matrix such that its sum is no larger than k It is guaranteed that there will be a rectangle with a sum no larger than k Example Input matrix k Output Explanation Because the sum of the blue rectangle is and is the max number no larger than k k Example Input matrix k Output Constraints m matrix length n matrix i length m n matrix i j k Follow up What if the number of rows is much larger than the number of columns
sum of all subset xor totals The XOR total of an array is defined as the bitwise XOR of all its elements or if the array is empty For example the XOR total of the array is XOR XOR Given an array nums return the sum of all XOR totals for every subset of nums Note Subsets with the same elements should be counted multiple times An array a is a subset of an array b if a can be obtained from b by deleting some possibly zero elements of b Example Input nums Output Explanation The subsets of are The empty subset has an XOR total of has an XOR total of has an XOR total of has an XOR total of XOR Example Input nums Output Explanation The subsets of are The empty subset has an XOR total of has an XOR total of has an XOR total of has an XOR total of has an XOR total of XOR has an XOR total of XOR has an XOR total of XOR has an XOR total of XOR XOR Example Input nums Output Explanation The sum of all XOR totals for every subset is Constraints nums length nums i
maximum depth of binary tree Given the root of a binary tree return its maximum depth A binary tree s maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node Example Input root null null Output Example Input root null Output Constraints The number of nodes in the tree is in the range Node val
maximize the minimum powered city You are given a indexed integer array stations of length n where stations i represents the number of power stations in the ith city Each power station can provide power to every city in a fixed range In other words if the range is denoted by r then a power station at city i can provide power to all cities j such that i j r and i j n Note that x denotes absolute value For example and The power of a city is the total number of power stations it is being provided power from The government has sanctioned building k more power stations each of which can be built in any city and have the same range as the pre existing ones Given the two integers r and k return the maximum possible minimum power of a city if the additional power stations are built optimally Note that you can build the k power stations in multiple cities Example Input stations r k Output Explanation One of the optimal ways is to install both the power stations at city So stations will become City is provided by power stations City is provided by power stations City is provided by power stations City is provided by power stations City is provided by power stations So the minimum power of a city is Since it is not possible to obtain a larger power we return Example Input stations r k Output Explanation It can be proved that we cannot make the minimum power of a city greater than Constraints n stations length n stations i r n k
angle between hands of a clock Given two numbers hour and minutes return the smaller angle in degrees formed between the hour and the minute hand Answers within of the actual value will be accepted as correct Example Input hour minutes Output Example Input hour minutes Output Example Input hour minutes Output Constraints hour minutes
base 7 Given an integer num return a string of its base representation Example Input num Output Example Input num Output Constraints num
execution of all suffix instructions staying in a grid There is an n x n grid with the top left cell at and the bottom right cell at n n You are given the integer n and an integer array startPos where startPos startrow startcol indicates that a robot is initially at cell startrow startcol You are also given a indexed string s of length m where s i is the ith instruction for the robot L move left R move right U move up and D move down The robot can begin executing from any ith instruction in s It executes the instructions one by one towards the end of s but it stops if either of these conditions is met The next instruction will move the robot off the grid There are no more instructions left to execute Return an array answer of length m where answer i is the number of instructions the robot can execute if the robot begins executing from the ith instruction in s Example Input n startPos s RRDDLU Output Explanation Starting from startPos and beginning execution from the ith instruction RRDDLU Only one instruction R can be executed before it moves off the grid RDDLU All five instructions can be executed while it stays in the grid and ends at DDLU All four instructions can be executed while it stays in the grid and ends at DLU All three instructions can be executed while it stays in the grid and ends at LU Only one instruction L can be executed before it moves off the grid U If moving up it would move off the grid Example Input n startPos s LURD Output Explanation LURD URD RD D Example Input n startPos s LRUD Output Explanation No matter which instruction the robot begins execution from it would move off the grid Constraints m s length n m startPos length startrow startcol n s consists of L R U and D
print in order Suppose we have a class public class Foo public void first print first public void second print second public void third print third The same instance of Foo will be passed to three different threads Thread A will call first thread B will call second and thread C will call third Design a mechanism and modify the program to ensure that second is executed after first and third is executed after second Note We do not know how the threads will be scheduled in the operating system even though the numbers in the input seem to imply the ordering The input format you see is mainly to ensure our tests comprehensiveness Example Input nums Output firstsecondthird Explanation There are three threads being fired asynchronously The input means thread A calls first thread B calls second and thread C calls third firstsecondthird is the correct output Example Input nums Output firstsecondthird Explanation The input means thread A calls first thread B calls third and thread C calls second firstsecondthird is the correct output Constraints nums is a permutation of
count number of texts Alice is texting Bob using her phone The mapping of digits to letters is shown in the figure below In order to add a letter Alice has to press the key of the corresponding digit i times where i is the position of the letter in the key For example to add the letter s Alice has to press four times Similarly to add the letter k Alice has to press twice Note that the digits and do not map to any letters so Alice does not use them However due to an error in transmission Bob did not receive Alice s text message but received a string of pressed keys instead For example when Alice sent the message bob Bob received the string Given a string pressedKeys representing the string received by Bob return the total number of possible text messages Alice could have sent Since the answer may be very large return it modulo Example Input pressedKeys Output Explanation The possible text messages Alice could have sent are aaadd abdd badd cdd aaae abe bae and ce Since there are possible messages we return Example Input pressedKeys Output Explanation There are possible text messages Alice could have sent Since we need to return the answer modulo we return Constraints pressedKeys length pressedKeys only consists of digits from
minimum moves to equal array elements ii Given an integer array nums of size n return the minimum number of moves required to make all array elements equal In one move you can increment or decrement an element of the array by Test cases are designed so that the answer will fit in a bit integer Example Input nums Output Explanation Only two moves are needed remember each move increments or decrements one element Example Input nums Output Constraints n nums length nums length nums i
jewels and stones You re given strings jewels representing the types of stones that are jewels and stones representing the stones you have Each character in stones is a type of stone you have You want to know how many of the stones you have are also jewels Letters are case sensitive so a is considered a different type of stone from A Example Input jewels aA stones aAAbbbb Output Example Input jewels z stones ZZ Output Constraints jewels length stones length jewels and stones consist of only English letters All the characters of jewels are unique
count number of teams There are n soldiers standing in a line Each soldier is assigned a unique rating value You have to form a team of soldiers amongst them under the following rules Choose soldiers with index i j k with rating rating i rating j rating k A team is valid if rating i rating j rating k or rating i rating j rating k where i j k n Return the number of teams you can form given the conditions soldiers can be part of multiple teams Example Input rating Output Explanation We can form three teams given the conditions Example Input rating Output Explanation We can t form any team given the conditions Example Input rating Output Constraints n rating length n rating i All the integers in rating are unique
online majority element in subarray Design a data structure that efficiently finds the majority element of a given subarray The majority element of a subarray is an element that occurs threshold times or more in the subarray Implementing the MajorityChecker class MajorityChecker int arr Initializes the instance of the class with the given array arr int query int left int right int threshold returns the element in the subarray arr left right that occurs at least threshold times or if no such element exists Example Input MajorityChecker query query query Output null Explanation MajorityChecker majorityChecker new MajorityChecker majorityChecker query return majorityChecker query return majorityChecker query return Constraints arr length arr i left right arr length threshold right left threshold right left At most calls will be made to query
matrix block sum Given a m x n matrix mat and an integer k return a matrix answer where each answer i j is the sum of all elements mat r c for i k r i k j k c j k and r c is a valid position in the matrix Example Input mat k Output Example Input mat k Output Constraints m mat length n mat i length m n k mat i j
longest increasing path in a matrix Given an m x n integers matrix return the length of the longest increasing path in matrix From each cell you can either move in four directions left right up or down You may not move diagonally or move outside the boundary i e wrap around is not allowed Example Input matrix Output Explanation The longest increasing path is Example Input matrix Output Explanation The longest increasing path is Moving diagonally is not allowed Example Input matrix Output Constraints m matrix length n matrix i length m n matrix i j
global and local inversions You are given an integer array nums of length n which represents a permutation of all the integers in the range n The number of global inversions is the number of the different pairs i j where i j n nums i nums j The number of local inversions is the number of indices i where i n nums i nums i Return true if the number of global inversions is equal to the number of local inversions Example Input nums Output true Explanation There is global inversion and local inversion Example Input nums Output false Explanation There are global inversions and local inversion Constraints n nums length n nums i n All the integers of nums are unique nums is a permutation of all the numbers in the range n
ugly number An ugly number is a positive integer whose prime factors are limited to and Given an integer n return true if n is an ugly number Example Input n Output true Explanation Example Input n Output true Explanation has no prime factors therefore all of its prime factors are limited to and Example Input n Output false Explanation is not ugly since it includes the prime factor Constraints n
roman to integer Roman numerals are represented by seven different symbols I V X L C D and M Symbol Value I V X L C D M For example is written as II in Roman numeral just two ones added together is written as XII which is simply X II The number is written as XXVII which is XX V II Roman numerals are usually written largest to smallest from left to right However the numeral for four is not IIII Instead the number four is written as IV Because the one is before the five we subtract it making four The same principle applies to the number nine which is written as IX There are six instances where subtraction is used I can be placed before V and X to make and X can be placed before L and C to make and C can be placed before D and M to make and Given a roman numeral convert it to an integer Example Input s III Output Explanation III Example Input s LVIII Output Explanation L V III Example Input s MCMXCIV Output Explanation M CM XC and IV Constraints s length s contains only the characters I V X L C D M It is guaranteed that s is a valid roman numeral in the range
find positive integer solution for a given equation Given a callable function f x y with a hidden formula and a value z reverse engineer the formula and return all positive integer pairs x and y where f x y z You may return the pairs in any order While the exact formula is hidden the function is monotonically increasing i e f x y f x y f x y f x y The function interface is defined like this interface CustomFunction public Returns some positive integer f x y for two positive integers x and y based on a formula int f int x int y We will judge your solution as follows The judge has a list of hidden implementations of CustomFunction along with a way to generate an answer key of all valid pairs for a specific z The judge will receive two inputs a to determine which implementation to test your code with and the target z The judge will call your findSolution and compare your results with the answer key If your results match the answer key your solution will be Accepted Example Input z Output Explanation The hidden formula for is f x y x y The following positive integer values of x and y make f x y equal to x y f x y f x y f x y f Example Input z Output Explanation The hidden formula for is f x y x y The following positive integer values of x and y make f x y equal to x y f x y f Constraints z It is guaranteed that the solutions of f x y z will be in the range x y It is also guaranteed that f x y will fit in bit signed integer if x y
count lattice points inside a circle Given a integer array circles where circles i xi yi ri represents the center xi yi and radius ri of the ith circle drawn on a grid return the number of lattice points that are present inside at least one circle Note A lattice point is a point with integer coordinates Points that lie on the circumference of a circle are also considered to be inside it Example Input circles Output Explanation The figure above shows the given circle The lattice points present inside the circle are and and are shown in green Other points such as and which are shown in red are not considered inside the circle Hence the number of lattice points present inside at least one circle is Example Input circles Output Explanation The figure above shows the given circles There are exactly lattice points which are present inside at least one circle Some of them are and Constraints circles length circles i length xi yi ri min xi yi
circle and rectangle overlapping You are given a circle represented as radius xCenter yCenter and an axis aligned rectangle represented as where are the coordinates of the bottom left corner and are the coordinates of the top right corner of the rectangle Return true if the circle and rectangle are overlapped otherwise return false In other words check if there is any point xi yi that belongs to the circle and the rectangle at the same time Example Input radius xCenter yCenter Output true Explanation Circle and rectangle share the point Example Input radius xCenter yCenter Output false Example Input radius xCenter yCenter Output true Constraints radius xCenter yCenter
flip binary tree to match preorder traversal You are given the root of a binary tree with n nodes where each node is uniquely assigned a value from to n You are also given a sequence of n values voyage which is the desired pre order traversal of the binary tree Any node in the binary tree can be flipped by swapping its left and right subtrees For example flipping node will have the following effect Flip the smallest number of nodes so that the pre order traversal of the tree matches voyage Return a list of the values of all flipped nodes You may return the answer in any order If it is impossible to flip the nodes in the tree to make the pre order traversal match voyage return the list Example Input root voyage Output Explanation It is impossible to flip the nodes such that the pre order traversal matches voyage Example Input root voyage Output Explanation Flipping node swaps nodes and so the pre order traversal matches voyage Example Input root voyage Output Explanation The tree s pre order traversal already matches voyage so no nodes need to be flipped Constraints The number of nodes in the tree is n n voyage length n Node val voyage i n All the values in the tree are unique All the values in voyage are unique
k-similar strings Strings and are k similar for some non negative integer k if we can swap the positions of two letters in exactly k times so that the resulting string equals Given two anagrams and return the smallest k for which and are k similar Example Input ab ba Output Explanation The two string are similar because we can use one swap to change to ab ba Example Input abc bca Output Explanation The two strings are similar because we can use two swaps to change to abc bac bca Constraints length length length and contain only lowercase letters from the set a b c d e f is an anagram of
my calendar i You are implementing a program to use as your calendar We can add a new event if adding the event will not cause a double booking A double booking happens when two events have some non empty intersection i e some moment is common to both events The event can be represented as a pair of integers start and end that represents a booking on the half open interval start end the range of real numbers x such that start x end Implement the MyCalendar class MyCalendar Initializes the calendar object boolean book int start int end Returns true if the event can be added to the calendar successfully without causing a double booking Otherwise return false and do not add the event to the calendar Example Input MyCalendar book book book Output null true false true Explanation MyCalendar myCalendar new MyCalendar myCalendar book return True myCalendar book return False It can not be booked because time is already booked by another event myCalendar book return True The event can be booked as the first event takes every time less than but not including Constraints start end At most calls will be made to book
partition equal subset sum Given an integer array nums return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise Example Input nums Output true Explanation The array can be partitioned as and Example Input nums Output false Explanation The array cannot be partitioned into equal sum subsets Constraints nums length nums i
largest component size by common factor You are given an integer array of unique positive integers nums Consider the following graph There are nums length nodes labeled nums to nums nums length There is an undirected edge between nums i and nums j if nums i and nums j share a common factor greater than Return the size of the largest connected component in the graph Example Input nums Output Example Input nums Output Example Input nums Output Constraints nums length nums i All the values of nums are unique
find kth largest xor coordinate value You are given a matrix of size m x n consisting of non negative integers You are also given an integer k The value of coordinate a b of the matrix is the XOR of all matrix i j where i a m and j b n indexed Find the kth largest value indexed of all the coordinates of matrix Example Input matrix k Output Explanation The value of coordinate is XOR which is the largest value Example Input matrix k Output Explanation The value of coordinate is which is the largest value Example Input matrix k Output Explanation The value of coordinate is XOR which is the largest value Constraints m matrix length n matrix i length m n matrix i j k m n
middle of the linked list Given the head of a singly linked list return the middle node of the linked list If there are two middle nodes return the second middle node Example Input head Output Explanation The middle node of the list is node Example Input head Output Explanation Since the list has two middle nodes with values and we return the second one Constraints The number of nodes in the list is in the range Node val
minimum speed to arrive on time You are given a floating point number hour representing the amount of time you have to reach the office To commute to the office you must take n trains in sequential order You are also given an integer array dist of length n where dist i describes the distance in kilometers of the ith train ride Each train can only depart at an integer hour so you may need to wait in between each train ride For example if the train ride takes hours you must wait for an additional hours before you can depart on the train ride at the hour mark Return the minimum positive integer speed in kilometers per hour that all the trains must travel at for you to reach the office on time or if it is impossible to be on time Tests are generated such that the answer will not exceed and hour will have at most two digits after the decimal point Example Input dist hour Output Explanation At speed The first train ride takes hour Since we are already at an integer hour we depart immediately at the hour mark The second train takes hours Since we are already at an integer hour we depart immediately at the hour mark The third train takes hours You will arrive at exactly the hour mark Example Input dist hour Output Explanation At speed The first train ride takes hours Since we are not at an integer hour we wait until the hour mark to depart The second train ride takes hour Since we are already at an integer hour we depart immediately at the hour mark The third train takes hours You will arrive at the hour mark Example Input dist hour Output Explanation It is impossible because the earliest the third train can depart is at the hour mark Constraints n dist length n dist i hour There will be at most two digits after the decimal point in hour
steps to make array non-decreasing You are given a indexed integer array nums In one step remove all elements nums i where nums i nums i for all i nums length Return the number of steps performed until nums becomes a non decreasing array Example Input nums Output Explanation The following are the steps performed Step becomes Step becomes Step becomes is a non decreasing array Therefore we return Example Input nums Output Explanation nums is already a non decreasing array Therefore we return Constraints nums length nums i
find greatest common divisor of array Given an integer array nums return the greatest common divisor of the smallest number and largest number in nums The greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers Example Input nums Output Explanation The smallest number in nums is The largest number in nums is The greatest common divisor of and is Example Input nums Output Explanation The smallest number in nums is The largest number in nums is The greatest common divisor of and is Example Input nums Output Explanation The smallest number in nums is The largest number in nums is The greatest common divisor of and is Constraints nums length nums i
people whose list of favorite companies is not a subset of another list Given the array favoriteCompanies where favoriteCompanies i is the list of favorites companies for the ith person indexed from Return the indices of people whose list of favorite companies is not a subset of any other list of favorites companies You must return the indices in increasing order Example Input favoriteCompanies leetcode google facebook google microsoft google facebook google amazon Output Explanation Person with index has favoriteCompanies google facebook which is a subset of favoriteCompanies leetcode google facebook corresponding to the person with index Person with index has favoriteCompanies google which is a subset of favoriteCompanies leetcode google facebook and favoriteCompanies google microsoft Other lists of favorite companies are not a subset of another list therefore the answer is Example Input favoriteCompanies leetcode google facebook leetcode amazon facebook google Output Explanation In this case favoriteCompanies facebook google is a subset of favoriteCompanies leetcode google facebook therefore the answer is Example Input favoriteCompanies leetcode google facebook amazon Output Constraints favoriteCompanies length favoriteCompanies i length favoriteCompanies i j length All strings in favoriteCompanies i are distinct All lists of favorite companies are distinct that is If we sort alphabetically each list then favoriteCompanies i favoriteCompanies j All strings consist of lowercase English letters only
range sum query - immutable Given an integer array nums handle multiple queries of the following type Calculate the sum of the elements of nums between indices left and right inclusive where left right Implement the NumArray class NumArray int nums Initializes the object with the integer array nums int sumRange int left int right Returns the sum of the elements of nums between indices left and right inclusive i e nums left nums left nums right Example Input NumArray sumRange sumRange sumRange Output null Explanation NumArray numArray new NumArray numArray sumRange return numArray sumRange return numArray sumRange return Constraints nums length nums i left right nums length At most calls will be made to sumRange
two out of three Given three integer arrays and return a distinct array containing all the values that are present in at least two out of the three arrays You may return the values in any order Example Input Output Explanation The values that are present in at least two arrays are in all three arrays in and Example Input Output Explanation The values that are present in at least two arrays are in and in and in and Example Input Output Explanation No value is present in at least two arrays Constraints length length length i j k
graph connectivity with threshold We have n cities labeled from to n Two different cities with labels x and y are directly connected by a bidirectional road if and only if x and y share a common divisor strictly greater than some threshold More formally cities with labels x and y have a road between them if there exists an integer z such that all of the following are true x z y z and z threshold Given the two integers n and threshold and an array of queries you must determine for each queries i ai bi if cities ai and bi are connected directly or indirectly i e there is some path between them Return an array answer where answer length queries length and answer i is true if for the ith query there is a path between ai and bi or answer i is false if there is no path Example Input n threshold queries Output false false true Explanation The divisors for each number Using the underlined divisors above the threshold only cities and share a common divisor so they are the only ones directly connected The result of each query is not connected to is not connected to is connected to through path Example Input n threshold queries Output true true true true true Explanation The divisors for each number are the same as the previous example However since the threshold is all divisors can be used Since all numbers share as a divisor all cities are connected Example Input n threshold queries Output false false false false false Explanation Only cities and share a common divisor which is strictly greater than the threshold so they are the only ones directly connected Please notice that there can be multiple queries for the same pair of nodes x y and that the query x y is equivalent to the query y x Constraints n threshold n queries length queries i length ai bi cities ai bi
n-ary tree preorder traversal Given the root of an n ary tree return the preorder traversal of its nodes values Nary Tree input serialization is represented in their level order traversal Each group of children is separated by the null value See examples Example Input root null null Output Example Input root null null null null null null null null null null null Output Constraints The number of nodes in the tree is in the range Node val The height of the n ary tree is less than or equal to Follow up Recursive solution is trivial could you do it iteratively
majority element ii Given an integer array of size n find all elements that appear more than n times Example Input nums Output Example Input nums Output Example Input nums Output Constraints nums length nums i Follow up Could you solve the problem in linear time and in O space
minimum moves to equal array elements Given an integer array nums of size n return the minimum number of moves required to make all array elements equal In one move you can increment n elements of the array by Example Input nums Output Explanation Only three moves are needed remember each move increments two elements Example Input nums Output Constraints n nums length nums length nums i The answer is guaranteed to fit in a bit integer
fraction to recurring decimal Given two integers representing the numerator and denominator of a fraction return the fraction in string format If the fractional part is repeating enclose the repeating part in parentheses If multiple answers are possible return any of them It is guaranteed that the length of the answer string is less than for all the given inputs Example Input numerator denominator Output Example Input numerator denominator Output Example Input numerator denominator Output Constraints numerator denominator denominator
find missing observations You have observations of n m sided dice rolls with each face numbered from to n of the observations went missing and you only have the observations of m rolls Fortunately you have also calculated the average value of the n m rolls You are given an integer array rolls of length m where rolls i is the value of the ith observation You are also given the two integers mean and n Return an array of length n containing the missing observations such that the average value of the n m rolls is exactly mean If there are multiple valid answers return any of them If no such array exists return an empty array The average value of a set of k numbers is the sum of the numbers divided by k Note that mean is an integer so the sum of the n m rolls should be divisible by n m Example Input rolls mean n Output Explanation The mean of all n m rolls is Example Input rolls mean n Output Explanation The mean of all n m rolls is Example Input rolls mean n Output Explanation It is impossible for the mean to be no matter what the missing rolls are Constraints m rolls length n m rolls i mean
count sub islands You are given two m x n binary matrices and containing only s representing water and s representing land An island is a group of s connected directionally horizontal or vertical Any cells outside of the grid are considered water cells An island in is considered a sub island if there is an island in that contains all the cells that make up this island in Return the number of islands in that are considered sub islands Example Input Output Explanation In the picture above the grid on the left is and the grid on the right is The colored red in are those considered to be part of a sub island There are three sub islands Example Input Output Explanation In the picture above the grid on the left is and the grid on the right is The colored red in are those considered to be part of a sub island There are two sub islands Constraints m length length n i length i length m n i j and i j are either or
compact object Given an object or array obj return a compact object A compact object is the same as the original object except with keys containing falsy values removed This operation applies to the object and any nested objects Arrays are considered objects where the indices are keys A value is considered falsy when Boolean value returns false You may assume the obj is the output of JSON parse In other words it is valid JSON Example Input obj null false Output Explanation All falsy values have been removed from the array Example Input obj a null b false Output b Explanation obj a and obj b had falsy values and were removed Example Input obj null false Output Explanation obj obj obj and obj were falsy and removed Constraints obj is a valid JSON object JSON stringify obj length
number of days between two dates Write a program to count the number of days between two dates The two dates are given as strings their format is YYYY MM DD as shown in the examples Example Input Output Example Input Output Constraints The given dates are valid dates between the years and
best time to buy and sell stock with transaction fee You are given an array prices where prices i is the price of a given stock on the ith day and an integer fee representing a transaction fee Find the maximum profit you can achieve You may complete as many transactions as you like but you need to pay the transaction fee for each transaction Note You may not engage in multiple transactions simultaneously i e you must sell the stock before you buy again Example Input prices fee Output Explanation The maximum profit can be achieved by Buying at prices Selling at prices Buying at prices Selling at prices The total profit is Example Input prices fee Output Constraints prices length prices i fee
construct string from binary tree Given the root of a binary tree construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way and return it Omit all the empty parenthesis pairs that do not affect the one to one mapping relationship between the string and the original binary tree Example Input root Output Explanation Originally it needs to be but you need to omit all the unnecessary empty parenthesis pairs And it will be Example Input root null Output Explanation Almost the same as the first example except we cannot omit the first parenthesis pair to break the one to one mapping relationship between the input and the output Constraints The number of nodes in the tree is in the range Node val
number of dice rolls with target sum You have n dice and each die has k faces numbered from to k Given three integers n k and target return the number of possible ways out of the kn total ways to roll the dice so the sum of the face up numbers equals target Since the answer may be too large return it modulo Example Input n k target Output Explanation You throw one die with faces There is only one way to get a sum of Example Input n k target Output Explanation You throw two dice each with faces There are ways to get a sum of Example Input n k target Output Explanation The answer must be returned modulo Constraints n k target
exam room There is an exam room with n seats in a single row labeled from to n When a student enters the room they must sit in the seat that maximizes the distance to the closest person If there are multiple such seats they sit in the seat with the lowest number If no one is in the room then the student sits at seat number Design a class that simulates the mentioned exam room Implement the ExamRoom class ExamRoom int n Initializes the object of the exam room with the number of the seats n int seat Returns the label of the seat at which the next student will set void leave int p Indicates that the student sitting at seat p will leave the room It is guaranteed that there will be a student sitting at seat p Example Input ExamRoom seat seat seat seat leave seat Output null null Explanation ExamRoom examRoom new ExamRoom examRoom seat return no one is in the room then the student sits at seat number examRoom seat return the student sits at the last seat number examRoom seat return the student sits at the last seat number examRoom seat return the student sits at the last seat number examRoom leave examRoom seat return the student sits at the last seat number Constraints n It is guaranteed that there is a student sitting at seat p At most calls will be made to seat and leave
kth smallest element in a sorted matrix Given an n x n matrix where each of the rows and columns is sorted in ascending order return the kth smallest element in the matrix Note that it is the kth smallest element in the sorted order not the kth distinct element You must find a solution with a memory complexity better than O Example Input matrix k Output Explanation The elements in the matrix are and the smallest number is Example Input matrix k Output Constraints n matrix length matrix i length n matrix i j All the rows and columns of matrix are guaranteed to be sorted in non decreasing order k Follow up Could you solve the problem with a constant memory i e O memory complexity Could you solve the problem in O n time complexity The solution may be too advanced for an interview but you may find reading this paper fun
construct the rectangle A web developer needs to know how to design a web page s size So given a specific rectangular web s area your job by now is to design a rectangular web page whose length L and width W satisfy the following requirements The area of the rectangular web page you designed must equal to the given target area The width W should not be larger than the length L which means L W The difference between length L and width W should be as small as possible Return an array L W where L and W are the length and width of the web page you designed in sequence Example Input area Output Explanation The target area is and all the possible ways to construct it are But according to requirement is illegal according to requirement is not optimal compared to So the length L is and the width W is Example Input area Output Example Input area Output Constraints area
jump game v Given an array of integers arr and an integer d In one step you can jump from index i to index i x where i x arr length and x d i x where i x and x d In addition you can only jump from index i to index j if arr i arr j and arr i arr k for all indices k between i and j More formally min i j k max i j You can choose any index of the array and start jumping Return the maximum number of indices you can visit Notice that you can not jump outside of the array at any time Example Input arr d Output Explanation You can start at index You can jump as shown Note that if you start at index you can only jump to index You cannot jump to index because You cannot jump to index because index is between index and and Similarly You cannot jump from index to index or index Example Input arr d Output Explanation You can start at any index You always cannot jump to any index Example Input arr d Output Explanation Start at index You can visit all the indicies Constraints arr length arr i d arr length
cousins in binary tree ii Given the root of a binary tree replace the value of each node in the tree with the sum of all its cousins values Two nodes of a binary tree are cousins if they have the same depth with different parents Return the root of the modified tree Note that the depth of a node is the number of edges in the path from the root node to it Example Input root null Output null Explanation The diagram above shows the initial binary tree and the binary tree after changing the value of each node Node with value does not have any cousins so its sum is Node with value does not have any cousins so its sum is Node with value does not have any cousins so its sum is Node with value has a cousin with value so its sum is Node with value has a cousin with value so its sum is Node with value has cousins with values and so its sum is Example Input root Output Explanation The diagram above shows the initial binary tree and the binary tree after changing the value of each node Node with value does not have any cousins so its sum is Node with value does not have any cousins so its sum is Node with value does not have any cousins so its sum is Constraints The number of nodes in the tree is in the range Node val
binary tree inorder traversal Given the root of a binary tree return the inorder traversal of its nodes values Example Input root null Output Example Input root Output Example Input root Output Constraints The number of nodes in the tree is in the range Node val Follow up Recursive solution is trivial could you do it iteratively
largest positive integer that exists with its negative Given an integer array nums that does not contain any zeros find the largest positive integer k such that k also exists in the array Return the positive integer k If there is no such integer return Example Input nums Output Explanation is the only valid k we can find in the array Example Input nums Output Explanation Both and have their corresponding negative values in the array has a larger value Example Input nums Output Explanation There is no a single valid k we return Constraints nums length nums i nums i
longest square streak in an array You are given an integer array nums A subsequence of nums is called a square streak if The length of the subsequence is at least and after sorting the subsequence each element except the first element is the square of the previous number Return the length of the longest square streak in nums or return if there is no square streak A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements Example Input nums Output Explanation Choose the subsequence After sorting it it becomes Therefore is a square streak It can be shown that every subsequence of length is not a square streak Example Input nums Output Explanation There is no square streak in nums so return Constraints nums length nums i
split two strings to make palindrome You are given two strings a and b of the same length Choose an index and split both strings at the same index splitting a into two strings aprefix and asuffix where a aprefix asuffix and splitting b into two strings bprefix and bsuffix where b bprefix bsuffix Check if aprefix bsuffix or bprefix asuffix forms a palindrome When you split a string s into sprefix and ssuffix either ssuffix or sprefix is allowed to be empty For example if s abc then abc a bc ab c and abc are valid splits Return true if it is possible to form a palindrome string otherwise return false Notice that x y denotes the concatenation of strings x and y Example Input a x b y Output true Explaination If either a or b are palindromes the answer is true since you can split in the following way aprefix asuffix x bprefix bsuffix y Then aprefix bsuffix y y which is a palindrome Example Input a xbdef b xecab Output false Example Input a ulacfd b jizalu Output true Explaination Split them at index aprefix ula asuffix cfd bprefix jiz bsuffix alu Then aprefix bsuffix ula alu ulaalu which is a palindrome Constraints a length b length a length b length a and b consist of lowercase English letters
find the original array of prefix xor You are given an integer array pref of size n Find and return the array arr of size n that satisfies pref i arr arr arr i Note that denotes the bitwise xor operation It can be proven that the answer is unique Example Input pref Output Explanation From the array we have the following pref pref pref pref pref Example Input pref Output Explanation We have pref arr Constraints pref length pref i
find the punishment number of an integer Given a positive integer n return the punishment number of n The punishment number of n is defined as the sum of the squares of all integers i such that i n The decimal representation of i i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i Example Input n Output Explanation There are exactly integers i that satisfy the conditions in the statement since since and can be partitioned into since and can be partitioned into Hence the punishment number of is Example Input n Output Explanation There are exactly integers i that satisfy the conditions in the statement since since and can be partitioned into since and can be partitioned into since and can be partitioned into Hence the punishment number of is Constraints n
finding pairs with a certain sum You are given two integer arrays and You are tasked to implement a data structure that supports queries of two types Add a positive integer to an element of a given index in the array Count the number of pairs i j such that i j equals a given value i length and j length Implement the FindSumPairs class FindSumPairs int int Initializes the FindSumPairs object with two integer arrays and void add int index int val Adds val to index i e apply index val int count int tot Returns the number of pairs i j such that i j tot Example Input FindSumPairs count add count count add add count Output null null null null Explanation FindSumPairs findSumPairs new FindSumPairs findSumPairs count return pairs make and pairs make findSumPairs add now findSumPairs count return pairs make findSumPairs count return pair makes findSumPairs add now findSumPairs add now findSumPairs count return pairs make and pairs make Constraints length length i i index length val tot At most calls are made to add and count each
two sum ii - input array is sorted Given a indexed array of integers numbers that is already sorted in non decreasing order find two numbers such that they add up to a specific target number Let these two numbers be numbers and numbers where numbers length Return the indices of the two numbers and added by one as an integer array of length The tests are generated such that there is exactly one solution You may not use the same element twice Your solution must use only constant extra space Example Input numbers target Output Explanation The sum of and is Therefore We return Example Input numbers target Output Explanation The sum of and is Therefore We return Example Input numbers target Output Explanation The sum of and is Therefore We return Constraints numbers length numbers i numbers is sorted in non decreasing order target The tests are generated such that there is exactly one solution
minimum path sum Given a m x n grid filled with non negative numbers find a path from top left to bottom right which minimizes the sum of all numbers along its path Note You can only move either down or right at any point in time Example Input grid Output Explanation Because the path minimizes the sum Example Input grid Output Constraints m grid length n grid i length m n grid i j
minimum number of operations to make arrays similar You are given two positive integer arrays nums and target of the same length In one operation you can choose any two distinct indices i and j where i j nums length and set nums i nums i and set nums j nums j Two arrays are considered to be similar if the frequency of each element is the same Return the minimum number of operations required to make nums similar to target The test cases are generated such that nums can always be similar to target Example Input nums target Output Explanation It is possible to make nums similar to target in two operations Choose i and j nums Choose i and j nums It can be shown that is the minimum number of operations needed Example Input nums target Output Explanation We can make nums similar to target in one operation Choose i and j nums Example Input nums target Output Explanation The array nums is already similiar to target Constraints n nums length target length n nums i target i It is possible to make nums similar to target
unique number of occurrences Given an array of integers arr return true if the number of occurrences of each value in the array is unique or false otherwise Example Input arr Output true Explanation The value has occurrences has and has No two values have the same number of occurrences Example Input arr Output false Example Input arr Output true Constraints arr length arr i
populating next right pointers in each node ii Given a binary tree struct Node int val Node left Node right Node next Populate each next pointer to point to its next right node If there is no next right node the next pointer should be set to NULL Initially all next pointers are set to NULL Example Input root null Output Explanation Given the above binary tree Figure A your function should populate each next pointer to point to its next right node just like in Figure B The serialized output is in level order as connected by the next pointers with signifying the end of each level Example Input root Output Constraints The number of nodes in the tree is in the range Node val Follow up You may only use constant extra space The recursive approach is fine You may assume implicit stack space does not count as extra space for this problem
design underground system An underground railway system is keeping track of customer travel times between different stations They are using this data to calculate the average time it takes to travel from one station to another Implement the UndergroundSystem class void checkIn int id string stationName int t A customer with a card ID equal to id checks in at the station stationName at time t A customer can only be checked into one place at a time void checkOut int id string stationName int t A customer with a card ID equal to id checks out from the station stationName at time t double getAverageTime string startStation string endStation Returns the average time it takes to travel from startStation to endStation The average time is computed from all the previous traveling times from startStation to endStation that happened directly meaning a check in at startStation followed by a check out from endStation The time it takes to travel from startStation to endStation may be different from the time it takes to travel from endStation to startStation There will be at least one customer that has traveled from startStation to endStation before getAverageTime is called You may assume all calls to the checkIn and checkOut methods are consistent If a customer checks in at time then checks out at time then All events happen in chronological order Example Input UndergroundSystem checkIn checkIn checkIn checkOut checkOut checkOut getAverageTime getAverageTime checkIn getAverageTime checkOut getAverageTime Leyton Paradise Leyton Waterloo Waterloo Cambridge Paradise Cambridge Leyton Waterloo Leyton Leyton Waterloo Waterloo Leyton Waterloo Output null null null null null null null null null Explanation UndergroundSystem undergroundSystem new UndergroundSystem undergroundSystem checkIn Leyton undergroundSystem checkIn Paradise undergroundSystem checkIn Leyton undergroundSystem checkOut Waterloo Customer Leyton Waterloo in undergroundSystem checkOut Waterloo Customer Leyton Waterloo in undergroundSystem checkOut Cambridge Customer Paradise Cambridge in undergroundSystem getAverageTime Paradise Cambridge return One trip Paradise Cambridge undergroundSystem getAverageTime Leyton Waterloo return Two trips Leyton Waterloo undergroundSystem checkIn Leyton undergroundSystem getAverageTime Leyton Waterloo return undergroundSystem checkOut Waterloo Customer Leyton Waterloo in undergroundSystem getAverageTime Leyton Waterloo return Three trips Leyton Waterloo Example Input UndergroundSystem checkIn checkOut getAverageTime checkIn checkOut getAverageTime checkIn checkOut getAverageTime Leyton Paradise Leyton Paradise Leyton Paradise Leyton Paradise Leyton Paradise Leyton Paradise Output null null null null null null null Explanation UndergroundSystem undergroundSystem new UndergroundSystem undergroundSystem checkIn Leyton undergroundSystem checkOut Paradise Customer Leyton Paradise in undergroundSystem getAverageTime Leyton Paradise return undergroundSystem checkIn Leyton undergroundSystem checkOut Paradise Customer Leyton Paradise in undergroundSystem getAverageTime Leyton Paradise return undergroundSystem checkIn Leyton undergroundSystem checkOut Paradise Customer Leyton Paradise in undergroundSystem getAverageTime Leyton Paradise return Constraints id t stationName length startStation length endStation length All strings consist of uppercase and lowercase English letters and digits There will be at most calls in total to checkIn checkOut and getAverageTime Answers within of the actual value will be accepted
maximum product difference between two pairs The product difference between two pairs a b and c d is defined as a b c d For example the product difference between and is Given an integer array nums choose four distinct indices w x y and z such that the product difference between pairs nums w nums x and nums y nums z is maximized Return the maximum such product difference Example Input nums Output Explanation We can choose indices and for the first pair and indices and for the second pair The product difference is Example Input nums Output Explanation We can choose indices and for the first pair and indices and for the second pair The product difference is Constraints nums length nums i
greatest common divisor traversal You are given a indexed integer array nums and you are allowed to traverse between its indices You can traverse between index i and index j i j if and only if gcd nums i nums j where gcd is the greatest common divisor Your task is to determine if for every pair of indices i and j in nums where i j there exists a sequence of traversals that can take us from i to j Return true if it is possible to traverse between all such pairs of indices or false otherwise Example Input nums Output true Explanation In this example there are possible pairs of indices and To go from index to index we can use the sequence of traversals where we move from index to index because gcd nums nums gcd and then move from index to index because gcd nums nums gcd To go from index to index we can just go directly because gcd nums nums gcd Likewise to go from index to index we can just go directly because gcd nums nums gcd Example Input nums Output false Explanation No sequence of traversals can take us from index to index in this example So we return false Example Input nums Output true Explanation There are possible pairs of indices to traverse between and A valid sequence of traversals exists for each pair so we return true Constraints nums length nums i
majority element Given an array nums of size n return the majority element The majority element is the element that appears more than n times You may assume that the majority element always exists in the array Example Input nums Output Example Input nums Output Constraints n nums length n nums i Follow up Could you solve the problem in linear time and in O space
uncommon words from two sentences A sentence is a string of single space separated words where each word consists only of lowercase letters A word is uncommon if it appears exactly once in one of the sentences and does not appear in the other sentence Given two sentences and return a list of all the uncommon words You may return the answer in any order Example Input this apple is sweet this apple is sour Output sweet sour Example Input apple apple banana Output banana Constraints length length and consist of lowercase English letters and spaces and do not have leading or trailing spaces All the words in and are separated by a single space
two city scheduling A company is planning to interview people Given the array costs where costs i aCosti bCosti the cost of flying the ith person to city a is aCosti and the cost of flying the ith person to city b is bCosti Return the minimum cost to fly every person to a city such that exactly n people arrive in each city Example Input costs Output Explanation The first person goes to city A for a cost of The second person goes to city A for a cost of The third person goes to city B for a cost of The fourth person goes to city B for a cost of The total minimum cost is to have half the people interviewing in each city Example Input costs Output Example Input costs Output Constraints n costs length costs length costs length is even aCosti bCosti
maximum distance between a pair of values You are given two non increasing indexed integer arrays and A pair of indices i j where i length and j length is valid if both i j and i j The distance of the pair is j i Return the maximum distance of any valid pair i j If there are no valid pairs return An array arr is non increasing if arr i arr i for every i arr length Example Input Output Explanation The valid pairs are and The maximum distance is with pair Example Input Output Explanation The valid pairs are and The maximum distance is with pair Example Input Output Explanation The valid pairs are and The maximum distance is with pair Constraints length length i j Both and are non increasing
split array largest sum Given an integer array nums and an integer k split nums into k non empty subarrays such that the largest sum of any subarray is minimized Return the minimized largest sum of the split A subarray is a contiguous part of the array Example Input nums k Output Explanation There are four ways to split nums into two subarrays The best way is to split it into and where the largest sum among the two subarrays is only Example Input nums k Output Explanation There are four ways to split nums into two subarrays The best way is to split it into and where the largest sum among the two subarrays is only Constraints nums length nums i k min nums length
robot return to origin There is a robot starting at the position the origin on a plane Given a sequence of its moves judge if this robot ends up at after it completes its moves You are given a string moves that represents the move sequence of the robot where moves i represents its ith move Valid moves are R right L left U up and D down Return true if the robot returns to the origin after it finishes all of its moves or false otherwise Note The way that the robot is facing is irrelevant R will always make the robot move to the right once L will always make it move left etc Also assume that the magnitude of the robot s movement is the same for each move Example Input moves UD Output true Explanation The robot moves up once and then down once All moves have the same magnitude so it ended up at the origin where it started Therefore we return true Example Input moves LL Output false Explanation The robot moves left twice It ends up two moves to the left of the origin We return false because it is not at the origin at the end of its moves Constraints moves length moves only contains the characters U D L and R
split array into fibonacci sequence You are given a string of digits num such as We can split it into a Fibonacci like sequence Formally a Fibonacci like sequence is a list f of non negative integers such that f i that is each integer fits in a bit signed integer type f length and f i f i f i for all i f length Note that when splitting the string into pieces each piece must not have extra leading zeroes except if the piece is the number itself Return any Fibonacci like sequence split from num or return if it cannot be done Example Input num Output Explanation The output would also be accepted Example Input num Output Explanation The task is impossible Example Input num Output Explanation Leading zeroes are not allowed so is not valid Constraints num length num contains only digits
largest divisible subset Given a set of distinct positive integers nums return the largest subset answer such that every pair answer i answer j of elements in this subset satisfies answer i answer j or answer j answer i If there are multiple solutions return any of them Example Input nums Output Explanation is also accepted Example Input nums Output Constraints nums length nums i All the integers in nums are unique
longest common subsequence Given two strings and return the length of their longest common subsequence If there is no common subsequence return A subsequence of a string is a new string generated from the original string with some characters can be none deleted without changing the relative order of the remaining characters For example ace is a subsequence of abcde A common subsequence of two strings is a subsequence that is common to both strings Example Input abcde ace Output Explanation The longest common subsequence is ace and its length is Example Input abc abc Output Explanation The longest common subsequence is abc and its length is Example Input abc def Output Explanation There is no such common subsequence so the result is Constraints length length and consist of only lowercase English characters
game play analysis iv SQL Schema Table Activity Column Name Type int int date int is the primary key of this table This table shows the activity of players of some games Each row is a record of a player who logged in and played a number of games possibly before logging out on someday using some device Write an SQL query to report the fraction of players that logged in again on the day after the day they first logged in rounded to decimal places In other words you need to count the number of players that logged in for at least two consecutive days starting from their first login date then divide that number by the total number of players The query result format is in the following example Example Input Activity table Output fraction Explanation Only the player with id logged back in after the first day he had logged in so the answer is
relative sort array Given two arrays and the elements of are distinct and all elements in are also in Sort the elements of such that the relative ordering of items in are the same as in Elements that do not appear in should be placed at the end of in ascending order Example Input Output Example Input Output Constraints length length i i All the elements of are distinct Each i is in
dinner plate stacks You have an infinite number of stacks arranged in a row and numbered left to right from each of the stacks has the same maximum capacity Implement the DinnerPlates class DinnerPlates int capacity Initializes the object with the maximum capacity of the stacks capacity void push int val Pushes the given integer val into the leftmost stack with a size less than capacity int pop Returns the value at the top of the rightmost non empty stack and removes it from that stack and returns if all the stacks are empty int popAtStack int index Returns the value at the top of the stack with the given index index and removes it from that stack or returns if the stack with that given index is empty Example Input DinnerPlates push push push push push popAtStack push push popAtStack popAtStack pop pop pop pop pop Output null null null null null null null null Explanation DinnerPlates D DinnerPlates Initialize with capacity D push D push D push D push D push The stacks are now D popAtStack Returns The stacks are now D push The stacks are now D push The stacks are now D popAtStack Returns The stacks are now D popAtStack Returns The stacks are now D pop Returns The stacks are now D pop Returns The stacks are now D pop Returns The stacks are now D pop Returns There are no stacks D pop Returns There are still no stacks Constraints capacity val index At most calls will be made to push pop and popAtStack
binary watch A binary watch has LEDs on the top to represent the hours and LEDs on the bottom to represent the minutes Each LED represents a zero or one with the least significant bit on the right For example the below binary watch reads Given an integer turnedOn which represents the number of LEDs that are currently on ignoring the PM return all possible times the watch could represent You may return the answer in any order The hour must not contain a leading zero For example is not valid It should be The minute must be consist of two digits and may contain a leading zero For example is not valid It should be Example Input turnedOn Output Example Input turnedOn Output Constraints turnedOn
unique paths iii You are given an m x n integer array grid where grid i j could be representing the starting square There is exactly one starting square representing the ending square There is exactly one ending square representing empty squares we can walk over representing obstacles that we cannot walk over Return the number of directional walks from the starting square to the ending square that walk over every non obstacle square exactly once Example Input grid Output Explanation We have the following two paths Example Input grid Output Explanation We have the following four paths Example Input grid Output Explanation There is no path that walks over every empty square exactly once Note that the starting and ending square can be anywhere in the grid Constraints m grid length n grid i length m n m n grid i j There is exactly one starting cell and one ending cell
count number of possible root nodes Alice has an undirected tree with n nodes labeled from to n The tree is represented as a integer array edges of length n where edges i ai bi indicates that there is an edge between nodes ai and bi in the tree Alice wants Bob to find the root of the tree She allows Bob to make several guesses about her tree In one guess he does the following Chooses two distinct integers u and v such that there exists an edge u v in the tree He tells Alice that u is the parent of v in the tree Bob s guesses are represented by a integer array guesses where guesses j uj vj indicates Bob guessed uj to be the parent of vj Alice being lazy does not reply to each of Bob s guesses but just says that at least k of his guesses are true Given the integer arrays edges guesses and the integer k return the number of possible nodes that can be the root of Alice s tree If there is no such tree return Example Input edges guesses k Output Explanation Root correct guesses Root correct guesses Root correct guesses Root correct guesses Root correct guesses Considering or as root node leads to correct guesses Example Input edges guesses k Output Explanation Root correct guesses Root correct guesses Root correct guesses Root correct guesses Root correct guesses Considering any node as root will give at least correct guess Constraints edges length n n guesses length ai bi uj vj n ai bi uj vj edges represents a valid tree guesses j is an edge of the tree guesses is unique k guesses length
mice and cheese There are two mice and n different types of cheese each type of cheese should be eaten by exactly one mouse A point of the cheese with index i indexed is i if the first mouse eats it i if the second mouse eats it You are given a positive integer array a positive integer array and a non negative integer k Return the maximum points the mice can achieve if the first mouse eats exactly k types of cheese Example Input k Output Explanation In this example the first mouse eats the indexed and the types of cheese and the second mouse eats the and the types of cheese The total points are It can be proven that is the maximum total points that the mice can achieve Example Input k Output Explanation In this example the first mouse eats the indexed and types of cheese and the second mouse does not eat any cheese The total points are It can be proven that is the maximum total points that the mice can achieve Constraints n length length i i k n
xor operation in an array You are given an integer n and an integer start Define an array nums where nums i start i indexed and n nums length Return the bitwise XOR of all elements of nums Example Input n start Output Explanation Array nums is equal to where Where corresponds to bitwise XOR operator Example Input n start Output Explanation Array nums is equal to where Constraints n start n nums length
maximum number of non-overlapping subarrays with sum equals target Given an array nums and an integer target return the maximum number of non empty non overlapping subarrays such that the sum of values in each subarray is equal to target Example Input nums target Output Explanation There are non overlapping subarrays with sum equals to target Example Input nums target Output Explanation There are subarrays with sum equal to but only the first are non overlapping Constraints nums length nums i target
find and replace in string You are given a indexed string s that you must perform k replacement operations on The replacement operations are given as three indexed parallel arrays indices sources and targets all of length k To complete the ith replacement operation Check if the substring sources i occurs at index indices i in the original string s If it does not occur do nothing Otherwise if it does occur replace that substring with targets i For example if s abcd indices i sources i ab and targets i eee then the result of this replacement will be eeecd All replacement operations must occur simultaneously meaning the replacement operations should not affect the indexing of each other The testcases will be generated such that the replacements will not overlap For example a testcase with s abc indices and sources ab bc will not be generated because the ab and bc replacements overlap Return the resulting string after performing all replacement operations on s A substring is a contiguous sequence of characters in a string Example Input s abcd indices sources a cd targets eee ffff Output eeebffff Explanation a occurs at index in s so we replace it with eee cd occurs at index in s so we replace it with ffff Example Input s abcd indices sources ab ec targets eee ffff Output eeecd Explanation ab occurs at index in s so we replace it with eee ec does not occur at index in s so we do nothing Constraints s length k indices length sources length targets length k indexes i s length sources i length targets i length s consists of only lowercase English letters sources i and targets i consist of only lowercase English letters
plates between candles There is a long table with a line of plates and candles arranged on top of it You are given a indexed string s consisting of characters and only where a represents a plate and a represents a candle You are also given a indexed integer array queries where queries i lefti righti denotes the substring s lefti righti inclusive For each query you need to find the number of plates between candles that are in the substring A plate is considered between candles if there is at least one candle to its left and at least one candle to its right in the substring For example s and a query denotes the substring The number of plates between candles in this substring is as each of the two plates has at least one candle in the substring to its left and right Return an integer array answer where answer i is the answer to the ith query Example Input s queries Output Explanation queries has two plates between candles queries has three plates between candles Example Input s queries Output Explanation queries has nine plates between candles The other queries have zero plates between candles Constraints s length s consists of and characters queries length queries i length lefti righti s length
list the products ordered in a period SQL Schema Table Products Column Name Type int varchar varchar is the primary key for this table This table contains data about the company s products Table Orders Column Name Type int date unit int There is no primary key for this table It may have duplicate rows is a foreign key to the Products table unit is the number of products ordered in Write an SQL query to get the names of products that have at least units ordered in February and their amount Return result table in any order The query result format is in the following example Example Input Products table Leetcode Solutions Book Jewels of Stringology Book HP Laptop Lenovo Laptop Leetcode Kit T shirt Orders table unit Output unit Leetcode Solutions Leetcode Kit Explanation Products with is ordered in February a total of Products with is ordered in February a total of Products with is ordered in February a total of Products with was not ordered in February Products with is ordered in February a total of
find resultant array after removing anagrams You are given a indexed string array words where words i consists of lowercase English letters In one operation select any index i such that i words length and words i and words i are anagrams and delete words i from words Keep performing this operation as long as you can select an index that satisfies the conditions Return words after performing all operations It can be shown that selecting the indices for each operation in any arbitrary order will lead to the same result An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once For example dacb is an anagram of abdc Example Input words abba baba bbaa cd cd Output abba cd Explanation One of the ways we can obtain the resultant array is by using the following operations Since words bbaa and words baba are anagrams we choose index and delete words Now words abba baba cd cd Since words baba and words abba are anagrams we choose index and delete words Now words abba cd cd Since words cd and words cd are anagrams we choose index and delete words Now words abba cd We can no longer perform any operations so abba cd is the final answer Example Input words a b c d e Output a b c d e Explanation No two adjacent strings in words are anagrams of each other so no operations are performed Constraints words length words i length words i consists of lowercase English letters
number of arithmetic triplets You are given a indexed strictly increasing integer array nums and a positive integer diff A triplet i j k is an arithmetic triplet if the following conditions are met i j k nums j nums i diff and nums k nums j diff Return the number of unique arithmetic triplets Example Input nums diff Output Explanation is an arithmetic triplet because both and is an arithmetic triplet because both and Example Input nums diff Output Explanation is an arithmetic triplet because both and is an arithmetic triplet because both and Constraints nums length nums i diff nums is strictly increasing
booking concert tickets in groups A concert hall has n rows numbered from to n each with m seats numbered from to m You need to design a ticketing system that can allocate seats in the following cases If a group of k spectators can sit together in a row If every member of a group of k spectators can get a seat They may or may not sit together Note that the spectators are very picky Hence They will book seats only if each member of their group can get a seat with row number less than or equal to maxRow maxRow can vary from group to group In case there are multiple rows to choose from the row with the smallest number is chosen If there are multiple seats to choose in the same row the seat with the smallest number is chosen Implement the BookMyShow class BookMyShow int n int m Initializes the object with n as number of rows and m as number of seats per row int gather int k int maxRow Returns an array of length denoting the row and seat number respectively of the first seat being allocated to the k members of the group who must sit together In other words it returns the smallest possible r and c such that all c c k seats are valid and empty in row r and r maxRow Returns in case it is not possible to allocate seats to the group boolean scatter int k int maxRow Returns true if all k members of the group can be allocated seats in rows to maxRow who may or may not sit together If the seats can be allocated it allocates k seats to the group with the smallest row numbers and the smallest possible seat numbers in each row Otherwise returns false Example Input BookMyShow gather gather scatter scatter Output null true false Explanation BookMyShow bms new BookMyShow There are rows with seats each bms gather return The group books seats of row bms gather return There is only seat left in row so it is not possible to book consecutive seats bms scatter return True The group books seat of row and seats of row bms scatter return False There is only one seat left in the hall Constraints n m k maxRow n At most calls in total will be made to gather and scatter
maximum matrix sum You are given an n x n integer matrix You can do the following operation any number of times Choose any two adjacent elements of matrix and multiply each of them by Two elements are considered adjacent if and only if they share a border Your goal is to maximize the summation of the matrix s elements Return the maximum sum of the matrix s elements using the operation mentioned above Example Input matrix Output Explanation We can follow the following steps to reach sum equals Multiply the elements in the first row by Multiply the elements in the first column by Example Input matrix Output Explanation We can follow the following step to reach sum equals Multiply the last elements in the second row by Constraints n matrix length matrix i length n matrix i j
detonate the maximum bombs You are given a list of bombs The range of a bomb is defined as the area where its effect can be felt This area is in the shape of a circle with the center as the location of the bomb The bombs are represented by a indexed integer array bombs where bombs i xi yi ri xi and yi denote the X coordinate and Y coordinate of the location of the ith bomb whereas ri denotes the radius of its range You may choose to detonate a single bomb When a bomb is detonated it will detonate all bombs that lie in its range These bombs will further detonate the bombs that lie in their ranges Given the list of bombs return the maximum number of bombs that can be detonated if you are allowed to detonate only one bomb Example Input bombs Output Explanation The above figure shows the positions and ranges of the bombs If we detonate the left bomb the right bomb will not be affected But if we detonate the right bomb both bombs will be detonated So the maximum bombs that can be detonated is max Example Input bombs Output Explanation Detonating either bomb will not detonate the other bomb so the maximum number of bombs that can be detonated is Example Input bombs Output Explanation The best bomb to detonate is bomb because Bomb detonates bombs and The red circle denotes the range of bomb Bomb detonates bomb The blue circle denotes the range of bomb Bomb detonates bomb The green circle denotes the range of bomb Thus all bombs are detonated Constraints bombs length bombs i length xi yi ri
search insert position Given a sorted array of distinct integers and a target value return the index if the target is found If not return the index where it would be if it were inserted in order You must write an algorithm with O log n runtime complexity Example Input nums target Output Example Input nums target Output Example Input nums target Output Constraints nums length nums i nums contains distinct values sorted in ascending order target
valid triangle number Given an integer array nums return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle Example Input nums Output Explanation Valid combinations are using the first using the second Example Input nums Output Constraints nums length nums i
complement of base 10 integer The complement of an integer is the integer you get when you flip all the s to s and all the s to s in its binary representation For example The integer is in binary and its complement is which is the integer Given an integer n return its complement Example Input n Output Explanation is in binary with complement in binary which is in base Example Input n Output Explanation is in binary with complement in binary which is in base Example Input n Output Explanation is in binary with complement in binary which is in base Constraints n Note This question is the same as https leetcode com problems number complement
longest ideal subsequence You are given a string s consisting of lowercase letters and an integer k We call a string t ideal if the following conditions are satisfied t is a subsequence of the string s The absolute difference in the alphabet order of every two adjacent letters in t is less than or equal to k Return the length of the longest ideal string A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters Note that the alphabet order is not cyclic For example the absolute difference in the alphabet order of a and z is not Example Input s acfgbd k Output Explanation The longest ideal string is acbd The length of this string is so is returned Note that acfgbd is not ideal because c and f have a difference of in alphabet order Example Input s abcd k Output Explanation The longest ideal string is abcd The length of this string is so is returned Constraints s length k s consists of lowercase English letters
modify graph edge weights You are given an undirected weighted connected graph containing n nodes labeled from to n and an integer array edges where edges i ai bi wi indicates that there is an edge between nodes ai and bi with weight wi Some edges have a weight of wi while others have a positive weight wi Your task is to modify all edges with a weight of by assigning them positive integer values in the range so that the shortest distance between the nodes source and destination becomes equal to an integer target If there are multiple modifications that make the shortest distance between source and destination equal to target any of them will be considered correct Return an array containing all edges even unmodified ones in any order if it is possible to make the shortest distance from source to destination equal to target or an empty array if it s impossible Note You are not allowed to modify the weights of edges with initial positive weights Example Input n edges source destination target Output Explanation The graph above shows a possible modification to the edges making the distance from to equal to Example Input n edges source destination target Output Explanation The graph above contains the initial edges It is not possible to make the distance from to equal to by modifying the edge with weight So an empty array is returned Example Input n edges source destination target Output Explanation The graph above shows a modified graph having the shortest distance from to as Constraints n edges length n n edges i length ai bi n wi or wi ai bi source destination n source destination target The graph is connected and there are no self loops or repeated edges
egg drop with 2 eggs and n floors You are given two identical eggs and you have access to a building with n floors labeled from to n You know that there exists a floor f where f n such that any egg dropped at a floor higher than f will break and any egg dropped at or below floor f will not break In each move you may take an unbroken egg and drop it from any floor x where x n If the egg breaks you can no longer use it However if the egg does not break you may reuse it in future moves Return the minimum number of moves that you need to determine with certainty what the value of f is Example Input n Output Explanation We can drop the first egg from floor and the second egg from floor If the first egg breaks we know that f If the second egg breaks but the first egg didn t we know that f Otherwise if both eggs survive we know that f Example Input n Output Explanation One optimal strategy is Drop the egg at floor If it breaks we know f is between and Drop the egg starting from floor and going up one at a time to find f within more drops Total drops is If the egg does not break drop the egg again at floor If it breaks we know f is between and Drop the egg starting from floor and going up one at a time to find f within more drops Total drops is If the egg does not break again follow a similar process dropping the egg from floors and Regardless of the outcome it takes at most drops to determine f Constraints n
number of ways to divide a long corridor Along a long library corridor there is a line of seats and decorative plants You are given a indexed string corridor of length n consisting of letters S and P where each S represents a seat and each P represents a plant One room divider has already been installed to the left of index and another to the right of index n Additional room dividers can be installed For each position between indices i and i i n at most one divider can be installed Divide the corridor into non overlapping sections where each section has exactly two seats with any number of plants There may be multiple ways to perform the division Two ways are different if there is a position with a room divider installed in the first way but not in the second way Return the number of ways to divide the corridor Since the answer may be very large return it modulo If there is no way return Example Input corridor SSPPSPS Output Explanation There are different ways to divide the corridor The black bars in the above image indicate the two room dividers already installed Note that in each of the ways each section has exactly two seats Example Input corridor PPSPSP Output Explanation There is only way to divide the corridor by not installing any additional dividers Installing any would create some section that does not have exactly two seats Example Input corridor S Output Explanation There is no way to divide the corridor because there will always be a section that does not have exactly two seats Constraints n corridor length n corridor i is either S or P
partition array into three parts with equal sum Given an array of integers arr return true if we can partition the array into three non empty parts with equal sums Formally we can partition the array if we can find indexes i j with arr arr arr i arr i arr i arr j arr j arr j arr arr length Example Input arr Output true Explanation Example Input arr Output false Example Input arr Output true Explanation Constraints arr length arr i
minimum difference between highest and lowest of k scores You are given a indexed integer array nums where nums i represents the score of the ith student You are also given an integer k Pick the scores of any k students from the array so that the difference between the highest and the lowest of the k scores is minimized Return the minimum possible difference Example Input nums k Output Explanation There is one way to pick score s of one student The difference between the highest and lowest score is The minimum possible difference is Example Input nums k Output Explanation There are six ways to pick score s of two students The difference between the highest and lowest score is The difference between the highest and lowest score is The difference between the highest and lowest score is The difference between the highest and lowest score is The difference between the highest and lowest score is The difference between the highest and lowest score is The minimum possible difference is Constraints k nums length nums i
find all groups of farmland You are given a indexed m x n binary matrix land where a represents a hectare of forested land and a represents a hectare of farmland To keep the land organized there are designated rectangular areas of hectares that consist entirely of farmland These rectangular areas are called groups No two groups are adjacent meaning farmland in one group is not four directionally adjacent to another farmland in a different group land can be represented by a coordinate system where the top left corner of land is and the bottom right corner of land is m n Find the coordinates of the top left and bottom right corner of each group of farmland A group of farmland with a top left corner at and a bottom right corner at is represented by the length array Return a array containing the length arrays described above for each group of farmland in land If there are no groups of farmland return an empty array You may return the answer in any order Example Input land Output Explanation The first group has a top left corner at land and a bottom right corner at land The second group has a top left corner at land and a bottom right corner at land Example Input land Output Explanation The first group has a top left corner at land and a bottom right corner at land Example Input land Output Explanation There are no groups of farmland Constraints m land length n land i length m n land consists of only s and s Groups of farmland are rectangular in shape
kth smallest number in multiplication table Nearly everyone has used the Multiplication Table The multiplication table of size m x n is an integer matrix mat where mat i j i j indexed Given three integers m n and k return the kth smallest element in the m x n multiplication table Example Input m n k Output Explanation The smallest number is Example Input m n k Output Explanation The smallest number is Constraints m n k m n
painting a grid with three different colors You are given two integers m and n Consider an m x n grid where each cell is initially white You can paint each cell red green or blue All cells must be painted Return the number of ways to color the grid with no two adjacent cells having the same color Since the answer can be very large return it modulo Example Input m n Output Explanation The three possible colorings are shown in the image above Example Input m n Output Explanation The six possible colorings are shown in the image above Example Input m n Output Constraints m n
sender with largest word count You have a chat log of n messages You are given two string arrays messages and senders where messages i is a message sent by senders i A message is list of words that are separated by a single space with no leading or trailing spaces The word count of a sender is the total number of words sent by the sender Note that a sender may send more than one message Return the sender with the largest word count If there is more than one sender with the largest word count return the one with the lexicographically largest name Note Uppercase letters come before lowercase letters in lexicographical order Alice and alice are distinct Example Input messages Hello userTwooo Hi userThree Wonderful day Alice Nice day userThree senders Alice userTwo userThree Alice Output Alice Explanation Alice sends a total of words userTwo sends a total of words userThree sends a total of words Since Alice has the largest word count we return Alice Example Input messages How is leetcode for everyone Leetcode is useful for practice senders Bob Charlie Output Charlie Explanation Bob sends a total of words Charlie sends a total of words Since there is a tie for the largest word count we return the sender with the lexicographically larger name Charlie Constraints n messages length senders length n messages i length senders i length messages i consists of uppercase and lowercase English letters and All the words in messages i are separated by a single space messages i does not have leading or trailing spaces senders i consists of uppercase and lowercase English letters only
find the town judge In a town there are n people labeled from to n There is a rumor that one of these people is secretly the town judge If the town judge exists then The town judge trusts nobody Everybody except for the town judge trusts the town judge There is exactly one person that satisfies properties and You are given an array trust where trust i ai bi representing that the person labeled ai trusts the person labeled bi If a trust relationship does not exist in trust array then such a trust relationship does not exist Return the label of the town judge if the town judge exists and can be identified or return otherwise Example Input n trust Output Example Input n trust Output Example Input n trust Output Constraints n trust length trust i length All the pairs of trust are unique ai bi ai bi n
2 keys keyboard There is only one character A on the screen of a notepad You can perform one of two operations on this notepad for each step Copy All You can copy all the characters present on the screen a partial copy is not allowed Paste You can paste the characters which are copied last time Given an integer n return the minimum number of operations to get the character A exactly n times on the screen Example Input n Output Explanation Initially we have one character A In step we use Copy All operation In step we use Paste operation to get AA In step we use Paste operation to get AAA Example Input n Output Constraints n
maximum length of repeated subarray Given two integer arrays and return the maximum length of a subarray that appears in both arrays Example Input Output Explanation The repeated subarray with maximum length is Example Input Output Explanation The repeated subarray with maximum length is Constraints length length i i
n-th tribonacci number The Tribonacci sequence Tn is defined as follows and Tn Tn Tn Tn for n Given n return the value of Tn Example Input n Output Explanation Example Input n Output Constraints n The answer is guaranteed to fit within a bit integer ie answer
repeated dna sequences The DNA sequence is composed of a series of nucleotides abbreviated as A C G and T For example ACGAATTCCG is a DNA sequence When studying DNA it is useful to identify repeated sequences within the DNA Given a string s that represents a DNA sequence return all the letter long sequences substrings that occur more than once in a DNA molecule You may return the answer in any order Example Input s AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT Output AAAAACCCCC CCCCCAAAAA Example Input s AAAAAAAAAAAAA Output AAAAAAAAAA Constraints s length s i is either A C G or T
similar string groups Two strings X and Y are considered similar if either they are identical or we can make them equivalent by swapping at most two letters in distinct positions within the string X For example tars and rats are similar swapping at positions and and rats and arts are similar but star is not similar to tars rats or arts Together these form two connected groups by similarity tars rats arts and star Notice that tars and arts are in the same group even though they are not similar Formally each group is such that a word is in the group if and only if it is similar to at least one other word in the group We are given a list strs of strings where every string in strs is an anagram of every other string in strs How many groups are there Example Input strs tars rats arts star Output Example Input strs omv ovm Output Constraints strs length strs i length strs i consists of lowercase letters only All words in strs have the same length and are anagrams of each other
maximum sum of two non-overlapping subarrays Given an integer array nums and two integers firstLen and secondLen return the maximum sum of elements in two non overlapping subarrays with lengths firstLen and secondLen The array with length firstLen could occur before or after the array with length secondLen but they have to be non overlapping A subarray is a contiguous part of an array Example Input nums firstLen secondLen Output Explanation One choice of subarrays is with length and with length Example Input nums firstLen secondLen Output Explanation One choice of subarrays is with length and with length Example Input nums firstLen secondLen Output Explanation One choice of subarrays is with length and with length Constraints firstLen secondLen firstLen secondLen firstLen secondLen nums length nums i
count submatrices with all ones Given an m x n binary matrix mat return the number of submatrices that have all ones Example Input mat Output Explanation There are rectangles of side There are rectangles of side There are rectangles of side There is rectangle of side There is rectangle of side Total number of rectangles Example Input mat Output Explanation There are rectangles of side There are rectangles of side There are rectangles of side There are rectangles of side There are rectangles of side There are rectangles of side There is rectangle of side Total number of rectangles Constraints m n mat i j is either or
decompress run-length encoded list We are given a list nums of integers representing a list compressed with run length encoding Consider each adjacent pair of elements freq val nums i nums i with i For each such pair there are freq elements with value val concatenated in a sublist Concatenate all the sublists from left to right to generate the decompressed list Return the decompressed list Example Input nums Output Explanation The first pair means we have freq and val so we generate the array The second pair means we have freq and val so we generate At the end the concatenation is Example Input nums Output Constraints nums length nums length nums i
remove nodes from linked list You are given the head of a linked list Remove every node which has a node with a strictly greater value anywhere to the right side of it Return the head of the modified linked list Example Input head Output Explanation The nodes that should be removed are and Node is to the right of node Node is to the right of node Node is to the right of node Example Input head Output Explanation Every node has value so no nodes are removed Constraints The number of the nodes in the given list is in the range Node val
fair candy swap Alice and Bob have a different total number of candies You are given two integer arrays aliceSizes and bobSizes where aliceSizes i is the number of candies of the ith box of candy that Alice has and bobSizes j is the number of candies of the jth box of candy that Bob has Since they are friends they would like to exchange one candy box each so that after the exchange they both have the same total amount of candy The total amount of candy a person has is the sum of the number of candies in each box they have Return an integer array answer where answer is the number of candies in the box that Alice must exchange and answer is the number of candies in the box that Bob must exchange If there are multiple answers you may return any one of them It is guaranteed that at least one answer exists Example Input aliceSizes bobSizes Output Example Input aliceSizes bobSizes Output Example Input aliceSizes bobSizes Output Constraints aliceSizes length bobSizes length aliceSizes i bobSizes j Alice and Bob have a different total number of candies There will be at least one valid answer for the given input
remove outermost parentheses A valid parentheses string is either empty A or A B where A and B are valid parentheses strings and represents string concatenation For example and are all valid parentheses strings A valid parentheses string s is primitive if it is nonempty and there does not exist a way to split it into s A B with A and B nonempty valid parentheses strings Given a valid parentheses string s consider its primitive decomposition s Pk where Pi are primitive valid parentheses strings Return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s Example Input s Output Explanation The input string is with primitive decomposition After removing outer parentheses of each part this is Example Input s Output Explanation The input string is with primitive decomposition After removing outer parentheses of each part this is Example Input s Output Explanation The input string is with primitive decomposition After removing outer parentheses of each part this is Constraints s length s i is either or s is a valid parentheses string
maximum number of eaten apples There is a special kind of apple tree that grows apples every day for n days On the ith day the tree grows apples i apples that will rot after days i days that is on day i days i the apples will be rotten and cannot be eaten On some days the apple tree does not grow any apples which are denoted by apples i and days i You decided to eat at most one apple a day to keep the doctors away Note that you can keep eating after the first n days Given two integer arrays days and apples of length n return the maximum number of apples you can eat Example Input apples days Output Explanation You can eat apples On the first day you eat an apple that grew on the first day On the second day you eat an apple that grew on the second day On the third day you eat an apple that grew on the second day After this day the apples that grew on the third day rot On the fourth to the seventh days you eat apples that grew on the fourth day Example Input apples days Output Explanation You can eat apples On the first to the third day you eat apples that grew on the first day Do nothing on the fouth and fifth days On the sixth and seventh days you eat apples that grew on the sixth day Constraints n apples length days length n apples i days i days i if and only if apples i
valid boomerang Given an array points where points i xi yi represents a point on the X Y plane return true if these points are a boomerang A boomerang is a set of three points that are all distinct and not in a straight line Example Input points Output true Example Input points Output false Constraints points length points i length xi yi
nested array generator Given a multi dimensional array of integers return a generator object which yields integers in the same order as inorder traversal A multi dimensional array is a recursive data structure that contains both integers and other multi dimensional arrays inorder traversal iterates over each array from left to right yielding any integers it encounters or applying inorder traversal to any arrays it encounters Example Input arr Output Explanation const generator inorderTraversal arr generator next value generator next value generator next value generator next done true Example Input arr Output Explanation There are no integers so the generator doesn t yield anything Constraints arr flat length arr flat i maxNestingDepth Can you solve this without creating a new flattened version of the array
make the string great Given a string s of lower and upper case English letters A good string is a string which doesn t have two adjacent characters s i and s i where i s length s i is a lower case letter and s i is the same letter but in upper case or vice versa To make the string good you can choose two adjacent characters that make the string bad and remove them You can keep doing this until the string becomes good Return the string after making it good The answer is guaranteed to be unique under the given constraints Notice that an empty string is also good Example Input s leEeetcode Output leetcode Explanation In the first step either you choose i or i both will result leEeetcode to be reduced to leetcode Example Input s abBAcC Output Explanation We have many possible scenarios and all lead to the same answer For example abBAcC aAcC cC abBAcC abBA aA Example Input s s Output s Constraints s length s contains only lower and upper case English letters
element appearing more than 25% in sorted array Given an integer array sorted in non decreasing order there is exactly one integer in the array that occurs more than of the time return that integer Example Input arr Output Example Input arr Output Constraints arr length arr i
find the difference You are given two strings s and t String t is generated by random shuffling string s and then add one more letter at a random position Return the letter that was added to t Example Input s abcd t abcde Output e Explanation e is the letter that was added Example Input s t y Output y Constraints s length t length s length s and t consist of lowercase English letters
degree of an array Given a non empty array of non negative integers nums the degree of this array is defined as the maximum frequency of any one of its elements Your task is to find the smallest possible length of a contiguous subarray of nums that has the same degree as nums Example Input nums Output Explanation The input array has a degree of because both elements and appear twice Of the subarrays that have the same degree The shortest length is So return Example Input nums Output Explanation The degree is because the element is repeated times So is the shortest subarray therefore returning Constraints nums length will be between and nums i will be an integer between and
print foobar alternately Suppose you are given the following code class FooBar public void foo for int i i n i print foo public void bar for int i i n i print bar The same instance of FooBar will be passed to two different threads thread A will call foo while thread B will call bar Modify the given program to output foobar n times Example Input n Output foobar Explanation There are two threads being fired asynchronously One of them calls foo while the other calls bar foobar is being output time Example Input n Output foobarfoobar Explanation foobar is being output times Constraints n
merge intervals Given an array of intervals where intervals i starti endi merge all overlapping intervals and return an array of the non overlapping intervals that cover all the intervals in the input Example Input intervals Output Explanation Since intervals and overlap merge them into Example Input intervals Output Explanation Intervals and are considered overlapping Constraints intervals length intervals i length starti endi
number of distinct averages You are given a indexed integer array nums of even length As long as nums is not empty you must repetitively Find the minimum number in nums and remove it Find the maximum number in nums and remove it Calculate the average of the two removed numbers The average of two numbers a and b is a b For example the average of and is Return the number of distinct averages calculated using the above process Note that when there is a tie for a minimum or maximum number any can be removed Example Input nums Output Explanation Remove and and the average is Now nums Remove and The average is and nums Remove and and the average is Since there are distinct numbers among and we return Example Input nums Output Explanation There is only one average to be calculated after removing and so we return Constraints nums length nums length is even nums i
maximum level sum of a binary tree Given the root of a binary tree the level of its root is the level of its children is and so on Return the smallest level x such that the sum of all the values of nodes at level x is maximal Example Input root null null Output Explanation Level sum Level sum Level sum So we return the level with the maximum sum which is level Example Input root null null null null Output Constraints The number of nodes in the tree is in the range Node val
watering plants ii Alice and Bob want to water n plants in their garden The plants are arranged in a row and are labeled from to n from left to right where the ith plant is located at x i Each plant needs a specific amount of water Alice and Bob have a watering can each initially full They water the plants in the following way Alice waters the plants in order from left to right starting from the plant Bob waters the plants in order from right to left starting from the n th plant They begin watering the plants simultaneously It takes the same amount of time to water each plant regardless of how much water it needs Alice Bob must water the plant if they have enough in their can to fully water it Otherwise they first refill their can instantaneously then water the plant In case both Alice and Bob reach the same plant the one with more water currently in his her watering can should water this plant If they have the same amount of water then Alice should water this plant Given a indexed integer array plants of n integers where plants i is the amount of water the ith plant needs and two integers capacityA and capacityB representing the capacities of Alice s and Bob s watering cans respectively return the number of times they have to refill to water all the plants Example Input plants capacityA capacityB Output Explanation Initially Alice and Bob have units of water each in their watering cans Alice waters plant Bob waters plant Alice and Bob now have units and units of water respectively Alice has enough water for plant so she waters it Bob does not have enough water for plant so he refills his can then waters it So the total number of times they have to refill to water all the plants is Example Input plants capacityA capacityB Output Explanation Initially Alice and Bob have units and units of water in their watering cans respectively Alice waters plant Bob waters plant Alice and Bob now have unit of water each and need to water plants and respectively Since neither of them have enough water for their current plants they refill their cans and then water the plants So the total number of times they have to refill to water all the plants is Example Input plants capacityA capacityB Output Explanation There is only one plant Alice s watering can has units of water whereas Bob s can has units Since Alice has more water in her can she waters this plant So the total number of times they have to refill is Constraints n plants length n plants i max plants i capacityA capacityB
find the winner of the circular game There are n friends that are playing a game The friends are sitting in a circle and are numbered from to n in clockwise order More formally moving clockwise from the ith friend brings you to the i th friend for i n and moving clockwise from the nth friend brings you to the friend The rules of the game are as follows Start at the friend Count the next k friends in the clockwise direction including the friend you started at The counting wraps around the circle and may count some friends more than once The last friend you counted leaves the circle and loses the game If there is still more than one friend in the circle go back to step starting from the friend immediately clockwise of the friend who just lost and repeat Else the last friend in the circle wins the game Given the number of friends n and an integer k return the winner of the game Example Input n k Output Explanation Here are the steps of the game Start at friend Count friends clockwise which are friends and Friend leaves the circle Next start is friend Count friends clockwise which are friends and Friend leaves the circle Next start is friend Count friends clockwise which are friends and Friend leaves the circle Next start is friend Count friends clockwise which are friends and Friend leaves the circle Only friend is left so they are the winner Example Input n k Output Explanation The friends leave in this order The winner is friend Constraints k n Follow up Could you solve this problem in linear time with constant space
water and jug problem You are given two jugs with capacities and liters There is an infinite amount of water supply available Determine whether it is possible to measure exactly targetCapacity liters using these two jugs If targetCapacity liters of water are measurable you must have targetCapacity liters of water contained within one or both buckets by the end Operations allowed Fill any of the jugs with water Empty any of the jugs Pour water from one jug into another till the other jug is completely full or the first jug itself is empty Example Input targetCapacity Output true Explanation The famous Die Hard example Example Input targetCapacity Output false Example Input targetCapacity Output true Constraints targetCapacity
super pow Your task is to calculate ab mod where a is a positive integer and b is an extremely large positive integer given in the form of an array Example Input a b Output Example Input a b Output Example Input a b Output Constraints a b length b i b does not contain leading zeros
minimum distance between bst nodes Given the root of a Binary Search Tree BST return the minimum difference between the values of any two different nodes in the tree Example Input root Output Example Input root null null Output Constraints The number of nodes in the tree is in the range Node val Note This question is the same as https leetcode com problems minimum absolute difference in bst
replace employee id with the unique identifier SQL Schema Table Employees Column Name Type id int name varchar id is the primary key for this table Each row of this table contains the id and the name of an employee in a company Table EmployeeUNI Column Name Type id int int id is the primary key for this table Each row of this table contains the id and the corresponding unique id of an employee in the company Write an SQL query to show the unique ID of each user If a user does not have a unique ID replace just show null Return the result table in any order The query result format is in the following example Example Input Employees table id name Alice Bob Meir Winston Jonathan EmployeeUNI table id Output name null Alice null Bob Meir Winston Jonathan Explanation Alice and Bob do not have a unique ID We will show null instead The unique ID of Meir is The unique ID of Winston is The unique ID of Jonathan is
bitwise ors of subarrays Given an integer array arr return the number of distinct bitwise ORs of all the non empty subarrays of arr The bitwise OR of a subarray is the bitwise OR of each integer in the subarray The bitwise OR of a subarray of one integer is that integer A subarray is a contiguous non empty sequence of elements within an array Example Input arr Output Explanation There is only one possible result Example Input arr Output Explanation The possible subarrays are These yield the results There are unique values so the answer is Example Input arr Output Explanation The possible results are and Constraints arr length arr i
binary trees with factors Given an array of unique integers arr where each integer arr i is strictly greater than We make a binary tree using these integers and each number may be used for any number of times Each non leaf node s value should be equal to the product of the values of its children Return the number of binary trees we can make The answer may be too large so return the answer modulo Example Input arr Output Explanation We can make these trees Example Input arr Output Explanation We can make these trees Constraints arr length arr i All the values of arr are unique
moving stones until consecutive ii There are some stones in different positions on the X axis You are given an integer array stones the positions of the stones Call a stone an endpoint stone if it has the smallest or largest position In one move you pick up an endpoint stone and move it to an unoccupied position so that it is no longer an endpoint stone In particular if the stones are at say stones you cannot move the endpoint stone at position since moving it to any position such as or will still keep that stone as an endpoint stone The game ends when you cannot make any more moves i e the stones are in three consecutive positions Return an integer array answer of length where answer is the minimum number of moves you can play and answer is the maximum number of moves you can play Example Input stones Output Explanation We can move for one move to finish the game Or we can move for two moves to finish the game Example Input stones Output Explanation We can move then to finish the game Or we can move to finish the game Notice we cannot move to finish the game because that would be an illegal move Constraints stones length stones i All the values of stones are unique
reduction operations to make the array elements equal Given an integer array nums your goal is to make all elements in nums equal To complete one operation follow these steps Find the largest value in nums Let its index be i indexed and its value be largest If there are multiple elements with the largest value pick the smallest i Find the next largest value in nums strictly smaller than largest Let its value be nextLargest Reduce nums i to nextLargest Return the number of operations to make all elements in nums equal Example Input nums Output Explanation It takes operations to make all elements in nums equal largest at index nextLargest Reduce nums to nums largest at index nextLargest Reduce nums to nums largest at index nextLargest Reduce nums to nums Example Input nums Output Explanation All elements in nums are already equal Example Input nums Output Explanation It takes operations to make all elements in nums equal largest at index nextLargest Reduce nums to nums largest at index nextLargest Reduce nums to nums largest at index nextLargest Reduce nums to nums largest at index nextLargest Reduce nums to nums Constraints nums length nums i
minimum length of string after deleting similar ends Given a string s consisting only of characters a b and c You are asked to apply the following algorithm on the string any number of times Pick a non empty prefix from the string s where all the characters in the prefix are equal Pick a non empty suffix from the string s where all the characters in this suffix are equal The prefix and the suffix should not intersect at any index The characters from the prefix and suffix must be the same Delete both the prefix and the suffix Return the minimum length of s after performing the above operation any number of times possibly zero times Example Input s ca Output Explanation You can t remove any characters so the string stays as is Example Input s cabaabac Output Explanation An optimal sequence of operations is Take prefix c and suffix c and remove them s abaaba Take prefix a and suffix a and remove them s baab Take prefix b and suffix b and remove them s aa Take prefix a and suffix a and remove them s Example Input s aabccabba Output Explanation An optimal sequence of operations is Take prefix aa and suffix a and remove them s bccabb Take prefix b and suffix bb and remove them s cca Constraints s length s only consists of characters a b and c
lowest common ancestor of a binary search tree Given a binary search tree BST find the lowest common ancestor LCA node of two given nodes in the BST According to the definition of LCA on Wikipedia The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants where we allow a node to be a descendant of itself Example Input root null null p q Output Explanation The LCA of nodes and is Example Input root null null p q Output Explanation The LCA of nodes and is since a node can be a descendant of itself according to the LCA definition Example Input root p q Output Constraints The number of nodes in the tree is in the range Node val All Node val are unique p q p and q will exist in the BST
array wrapper Create a class ArrayWrapper that accepts an array of integers in it s constructor This class should have two features When two instances of this class are added together with the operator the resulting value is the sum of all the elements in both arrays When the String function is called on the instance it will return a comma separated string surrounded by brackets For example Example Input nums operation Add Output Explanation const new ArrayWrapper const new ArrayWrapper Example Input nums operation String Output Explanation const obj new ArrayWrapper String obj Example Input nums operation Add Output Explanation const new ArrayWrapper const new ArrayWrapper Constraints nums length nums i Note nums is the array passed to the constructor
reaching points Given four integers sx sy tx and ty return true if it is possible to convert the point sx sy to the point tx ty through some operations or false otherwise The allowed operation on some point x y is to convert it to either x x y or x y y Example Input sx sy tx ty Output true Explanation One series of moves that transforms the starting point to the target is Example Input sx sy tx ty Output false Example Input sx sy tx ty Output true Constraints sx sy tx ty
largest plus sign You are given an integer n You have an n x n binary grid grid with all values initially s except for some indices given in the array mines The ith element of the array mines is defined as mines i xi yi where grid xi yi Return the order of the largest axis aligned plus sign of s contained in grid If there is none return An axis aligned plus sign of s of order k has some center grid r c along with four arms of length k going up down left and right and made of s Note that there could be s or s beyond the arms of the plus sign only the relevant area of the plus sign is checked for s Example Input n mines Output Explanation In the above grid the largest plus sign can only be of order One of them is shown Example Input n mines Output Explanation There is no plus sign so return Constraints n mines length xi yi n All the pairs xi yi are unique
count prefixes of a given string You are given a string array words and a string s where words i and s comprise only of lowercase English letters Return the number of strings in words that are a prefix of s A prefix of a string is a substring that occurs at the beginning of the string A substring is a contiguous sequence of characters within a string Example Input words a b c ab bc abc s abc Output Explanation The strings in words which are a prefix of s abc are a ab and abc Thus the number of strings in words which are a prefix of s is Example Input words a a s aa Output Explanation Both of the strings are a prefix of s Note that the same string can occur multiple times in words and it should be counted each time Constraints words length words i length s length words i and s consist of lowercase English letters only
house robber You are a professional robber planning to rob houses along a street Each house has a certain amount of money stashed the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night Given an integer array nums representing the amount of money of each house return the maximum amount of money you can rob tonight without alerting the police Example Input nums Output Explanation Rob house money and then rob house money Total amount you can rob Example Input nums Output Explanation Rob house money rob house money and rob house money Total amount you can rob Constraints nums length nums i
number of ways to split array You are given a indexed integer array nums of length n nums contains a valid split at index i if the following are true The sum of the first i elements is greater than or equal to the sum of the last n i elements There is at least one element to the right of i That is i n Return the number of valid splits in nums Example Input nums Output Explanation There are three ways of splitting nums into two non empty parts Split nums at index Then the first part is and its sum is The second part is and its sum is Since i is a valid split Split nums at index Then the first part is and its sum is The second part is and its sum is Since i is a valid split Split nums at index Then the first part is and its sum is The second part is and its sum is Since i is not a valid split Thus the number of valid splits in nums is Example Input nums Output Explanation There are two valid splits in nums Split nums at index Then the first part is and its sum is The second part is and its sum is Since i is a valid split Split nums at index Then the first part is and its sum is The second part is and its sum is Since i is a valid split Constraints nums length nums i
lfu cache Design and implement a data structure for a Least Frequently Used LFU cache Implement the LFUCache class LFUCache int capacity Initializes the object with the capacity of the data structure int get int key Gets the value of the key if the key exists in the cache Otherwise returns void put int key int value Update the value of the key if present or inserts the key if not already present When the cache reaches its capacity it should invalidate and remove the least frequently used key before inserting a new item For this problem when there is a tie i e two or more keys with the same frequency the least recently used key would be invalidated To determine the least frequently used key a use counter is maintained for each key in the cache The key with the smallest use counter is the least frequently used key When a key is first inserted into the cache its use counter is set to due to the put operation The use counter for a key in the cache is incremented either a get or put operation is called on it The functions get and put must each run in O average time complexity Example Input LFUCache put put get put get get put get get get Output null null null null null Explanation cnt x the use counter for key x cache will show the last used order for tiebreakers leftmost element is most recent LFUCache lfu new LFUCache lfu put cache cnt lfu put cache cnt cnt lfu get return cache cnt cnt lfu put is the LFU key because cnt is the smallest invalidate cache cnt cnt lfu get return not found lfu get return cache cnt cnt lfu put Both and have the same cnt but is LRU invalidate cache cnt cnt lfu get return not found lfu get return cache cnt cnt lfu get return cache cnt cnt Constraints capacity key value At most calls will be made to get and put
k-th smallest in lexicographical order Given two integers n and k return the kth lexicographically smallest integer in the range n Example Input n k Output Explanation The lexicographical order is so the second smallest number is Example Input n k Output Constraints k n
design circular queue Design your implementation of the circular queue The circular queue is a linear data structure in which the operations are performed based on FIFO First In First Out principle and the last position is connected back to the first position to make a circle It is also called Ring Buffer One of the benefits of the circular queue is that we can make use of the spaces in front of the queue In a normal queue once the queue becomes full we cannot insert the next element even if there is a space in front of the queue But using the circular queue we can use the space to store new values Implement the MyCircularQueue class MyCircularQueue k Initializes the object with the size of the queue to be k int Front Gets the front item from the queue If the queue is empty return int Rear Gets the last item from the queue If the queue is empty return boolean enQueue int value Inserts an element into the circular queue Return true if the operation is successful boolean deQueue Deletes an element from the circular queue Return true if the operation is successful boolean isEmpty Checks whether the circular queue is empty or not boolean isFull Checks whether the circular queue is full or not You must solve the problem without using the built in queue data structure in your programming language Example Input MyCircularQueue enQueue enQueue enQueue enQueue Rear isFull deQueue enQueue Rear Output null true true true false true true true Explanation MyCircularQueue myCircularQueue new MyCircularQueue myCircularQueue enQueue return True myCircularQueue enQueue return True myCircularQueue enQueue return True myCircularQueue enQueue return False myCircularQueue Rear return myCircularQueue isFull return True myCircularQueue deQueue return True myCircularQueue enQueue return True myCircularQueue Rear return Constraints k value At most calls will be made to enQueue deQueue Front Rear isEmpty and isFull
design cancellable function Sometimes you have a long running task and you may wish to cancel it before it completes To help with this goal write a function cancellable that accepts a generator object and returns an array of two values a cancel function and a promise You may assume the generator function will only yield promises It is your function s responsibility to pass the values resolved by the promise back to the generator If the promise rejects your function should throw that error back to the generator If the cancel callback is called before the generator is done your function should throw an error back to the generator That error should be the string Cancelled Not an Error object If the error was caught the returned promise should resolve with the next value that was yielded or returned Otherwise the promise should reject with the thrown error No more code should be executed When the generator is done the promise your function returned should resolve the value the generator returned If however the generator throws an error the returned promise should reject with the error An example of how your code would be used function tasks const val yield new Promise resolve resolve yield new Promise resolve setTimeout resolve return val calculation shouldn t be done const cancel promise cancellable tasks setTimeout cancel promise catch console log logs Cancelled at t If instead cancel was not called or was called after t the promise would have resolved Example Input generatorFunction function return cancelledAt Output resolved Explanation const generator generatorFunction const cancel promise cancellable generator setTimeout cancel promise then console log resolves at t The generator immediately yields and finishes Because of that the returned promise immediately resolves Note that cancelling a finished generator does nothing Example Input generatorFunction function const msg yield new Promise res res Hello throw Error msg cancelledAt null Output rejected Error Hello Explanation A promise is yielded The function handles this by waiting for it to resolve and then passes the resolved value back to the generator Then an error is thrown which has the effect of causing the promise to reject with the same thrown error Example Input generatorFunction function yield new Promise res setTimeout res return Success cancelledAt Output rejected Cancelled Explanation While the function is waiting for the yielded promise to resolve cancel is called This causes an error message to be sent back to the generator Since this error is uncaught the returned promise rejected with this error Example Input generatorFunction function let result yield new Promise res setTimeout res result yield new Promise res res yield new Promise res setTimeout res result yield new Promise res res return result cancelledAt null Output resolved Explanation promises are yielded Two of those promises have their values added to the result After the generator finishes with a value of and that value is resolved by the returned promise Example Input generatorFunction function let result try yield new Promise res setTimeout res result yield new Promise res res yield new Promise res setTimeout res result yield new Promise res res catch e return result return result cancelledAt Output resolved Explanation The first two yielded promises resolve and cause the result to increment However at t the generator is cancelled The error sent to the generator is caught and the result is returned and finally resolved by the returned promise Example Input generatorFunction function try yield new Promise resolve reject reject Promise Rejected catch e let a yield new Promise resolve resolve let b yield new Promise resolve resolve return a b cancelledAt null Output resolved Explanation The first yielded promise immediately rejects This error is caught Because the generator hasn t been cancelled execution continues as usual It ends up resolving Constraints cancelledAt null or cancelledAt generatorFunction returns a generator object
unique substrings in wraparound string We define the string base to be the infinite wraparound string of abcdefghijklmnopqrstuvwxyz so base will look like this zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd Given a string s return the number of unique non empty substrings of s are present in base Example Input s a Output Explanation Only the substring a of s is in base Example Input s cac Output Explanation There are two substrings a c of s in base Example Input s zab Output Explanation There are six substrings z a b za ab and zab of s in base Constraints s length s consists of lowercase English letters
buy two chocolates You are given an integer array prices representing the prices of various chocolates in a store You are also given a single integer money which represents your initial amount of money You must buy exactly two chocolates in such a way that you still have some non negative leftover money You would like to minimize the sum of the prices of the two chocolates you buy Return the amount of money you will have leftover after buying the two chocolates If there is no way for you to buy two chocolates without ending up in debt return money Note that the leftover must be non negative Example Input prices money Output Explanation Purchase the chocolates priced at and units respectively You will have units of money afterwards Thus we return Example Input prices money Output Explanation You cannot buy chocolates without going in debt so we return Constraints prices length prices i money
maximum average subarray i You are given an integer array nums consisting of n elements and an integer k Find a contiguous subarray whose length is equal to k that has the maximum average value and return this value Any answer with a calculation error less than will be accepted Example Input nums k Output Explanation Maximum average is Example Input nums k Output Constraints n nums length k n nums i
minimum number of operations to make string sorted You are given a string s indexed You are asked to perform the following operation on s until you get a sorted string Find the largest index i such that i s length and s i s i Find the largest index j such that i j s length and s k s i for all the possible values of k in the range i j inclusive Swap the two characters at indices i and j Reverse the suffix starting at index i Return the number of operations needed to make the string sorted Since the answer can be too large return it modulo Example Input s cba Output Explanation The simulation goes as follows Operation i j Swap s and s to get s cab then reverse the suffix starting at Now s cab Operation i j Swap s and s to get s bac then reverse the suffix starting at Now s bca Operation i j Swap s and s to get s bac then reverse the suffix starting at Now s bac Operation i j Swap s and s to get s abc then reverse the suffix starting at Now s acb Operation i j Swap s and s to get s abc then reverse the suffix starting at Now s abc Example Input s aabaa Output Explanation The simulation goes as follows Operation i j Swap s and s to get s aaaab then reverse the substring starting at Now s aaaba Operation i j Swap s and s to get s aaaab then reverse the substring starting at Now s aaaab Constraints s length s consists only of lowercase English letters
project employees i SQL Schema Table Project Column Name Type int int is the primary key of this table is a foreign key to Employee table Each row of this table indicates that the employee with is working on the project with Table Employee Column Name Type int name varchar int is the primary key of this table It s guaranteed that is not NULL Each row of this table contains information about one employee Write an SQL query that reports the average experience years of all the employees for each project rounded to digits Return the result table in any order The query result format is in the following example Example Input Project table Employee table name Khaled Ali John Doe Output Explanation The average experience years for the first project is and for the second project is
exclusive time of functions On a single threaded CPU we execute a program containing n functions Each function has a unique ID between and n Function calls are stored in a call stack when a function call starts its ID is pushed onto the stack and when a function call ends its ID is popped off the stack The function whose ID is at the top of the stack is the current function being executed Each time a function starts or ends we write a log with the ID whether it started or ended and the timestamp You are given a list logs where logs i represents the ith log message formatted as a string start end timestamp For example start means a function call with function ID started at the beginning of timestamp and end means a function call with function ID ended at the end of timestamp Note that a function can be called multiple times possibly recursively A function s exclusive time is the sum of execution times for all function calls in the program For example if a function is called twice one call executing for time units and another call executing for time unit the exclusive time is Return the exclusive time of each function in an array where the value at the ith index represents the exclusive time for the function with ID i Example Input n logs start start end end Output Explanation Function starts at the beginning of time then it executes for units of time and reaches the end of time Function starts at the beginning of time executes for units of time and ends at the end of time Function resumes execution at the beginning of time and executes for unit of time So function spends units of total time executing and function spends units of total time executing Example Input n logs start start end start end end Output Explanation Function starts at the beginning of time executes for units of time and recursively calls itself Function recursive call starts at the beginning of time and executes for units of time Function initial call resumes execution then immediately calls itself again Function recursive call starts at the beginning of time and executes for unit of time Function initial call resumes execution at the beginning of time and executes for unit of time So function spends units of total time executing Example Input n logs start start end start end end Output Explanation Function starts at the beginning of time executes for units of time and recursively calls itself Function recursive call starts at the beginning of time and executes for units of time Function initial call resumes execution then immediately calls function Function starts at the beginning of time executes unit of time and ends at the end of time Function resumes execution at the beginning of time and executes for units of time So function spends units of total time executing and function spends unit of total time executing Constraints n logs length n timestamp No two start events will happen at the same timestamp No two end events will happen at the same timestamp Each function has an end log for each start log
largest substring between two equal characters Given a string s return the length of the longest substring between two equal characters excluding the two characters If there is no such substring return A substring is a contiguous sequence of characters within a string Example Input s aa Output Explanation The optimal substring here is an empty substring between the two a s Example Input s abca Output Explanation The optimal substring here is bc Example Input s cbzxy Output Explanation There are no characters that appear twice in s Constraints s length s contains only lowercase English letters
score after flipping matrix You are given an m x n binary matrix grid A move consists of choosing any row or column and toggling each value in that row or column i e changing all s to s and all s to s Every row of the matrix is interpreted as a binary number and the score of the matrix is the sum of these numbers Return the highest possible score after making any number of moves including zero moves Example Input grid Output Explanation Example Input grid Output Constraints m grid length n grid i length m n grid i j is either or
find the middle index in array Given a indexed integer array nums find the leftmost middleIndex i e the smallest amongst all the possible ones A middleIndex is an index where nums nums nums middleIndex nums middleIndex nums middleIndex nums nums length If middleIndex the left side sum is considered to be Similarly if middleIndex nums length the right side sum is considered to be Return the leftmost middleIndex that satisfies the condition or if there is no such index Example Input nums Output Explanation The sum of the numbers before index is The sum of the numbers after index is Example Input nums Output Explanation The sum of the numbers before index is The sum of the numbers after index is Example Input nums Output Explanation There is no valid middleIndex Constraints nums length nums i Note This question is the same as https leetcode com problems find pivot index
longest subarray with maximum bitwise and You are given an integer array nums of size n Consider a non empty subarray from nums that has the maximum possible bitwise AND In other words let k be the maximum value of the bitwise AND of any subarray of nums Then only subarrays with a bitwise AND equal to k should be considered Return the length of the longest such subarray The bitwise AND of an array is the bitwise AND of all the numbers in it A subarray is a contiguous sequence of elements within an array Example Input nums Output Explanation The maximum possible bitwise AND of a subarray is The longest subarray with that value is so we return Example Input nums Output Explanation The maximum possible bitwise AND of a subarray is The longest subarray with that value is so we return Constraints nums length nums i
edit distance Given two strings and return the minimum number of operations required to convert to You have the following three operations permitted on a word Insert a character Delete a character Replace a character Example Input horse ros Output Explanation horse rorse replace h with r rorse rose remove r rose ros remove e Example Input intention execution Output Explanation intention inention remove t inention enention replace i with e enention exention replace n with x exention exection replace n with c exection execution insert u Constraints length length and consist of lowercase English letters
pairs of songs with total durations divisible by 60 You are given a list of songs where the ith song has a duration of time i seconds Return the number of pairs of songs for which their total duration in seconds is divisible by Formally we want the number of indices i j such that i j with time i time j Example Input time Output Explanation Three pairs have a total duration divisible by time time total duration time time total duration time time total duration Example Input time Output Explanation All three pairs have a total duration of which is divisible by Constraints time length time i
unique morse code words International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes as follows a maps to b maps to c maps to and so on For convenience the full table for the letters of the English alphabet is given below Given an array of strings words where each word can be written as a concatenation of the Morse code of each letter For example cab can be written as which is the concatenation of and We will call such a concatenation the transformation of a word Return the number of different transformations among all words we have Example Input words gin zen gig msg Output Explanation The transformation of each word is gin zen gig msg There are different transformations and Example Input words a Output Constraints words length words i length words i consists of lowercase English letters
accounts merge Given a list of accounts where each element accounts i is a list of strings where the first element accounts i is a name and the rest of the elements are emails representing emails of the account Now we would like to merge these accounts Two accounts definitely belong to the same person if there is some common email to both accounts Note that even if two accounts have the same name they may belong to different people as people could have the same name A person can have any number of accounts initially but all of their accounts definitely have the same name After merging the accounts return the accounts in the following format the first element of each account is the name and the rest of the elements are emails in sorted order The accounts themselves can be returned in any order Example Input accounts John johnsmith mail com mail com John johnsmith mail com mail com Mary mary mail com John johnnybravo mail com Output John mail com mail com johnsmith mail com Mary mary mail com John johnnybravo mail com Explanation The first and second John s are the same person as they have the common email johnsmith mail com The third John and Mary are different people as none of their email addresses are used by other accounts We could return these lists in any order for example the answer Mary mary mail com John johnnybravo mail com John mail com mail com johnsmith mail com would still be accepted Example Input accounts Gabe m co m co m co Kevin m co m co m co Ethan m co m co m co Hanzo m co m co m co Fern m co m co m co Output Ethan m co m co m co Gabe m co m co m co Hanzo m co m co m co Kevin m co m co m co Fern m co m co m co Constraints accounts length accounts i length accounts i j length accounts i consists of English letters accounts i j for j is a valid email
largest palindromic number You are given a string num consisting of digits only Return the largest palindromic integer in the form of a string that can be formed using digits taken from num It should not contain leading zeroes Notes You do not need to use all the digits of num but you must use at least one digit The digits can be reordered Example Input num Output Explanation Use the digits from to form the palindromic integer It can be shown that is the largest palindromic integer that can be formed Example Input num Output Explanation It can be shown that is the largest palindromic integer that can be formed Note that the integer returned should not contain leading zeroes Constraints num length num consists of digits
unique binary search trees ii Given an integer n return all the structurally unique BST s binary search trees which has exactly n nodes of unique values from to n Return the answer in any order Example Input n Output null null null null null null Example Input n Output Constraints n
minimum number of k consecutive bit flips You are given a binary array nums and an integer k A k bit flip is choosing a subarray of length k from nums and simultaneously changing every in the subarray to and every in the subarray to Return the minimum number of k bit flips required so that there is no in the array If it is not possible return A subarray is a contiguous part of an array Example Input nums k Output Explanation Flip nums then flip nums Example Input nums k Output Explanation No matter how we flip subarrays of size we cannot make the array become Example Input nums k Output Explanation Flip nums nums nums nums becomes Flip nums nums nums nums becomes Flip nums nums nums nums becomes Constraints nums length k nums length
escape a large maze There is a million by million grid on an XY plane and the coordinates of each grid square are x y We start at the source sx sy square and want to reach the target tx ty square There is also an array of blocked squares where each blocked i xi yi represents a blocked square with coordinates xi yi Each move we can walk one square north east south or west if the square is not in the array of blocked squares We are also not allowed to walk outside of the grid Return true if and only if it is possible to reach the target square from the source square through a sequence of valid moves Example Input blocked source target Output false Explanation The target square is inaccessible starting from the source square because we cannot move We cannot move north or east because those squares are blocked We cannot move south or west because we cannot go outside of the grid Example Input blocked source target Output true Explanation Because there are no blocked cells it is possible to reach the target square Constraints blocked length blocked i length xi yi source length target length sx sy tx ty source target It is guaranteed that source and target are not blocked
process tasks using servers You are given two indexed integer arrays servers and tasks of lengths n and m respectively servers i is the weight of the ith server and tasks j is the time needed to process the jth task in seconds Tasks are assigned to the servers using a task queue Initially all servers are free and the queue is empty At second j the jth task is inserted into the queue starting with the task being inserted at second As long as there are free servers and the queue is not empty the task in the front of the queue will be assigned to a free server with the smallest weight and in case of a tie it is assigned to a free server with the smallest index If there are no free servers and the queue is not empty we wait until a server becomes free and immediately assign the next task If multiple servers become free at the same time then multiple tasks from the queue will be assigned in order of insertion following the weight and index priorities above A server that is assigned task j at second t will be free again at second t tasks j Build an array ans of length m where ans j is the index of the server the jth task will be assigned to Return the array ans Example Input servers tasks Output Explanation Events in chronological order go as follows At second task is added and processed using server until second At second server becomes free Task is added and processed using server until second At second task is added and processed using server until second At second server becomes free Task is added and processed using server until second At second task is added and processed using server until second At second all servers become free Task is added and processed using server until second Example Input servers tasks Output Explanation Events in chronological order go as follows At second task is added and processed using server until second At second task is added and processed using server until second At second servers and become free Task is added and processed using server until second At second task is added and processed using server until second At second server becomes free Task is added and processed using server until second At second task is added and processed using server until second At second task is added and processed using server until second Constraints servers length n tasks length m n m servers i tasks j
regular expression matching Given an input string s and a pattern p implement regular expression matching with support for and where Matches any single character Matches zero or more of the preceding element The matching should cover the entire input string not partial Example Input s aa p a Output false Explanation a does not match the entire string aa Example Input s aa p a Output true Explanation means zero or more of the preceding element a Therefore by repeating a once it becomes aa Example Input s ab p Output true Explanation means zero or more of any character Constraints s length p length s contains only lowercase English letters p contains only lowercase English letters and It is guaranteed for each appearance of the character there will be a previous valid character to match
longest subsequence repeated k times You are given a string s of length n and an integer k You are tasked to find the longest subsequence repeated k times in string s A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters A subsequence seq is repeated k times in the string s if seq k is a subsequence of s where seq k represents a string constructed by concatenating seq k times For example bba is repeated times in the string bababcba because the string bbabba constructed by concatenating bba times is a subsequence of the string bababcba Return the longest subsequence repeated k times in string s If multiple such subsequences are found return the lexicographically largest one If there is no such subsequence return an empty string Example Input s letsleetcode k Output let Explanation There are two longest subsequences repeated times let and ete let is the lexicographically largest one Example Input s bb k Output b Explanation The longest subsequence repeated times is b Example Input s ab k Output Explanation There is no subsequence repeated times Empty string is returned Constraints n s length n k n k s consists of lowercase English letters
word ladder A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord sk such that Every adjacent pair of words differs by a single letter Every si for i k is in wordList Note that beginWord does not need to be in wordList sk endWord Given two words beginWord and endWord and a dictionary wordList return the number of words in the shortest transformation sequence from beginWord to endWord or if no such sequence exists Example Input beginWord hit endWord cog wordList hot dot dog lot log cog Output Explanation One shortest transformation sequence is hit hot dot dog cog which is words long Example Input beginWord hit endWord cog wordList hot dot dog lot log Output Explanation The endWord cog is not in wordList therefore there is no valid transformation sequence Constraints beginWord length endWord length beginWord length wordList length wordList i length beginWord length beginWord endWord and wordList i consist of lowercase English letters beginWord endWord All the words in wordList are unique
merge two binary trees You are given two binary trees and Imagine that when you put one of them to cover the other some nodes of the two trees are overlapped while the others are not You need to merge the two trees into a new binary tree The merge rule is that if two nodes overlap then sum node values up as the new value of the merged node Otherwise the NOT null node will be used as the node of the new tree Return the merged tree Note The merging process must start from the root nodes of both trees Example Input null null Output null Example Input Output Constraints The number of nodes in both trees is in the range Node val
find latest group of size m Given an array arr that represents a permutation of numbers from to n You have a binary string of size n that initially has all its bits set to zero At each step i assuming both the binary string and arr are indexed from to n the bit at position arr i is set to You are also given an integer m Find the latest step at which there exists a group of ones of length m A group of ones is a contiguous substring of s such that it cannot be extended in either direction Return the latest step at which there exists a group of ones of length exactly m If no such group exists return Example Input arr m Output Explanation Step groups Step groups Step groups Step groups Step groups The latest step at which there exists a group of size is step Example Input arr m Output Explanation Step groups Step groups Step groups Step groups Step groups No group of size exists during any step Constraints n arr length m n arr i n All integers in arr are distinct
reverse vowels of a string Given a string s reverse only all the vowels in the string and return it The vowels are a e i o and u and they can appear in both lower and upper cases more than once Example Input s hello Output holle Example Input s leetcode Output leotcede Constraints s length s consist of printable ASCII characters
minimum area rectangle ii You are given an array of points in the X Y plane points where points i xi yi Return the minimum area of any rectangle formed from these points with sides not necessarily parallel to the X and Y axes If there is not any such rectangle return Answers within of the actual answer will be accepted Example Input points Output Explanation The minimum area rectangle occurs at with an area of Example Input points Output Explanation The minimum area rectangle occurs at with an area of Example Input points Output Explanation There is no possible rectangle to form from these points Constraints points length points i length xi yi All the given points are unique
minimum depth of binary tree Given a binary tree find its minimum depth The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node Note A leaf is a node with no children Example Input root null null Output Example Input root null null null null Output Constraints The number of nodes in the tree is in the range Node val
find first palindromic string in the array Given an array of strings words return the first palindromic string in the array If there is no such string return an empty string A string is palindromic if it reads the same forward and backward Example Input words abc car ada racecar cool Output ada Explanation The first string that is palindromic is ada Note that racecar is also palindromic but it is not the first Example Input words notapalindrome racecar Output racecar Explanation The first and only string that is palindromic is racecar Example Input words def ghi Output Explanation There are no palindromic strings so the empty string is returned Constraints words length words i length words i consists only of lowercase English letters
rectangle area ii You are given a array of axis aligned rectangles Each rectangle i denotes the ith rectangle where are the coordinates of the bottom left corner and are the coordinates of the top right corner Calculate the total area covered by all rectangles in the plane Any area covered by two or more rectangles should only be counted once Return the total area Since the answer may be too large return it modulo Example Input rectangles Output Explanation A total area of is covered by all three rectangles as illustrated in the picture From to the green and red rectangles overlap From to all three rectangles overlap Example Input rectangles Output Explanation The answer is modulo which is Constraints rectangles length rectanges i length
search in a binary search tree You are given the root of a binary search tree BST and an integer val Find the node in the BST that the node s value equals val and return the subtree rooted with that node If such a node does not exist return null Example Input root val Output Example Input root val Output Constraints The number of nodes in the tree is in the range Node val root is a binary search tree val
unique paths ii You are given an m x n integer array grid There is a robot initially located at the top left corner i e grid The robot tries to move to the bottom right corner i e grid m n The robot can only move either down or right at any point in time An obstacle and space are marked as or respectively in grid A path that the robot takes cannot include any square that is an obstacle Return the number of possible unique paths that the robot can take to reach the bottom right corner The testcases are generated so that the answer will be less than or equal to Example Input obstacleGrid Output Explanation There is one obstacle in the middle of the grid above There are two ways to reach the bottom right corner Right Right Down Down Down Down Right Right Example Input obstacleGrid Output Constraints m obstacleGrid length n obstacleGrid i length m n obstacleGrid i j is or
number of sub-arrays of size k and average greater than or equal to threshold Given an array of integers arr and two integers k and threshold return the number of sub arrays of size k and average greater than or equal to threshold Example Input arr k threshold Output Explanation Sub arrays and have averages and respectively All other sub arrays of size have averages less than the threshold Example Input arr k threshold Output Explanation The first sub arrays of size have averages greater than Note that averages are not integers Constraints arr length arr i k arr length threshold
longest well-performing interval We are given hours a list of the number of hours worked per day for a given employee A day is considered to be a tiring day if and only if the number of hours worked is strictly greater than A well performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non tiring days Return the length of the longest well performing interval Example Input hours Output Explanation The longest well performing interval is Example Input hours Output Constraints hours length hours i
categorize box according to criteria Given four integers length width height and mass representing the dimensions and mass of a box respectively return a string representing the category of the box The box is Bulky if Any of the dimensions of the box is greater or equal to Or the volume of the box is greater or equal to If the mass of the box is greater or equal to it is Heavy If the box is both Bulky and Heavy then its category is Both If the box is neither Bulky nor Heavy then its category is Neither If the box is Bulky but not Heavy then its category is Bulky If the box is Heavy but not Bulky then its category is Heavy Note that the volume of the box is the product of its length width and height Example Input length width height mass Output Heavy Explanation None of the dimensions of the box is greater or equal to Its volume So it cannot be categorized as Bulky However mass so the box is Heavy Since the box is not Bulky but Heavy we return Heavy Example Input length width height mass Output Neither Explanation None of the dimensions of the box is greater or equal to Its volume So it cannot be categorized as Bulky Its mass is also less than so it cannot be categorized as Heavy either Since its neither of the two above categories we return Neither Constraints length width height mass
minimum suffix flips You are given a indexed binary string target of length n You have another binary string s of length n that is initially set to all zeros You want to make s equal to target In one operation you can pick an index i where i n and flip all bits in the inclusive range i n Flip means changing to and to Return the minimum number of operations needed to make s equal to target Example Input target Output Explanation Initially s Choose index i Choose index i Choose index i We need at least flip operations to form target Example Input target Output Explanation Initially s Choose index i Choose index i Choose index i We need at least flip operations to form target Example Input target Output Explanation We do not need any operations since the initial s already equals target Constraints n target length n target i is either or
count subtrees with max distance between cities There are n cities numbered from to n You are given an array edges of size n where edges i ui vi represents a bidirectional edge between cities ui and vi There exists a unique path between each pair of cities In other words the cities form a tree A subtree is a subset of cities where every city is reachable from every other city in the subset where the path between each pair passes through only the cities from the subset Two subtrees are different if there is a city in one subtree that is not present in the other For each d from to n find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to d Return an array of size n where the dth element indexed is the number of subtrees in which the maximum distance between any two cities is equal to d Notice that the distance between the two cities is the number of edges in the path between them Example Input n edges Output Explanation The subtrees with subsets and have a max distance of The subtrees with subsets and have a max distance of No subtree has two nodes where the max distance between them is Example Input n edges Output Example Input n edges Output Constraints n edges length n edges i length ui vi n All pairs ui vi are distinct
redundant connection In this problem a tree is an undirected graph that is connected and has no cycles You are given a graph that started as a tree with n nodes labeled from to n with one additional edge added The added edge has two different vertices chosen from to n and was not an edge that already existed The graph is represented as an array edges of length n where edges i ai bi indicates that there is an edge between nodes ai and bi in the graph Return an edge that can be removed so that the resulting graph is a tree of n nodes If there are multiple answers return the answer that occurs last in the input Example Input edges Output Example Input edges Output Constraints n edges length n edges i length ai bi edges length ai bi There are no repeated edges The given graph is connected
longest binary subsequence less than or equal to k You are given a binary string s and a positive integer k Return the length of the longest subsequence of s that makes up a binary number less than or equal to k Note The subsequence can contain leading zeroes The empty string is considered to be equal to A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters Example Input s k Output Explanation The longest subsequence of s that makes up a binary number less than or equal to is as this number is equal to in decimal Note that and are also possible which are equal to and in decimal respectively The length of this subsequence is so is returned Example Input s k Output Explanation is the longest subsequence of s that makes up a binary number less than or equal to as this number is equal to in decimal The length of this subsequence is so is returned Constraints s length s i is either or k
binary gap Given a positive integer n find and return the longest distance between any two adjacent s in the binary representation of n If there are no two adjacent s return Two s are adjacent if there are only s separating them possibly no s The distance between two s is the absolute difference between their bit positions For example the two s in have a distance of Example Input n Output Explanation in binary is The first adjacent pair of s is with a distance of The second adjacent pair of s is with a distance of The answer is the largest of these two distances which is Note that is not a valid pair since there is a separating the two s underlined Example Input n Output Explanation in binary is There are not any adjacent pairs of s in the binary representation of so we return Example Input n Output Explanation in binary is Constraints n
throne inheritance A kingdom consists of a king his children his grandchildren and so on Every once in a while someone in the family dies or a child is born The kingdom has a well defined order of inheritance that consists of the king as the first member Let s define the recursive function Successor x curOrder which given a person x and the inheritance order so far returns who should be the next person after x in the order of inheritance Successor x curOrder if x has no children or all of x s children are in curOrder if x is the king return null else return Successor x s parent curOrder else return x s oldest child who s not in curOrder For example assume we have a kingdom that consists of the king his children Alice and Bob Alice is older than Bob and finally Alice s son Jack In the beginning curOrder will be king Calling Successor king curOrder will return Alice so we append to curOrder to get king Alice Calling Successor Alice curOrder will return Jack so we append to curOrder to get king Alice Jack Calling Successor Jack curOrder will return Bob so we append to curOrder to get king Alice Jack Bob Calling Successor Bob curOrder will return null Thus the order of inheritance will be king Alice Jack Bob Using the above function we can always obtain a unique order of inheritance Implement the ThroneInheritance class ThroneInheritance string kingName Initializes an object of the ThroneInheritance class The name of the king is given as part of the constructor void birth string parentName string childName Indicates that parentName gave birth to childName void death string name Indicates the death of name The death of the person doesn t affect the Successor function nor the current inheritance order You can treat it as just marking the person as dead string getInheritanceOrder Returns a list representing the current order of inheritance excluding dead people Example Input ThroneInheritance birth birth birth birth birth birth getInheritanceOrder death getInheritanceOrder king king andy king bob king catherine andy matthew bob alex bob asha null bob null Output null null null null null null null king andy matthew bob alex asha catherine null king andy matthew alex asha catherine Explanation ThroneInheritance t new ThroneInheritance king order king t birth king andy order king andy t birth king bob order king andy bob t birth king catherine order king andy bob catherine t birth andy matthew order king andy matthew bob catherine t birth bob alex order king andy matthew bob alex catherine t birth bob asha order king andy matthew bob alex asha catherine t getInheritanceOrder return king andy matthew bob alex asha catherine t death bob order king andy matthew bob alex asha catherine t getInheritanceOrder return king andy matthew alex asha catherine Constraints kingName length parentName length childName length name length kingName parentName childName and name consist of lowercase English letters only All arguments childName and kingName are distinct All name arguments of death will be passed to either the constructor or as childName to birth first For each call to birth parentName childName it is guaranteed that parentName is alive At most calls will be made to birth and death At most calls will be made to getInheritanceOrder
subarray sums divisible by k Given an integer array nums and an integer k return the number of non empty subarrays that have a sum divisible by k A subarray is a contiguous part of an array Example Input nums k Output Explanation There are subarrays with a sum divisible by k Example Input nums k Output Constraints nums length nums i k
find n unique integers sum up to zero Given an integer n return any array containing n unique integers such that they add up to Example Input n Output Explanation These arrays also are accepted Example Input n Output Example Input n Output Constraints n
battleships in a board Given an m x n matrix board where each cell is a battleship X or empty return the number of the battleships on board Battleships can only be placed horizontally or vertically on board In other words they can only be made of the shape x k row k columns or k x k rows column where k can be of any size At least one horizontal or vertical cell separates between two battleships i e there are no adjacent battleships Example Input board X X X X Output Example Input board Output Constraints m board length n board i length m n board i j is either or X Follow up Could you do it in one pass using only O extra memory and without modifying the values board
largest perimeter triangle Given an integer array nums return the largest perimeter of a triangle with a non zero area formed from three of these lengths If it is impossible to form any triangle of a non zero area return Example Input nums Output Explanation You can form a triangle with three side lengths and Example Input nums Output Explanation You cannot use the side lengths and to form a triangle You cannot use the side lengths and to form a triangle You cannot use the side lengths and to form a triangle As we cannot use any three side lengths to form a triangle of non zero area we return Constraints nums length nums i
longer contiguous segments of ones than zeros Given a binary string s return true if the longest contiguous segment of s is strictly longer than the longest contiguous segment of s in s or return false otherwise For example in s the longest continuous segment of has length and the longest continuous segment of has length Note that if there are no s then the longest continuous segment of s is considered to have a length The same applies if there is no s Example Input s Output true Explanation The longest contiguous segment of has length The longest contiguous segment of has length The segment of is longer so return true Example Input s Output false Explanation The longest contiguous segment of has length The longest contiguous segment of has length The segment of is not longer so return false Example Input s Output false Explanation The longest contiguous segment of has length The longest contiguous segment of has length The segment of is not longer so return false Constraints s length s i is either or
design hashset Design a HashSet without using any built in hash table libraries Implement MyHashSet class void add key Inserts the value key into the HashSet bool contains key Returns whether the value key exists in the HashSet or not void remove key Removes the value key in the HashSet If key does not exist in the HashSet do nothing Example Input MyHashSet add add contains contains add contains remove contains Output null null null true false null true null false Explanation MyHashSet myHashSet new MyHashSet myHashSet add set myHashSet add set myHashSet contains return True myHashSet contains return False not found myHashSet add set myHashSet contains return True myHashSet remove set myHashSet contains return False already removed Constraints key At most calls will be made to add remove and contains
number of ways to stay in the same place after some steps You have a pointer at index in an array of size arrLen At each step you can move position to the left position to the right in the array or stay in the same place The pointer should not be placed outside the array at any time Given two integers steps and arrLen return the number of ways such that your pointer is still at index after exactly steps steps Since the answer may be too large return it modulo Example Input steps arrLen Output Explanation There are differents ways to stay at index after steps Right Left Stay Stay Right Left Right Stay Left Stay Stay Stay Example Input steps arrLen Output Explanation There are differents ways to stay at index after steps Right Left Stay Stay Example Input steps arrLen Output Constraints steps arrLen
contiguous array Given a binary array nums return the maximum length of a contiguous subarray with an equal number of and Example Input nums Output Explanation is the longest contiguous subarray with an equal number of and Example Input nums Output Explanation or is a longest contiguous subarray with equal number of and Constraints nums length nums i is either or
find the longest substring containing vowels in even counts Given the string s return the size of the longest substring containing each vowel an even number of times That is a e i o and u must appear an even number of times Example Input s eleetminicoworoep Output Explanation The longest substring is leetminicowor which contains two each of the vowels e i and o and zero of the vowels a and u Example Input s leetcodeisgreat Output Explanation The longest substring is leetc which contains two e s Example Input s bcbcbc Output Explanation In this case the given string bcbcbc is the longest because all vowels a e i o and u appear zero times Constraints s length x s contains only lowercase English letters
minimum cost to make all characters equal You are given a indexed binary string s of length n on which you can apply two types of operations Choose an index i and invert all characters from index to index i both inclusive with a cost of i Choose an index i and invert all characters from index i to index n both inclusive with a cost of n i Return the minimum cost to make all characters of the string equal Invert a character means if its value is it becomes and vice versa Example Input s Output Explanation Apply the second operation with i to obtain s for a cost of It can be shown that is the minimum cost to make all characters equal Example Input s Output Explanation Apply the first operation with i to obtain s for a cost of Apply the first operation with i to obtain s for a cost of Apply the first operation with i to obtain s for a cost of Apply the second operation with i to obtain s for a cost of Apply the second operation with i to obtain s for a cost of The total cost to make all characters equal is It can be shown that is the minimum cost to make all characters equal Constraints s length n s i is either or
minimum cost to make array equal You are given two indexed arrays nums and cost consisting each of n positive integers You can do the following operation any number of times Increase or decrease any element of the array nums by The cost of doing one operation on the ith element is cost i Return the minimum total cost such that all the elements of the array nums become equal Example Input nums cost Output Explanation We can make all the elements equal to in the following way Increase the element one time The cost is Decrease the element one time The cost is Decrease the element three times The cost is The total cost is It can be shown that we cannot make the array equal with a smaller cost Example Input nums cost Output Explanation All the elements are already equal so no operations are needed Constraints n nums length cost length n nums i cost i
number of paths with max score You are given a square board of characters You can move on the board starting at the bottom right square marked with the character S You need to reach the top left square marked with the character E The rest of the squares are labeled either with a numeric character or with an obstacle X In one move you can go up left or up left diagonally only if there is no obstacle there Return a list of two integers the first integer is the maximum sum of numeric characters you can collect and the second is the number of such paths that you can take to get that maximum sum taken modulo In case there is no path return Example Input board Output Example Input board Output Example Input board XXX Output Constraints board length board i length
event emitter Design an EventEmitter class This interface is similar but with some differences to the one found in Node js or the Event Target interface of the DOM The EventEmitter should allow for subscribing to events and emitting them Your EventEmitter class should have the following two methods subscribe This method takes in two arguments the name of an event as a string and a callback function This callback function will later be called when the event is emitted An event should be able to have multiple listeners for the same event When emitting an event with multiple callbacks each should be called in the order in which they were subscribed An array of results should be returned You can assume no callbacks passed to subscribe are referentially identical The subscribe method should also return an object with an unsubscribe method that enables the user to unsubscribe When it is called the callback should be removed from the list of subscriptions and undefined should be returned emit This method takes in two arguments the name of an event as a string and an optional array of arguments that will be passed to the callback s If there are no callbacks subscribed to the given event return an empty array Otherwise return an array of the results of all callback calls in the order they were subscribed Example Input actions EventEmitter emit subscribe subscribe emit values firstEvent function return firstEvent function return firstEvent Output emitted subscribed subscribed emitted Explanation const emitter new EventEmitter emitter emit firstEvent no callback are subscribed yet emitter subscribe firstEvent function return emitter subscribe firstEvent function return emitter emit firstEvent returns the output of and Example Input actions EventEmitter subscribe emit emit values firstEvent function args return args join firstEvent firstEvent Output subscribed emitted emitted Explanation Note that the emit method should be able to accept an OPTIONAL array of arguents const emitter new EventEmitter emitter subscribe firstEvent function args return args join emitter emit firstEvent emitter emit firstEvent Example Input actions EventEmitter subscribe emit unsubscribe emit values firstEvent args args join firstEvent firstEvent Output subscribed emitted unsubscribed emitted Explanation const emitter new EventEmitter const sub emitter subscribe firstEvent args args join emitter emit firstEvent sub unsubscribe undefined emitter emit firstEvent there are no subscriptions Constraints actions length values length actions length All test cases are valid e g you don t need to handle scenarios when unsubscribing from a non existing subscription There are only different actions EventEmitter emit subscribe and unsubscribe The EventEmitter action doesn t take any arguments The emit action takes between either or arguments The first argument is the name of the event we want to emit and the argument is passed to the callback functions The subscribe action takes arguments where the first one is the event name and the second is the callback function The unsubscribe action takes one argument which is the indexed order of the subscription made before
count vowel strings in ranges You are given a indexed array of strings words and a array of integers queries Each query queries i li ri asks us to find the number of strings present in the range li to ri both inclusive of words that start and end with a vowel Return an array ans of size queries length where ans i is the answer to the ith query Note that the vowel letters are a e i o and u Example Input words aba bcb ece aa e queries Output Explanation The strings starting and ending with a vowel are aba ece aa and e The answer to the query is strings aba and ece to query is strings ece aa e to query is We return Example Input words a e i queries Output Explanation Every string satisfies the conditions so we return Constraints words length words i length words i consists only of lowercase English letters sum words i length queries length li ri words length
distance between bus stops A bus has n stops numbered from to n that form a circle We know the distance between all pairs of neighboring stops where distance i is the distance between the stops number i and i n The bus goes along both directions i e clockwise and counterclockwise Return the shortest distance between the given start and destination stops Example Input distance start destination Output Explanation Distance between and is or minimum is Example Input distance start destination Output Explanation Distance between and is or minimum is Example Input distance start destination Output Explanation Distance between and is or minimum is Constraints n distance length n start destination n distance i
maximum population year You are given a integer array logs where each logs i birthi deathi indicates the birth and death years of the ith person The population of some year x is the number of people alive during that year The ith person is counted in year x s population if x is in the inclusive range birthi deathi Note that the person is not counted in the year that they die Return the earliest year with the maximum population Example Input logs Output Explanation The maximum population is and is the earliest year with this population Example Input logs Output Explanation The maximum population is and it had happened in years and The earlier year between them is Constraints logs length birthi deathi
count the number of vowel strings in range You are given a indexed array of string words and two integers left and right A string is called a vowel string if it starts with a vowel character and ends with a vowel character where vowel characters are a e i o and u Return the number of vowel strings words i where i belongs to the inclusive range left right Example Input words are amy u left right Output Explanation are is a vowel string because it starts with a and ends with e amy is not a vowel string because it does not end with a vowel u is a vowel string because it starts with u and ends with u The number of vowel strings in the mentioned range is Example Input words hey aeo mu ooo artro left right Output Explanation aeo is a vowel string because it starts with a and ends with o mu is not a vowel string because it does not start with a vowel ooo is a vowel string because it starts with o and ends with o artro is a vowel string because it starts with a and ends with o The number of vowel strings in the mentioned range is Constraints words length words i length words i consists of only lowercase English letters left right words length
build a matrix with conditions You are given a positive integer k You are also given a integer array rowConditions of size n where rowConditions i abovei belowi and a integer array colConditions of size m where colConditions i lefti righti The two arrays contain integers from to k You have to build a k x k matrix that contains each of the numbers from to k exactly once The remaining cells should have the value The matrix should also satisfy the following conditions The number abovei should appear in a row that is strictly above the row at which the number belowi appears for all i from to n The number lefti should appear in a column that is strictly left of the column at which the number righti appears for all i from to m Return any matrix that satisfies the conditions If no answer exists return an empty matrix Example Input k rowConditions colConditions Output Explanation The diagram above shows a valid example of a matrix that satisfies all the conditions The row conditions are the following Number is in row and number is in row so is above in the matrix Number is in row and number is in row so is above in the matrix The column conditions are the following Number is in column and number is in column so is left of in the matrix Number is in column and number is in column so is left of in the matrix Note that there may be multiple correct answers Example Input k rowConditions colConditions Output Explanation From the first two conditions has to be below but the third conditions needs to be above to be satisfied No matrix can satisfy all the conditions so we return the empty matrix Constraints k rowConditions length colConditions length rowConditions i length colConditions i length abovei belowi lefti righti k abovei belowi lefti righti
maximum number of ways to partition an array You are given a indexed integer array nums of length n The number of ways to partition nums is the number of pivot indices that satisfy both conditions pivot n nums nums nums pivot nums pivot nums pivot nums n You are also given an integer k You can choose to change the value of one element of nums to k or to leave the array unchanged Return the maximum possible number of ways to partition nums to satisfy both conditions after changing at most one element Example Input nums k Output Explanation One optimal approach is to change nums to k The array becomes There is one way to partition the array For pivot we have the partition Example Input nums k Output Explanation The optimal approach is to leave the array unchanged There are two ways to partition the array For pivot we have the partition For pivot we have the partition Example Input nums k Output Explanation One optimal approach is to change nums to k The array becomes There are four ways to partition the array Constraints n nums length n k nums i
string compression ii Run length encoding is a string compression method that works by replacing consecutive identical characters repeated or more times with the concatenation of the character and the number marking the count of the characters length of the run For example to compress the string aabccc we replace aa by and replace ccc by Thus the compressed string becomes Notice that in this problem we are not adding after single characters Given a string s and an integer k You need to delete at most k characters from s such that the run length encoded version of s has minimum length Find the minimum length of the run length encoded version of s after deleting at most k characters Example Input s aaabcccd k Output Explanation Compressing s without deleting anything will give us of length Deleting any of the characters a or c would at most decrease the length of the compressed string to for instance delete a then we will have s abcccd which compressed is Therefore the optimal way is to delete b and d then the compressed version of s will be of length Example Input s aabbaa k Output Explanation If we delete both b characters the resulting compressed string would be of length Example Input s aaaaaaaaaaa k Output Explanation Since k is zero we cannot delete anything The compressed string is of length Constraints s length k s length s contains only lowercase English letters
search in rotated sorted array ii There is an integer array nums sorted in non decreasing order not necessarily with distinct values Before being passed to your function nums is rotated at an unknown pivot index k k nums length such that the resulting array is nums k nums k nums n nums nums nums k indexed For example might be rotated at pivot index and become Given the array nums after the rotation and an integer target return true if target is in nums or false if it is not in nums You must decrease the overall operation steps as much as possible Example Input nums target Output true Example Input nums target Output false Constraints nums length nums i nums is guaranteed to be rotated at some pivot target Follow up This problem is similar to Search in Rotated Sorted Array but nums may contain duplicates Would this affect the runtime complexity How and why
second minimum node in a binary tree Given a non empty special binary tree consisting of nodes with the non negative value where each node in this tree has exactly two or zero sub node If the node has two sub nodes then this node s value is the smaller value among its two sub nodes More formally the property root val min root left val root right val always holds Given such a binary tree you need to output the second minimum value in the set made of all the nodes value in the whole tree If no such second minimum value exists output instead Example Input root null null Output Explanation The smallest value is the second smallest value is Example Input root Output Explanation The smallest value is but there isn t any second smallest value Constraints The number of nodes in the tree is in the range Node val root val min root left val root right val for each internal node of the tree
binary tree level order traversal ii Given the root of a binary tree return the bottom up level order traversal of its nodes values i e from left to right level by level from leaf to root Example Input root null null Output Example Input root Output Example Input root Output Constraints The number of nodes in the tree is in the range Node val
design hashmap Design a HashMap without using any built in hash table libraries Implement the MyHashMap class MyHashMap initializes the object with an empty map void put int key int value inserts a key value pair into the HashMap If the key already exists in the map update the corresponding value int get int key returns the value to which the specified key is mapped or if this map contains no mapping for the key void remove key removes the key and its corresponding value if the map contains the mapping for the key Example Input MyHashMap put put get get put get remove get Output null null null null null Explanation MyHashMap myHashMap new MyHashMap myHashMap put The map is now myHashMap put The map is now myHashMap get return The map is now myHashMap get return i e not found The map is now myHashMap put The map is now i e update the existing value myHashMap get return The map is now myHashMap remove remove the mapping for The map is now myHashMap get return i e not found The map is now Constraints key value At most calls will be made to put get and remove
coloring a border You are given an m x n integer matrix grid and three integers row col and color Each value in the grid represents the color of the grid square at that location Two squares belong to the same connected component if they have the same color and are next to each other in any of the directions The border of a connected component is all the squares in the connected component that are either directionally adjacent to a square not in the component or on the boundary of the grid the first or last row or column You should color the border of the connected component that contains the square grid row col with color Return the final grid Example Input grid row col color Output Example Input grid row col color Output Example Input grid row col color Output Constraints m grid length n grid i length m n grid i j color row m col n
jump game You are given an integer array nums You are initially positioned at the array s first index and each element in the array represents your maximum jump length at that position Return true if you can reach the last index or false otherwise Example Input nums Output true Explanation Jump step from index to then steps to the last index Example Input nums Output false Explanation You will always arrive at index no matter what Its maximum jump length is which makes it impossible to reach the last index Constraints nums length nums i
implement queue using stacks Implement a first in first out FIFO queue using only two stacks The implemented queue should support all the functions of a normal queue push peek pop and empty Implement the MyQueue class void push int x Pushes element x to the back of the queue int pop Removes the element from the front of the queue and returns it int peek Returns the element at the front of the queue boolean empty Returns true if the queue is empty false otherwise Notes You must use only standard operations of a stack which means only push to top peek pop from top size and is empty operations are valid Depending on your language the stack may not be supported natively You may simulate a stack using a list or deque double ended queue as long as you use only a stack s standard operations Example Input MyQueue push push peek pop empty Output null null null false Explanation MyQueue myQueue new MyQueue myQueue push queue is myQueue push queue is leftmost is front of the queue myQueue peek return myQueue pop return queue is myQueue empty return false Constraints x At most calls will be made to push pop peek and empty All the calls to pop and peek are valid Follow up Can you implement the queue such that each operation is amortized O time complexity In other words performing n operations will take overall O n time even if one of those operations may take longer
smallest value after replacing with sum of prime factors You are given a positive integer n Continuously replace n with the sum of its prime factors Note that if a prime factor divides n multiple times it should be included in the sum as many times as it divides n Return the smallest value n will take on Example Input n Output Explanation Initially n so replace n with so replace n with so replace n with is the smallest value n will take on Example Input n Output Explanation Initially n is the smallest value n will take on Constraints n
design a number container system Design a number container system that can do the following Insert or Replace a number at the given index in the system Return the smallest index for the given number in the system Implement the NumberContainers class NumberContainers Initializes the number container system void change int index int number Fills the container at index with the number If there is already a number at that index replace it int find int number Returns the smallest index for the given number or if there is no index that is filled by number in the system Example Input NumberContainers find change change change change find change find Output null null null null null null Explanation NumberContainers nc new NumberContainers nc find There is no index that is filled with number Therefore we return nc change Your container at index will be filled with number nc change Your container at index will be filled with number nc change Your container at index will be filled with number nc change Your container at index will be filled with number nc find Number is at the indices and Since the smallest index that is filled with is we return nc change Your container at index will be filled with number Note that index was filled with and then replaced with nc find Number is at the indices and The smallest index that is filled with is Therefore we return Constraints index number At most calls will be made in total to change and find
jump game ii You are given a indexed array of integers nums of length n You are initially positioned at nums Each element nums i represents the maximum length of a forward jump from index i In other words if you are at nums i you can jump to any nums i j where j nums i and i j n Return the minimum number of jumps to reach nums n The test cases are generated such that you can reach nums n Example Input nums Output Explanation The minimum number of jumps to reach the last index is Jump step from index to then steps to the last index Example Input nums Output Constraints nums length nums i It s guaranteed that you can reach nums n
number of valid words in a sentence A sentence consists of lowercase letters a to z digits to hyphens punctuation marks and and spaces only Each sentence can be broken down into one or more tokens separated by one or more spaces A token is a valid word if all three of the following are true It only contains lowercase letters hyphens and or punctuation no digits There is at most one hyphen If present it must be surrounded by lowercase characters a b is valid but ab and ab are not valid There is at most one punctuation mark If present it must be at the end of the token ab cd and are valid but a b and c are not valid Examples of valid words include a b afad ba c a and Given a string sentence return the number of valid words in sentence Example Input sentence cat and dog Output Explanation The valid words in the sentence are cat and and dog Example Input sentence this s Output Explanation There are no valid words in the sentence this is invalid because it starts with a punctuation mark s and are invalid because they contain digits Example Input sentence alice and bob are playing stone Output Explanation The valid words in the sentence are alice and bob are and playing stone is invalid because it contains digits Constraints sentence length sentence only contains lowercase English letters digits and There will be at least token
number of increasing paths in a grid You are given an m x n integer matrix grid where you can move from a cell to any adjacent cell in all directions Return the number of strictly increasing paths in the grid such that you can start from any cell and end at any cell Since the answer may be very large return it modulo Two paths are considered different if they do not have exactly the same sequence of visited cells Example Input grid Output Explanation The strictly increasing paths are Paths with length Paths with length Paths with length The total number of paths is Example Input grid Output Explanation The strictly increasing paths are Paths with length Paths with length The total number of paths is Constraints m grid length n grid i length m n m n grid i j
minimum replacements to sort the array You are given a indexed integer array nums In one operation you can replace any element of the array with any two elements that sum to it For example consider nums In one operation we can replace nums with and and convert nums to Return the minimum number of operations to make an array that is sorted in non decreasing order Example Input nums Output Explanation Here are the steps to sort the array in non decreasing order From replace the with and so the array becomes From replace the with and so the array becomes There are steps to sort the array in non decreasing order Therefore we return Example Input nums Output Explanation The array is already in non decreasing order Therefore we return Constraints nums length nums i
longest arithmetic subsequence Given an array nums of integers return the length of the longest arithmetic subsequence in nums Note that A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements A sequence seq is arithmetic if seq i seq i are all the same value for i seq length Example Input nums Output Explanation The whole array is an arithmetic sequence with steps of length Example Input nums Output Explanation The longest arithmetic subsequence is Example Input nums Output Explanation The longest arithmetic subsequence is Constraints nums length nums i
bus routes You are given an array routes representing bus routes where routes i is a bus route that the ith bus repeats forever For example if routes this means that the bus travels in the sequence forever You will start at the bus stop source You are not on any bus initially and you want to go to the bus stop target You can travel between bus stops by buses only Return the least number of buses you must take to travel from source to target Return if it is not possible Example Input routes source target Output Explanation The best strategy is take the first bus to the bus stop then take the second bus to the bus stop Example Input routes source target Output Constraints routes length routes i length All the values of routes i are unique sum routes i length routes i j source target
shortest path in binary matrix Given an n x n binary matrix grid return the length of the shortest clear path in the matrix If there is no clear path return A clear path in a binary matrix is a path from the top left cell i e to the bottom right cell i e n n such that All the visited cells of the path are All the adjacent cells of the path are directionally connected i e they are different and they share an edge or a corner The length of a clear path is the number of visited cells of this path Example Input grid Output Example Input grid Output Example Input grid Output Constraints n grid length n grid i length n grid i j is or
next permutation A permutation of an array of integers is an arrangement of its members into a sequence or linear order For example for arr the following are all the permutations of arr The next permutation of an array of integers is the next lexicographically greater permutation of its integer More formally if all the permutations of the array are sorted in one container according to their lexicographical order then the next permutation of that array is the permutation that follows it in the sorted container If such arrangement is not possible the array must be rearranged as the lowest possible order i e sorted in ascending order For example the next permutation of arr is Similarly the next permutation of arr is While the next permutation of arr is because does not have a lexicographical larger rearrangement Given an array of integers nums find the next permutation of nums The replacement must be in place and use only constant extra memory Example Input nums Output Example Input nums Output Example Input nums Output Constraints nums length nums i
minimum hours of training to win a competition You are entering a competition and are given two positive integers initialEnergy and initialExperience denoting your initial energy and initial experience respectively You are also given two indexed integer arrays energy and experience both of length n You will face n opponents in order The energy and experience of the ith opponent is denoted by energy i and experience i respectively When you face an opponent you need to have both strictly greater experience and energy to defeat them and move to the next opponent if available Defeating the ith opponent increases your experience by experience i but decreases your energy by energy i Before starting the competition you can train for some number of hours After each hour of training you can either choose to increase your initial experience by one or increase your initial energy by one Return the minimum number of training hours required to defeat all n opponents Example Input initialEnergy initialExperience energy experience Output Explanation You can increase your energy to after hours of training and your experience to after hours of training You face the opponents in the following order You have more energy and experience than the opponent so you win Your energy becomes and your experience becomes You have more energy and experience than the opponent so you win Your energy becomes and your experience becomes You have more energy and experience than the opponent so you win Your energy becomes and your experience becomes You have more energy and experience than the opponent so you win Your energy becomes and your experience becomes You did a total of hours of training before the competition so we return It can be proven that no smaller answer exists Example Input initialEnergy initialExperience energy experience Output Explanation You do not need any additional energy or experience to win the competition so we return Constraints n energy length experience length n initialEnergy initialExperience energy i experience i
append characters to string to make subsequence You are given two strings s and t consisting of only lowercase English letters Return the minimum number of characters that need to be appended to the end of s so that t becomes a subsequence of s A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters Example Input s coaching t coding Output Explanation Append the characters ding to the end of s so that s coachingding Now t is a subsequence of s coachingding It can be shown that appending any characters to the end of s will never make t a subsequence Example Input s abcde t a Output Explanation t is already a subsequence of s abcde Example Input s z t abcde Output Explanation Append the characters abcde to the end of s so that s zabcde Now t is a subsequence of s zabcde It can be shown that appending any characters to the end of s will never make t a subsequence Constraints s length t length s and t consist only of lowercase English letters
sum of scores of built strings You are building a string s of length n one character at a time prepending each new character to the front of the string The strings are labeled from to n where the string with length i is labeled si For example for s abaca a ca aca etc The score of si is the length of the longest common prefix between si and sn Note that s sn Given the final string s return the sum of the score of every si Example Input s babab Output Explanation For b the longest common prefix is b which has a score of For ab there is no common prefix so the score is For bab the longest common prefix is bab which has a score of For abab there is no common prefix so the score is For babab the longest common prefix is babab which has a score of The sum of the scores is so we return Example Input s azbazbzaz Output Explanation For az the longest common prefix is az which has a score of For azbzaz the longest common prefix is azb which has a score of For azbazbzaz the longest common prefix is azbazbzaz which has a score of For all other si the score is The sum of the scores is so we return Constraints s length s consists of lowercase English letters
find the distinct difference array You are given a indexed array nums of length n The distinct difference array of nums is an array diff of length n such that diff i is equal to the number of distinct elements in the suffix nums i n subtracted from the number of distinct elements in the prefix nums i Return the distinct difference array of nums Note that nums i j denotes the subarray of nums starting at index i and ending at index j inclusive Particularly if i j then nums i j denotes an empty subarray Example Input nums Output Explanation For index i there is element in the prefix and distinct elements in the suffix Thus diff For index i there are distinct elements in the prefix and distinct elements in the suffix Thus diff For index i there are distinct elements in the prefix and distinct elements in the suffix Thus diff For index i there are distinct elements in the prefix and distinct element in the suffix Thus diff For index i there are distinct elements in the prefix and no elements in the suffix Thus diff Example Input nums Output Explanation For index i there is element in the prefix and distinct elements in the suffix Thus diff For index i there are distinct elements in the prefix and distinct elements in the suffix Thus diff For index i there are distinct elements in the prefix and distinct elements in the suffix Thus diff For index i there are distinct elements in the prefix and distinct element in the suffix Thus diff For index i there are distinct elements in the prefix and no elements in the suffix Thus diff Constraints n nums length nums i
number of ways to select buildings You are given a indexed binary string s which represents the types of buildings along a street where s i denotes that the ith building is an office and s i denotes that the ith building is a restaurant As a city official you would like to select buildings for random inspection However to ensure variety no two consecutive buildings out of the selected buildings can be of the same type For example given s we cannot select the and buildings as that would form which is not allowed due to having two consecutive buildings of the same type Return the number of valid ways to select buildings Example Input s Output Explanation The following sets of indices selected are valid from forms from forms from forms from forms from forms from forms No other selection is valid Thus there are total ways Example Input s Output Explanation It can be shown that there are no valid selections Constraints s length s i is either or
find lucky integer in an array Given an array of integers arr a lucky integer is an integer that has a frequency in the array equal to its value Return the largest lucky integer in the array If there is no lucky integer return Example Input arr Output Explanation The only lucky number in the array is because frequency Example Input arr Output Explanation and are all lucky numbers return the largest of them Example Input arr Output Explanation There are no lucky numbers in the array Constraints arr length arr i
encrypt and decrypt strings You are given a character array keys containing unique characters and a string array values containing strings of length You are also given another string array dictionary that contains all permitted original strings after decryption You should implement a data structure that can encrypt or decrypt a indexed string A string is encrypted with the following process For each character c in the string we find the index i satisfying keys i c in keys Replace c with values i in the string Note that in case a character of the string is not present in keys the encryption process cannot be carried out and an empty string is returned A string is decrypted with the following process For each substring s of length occurring at an even index in the string we find an i such that values i s If there are multiple valid i we choose any one of them This means a string could have multiple possible strings it can decrypt to Replace s with keys i in the string Implement the Encrypter class Encrypter char keys String values String dictionary Initializes the Encrypter class with keys values and dictionary String encrypt String Encrypts with the encryption process described above and returns the encrypted string int decrypt String Returns the number of possible strings could decrypt to that also appear in dictionary Example Input Encrypter encrypt decrypt a b c d ei zf ei am abcd acbd adbc badc dacb cadb cbda abad abcd eizfeiam Output null eizfeiam Explanation Encrypter encrypter new Encrypter a b c d ei zf ei am abcd acbd adbc badc dacb cadb cbda abad encrypter encrypt abcd return eizfeiam a maps to ei b maps to zf c maps to ei and d maps to am encrypter decrypt eizfeiam return ei can map to a or c zf maps to b and am maps to d Thus the possible strings after decryption are abad cbad abcd and cbcd of those strings abad and abcd appear in dictionary so the answer is Constraints keys length values length values i length dictionary length dictionary i length All keys i and dictionary i are unique length length All i appear in keys length is even keys values i dictionary i and only contain lowercase English letters At most calls will be made to encrypt and decrypt in total
guess the word You are given an array of unique strings words where words i is six letters long One word of words was chosen as a secret word You are also given the helper object Master You may call Master guess word where word is a six letter long string and it must be from words Master guess word returns if word is not from words or an integer representing the number of exact matches value and position of your guess to the secret word There is a parameter allowedGuesses for each test case where allowedGuesses is the maximum number of times you can call Master guess word For each test case you should call Master guess with the secret word without exceeding the maximum number of allowed guesses You will get Either you took too many guesses or you did not find the secret word if you called Master guess more than allowedGuesses times or if you did not call Master guess with the secret word or You guessed the secret word correctly if you called Master guess with the secret word with the number of calls to Master guess less than or equal to allowedGuesses The test cases are generated such that you can guess the secret word with a reasonable strategy other than using the bruteforce method Example Input secret acckzz words acckzz ccbazz eiowzz abcczz allowedGuesses Output You guessed the secret word correctly Explanation master guess aaaaaa returns because aaaaaa is not in wordlist master guess acckzz returns because acckzz is secret and has all matches master guess ccbazz returns because ccbazz has matches master guess eiowzz returns because eiowzz has matches master guess abcczz returns because abcczz has matches We made calls to master guess and one of them was the secret so we pass the test case Example Input secret hamada words hamada khaled allowedGuesses Output You guessed the secret word correctly Explanation Since there are two words you can guess both Constraints words length words i length words i consist of lowercase English letters All the strings of wordlist are unique secret exists in words allowedGuesses
minimum score after removals on a tree There is an undirected connected tree with n nodes labeled from to n and n edges You are given a indexed integer array nums of length n where nums i represents the value of the ith node You are also given a integer array edges of length n where edges i ai bi indicates that there is an edge between nodes ai and bi in the tree Remove two distinct edges of the tree to form three connected components For a pair of removed edges the following steps are defined Get the XOR of all the values of the nodes for each of the three components respectively The difference between the largest XOR value and the smallest XOR value is the score of the pair For example say the three components have the node values and The three XOR values are and The largest XOR value is and the smallest XOR value is The score is then Return the minimum score of any possible pair of edge removals on the given tree Example Input nums edges Output Explanation The diagram above shows a way to make a pair of removals The component has nodes with values Its XOR value is The component has node with value Its XOR value is The component has node with value Its XOR value is The score is the difference between the largest and smallest XOR value which is It can be shown that no other pair of removals will obtain a smaller score than Example Input nums edges Output Explanation The diagram above shows a way to make a pair of removals The component has nodes with values Its XOR value is The component has nodes with values Its XOR value is The component has nodes with values Its XOR value is The score is the difference between the largest and smallest XOR value which is We cannot obtain a smaller score than Constraints n nums length n nums i edges length n edges i length ai bi n ai bi edges represents a valid tree
minimum amount of time to collect garbage You are given a indexed array of strings garbage where garbage i represents the assortment of garbage at the ith house garbage i consists only of the characters M P and G representing one unit of metal paper and glass garbage respectively Picking up one unit of any type of garbage takes minute You are also given a indexed integer array travel where travel i is the number of minutes needed to go from house i to house i There are three garbage trucks in the city each responsible for picking up one type of garbage Each garbage truck starts at house and must visit each house in order however they do not need to visit every house Only one garbage truck may be used at any given moment While one truck is driving or picking up garbage the other two trucks cannot do anything Return the minimum number of minutes needed to pick up all the garbage Example Input garbage G P GP GG travel Output Explanation The paper garbage truck Travels from house to house Collects the paper garbage at house Travels from house to house Collects the paper garbage at house Altogether it takes minutes to pick up all the paper garbage The glass garbage truck Collects the glass garbage at house Travels from house to house Travels from house to house Collects the glass garbage at house Travels from house to house Collects the glass garbage at house Altogether it takes minutes to pick up all the glass garbage Since there is no metal garbage we do not need to consider the metal garbage truck Therefore it takes a total of minutes to collect all the garbage Example Input garbage MMM PGM GP travel Output Explanation The metal garbage truck takes minutes to pick up all the metal garbage The paper garbage truck takes minutes to pick up all the paper garbage The glass garbage truck takes minutes to pick up all the glass garbage It takes a total of minutes to collect all the garbage Constraints garbage length garbage i consists of only the letters M P and G garbage i length travel length garbage length travel i
best time to buy and sell stock with cooldown You are given an array prices where prices i is the price of a given stock on the ith day Find the maximum profit you can achieve You may complete as many transactions as you like i e buy one and sell one share of the stock multiple times with the following restrictions After you sell your stock you cannot buy stock on the next day i e cooldown one day Note You may not engage in multiple transactions simultaneously i e you must sell the stock before you buy again Example Input prices Output Explanation transactions buy sell cooldown buy sell Example Input prices Output Constraints prices length prices i
coordinate with maximum network quality You are given an array of network towers towers where towers i xi yi qi denotes the ith network tower with location xi yi and quality factor qi All the coordinates are integral coordinates on the X Y plane and the distance between the two coordinates is the Euclidean distance You are also given an integer radius where a tower is reachable if the distance is less than or equal to radius Outside that distance the signal becomes garbled and the tower is not reachable The signal quality of the ith tower at a coordinate x y is calculated with the formula qi d where d is the distance between the tower and the coordinate The network quality at a coordinate is the sum of the signal qualities from all the reachable towers Return the array cx cy representing the integral coordinate cx cy where the network quality is maximum If there are multiple coordinates with the same network quality return the lexicographically minimum non negative coordinate Note A coordinate is lexicographically smaller than if either or and val is the greatest integer less than or equal to val the floor function Example Input towers radius Output Explanation At coordinate the total quality is Quality of from results in sqrt Quality of from results in sqrt Quality of from results in sqrt No other coordinate has a higher network quality Example Input towers radius Output Explanation Since there is only one tower the network quality is highest right at the tower s location Example Input towers radius Output Explanation Coordinate has the highest network quality Constraints towers length towers i length xi yi qi radius
stone game ix Alice and Bob continue their games with stones There is a row of n stones and each stone has an associated value You are given an integer array stones where stones i is the value of the ith stone Alice and Bob take turns with Alice starting first On each turn the player may remove any stone from stones The player who removes a stone loses if the sum of the values of all removed stones is divisible by Bob will win automatically if there are no remaining stones even if it is Alice s turn Assuming both players play optimally return true if Alice wins and false if Bob wins Example Input stones Output true Explanation The game will be played as follows Turn Alice can remove either stone Turn Bob removes the remaining stone The sum of the removed stones is and is divisible by Therefore Bob loses and Alice wins the game Example Input stones Output false Explanation Alice will remove the only stone and the sum of the values on the removed stones is Since all the stones are removed and the sum of values is not divisible by Bob wins the game Example Input stones Output false Explanation Bob will always win One possible way for Bob to win is shown below Turn Alice can remove the second stone with value Sum of removed stones Turn Bob removes the fifth stone with value Sum of removed stones Turn Alices removes the fourth stone with value Sum of removed stones Turn Bob removes the third stone with value Sum of removed stones Turn Alice removes the first stone with value Sum of removed stones Alice loses the game because the sum of the removed stones is divisible by Bob wins the game Constraints stones length stones i
special binary string Special binary strings are binary strings with the following two properties The number of s is equal to the number of s Every prefix of the binary string has at least as many s as s You are given a special binary string s A move consists of choosing two consecutive non empty special substrings of s and swapping them Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string Return the lexicographically largest resulting string possible after applying the mentioned operations on the string Example Input s Output Explanation The strings occuring at s and at s are swapped This is the lexicographically largest string possible after some number of swaps Example Input s Output Constraints s length s i is either or s is a special binary string
is subsequence Given two strings s and t return true if s is a subsequence of t or false otherwise A subsequence of a string is a new string that is formed from the original string by deleting some can be none of the characters without disturbing the relative positions of the remaining characters i e ace is a subsequence of abcde while aec is not Example Input s abc t ahbgdc Output true Example Input s axc t ahbgdc Output false Constraints s length t length s and t consist only of lowercase English letters Follow up Suppose there are lots of incoming s say sk where k and you want to check one by one to see if t has its subsequence In this scenario how would you change your code
maximum consecutive floors without special floors Alice manages a company and has rented some floors of a building as office space Alice has decided some of these floors should be special floors used for relaxation only You are given two integers bottom and top which denote that Alice has rented all the floors from bottom to top inclusive You are also given the integer array special where special i denotes a special floor that Alice has designated for relaxation Return the maximum number of consecutive floors without a special floor Example Input bottom top special Output Explanation The following are the ranges inclusive of consecutive floors without a special floor with a total amount of floors with a total amount of floor with a total amount of floors Therefore we return the maximum number which is floors Example Input bottom top special Output Explanation Every floor rented is a special floor so we return Constraints special length bottom special i top All the values of special are unique
triangle Given a triangle array return the minimum path sum from top to bottom For each step you may move to an adjacent number of the row below More formally if you are on index i on the current row you may move to either index i or index i on the next row Example Input triangle Output Explanation The triangle looks like The minimum path sum from top to bottom is underlined above Example Input triangle Output Constraints triangle length triangle length triangle i length triangle i length triangle i j Follow up Could you do this using only O n extra space where n is the total number of rows in the triangle
maximum score from removing stones You are playing a solitaire game with three piles of stones of sizes a b and c respectively Each turn you choose two different non empty piles take one stone from each and add point to your score The game stops when there are fewer than two non empty piles meaning there are no more available moves Given three integers a b and c return the maximum score you can get Example Input a b c Output Explanation The starting state is One optimal set of moves is Take from and piles state is now Take from and piles state is now Take from and piles state is now Take from and piles state is now Take from and piles state is now Take from and piles state is now There are fewer than two non empty piles so the game ends Total points Example Input a b c Output Explanation The starting state is One optimal set of moves is Take from and piles state is now Take from and piles state is now Take from and piles state is now Take from and piles state is now Take from and piles state is now Take from and piles state is now Take from and piles state is now There are fewer than two non empty piles so the game ends Total points Example Input a b c Output Explanation One optimal set of moves is to take from the and piles for turns until they are empty After that there are fewer than two non empty piles so the game ends Constraints a b c
number of pairs satisfying inequality You are given two indexed integer arrays and each of size n and an integer diff Find the number of pairs i j such that i j n and i j i j diff Return the number of pairs that satisfy the conditions Example Input diff Output Explanation There are pairs that satisfy the conditions i j Since i j and this pair satisfies the conditions i j Since i j and this pair satisfies the conditions i j Since i j and this pair satisfies the conditions Therefore we return Example Input diff Output Explanation Since there does not exist any pair that satisfies the conditions we return Constraints n length length n i i diff
cherry pickup ii You are given a rows x cols matrix grid representing a field of cherries where grid i j represents the number of cherries that you can collect from the i j cell You have two robots that can collect cherries for you Robot is located at the top left corner and Robot is located at the top right corner cols Return the maximum number of cherries collection using both robots by following the rules below From a cell i j robots can move to cell i j i j or i j When any robot passes through a cell It picks up all cherries and the cell becomes an empty cell When both robots stay in the same cell only one takes the cherries Both robots cannot move outside of the grid at any moment Both robots should reach the bottom row in grid Example Input grid Output Explanation Path of robot and are described in color green and blue respectively Cherries taken by Robot Cherries taken by Robot Total of cherries Example Input grid Output Explanation Path of robot and are described in color green and blue respectively Cherries taken by Robot Cherries taken by Robot Total of cherries Constraints rows grid length cols grid i length rows cols grid i j
minimum distance to type a word using two fingers You have a keyboard layout as shown above in the X Y plane where each English uppercase letter is located at some coordinate For example the letter A is located at coordinate the letter B is located at coordinate the letter P is located at coordinate and the letter Z is located at coordinate Given the string word return the minimum total distance to type such string using only two fingers The distance between coordinates and is Note that the initial positions of your two fingers are considered free so do not count towards your total distance also your two fingers do not have to start at the first letter or the first two letters Example Input word CAKE Output Explanation Using two fingers one optimal way to type CAKE is Finger on letter C cost Finger on letter A cost Distance from letter C to letter A Finger on letter K cost Finger on letter E cost Distance from letter K to letter E Total distance Example Input word HAPPY Output Explanation Using two fingers one optimal way to type HAPPY is Finger on letter H cost Finger on letter A cost Distance from letter H to letter A Finger on letter P cost Finger on letter P cost Distance from letter P to letter P Finger on letter Y cost Distance from letter A to letter Y Total distance Constraints word length word consists of uppercase English letters
find all people with secret You are given an integer n indicating there are n people numbered from to n You are also given a indexed integer array meetings where meetings i xi yi timei indicates that person xi and person yi have a meeting at timei A person may attend multiple meetings at the same time Finally you are given an integer firstPerson Person has a secret and initially shares the secret with a person firstPerson at time This secret is then shared every time a meeting takes place with a person that has the secret More formally for every meeting if a person xi has the secret at timei then they will share the secret with person yi and vice versa The secrets are shared instantaneously That is a person may receive the secret and share it with people in other meetings within the same time frame Return a list of all the people that have the secret after all the meetings have taken place You may return the answer in any order Example Input n meetings firstPerson Output Explanation At time person shares the secret with person At time person shares the secret with person At time person shares the secret with person At time person shares the secret with person Thus people and know the secret after all the meetings Example Input n meetings firstPerson Output Explanation At time person shares the secret with person At time neither person nor person know the secret At time person shares the secret with person and person Thus people and know the secret after all the meetings Example Input n meetings firstPerson Output Explanation At time person shares the secret with person At time person shares the secret with person and person shares the secret with person Note that person can share the secret at the same time as receiving it At time person shares the secret with person Thus people and know the secret after all the meetings Constraints n meetings length meetings i length xi yi n xi yi timei firstPerson n
rearrange words in a sentence Given a sentence text A sentence is a string of space separated words in the following format First letter is in upper case Each word in text are separated by a single space Your task is to rearrange the words in text such that all words are rearranged in an increasing order of their lengths If two words have the same length arrange them in their original order Return the new text following the format shown above Example Input text Leetcode is cool Output Is cool leetcode Explanation There are words Leetcode of length is of length and cool of length Output is ordered by length and the new first word starts with capital letter Example Input text Keep calm and code on Output On and keep calm code Explanation Output is ordered as follows On letters and letters keep letters in case of tie order by position in original text calm letters code letters Example Input text To be or not to be Output To be or to be not Constraints text begins with a capital letter and then contains lowercase letters and single space between words text length
maximum number of events that can be attended You are given an array of events where events i startDayi endDayi Every event i starts at startDayi and ends at endDayi You can attend an event i at any day d where startTimei d endTimei You can only attend one event at any time d Return the maximum number of events you can attend Example Input events Output Explanation You can attend all the three events One way to attend them all is as shown Attend the first event on day Attend the second event on day Attend the third event on day Example Input events Output Constraints events length events i length startDayi endDayi
primary department for each employee SQL Schema Table Employee Column Name Type int int varchar is the primary key for this table is the id of the employee is the id of the department to which the employee belongs is an ENUM of type Y N If the flag is Y the department is the primary department for the employee If the flag is N the department is not the primary Employees can belong to multiple departments When the employee joins other departments they need to decide which department is their primary department Note that when an employee belongs to only one department their primary column is N Write an SQL query to report all the employees with their primary department For employees who belong to one department report their only department Return the result table in any order The query result format is in the following example Example Input Employee table N Y N N N Y N Output Explanation The Primary department for employee is The Primary department for employee is The Primary department for employee is The Primary department for employee is
lexicographically smallest palindrome You are given a string s consisting of lowercase English letters and you are allowed to perform operations on it In one operation you can replace a character in s with another lowercase English letter Your task is to make s a palindrome with the minimum number of operations possible If there are multiple palindromes that can be made using the minimum number of operations make the lexicographically smallest one A string a is lexicographically smaller than a string b of the same length if in the first position where a and b differ string a has a letter that appears earlier in the alphabet than the corresponding letter in b Return the resulting palindrome string Example Input s egcfe Output efcfe Explanation The minimum number of operations to make egcfe a palindrome is and the lexicographically smallest palindrome string we can get by modifying one character is efcfe by changing g Example Input s abcd Output abba Explanation The minimum number of operations to make abcd a palindrome is and the lexicographically smallest palindrome string we can get by modifying two characters is abba Example Input s seven Output neven Explanation The minimum number of operations to make seven a palindrome is and the lexicographically smallest palindrome string we can get by modifying one character is neven Constraints s length s consists of only lowercase English letters
happy number Write an algorithm to determine if a number n is happy A happy number is a number defined by the following process Starting with any positive integer replace the number by the sum of the squares of its digits Repeat the process until the number equals where it will stay or it loops endlessly in a cycle which does not include Those numbers for which this process ends in are happy Return true if n is a happy number and false if not Example Input n Output true Explanation Example Input n Output false Constraints n
reverse string Write a function that reverses a string The input string is given as an array of characters s You must do this by modifying the input array in place with O extra memory Example Input s h e l l o Output o l l e h Example Input s H a n n a h Output h a n n a H Constraints s length s i is a printable ascii character
matchsticks to square You are given an integer array matchsticks where matchsticks i is the length of the ith matchstick You want to use all the matchsticks to make one square You should not break any stick but you can link them up and each matchstick must be used exactly one time Return true if you can make this square and false otherwise Example Input matchsticks Output true Explanation You can form a square with length one side of the square came two sticks with length Example Input matchsticks Output false Explanation You cannot find a way to form a square with all the matchsticks Constraints matchsticks length matchsticks i
form largest integer with digits that add up to target Given an array of integers cost and an integer target return the maximum integer you can paint under the following rules The cost of painting a digit i is given by cost i indexed The total cost used must be equal to target The integer does not have digits Since the answer may be very large return it as a string If there is no way to paint any integer given the condition return Example Input cost target Output Explanation The cost to paint the digit is and the digit is Then cost You could also paint but is the largest number Digit cost Example Input cost target Output Explanation The cost to paint the digit is and the digit is Then cost Example Input cost target Output Explanation It is impossible to paint any integer with total cost equal to target Constraints cost length cost i target
delete characters to make fancy string A fancy string is a string where no three consecutive characters are equal Given a string s delete the minimum possible number of characters from s to make it fancy Return the final string after the deletion It can be shown that the answer will always be unique Example Input s leeetcode Output leetcode Explanation Remove an e from the first group of e s to create leetcode No three consecutive characters are equal so return leetcode Example Input s aaabaaaa Output aabaa Explanation Remove an a from the first group of a s to create aabaaaa Remove two a s from the second group of a s to create aabaa No three consecutive characters are equal so return aabaa Example Input s aab Output aab Explanation No three consecutive characters are equal so return aab Constraints s length s consists only of lowercase English letters
minimum flips to make a or b equal to c Given positives numbers a b and c Return the minimum flips required in some bits of a and b to make a OR b c bitwise OR operation Flip operation consists of change any single bit to or change the bit to in their binary representation Example Input a b c Output Explanation After flips a b c such that a OR b c Example Input a b c Output Example Input a b c Output Constraints a b c
slowest key A newly designed keypad was tested where a tester pressed a sequence of n keys one at a time You are given a string keysPressed of length n where keysPressed i was the ith key pressed in the testing sequence and a sorted list releaseTimes where releaseTimes i was the time the ith key was released Both arrays are indexed The key was pressed at the time and every subsequent key was pressed at the exact time the previous key was released The tester wants to know the key of the keypress that had the longest duration The ith keypress had a duration of releaseTimes i releaseTimes i and the keypress had a duration of releaseTimes Note that the same key could have been pressed multiple times during the test and these multiple presses of the same key may not have had the same duration Return the key of the keypress that had the longest duration If there are multiple such keypresses return the lexicographically largest key of the keypresses Example Input releaseTimes keysPressed cbcd Output c Explanation The keypresses were as follows Keypress for c had a duration of pressed at time and released at time Keypress for b had a duration of pressed at time right after the release of the previous character and released at time Keypress for c had a duration of pressed at time right after the release of the previous character and released at time Keypress for d had a duration of pressed at time right after the release of the previous character and released at time The longest of these was the keypress for b and the second keypress for c both with duration c is lexicographically larger than b so the answer is c Example Input releaseTimes keysPressed spuda Output a Explanation The keypresses were as follows Keypress for s had a duration of Keypress for p had a duration of Keypress for u had a duration of Keypress for d had a duration of Keypress for a had a duration of The longest of these was the keypress for a with duration Constraints releaseTimes length n keysPressed length n n releaseTimes i releaseTimes i releaseTimes i keysPressed contains only lowercase English letters
maximize palindrome length from subsequences You are given two strings and You want to construct a string in the following manner Choose some non empty subsequence from Choose some non empty subsequence from Concatenate the subsequences to make the string Return the length of the longest palindrome that can be constructed in the described manner If no palindromes can be constructed return A subsequence of a string s is a string that can be made by deleting some possibly none characters from s without changing the order of the remaining characters A palindrome is a string that reads the same forward as well as backward Example Input cacb cbba Output Explanation Choose ab from and cba from to make abcba which is a palindrome Example Input ab ab Output Explanation Choose ab from and a from to make aba which is a palindrome Example Input aa bb Output Explanation You cannot construct a palindrome from the described method so return Constraints length length and consist of lowercase English letters
find kth bit in nth binary string Given two positive integers n and k the binary string Sn is formed as follows Si Si reverse invert Si for i Where denotes the concatenation operation reverse x returns the reversed string x and invert x inverts all the bits in x changes to and changes to For example the first four strings in the above sequence are Return the kth bit in Sn It is guaranteed that k is valid for the given n Example Input n k Output Explanation is The bit is Example Input n k Output Explanation is The bit is Constraints n k
distinct subsequences Given two strings s and t return the number of distinct subsequences of s which equals t The test cases are generated so that the answer fits on a bit signed integer Example Input s rabbbit t rabbit Output Explanation As shown below there are ways you can generate rabbit from s rabbbit rabbbit rabbbit Example Input s babgbag t bag Output Explanation As shown below there are ways you can generate bag from s babgbag babgbag babgbag babgbag babgbag Constraints s length t length s and t consist of English letters
min stack Design a stack that supports push pop top and retrieving the minimum element in constant time Implement the MinStack class MinStack initializes the stack object void push int val pushes the element val onto the stack void pop removes the element on the top of the stack int top gets the top element of the stack int getMin retrieves the minimum element in the stack You must implement a solution with O time complexity for each function Example Input MinStack push push push getMin pop top getMin Output null null null null null Explanation MinStack minStack new MinStack minStack push minStack push minStack push minStack getMin return minStack pop minStack top return minStack getMin return Constraints val Methods pop top and getMin operations will always be called on non empty stacks At most calls will be made to push pop top and getMin
maximum value after insertion You are given a very large integer n represented as a string and an integer digit x The digits in n and the digit x are in the inclusive range and n may represent a negative number You want to maximize n s numerical value by inserting x anywhere in the decimal representation of n You cannot insert x to the left of the negative sign For example if n and x it would be best to insert it between and making n If n and x it would be best to insert it before the first making n Return a string representing the maximum value of n after the insertion Example Input n x Output Explanation The result is the same regardless of where you insert Example Input n x Output Explanation You can make n one of and the largest of those three is Constraints n length x The digits in n are in the range n is a valid representation of an integer In the case of a negative n it will begin with
pow(x, n) Implement pow x n which calculates x raised to the power n i e xn Example Input x n Output Example Input x n Output Example Input x n Output Explanation Constraints x n n is an integer Either x is not zero or n xn
maximum swap You are given an integer num You can swap two digits at most once to get the maximum valued number Return the maximum valued number you can get Example Input num Output Explanation Swap the number and the number Example Input num Output Explanation No swap Constraints num
number of unequal triplets in array You are given a indexed array of positive integers nums Find the number of triplets i j k that meet the following conditions i j k nums length nums i nums j and nums k are pairwise distinct In other words nums i nums j nums i nums k and nums j nums k Return the number of triplets that meet the conditions Example Input nums Output Explanation The following triplets meet the conditions because because because Since there are triplets we return Note that is not a valid triplet because Example Input nums Output Explanation No triplets meet the conditions so we return Constraints nums length nums i
minimum distance to the target element Given an integer array nums indexed and two integers target and start find an index i such that nums i target and abs i start is minimized Note that abs x is the absolute value of x Return abs i start It is guaranteed that target exists in nums Example Input nums target start Output Explanation nums is the only value equal to target so the answer is abs Example Input nums target start Output Explanation nums is the only value equal to target so the answer is abs Example Input nums target start Output Explanation Every value of nums is but nums minimizes abs i start which is abs Constraints nums length nums i start nums length target is in nums
query kth smallest trimmed number You are given a indexed array of strings nums where each string is of equal length and consists of only digits You are also given a indexed integer array queries where queries i ki trimi For each queries i you need to Trim each number in nums to its rightmost trimi digits Determine the index of the kith smallest trimmed number in nums If two trimmed numbers are equal the number with the lower index is considered to be smaller Reset each number in nums to its original length Return an array answer of the same length as queries where answer i is the answer to the ith query Note To trim to the rightmost x digits means to keep removing the leftmost digit until only x digits remain Strings in nums may contain leading zeros Example Input nums queries Output Explanation After trimming to the last digit nums The smallest number is at index Trimmed to the last digits nums is unchanged The smallest number is at index Trimmed to the last digits nums The smallest number is Trimmed to the last digits the smallest number is at index Note that the trimmed number is evaluated as Example Input nums queries Output Explanation Trimmed to the last digit nums The smallest number is at index There are two occurrences of but the one at index is considered smaller than the one at index Trimmed to the last digits nums is unchanged The smallest number is Constraints nums length nums i length nums i consists of only digits All nums i length are equal queries length queries i length ki nums length trimi nums i length Follow up Could you use the Radix Sort Algorithm to solve this problem What will be the complexity of that solution
find a value of a mysterious function closest to target Winston was given the above mysterious function func He has an integer array arr and an integer target and he wants to find the values l and r that make the value func arr l r target minimum possible Return the minimum possible value of func arr l r target Notice that func should be called with the values l and r where l r arr length Example Input arr target Output Explanation Calling func with all the pairs of l r Winston got the following results The value closest to is and thus the minimum difference is Example Input arr target Output Explanation Winston called the func with all possible values of l r and he always got thus the min difference is Example Input arr target Output Constraints arr length arr i target
selling pieces of wood You are given two integers m and n that represent the height and width of a rectangular piece of wood You are also given a integer array prices where prices i hi wi pricei indicates you can sell a rectangular piece of wood of height hi and width wi for pricei dollars To cut a piece of wood you must make a vertical or horizontal cut across the entire height or width of the piece to split it into two smaller pieces After cutting a piece of wood into some number of smaller pieces you can sell pieces according to prices You may sell multiple pieces of the same shape and you do not have to sell all the shapes The grain of the wood makes a difference so you cannot rotate a piece to swap its height and width Return the maximum money you can earn after cutting an m x n piece of wood Note that you can cut the piece of wood as many times as you want Example Input m n prices Output Explanation The diagram above shows a possible scenario It consists of pieces of wood shaped x selling for a price of piece of wood shaped x selling for a price of piece of wood shaped x selling for a price of This obtains a total of money earned It can be shown that is the maximum amount of money that can be earned Example Input m n prices Output Explanation The diagram above shows a possible scenario It consists of pieces of wood shaped x selling for a price of piece of wood shaped x selling for a price of This obtains a total of money earned It can be shown that is the maximum amount of money that can be earned Notice that we cannot rotate the x piece of wood to obtain a x piece of wood Constraints m n prices length prices i length hi m wi n pricei All the shapes of wood hi wi are pairwise distinct
insert delete getrandom o(1) Implement the RandomizedSet class RandomizedSet Initializes the RandomizedSet object bool insert int val Inserts an item val into the set if not present Returns true if the item was not present false otherwise bool remove int val Removes an item val from the set if present Returns true if the item was present false otherwise int getRandom Returns a random element from the current set of elements it s guaranteed that at least one element exists when this method is called Each element must have the same probability of being returned You must implement the functions of the class such that each function works in average O time complexity Example Input RandomizedSet insert remove insert getRandom remove insert getRandom Output null true false true true false Explanation RandomizedSet randomizedSet new RandomizedSet randomizedSet insert Inserts to the set Returns true as was inserted successfully randomizedSet remove Returns false as does not exist in the set randomizedSet insert Inserts to the set returns true Set now contains randomizedSet getRandom getRandom should return either or randomly randomizedSet remove Removes from the set returns true Set now contains randomizedSet insert was already in the set so return false randomizedSet getRandom Since is the only number in the set getRandom will always return Constraints val At most calls will be made to insert remove and getRandom There will be at least one element in the data structure when getRandom is called
restore the array from adjacent pairs There is an integer array nums that consists of n unique elements but you have forgotten it However you do remember every pair of adjacent elements in nums You are given a integer array adjacentPairs of size n where each adjacentPairs i ui vi indicates that the elements ui and vi are adjacent in nums It is guaranteed that every adjacent pair of elements nums i and nums i will exist in adjacentPairs either as nums i nums i or nums i nums i The pairs can appear in any order Return the original array nums If there are multiple solutions return any of them Example Input adjacentPairs Output Explanation This array has all its adjacent pairs in adjacentPairs Notice that adjacentPairs i may not be in left to right order Example Input adjacentPairs Output Explanation There can be negative numbers Another solution is which would also be accepted Example Input adjacentPairs Output Constraints nums length n adjacentPairs length n adjacentPairs i length n nums i ui vi There exists some nums that has adjacentPairs as its pairs
maximum sum of distinct subarrays with length k You are given an integer array nums and an integer k Find the maximum subarray sum of all the subarrays of nums that meet the following conditions The length of the subarray is k and All the elements of the subarray are distinct Return the maximum subarray sum of all the subarrays that meet the conditions If no subarray meets the conditions return A subarray is a contiguous non empty sequence of elements within an array Example Input nums k Output Explanation The subarrays of nums with length are which meets the requirements and has a sum of which meets the requirements and has a sum of which meets the requirements and has a sum of which does not meet the requirements because the element is repeated which does not meet the requirements because the element is repeated We return because it is the maximum subarray sum of all the subarrays that meet the conditions Example Input nums k Output Explanation The subarrays of nums with length are which does not meet the requirements because the element is repeated We return because no subarrays meet the conditions Constraints k nums length nums i
sum of prefix scores of strings You are given an array words of size n consisting of non empty strings We define the score of a string word as the number of strings words i such that word is a prefix of words i For example if words a ab abc cab then the score of ab is since ab is a prefix of both ab and abc Return an array answer of size n where answer i is the sum of scores of every non empty prefix of words i Note that a string is considered as a prefix of itself Example Input words abc ab bc b Output Explanation The answer for each string is the following abc has prefixes a ab and abc There are strings with the prefix a strings with the prefix ab and string with the prefix abc The total is answer ab has prefixes a and ab There are strings with the prefix a and strings with the prefix ab The total is answer bc has prefixes b and bc There are strings with the prefix b and string with the prefix bc The total is answer b has prefix b There are strings with the prefix b The total is answer Example Input words abcd Output Explanation abcd has prefixes a ab abc and abcd Each prefix has a score of one so the total is answer Constraints words length words i length words i consists of lowercase English letters
decode the message You are given the strings key and message which represent a cipher key and a secret message respectively The steps to decode message are as follows Use the first appearance of all lowercase English letters in key as the order of the substitution table Align the substitution table with the regular English alphabet Each letter in message is then substituted using the table Spaces are transformed to themselves For example given key happy boy actual key would have at least one instance of each letter in the alphabet we have the partial substitution table of h a a b p c y d b e o f Return the decoded message Example Input key the quick brown fox jumps over the lazy dog message vkbs bs t suepuv Output this is a secret Explanation The diagram above shows the substitution table It is obtained by taking the first appearance of each letter in the quick brown fox jumps over the lazy dog Example Input key eljuxhpwnyrdgtqkviszcfmabo message zwx hnfx lqantp mnoeius ycgk vcnjrdb Output the five boxing wizards jump quickly Explanation The diagram above shows the substitution table It is obtained by taking the first appearance of each letter in eljuxhpwnyrdgtqkviszcfmabo Constraints key length key consists of lowercase English letters and key contains every letter in the English alphabet a to z at least once message length message consists of lowercase English letters and
jump game vii You are given a indexed binary string s and two integers minJump and maxJump In the beginning you are standing at index which is equal to You can move from index i to index j if the following conditions are fulfilled i minJump j min i maxJump s length and s j Return true if you can reach index s length in s or false otherwise Example Input s minJump maxJump Output true Explanation In the first step move from index to index In the second step move from index to index Example Input s minJump maxJump Output false Constraints s length s i is either or s minJump maxJump s length
kids with the greatest number of candies There are n kids with candies You are given an integer array candies where each candies i represents the number of candies the ith kid has and an integer extraCandies denoting the number of extra candies that you have Return a boolean array result of length n where result i is true if after giving the ith kid all the extraCandies they will have the greatest number of candies among all the kids or false otherwise Note that multiple kids can have the greatest number of candies Example Input candies extraCandies Output true true true false true Explanation If you give all extraCandies to Kid they will have candies which is the greatest among the kids Kid they will have candies which is the greatest among the kids Kid they will have candies which is the greatest among the kids Kid they will have candies which is not the greatest among the kids Kid they will have candies which is the greatest among the kids Example Input candies extraCandies Output true false false false false Explanation There is only extra candy Kid will always have the greatest number of candies even if a different kid is given the extra candy Example Input candies extraCandies Output true false true Constraints n candies length n candies i extraCandies
construct binary tree from preorder and inorder traversal Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree construct and return the binary tree Example Input preorder inorder Output null null Example Input preorder inorder Output Constraints preorder length inorder length preorder length preorder i inorder i preorder and inorder consist of unique values Each value of inorder also appears in preorder preorder is guaranteed to be the preorder traversal of the tree inorder is guaranteed to be the inorder traversal of the tree
odd even jump You are given an integer array arr From some starting index you can make a series of jumps The jumps in the series are called odd numbered jumps and the jumps in the series are called even numbered jumps Note that the jumps are numbered not the indices You may jump forward from index i to index j with i j in the following way During odd numbered jumps i e jumps you jump to the index j such that arr i arr j and arr j is the smallest possible value If there are multiple such indices j you can only jump to the smallest such index j During even numbered jumps i e jumps you jump to the index j such that arr i arr j and arr j is the largest possible value If there are multiple such indices j you can only jump to the smallest such index j It may be the case that for some index i there are no legal jumps A starting index is good if starting from that index you can reach the end of the array index arr length by jumping some number of times possibly or more than once Return the number of good starting indices Example Input arr Output Explanation From starting index i we can make our jump to i since arr is the smallest among arr arr arr arr that is greater or equal to arr then we cannot jump any more From starting index i and i we can make our jump to i then we cannot jump any more From starting index i we can make our jump to i so we have reached the end From starting index i we have reached the end already In total there are different starting indices i and i where we can reach the end with some number of jumps Example Input arr Output Explanation From starting index i we make jumps to i i i During our jump odd numbered we first jump to i because arr is the smallest value in arr arr arr arr that is greater than or equal to arr During our jump even numbered we jump from i to i because arr is the largest value in arr arr arr that is less than or equal to arr arr is also the largest value but is a smaller index so we can only jump to i and not i During our jump odd numbered we jump from i to i because arr is the smallest value in arr arr that is greater than or equal to arr We can t jump from i to i so the starting index i is not good In a similar manner we can deduce that From starting index i we jump to i so we reach the end From starting index i we jump to i and then we can t jump anymore From starting index i we jump to i so we reach the end From starting index i we are already at the end In total there are different starting indices i i and i where we can reach the end with some number of jumps Example Input arr Output Explanation We can reach the end from starting indices and Constraints arr length arr i
find numbers with even number of digits Given an array nums of integers return how many of them contain an even number of digits Example Input nums Output Explanation contains digits even number of digits contains digits odd number of digits contains digit odd number of digits contains digit odd number of digits contains digits even number of digits Therefore only and contain an even number of digits Example Input nums Output Explanation Only contains an even number of digits Constraints nums length nums i
find minimum in rotated sorted array ii Suppose an array of length n sorted in ascending order is rotated between and n times For example the array nums might become if it was rotated times if it was rotated times Notice that rotating an array a a a a n time results in the array a n a a a a n Given the sorted rotated array nums that may contain duplicates return the minimum element of this array You must decrease the overall operation steps as much as possible Example Input nums Output Example Input nums Output Constraints n nums length n nums i nums is sorted and rotated between and n times Follow up This problem is similar to Find Minimum in Rotated Sorted Array but nums may contain duplicates Would this affect the runtime complexity How and why
queries on a permutation with key Given the array queries of positive integers between and m you have to process all queries i from i to i queries length according to the following rules In the beginning you have the permutation P m For the current i find the position of queries i in the permutation P indexing from and then move this at the beginning of the permutation P Notice that the position of queries i in P is the result for queries i Return an array containing the result for the given queries Example Input queries m Output Explanation The queries are processed as follow For i queries i P position of in P is then we move to the beginning of P resulting in P For i queries i P position of in P is then we move to the beginning of P resulting in P For i queries i P position of in P is then we move to the beginning of P resulting in P For i queries i P position of in P is then we move to the beginning of P resulting in P Therefore the array containing the result is Example Input queries m Output Example Input queries m Output Constraints m queries length m queries i m
construct smallest number from di string You are given a indexed string pattern of length n consisting of the characters I meaning increasing and D meaning decreasing A indexed string num of length n is created using the following conditions num consists of the digits to where each digit is used at most once If pattern i I then num i num i If pattern i D then num i num i Return the lexicographically smallest possible string num that meets the conditions Example Input pattern IIIDIDDD Output Explanation At indices and we must have that num i num i At indices and we must have that num i num i Some possible values of num are and It can be proven that is the smallest possible num that meets the conditions Note that is not possible because the digit is used more than once Example Input pattern DDD Output Explanation Some possible values of num are and It can be proven that is the smallest possible num that meets the conditions Constraints pattern length pattern consists of only the letters I and D
different ways to add parentheses Given a string expression of numbers and operators return all possible results from computing all the different possible ways to group numbers and operators You may return the answer in any order The test cases are generated such that the output values fit in a bit integer and the number of different results does not exceed Example Input expression Output Explanation Example Input expression Output Explanation Constraints expression length expression consists of digits and the operator and All the integer values in the input expression are in the range
path sum Given the root of a binary tree and an integer targetSum return true if the tree has a root to leaf path such that adding up all the values along the path equals targetSum A leaf is a node with no children Example Input root null null null null targetSum Output true Explanation The root to leaf path with the target sum is shown Example Input root targetSum Output false Explanation There two root to leaf paths in the tree The sum is The sum is There is no root to leaf path with sum Example Input root targetSum Output false Explanation Since the tree is empty there are no root to leaf paths Constraints The number of nodes in the tree is in the range Node val targetSum
minimum limit of balls in a bag You are given an integer array nums where the ith bag contains nums i balls You are also given an integer maxOperations You can perform the following operation at most maxOperations times Take any bag of balls and divide it into two new bags with a positive number of balls For example a bag of balls can become two new bags of and balls or two new bags of and balls Your penalty is the maximum number of balls in a bag You want to minimize your penalty after the operations Return the minimum possible penalty after performing the operations Example Input nums maxOperations Output Explanation Divide the bag with balls into two bags of sizes and Divide the bag with balls into two bags of sizes and The bag with the most number of balls has balls so your penalty is and you should return Example Input nums maxOperations Output Explanation Divide the bag with balls into two bags of sizes and Divide the bag with balls into two bags of sizes and Divide the bag with balls into two bags of sizes and Divide the bag with balls into two bags of sizes and The bag with the most number of balls has balls so your penalty is and you should return Constraints nums length maxOperations nums i
subdomain visit count A website domain discuss leetcode com consists of various subdomains At the top level we have com at the next level we have leetcode com and at the lowest level discuss leetcode com When we visit a domain like discuss leetcode com we will also visit the parent domains leetcode com and com implicitly A count paired domain is a domain that has one of the two formats rep or rep where rep is the number of visits to the domain and is the domain itself For example discuss leetcode com is a count paired domain that indicates that discuss leetcode com was visited times Given an array of count paired domains cpdomains return an array of the count paired domains of each subdomain in the input You may return the answer in any order Example Input cpdomains discuss leetcode com Output leetcode com discuss leetcode com com Explanation We only have one website domain discuss leetcode com As discussed above the subdomain leetcode com and com will also be visited So they will all be visited times Example Input cpdomains google mail com yahoo com intel mail com wiki org Output mail com yahoo com google mail com wiki org org intel mail com com Explanation We will visit google mail com times yahoo com times intel mail com once and wiki org times For the subdomains we will visit mail com times com times and org times Constraints cpdomain length cpdomain i length cpdomain i follows either the repi format or the repi format repi is an integer in the range and consist of lowercase English letters
number of enclaves You are given an m x n binary matrix grid where represents a sea cell and represents a land cell A move consists of walking from one land cell to another adjacent directionally land cell or walking off the boundary of the grid Return the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves Example Input grid Output Explanation There are three that are enclosed by and one that is not enclosed because its on the boundary Example Input grid Output Explanation All are either on the boundary or can reach the boundary Constraints m grid length n grid i length m n grid i j is either or
number of closed islands Given a grid consists of land and water An island is a maximal directionally connected group of and a closed island is an island totally all left top right bottom surrounded by Return the number of closed islands Example Input grid Output Explanation Islands in gray are closed because they are completely surrounded by water group of Example Input grid Output Example Input grid Output Constraints grid length grid length grid i j
sort array by increasing frequency Given an array of integers nums sort the array in increasing order based on the frequency of the values If multiple values have the same frequency sort them in decreasing order Return the sorted array Example Input nums Output Explanation has a frequency of has a frequency of and has a frequency of Example Input nums Output Explanation and both have a frequency of so they are sorted in decreasing order Example Input nums Output Constraints nums length nums i
pyramid transition matrix You are stacking blocks to form a pyramid Each block has a color which is represented by a single letter Each row of blocks contains one less block than the row beneath it and is centered on top To make the pyramid aesthetically pleasing there are only specific triangular patterns that are allowed A triangular pattern consists of a single block stacked on top of two blocks The patterns are given as a list of three letter strings allowed where the first two characters of a pattern represent the left and right bottom blocks respectively and the third character is the top block For example ABC represents a triangular pattern with a C block stacked on top of an A left and B right block Note that this is different from BAC where B is on the left bottom and A is on the right bottom You start with a bottom row of blocks bottom given as a single string that you must use as the base of the pyramid Given bottom and allowed return true if you can build the pyramid all the way to the top such that every triangular pattern in the pyramid is in allowed or false otherwise Example Input bottom BCD allowed BCC CDE CEA FFF Output true Explanation The allowed triangular patterns are shown on the right Starting from the bottom level we can build CE on level and then build A on level There are three triangular patterns in the pyramid which are BCC CDE and CEA All are allowed Example Input bottom AAAA allowed AAB AAC BCD BBE DEF Output false Explanation The allowed triangular patterns are shown on the right Starting from the bottom level there are multiple ways to build level but trying all the possibilites you will get always stuck before building level Constraints bottom length allowed length allowed i length The letters in all input strings are from the set A B C D E F All the values of allowed are unique
building h2o There are two kinds of threads oxygen and hydrogen Your goal is to group these threads to form water molecules There is a barrier where each thread has to wait until a complete molecule can be formed Hydrogen and oxygen threads will be given releaseHydrogen and releaseOxygen methods respectively which will allow them to pass the barrier These threads should pass the barrier in groups of three and they must immediately bond with each other to form a water molecule You must guarantee that all the threads from one molecule bond before any other threads from the next molecule do In other words If an oxygen thread arrives at the barrier when no hydrogen threads are present it must wait for two hydrogen threads If a hydrogen thread arrives at the barrier when no other threads are present it must wait for an oxygen thread and another hydrogen thread We do not have to worry about matching the threads up explicitly the threads do not necessarily know which other threads they are paired up with The key is that threads pass the barriers in complete sets thus if we examine the sequence of threads that bind and divide them into groups of three each group should contain one oxygen and two hydrogen threads Write synchronization code for oxygen and hydrogen molecules that enforces these constraints Example Input water HOH Output HHO Explanation HOH and OHH are also valid answers Example Input water OOHHHH Output HHOHHO Explanation HOHHHO OHHHHO HHOHOH HOHHOH OHHHOH HHOOHH HOHOHH and OHHOHH are also valid answers Constraints n water length n water i is either H or O There will be exactly n H in water There will be exactly n O in water
sentence similarity iii A sentence is a list of words that are separated by a single space with no leading or trailing spaces For example Hello World HELLO hello world hello world are all sentences Words consist of only uppercase and lowercase English letters Two sentences and are similar if it is possible to insert an arbitrary sentence possibly empty inside one of these sentences such that the two sentences become equal For example Hello my name is Jane and Hello Jane can be made equal by inserting my name is between Hello and Jane in Given two sentences and return true if and are similar Otherwise return false Example Input My name is Haley My Haley Output true Explanation can be turned to by inserting name is between My and Haley Example Input of A lot of words Output false Explanation No single sentence can be inserted inside one of the sentences to make it equal to the other Example Input Eating right now Eating Output true Explanation can be turned to by inserting right now at the end of the sentence Constraints length length and consist of lowercase and uppercase English letters and spaces The words in and are separated by a single space
minimize xor Given two positive integers and find the positive integer x such that x has the same number of set bits as and The value x XOR is minimal Note that XOR is the bitwise XOR operation Return the integer x The test cases are generated such that x is uniquely determined The number of set bits of an integer is the number of s in its binary representation Example Input Output Explanation The binary representations of and are and respectively The integer has the same number of set bits as and the value XOR is minimal Example Input Output Explanation The binary representations of and are and respectively The integer has the same number of set bits as and the value XOR is minimal Constraints
concatenation of array Given an integer array nums of length n you want to create an array ans of length where ans i nums i and ans i n nums i for i n indexed Specifically ans is the concatenation of two nums arrays Return the array ans Example Input nums Output Explanation The array ans is formed as follows ans nums nums nums nums nums nums ans Example Input nums Output Explanation The array ans is formed as follows ans nums nums nums nums nums nums nums nums ans Constraints n nums length n nums i
find all anagrams in a string Given two strings s and p return an array of all the start indices of p s anagrams in s You may return the answer in any order An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase typically using all the original letters exactly once Example Input s cbaebabacd p abc Output Explanation The substring with start index is cba which is an anagram of abc The substring with start index is bac which is an anagram of abc Example Input s abab p ab Output Explanation The substring with start index is ab which is an anagram of ab The substring with start index is ba which is an anagram of ab The substring with start index is ab which is an anagram of ab Constraints s length p length s and p consist of lowercase English letters
soup servings There are two types of soup type A and type B Initially we have n ml of each type of soup There are four kinds of operations Serve ml of soup A and ml of soup B Serve ml of soup A and ml of soup B Serve ml of soup A and ml of soup B and Serve ml of soup A and ml of soup B When we serve some soup we give it to someone and we no longer have it Each turn we will choose from the four operations with an equal probability If the remaining volume of soup is not enough to complete the operation we will serve as much as possible We stop once we no longer have some quantity of both types of soup Note that we do not have an operation where all ml s of soup B are used first Return the probability that soup A will be empty first plus half the probability that A and B become empty at the same time Answers within of the actual answer will be accepted Example Input n Output Explanation If we choose the first two operations A will become empty first For the third operation A and B will become empty at the same time For the fourth operation B will become empty first So the total probability of A becoming empty first plus half the probability that A and B become empty at the same time is Example Input n Output Constraints n
hamming distance The Hamming distance between two integers is the number of positions at which the corresponding bits are different Given two integers x and y return the Hamming distance between them Example Input x y Output Explanation The above arrows point to positions where the corresponding bits are different Example Input x y Output Constraints x y
calculate digit sum of a string You are given a string s consisting of digits and an integer k A round can be completed if the length of s is greater than k In one round do the following Divide s into consecutive groups of size k such that the first k characters are in the first group the next k characters are in the second group and so on Note that the size of the last group can be smaller than k Replace each group of s with a string representing the sum of all its digits For example is replaced with because Merge consecutive groups together to form a new string If the length of the string is greater than k repeat from step Return s after all rounds have been completed Example Input s k Output Explanation For the first round we divide s into groups of size and Then we calculate the digit sum of each group and So s becomes after the first round For the second round we divide s into and Then we calculate the digit sum of each group So s becomes after second round Now s length k so we return as the answer Example Input s k Output Explanation We divide s into and Then we calculate the digit sum of each group and s becomes whose length is equal to k so we return Constraints s length k s consists of digits only
minimize maximum pair sum in array The pair sum of a pair a b is equal to a b The maximum pair sum is the largest pair sum in a list of pairs For example if we have pairs and the maximum pair sum would be max max Given an array nums of even length n pair up the elements of nums into n pairs such that Each element of nums is in exactly one pair and The maximum pair sum is minimized Return the minimized maximum pair sum after optimally pairing up the elements Example Input nums Output Explanation The elements can be paired up into pairs and The maximum pair sum is max max Example Input nums Output Explanation The elements can be paired up into pairs and The maximum pair sum is max max Constraints n nums length n n is even nums i
power of two Given an integer n return true if it is a power of two Otherwise return false An integer n is a power of two if there exists an integer x such that n Example Input n Output true Explanation Example Input n Output true Explanation Example Input n Output false Constraints n Follow up Could you solve it without loops recursion
find closest number to zero Given an integer array nums of size n return the number with the value closest to in nums If there are multiple answers return the number with the largest value Example Input nums Output Explanation The distance from to is The distance from to is The distance from to is The distance from to is The distance from to is Thus the closest number to in the array is Example Input nums Output Explanation and are both the closest numbers to so being larger is returned Constraints n nums i
naming a company You are given an array of strings ideas that represents a list of names to be used in the process of naming a company The process of naming a company is as follows Choose distinct names from ideas call them ideaA and ideaB Swap the first letters of ideaA and ideaB with each other If both of the new names are not found in the original ideas then the name ideaA ideaB the concatenation of ideaA and ideaB separated by a space is a valid company name Otherwise it is not a valid name Return the number of distinct valid names for the company Example Input ideas coffee donuts time toffee Output Explanation The following selections are valid coffee donuts The company name created is doffee conuts donuts coffee The company name created is conuts doffee donuts time The company name created is tonuts dime donuts toffee The company name created is tonuts doffee time donuts The company name created is dime tonuts toffee donuts The company name created is doffee tonuts Therefore there are a total of distinct company names The following are some examples of invalid selections coffee time The name toffee formed after swapping already exists in the original array time toffee Both names are still the same after swapping and exist in the original array coffee toffee Both names formed after swapping already exist in the original array Example Input ideas lack back Output Explanation There are no valid selections Therefore is returned Constraints ideas length ideas i length ideas i consists of lowercase English letters All the strings in ideas are unique
minimum cost to connect two groups of points You are given two groups of points where the first group has points the second group has points and The cost of the connection between any two points are given in an x matrix where cost i j is the cost of connecting point i of the first group and point j of the second group The groups are connected if each point in both groups is connected to one or more points in the opposite group In other words each point in the first group must be connected to at least one point in the second group and each point in the second group must be connected to at least one point in the first group Return the minimum cost it takes to connect the two groups Example Input cost Output Explanation The optimal way of connecting the groups is A B This results in a total cost of Example Input cost Output Explanation The optimal way of connecting the groups is A B C A This results in a total cost of Note that there are multiple points connected to point in the first group and point A in the second group This does not matter as there is no limit to the number of points that can be connected We only care about the minimum total cost Example Input cost Output Constraints cost length cost i length cost i j
form array by concatenating subarrays of another array You are given a integer array groups of length n You are also given an integer array nums You are asked if you can choose n disjoint subarrays from the array nums such that the ith subarray is equal to groups i indexed and if i the i th subarray appears before the ith subarray in nums i e the subarrays must be in the same order as groups Return true if you can do this task and false otherwise Note that the subarrays are disjoint if and only if there is no index k such that nums k belongs to more than one subarray A subarray is a contiguous sequence of elements within an array Example Input groups nums Output true Explanation You can choose the subarray as and the one as These subarrays are disjoint as they share no common nums k element Example Input groups nums Output false Explanation Note that choosing the subarrays and is incorrect because they are not in the same order as in groups must come before Example Input groups nums Output false Explanation Note that choosing the subarrays and is invalid because they are not disjoint They share a common elements nums indexed Constraints groups length n n groups i length sum groups i length nums length groups i j nums k
minimum absolute difference queries The minimum absolute difference of an array a is defined as the minimum value of a i a j where i j a length and a i a j If all elements of a are the same the minimum absolute difference is For example the minimum absolute difference of the array is Note that it is not because a i and a j must be different You are given an integer array nums and the array queries where queries i li ri For each query i compute the minimum absolute difference of the subarray nums li ri containing the elements of nums between the based indices li and ri inclusive Return an array ans where ans i is the answer to the ith query A subarray is a contiguous sequence of elements in an array The value of x is defined as x if x x if x Example Input nums queries Output Explanation The queries are processed as follows queries The subarray is and the minimum absolute difference is queries The subarray is and the minimum absolute difference is queries The subarray is and the minimum absolute difference is queries The subarray is and the minimum absolute difference is Example Input nums queries Output Explanation The queries are processed as follows queries The subarray is and the minimum absolute difference is because all the elements are the same queries The subarray is and the minimum absolute difference is queries The subarray is and the minimum absolute difference is queries The subarray is and the minimum absolute difference is Constraints nums length nums i queries length li ri nums length
insufficient nodes in root to leaf paths Given the root of a binary tree and an integer limit delete all insufficient nodes in the tree simultaneously and return the root of the resulting binary tree A node is insufficient if every root to leaf path intersecting this node has a sum strictly less than limit A leaf is a node with no children Example Input root limit Output null null null Example Input root null null null limit Output null null null null Example Input root null null limit Output null Constraints The number of nodes in the tree is in the range Node val limit
construct binary search tree from preorder traversal Given an array of integers preorder which represents the preorder traversal of a BST i e binary search tree construct the tree and return its root It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases A binary search tree is a binary tree where for every node any descendant of Node left has a value strictly less than Node val and any descendant of Node right has a value strictly greater than Node val A preorder traversal of a binary tree displays the value of the node first then traverses Node left then traverses Node right Example Input preorder Output null Example Input preorder Output null Constraints preorder length preorder i All the values of preorder are unique
shift 2d grid Given a grid of size m x n and an integer k You need to shift the grid k times In one shift operation Element at grid i j moves to grid i j Element at grid i n moves to grid i Element at grid m n moves to grid Return the grid after applying shift operation k times Example Input grid k Output Example Input grid k Output Example Input grid k Output Constraints m grid length n grid i length m n grid i j k
find k-th smallest pair distance The distance of a pair of integers a and b is defined as the absolute difference between a and b Given an integer array nums and an integer k return the kth smallest distance among all the pairs nums i and nums j where i j nums length Example Input nums k Output Explanation Here are all the pairs Then the smallest distance pair is and its distance is Example Input nums k Output Example Input nums k Output Constraints n nums length n nums i k n n
rotating the box You are given an m x n matrix of characters box representing a side view of a box Each cell of the box is one of the following A stone A stationary obstacle Empty The box is rotated degrees clockwise causing some of the stones to fall due to gravity Each stone falls down until it lands on an obstacle another stone or the bottom of the box Gravity does not affect the obstacles positions and the inertia from the box s rotation does not affect the stones horizontal positions It is guaranteed that each stone in box rests on an obstacle another stone or the bottom of the box Return an n x m matrix representing the box after the rotation described above Example Input box Output Example Input box Output Example Input box Output Constraints m box length n box i length m n box i j is either or
card flipping game You are given two indexed integer arrays fronts and backs of length n where the ith card has the positive integer fronts i printed on the front and backs i printed on the back Initially each card is placed on a table such that the front number is facing up and the other is facing down You may flip over any number of cards possibly zero After flipping the cards an integer is considered good if it is facing down on some card and not facing up on any card Return the minimum possible good integer after flipping the cards If there are no good integers return Example Input fronts backs Output Explanation If we flip the second card the face up numbers are and the face down are is the minimum good integer as it appears facing down but not facing up It can be shown that is the minimum possible good integer obtainable after flipping some cards Example Input fronts backs Output Explanation There are no good integers no matter how we flip the cards so we return Constraints n fronts length backs length n fronts i backs i
all possible full binary trees Given an integer n return a list of all possible full binary trees with n nodes Each node of each tree in the answer must have Node val Each element of the answer is the root node of one possible tree You may return the final list of trees in any order A full binary tree is a binary tree where each node has exactly or children Example Input n Output null null null null null null null null null null null null Example Input n Output Constraints n
calculate money in leetcode bank Hercy wants to save money for his first car He puts money in the Leetcode bank every day He starts by putting in on Monday the first day Every day from Tuesday to Sunday he will put in more than the day before On every subsequent Monday he will put in more than the previous Monday Given n return the total amount of money he will have in the Leetcode bank at the end of the nth day Example Input n Output Explanation After the day the total is Example Input n Output Explanation After the day the total is Notice that on the Monday Hercy only puts in Example Input n Output Explanation After the day the total is Constraints n
reward top k students You are given two string arrays and containing the words denoting positive and negative feedback respectively Note that no word is both positive and negative Initially every student has points Each positive word in a feedback report increases the points of a student by whereas each negative word decreases the points by You are given n feedback reports represented by a indexed string array report and a indexed integer array where i represents the ID of the student who has received the feedback report report i The ID of each student is unique Given an integer k return the top k students after ranking them in non increasing order by their points In case more than one student has the same points the one with the lower ID ranks higher Example Input smart brilliant studious not report this student is studious the student is smart k Output Explanation Both the students have positive feedback and points but since student has a lower ID he ranks higher Example Input smart brilliant studious not report this student is not studious the student is smart k Output Explanation The student with ID has positive feedback and negative feedback so he has points The student with ID has positive feedback so he has points Since student has more points is returned Constraints length length i length j length Both i and j consists of lowercase English letters No word is present in both and n report length length n report i consists of lowercase English letters and spaces There is a single space between consecutive words of report i report i length i All the values of i are unique k n
making a large island You are given an n x n binary matrix grid You are allowed to change at most one to be Return the size of the largest island in grid after applying this operation An island is a directionally connected group of Example Input grid Output Explanation Change one to and connect two then we get an island with area Example Input grid Output Explanation Change the to and make the island bigger only one island with area Example Input grid Output Explanation Can t change any to only one island with area Constraints n grid length n grid i length n grid i j is either or
triangle judgement SQL Schema Table Triangle Column Name Type x int y int z int x y z is the primary key column for this table Each row of this table contains the lengths of three line segments Write an SQL query to report for every three line segments whether they can form a triangle Return the result table in any order The query result format is in the following example Example Input Triangle table x y z Output x y z triangle No Yes
pascal's triangle Given an integer numRows return the first numRows of Pascal s triangle In Pascal s triangle each number is the sum of the two numbers directly above it as shown Example Input numRows Output Example Input numRows Output Constraints numRows
maximum subarray sum with one deletion Given an array of integers return the maximum sum for a non empty subarray contiguous elements with at most one element deletion In other words you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible Note that the subarray needs to be non empty after deleting one element Example Input arr Output Explanation Because we can choose and drop thus the subarray becomes the maximum value Example Input arr Output Explanation We just choose and it s the maximum sum Example Input arr Output Explanation The final subarray needs to be non empty You can t choose and delete from it then get an empty subarray to make the sum equals to Constraints arr length arr i
iterator for combination Design the CombinationIterator class CombinationIterator string characters int combinationLength Initializes the object with a string characters of sorted distinct lowercase English letters and a number combinationLength as arguments next Returns the next combination of length combinationLength in lexicographical order hasNext Returns true if and only if there exists a next combination Example Input CombinationIterator next hasNext next hasNext next hasNext abc Output null ab true ac true bc false Explanation CombinationIterator itr new CombinationIterator abc itr next return ab itr hasNext return True itr next return ac itr hasNext return True itr next return bc itr hasNext return False Constraints combinationLength characters length All the characters of characters are unique At most calls will be made to next and hasNext It is guaranteed that all calls of the function next are valid
maximum area of a piece of cake after horizontal and vertical cuts You are given a rectangular cake of size h x w and two arrays of integers horizontalCuts and verticalCuts where horizontalCuts i is the distance from the top of the rectangular cake to the ith horizontal cut and similarly and verticalCuts j is the distance from the left of the rectangular cake to the jth vertical cut Return the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays horizontalCuts and verticalCuts Since the answer can be a large number return this modulo Example Input h w horizontalCuts verticalCuts Output Explanation The figure above represents the given rectangular cake Red lines are the horizontal and vertical cuts After you cut the cake the green piece of cake has the maximum area Example Input h w horizontalCuts verticalCuts Output Explanation The figure above represents the given rectangular cake Red lines are the horizontal and vertical cuts After you cut the cake the green and yellow pieces of cake have the maximum area Example Input h w horizontalCuts verticalCuts Output Constraints h w horizontalCuts length min h verticalCuts length min w horizontalCuts i h verticalCuts i w All the elements in horizontalCuts are distinct All the elements in verticalCuts are distinct
reverse nodes in k-group Given the head of a linked list reverse the nodes of the list k at a time and return the modified list k is a positive integer and is less than or equal to the length of the linked list If the number of nodes is not a multiple of k then left out nodes in the end should remain as it is You may not alter the values in the list s nodes only nodes themselves may be changed Example Input head k Output Example Input head k Output Constraints The number of nodes in the list is n k n Node val Follow up Can you solve the problem in O extra memory space
letter case permutation Given a string s you can transform every letter individually to be lowercase or uppercase to create another string Return a list of all possible strings we could create Return the output in any order Example Input s Output Example Input s Output Constraints s length s consists of lowercase English letters uppercase English letters and digits
find subsequence of length k with the largest sum You are given an integer array nums and an integer k You want to find a subsequence of nums of length k that has the largest sum Return any such subsequence as an integer array of length k A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements Example Input nums k Output Explanation The subsequence has the largest sum of Example Input nums k Output Explanation The subsequence has the largest sum of Example Input nums k Output Explanation The subsequence has the largest sum of Another possible subsequence is Constraints nums length nums i k nums length
count special integers We call a positive integer special if all of its digits are distinct Given a positive integer n return the number of special integers that belong to the interval n Example Input n Output Explanation All the integers from to except are special Thus there are special integers Example Input n Output Explanation All the integers from to are special Example Input n Output Explanation There are integers from to that are special Some of the integers that are not special are and Constraints n
string without aaa or bbb Given two integers a and b return any string s such that s has length a b and contains exactly a a letters and exactly b b letters The substring aaa does not occur in s and The substring bbb does not occur in s Example Input a b Output abb Explanation abb bab and bba are all correct answers Example Input a b Output aabaa Constraints a b It is guaranteed such an s exists for the given a and b
remove linked list elements Given the head of a linked list and an integer val remove all the nodes of the linked list that has Node val val and return the new head Example Input head val Output Example Input head val Output Example Input head val Output Constraints The number of nodes in the list is in the range Node val val
longest nice substring A string s is nice if for every letter of the alphabet that s contains it appears both in uppercase and lowercase For example abABB is nice because A and a appear and B and b appear However abA is not because b appears but B does not Given a string s return the longest substring of s that is nice If there are multiple return the substring of the earliest occurrence If there are none return an empty string Example Input s YazaAay Output aAa Explanation aAa is a nice string because A a is the only letter of the alphabet in s and both A and a appear aAa is the longest nice substring Example Input s Bb Output Bb Explanation Bb is a nice string because both B and b appear The whole string is a substring Example Input s c Output Explanation There are no nice substrings Constraints s length s consists of uppercase and lowercase English letters
differences between two objects Write a function that accepts two deeply nested objects or arrays and and returns a new object representing their differences The function should compare the properties of the two objects and identify any changes The returned object should only contains keys where the value is different from to For each changed key the value should be represented as an array value value Keys that exist in one object but not in the other should not be included in the returned object When comparing two arrays the indices of the arrays are considered to be their keys The end result should be a deeply nested object where each leaf value is a difference array You may assume that both objects are the output of JSON parse Example Input a b Output Explanation There were no modifications made to New keys a and b appear in but keys that are added or removed should be ignored Example Input a v x z a null a v x z a Output a v z a null Explanation The keys a v and z all had changes applied a was chnaged from to v was changed from to z had a change applied to a child object z a was changed from null to Example Input a v z a v z Output v z Explanation In and the keys v and z have different assigned values a is ignored because the value is unchanged In the key z there is a nested array Arrays are treated like objects where the indices are keys There were two alterations to the the array z and z z and z were unchanged and thus not included z and z were removed and thus not included Example Input a b a Output a b Explanation The key a exists in both objects Since the two associated values have different types they are placed in the difference array Example Input a b false b false a Output Explanation Apart from a different ordering of keys the two objects are identical so an empty object is returned Constraints JSON stringify length JSON stringify length
take gifts from the richest pile You are given an integer array gifts denoting the number of gifts in various piles Every second you do the following Choose the pile with the maximum number of gifts If there is more than one pile with the maximum number of gifts choose any Leave behind the floor of the square root of the number of gifts in the pile Take the rest of the gifts Return the number of gifts remaining after k seconds Example Input gifts k Output Explanation The gifts are taken in the following way In the first second the last pile is chosen and gifts are left behind Then the second pile is chosen and gifts are left behind After that the first pile is chosen and gifts are left behind Finally the last pile is chosen again and gifts are left behind The final remaining gifts are so the total number of gifts remaining is Example Input gifts k Output Explanation In this case regardless which pile you choose you have to leave behind gift in each pile That is you can t take any pile with you So the total gifts remaining are Constraints gifts length gifts i k
number of ways to arrive at destination You are in a city that consists of n intersections numbered from to n with bi directional roads between some intersections The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections You are given an integer n and a integer array roads where roads i ui vi timei means that there is a road between intersections ui and vi that takes timei minutes to travel You want to know in how many ways you can travel from intersection to intersection n in the shortest amount of time Return the number of ways you can arrive at your destination in the shortest amount of time Since the answer may be large return it modulo Example Input n roads Output Explanation The shortest amount of time it takes to go from intersection to intersection is minutes The four ways to get there in minutes are Example Input n roads Output Explanation There is only one way to go from intersection to intersection and it takes minutes Constraints n n roads length n n roads i length ui vi n timei ui vi There is at most one road connecting any two intersections You can reach any intersection from any other intersection
partition labels You are given a string s We want to partition the string into as many parts as possible so that each letter appears in at most one part Note that the partition is done so that after concatenating all the parts in order the resultant string should be s Return a list of integers representing the size of these parts Example Input s ababcbacadefegdehijhklij Output Explanation The partition is ababcbaca defegde hijhklij This is a partition so that each letter appears in at most one part A partition like ababcbacadefegde hijhklij is incorrect because it splits s into less parts Example Input s eccbbbbdec Output Constraints s length s consists of lowercase English letters
minimum difference between largest and smallest value in three moves You are given an integer array nums In one move you can choose one element of nums and change it to any value Return the minimum difference between the largest and smallest value of nums after performing at most three moves Example Input nums Output Explanation We can make at most moves In the first move change to nums becomes In the second move change to nums becomes In the third move change to nums becomes After performing moves the difference between the minimum and maximum is Example Input nums Output Explanation We can make at most moves In the first move change to nums becomes In the second move change to nums becomes In the third move change to nums becomes After performing moves the difference between the minimum and maximum is It can be shown that there is no way to make the difference in moves Example Input nums Output Explanation We can make at most moves In the first move change to nums becomes In the second move change to nums becomes In the third move change to nums becomes After performing moves the difference between the minimum and maximum is Constraints nums length nums i
make array empty You are given an integer array nums containing distinct numbers and you can perform the following operations until the array is empty If the first element has the smallest value remove it Otherwise put the first element at the end of the array Return an integer denoting the number of operations it takes to make nums empty Example Input nums Output Operation Array Example Input nums Output Operation Array Example Input nums Output Operation Array Constraints nums length nums i All values in nums are distinct
freedom trail In the video game Fallout the quest Road to Freedom requires players to reach a metal dial called the Freedom Trail Ring and use the dial to spell a specific keyword to open the door Given a string ring that represents the code engraved on the outer ring and another string key that represents the keyword that needs to be spelled return the minimum number of steps to spell all the characters in the keyword Initially the first character of the ring is aligned at the direction You should spell all the characters in key one by one by rotating ring clockwise or anticlockwise to make each character of the string key aligned at the direction and then by pressing the center button At the stage of rotating the ring to spell the key character key i You can rotate the ring clockwise or anticlockwise by one place which counts as one step The final purpose of the rotation is to align one of ring s characters at the direction where this character must equal key i If the character key i has been aligned at the direction press the center button to spell which also counts as one step After the pressing you could begin to spell the next character in the key next stage Otherwise you have finished all the spelling Example Input ring godding key gd Output Explanation For the first key character g since it is already in place we just need step to spell this character For the second key character d we need to rotate the ring godding anticlockwise by two steps to make it become ddinggo Also we need more step for spelling So the final output is Example Input ring godding key godding Output Constraints ring length key length ring and key consist of only lower case English letters It is guaranteed that key could always be spelled by rotating ring
minimum garden perimeter to collect enough apples In a garden represented as an infinite grid there is an apple tree planted at every integer coordinate The apple tree planted at an integer coordinate i j has i j apples growing on it You will buy an axis aligned square plot of land that is centered at Given an integer neededApples return the minimum perimeter of a plot such that at least neededApples apples are inside or on the perimeter of that plot The value of x is defined as x if x x if x Example Input neededApples Output Explanation A square plot of side length does not contain any apples However a square plot of side length has apples inside as depicted in the image above The perimeter is Example Input neededApples Output Example Input neededApples Output Constraints neededApples
biggest single number SQL Schema Table MyNumbers Column Name Type num int There is no primary key for this table It may contain duplicates Each row of this table contains an integer A single number is a number that appeared only once in the MyNumbers table Write an SQL query to report the largest single number If there is no single number report null The query result format is in the following example Example Input MyNumbers table num Output num Explanation The single numbers are and Since is the largest single number we return it Example Input MyNumbers table num Output num null Explanation There are no single numbers in the input table so we return null
number of excellent pairs You are given a indexed positive integer array nums and a positive integer k A pair of numbers is called excellent if the following conditions are satisfied Both the numbers and exist in the array nums The sum of the number of set bits in OR and AND is greater than or equal to k where OR is the bitwise OR operation and AND is the bitwise AND operation Return the number of distinct excellent pairs Two pairs a b and c d are considered distinct if either a c or b d For example and are distinct Note that a pair such that can also be excellent if you have at least one occurrence of in the array Example Input nums k Output Explanation The excellent pairs are the following AND and OR are both equal to in binary The total number of set bits is which is greater than or equal to k and AND is equal to in binary and OR is equal to in binary The total number of set bits is and AND is equal to in binary and OR is equal to in binary The total number of set bits is So the number of excellent pairs is Example Input nums k Output Explanation There are no excellent pairs for this array Constraints nums length nums i k
find right interval You are given an array of intervals where intervals i starti endi and each starti is unique The right interval for an interval i is an interval j such that startj endi and startj is minimized Note that i may equal j Return an array of right interval indices for each interval i If no right interval exists for interval i then put at index i Example Input intervals Output Explanation There is only one interval in the collection so it outputs Example Input intervals Output Explanation There is no right interval for The right interval for is since is the smallest start that is The right interval for is since is the smallest start that is Example Input intervals Output Explanation There is no right interval for and The right interval for is since is the smallest start that is Constraints intervals length intervals i length starti endi The start point of each interval is unique
department highest salary SQL Schema Table Employee Column Name Type id int name varchar salary int departmentId int id is the primary key column for this table departmentId is a foreign key of the ID from the Department table Each row of this table indicates the ID name and salary of an employee It also contains the ID of their department Table Department Column Name Type id int name varchar id is the primary key column for this table It is guaranteed that department name is not NULL Each row of this table indicates the ID of a department and its name Write an SQL query to find employees who have the highest salary in each of the departments Return the result table in any order The query result format is in the following example Example Input Employee table id name salary departmentId Joe Jim Henry Sam Max Department table id name IT Sales Output Department Employee Salary IT Jim Sales Henry IT Max Explanation Max and Jim both have the highest salary in the IT department and Henry has the highest salary in the Sales department
memoize Given a function fn return a memoized version of that function A memoized function is a function that will never be called twice with the same inputs Instead it will return a cached value You can assume there are possible input functions sum fib and factorial sum accepts two integers a and b and returns a b fib accepts a single integer n and returns if n or fib n fib n otherwise factorial accepts a single integer n and returns if n or factorial n n otherwise Example Input sum call call getCallCount call getCallCount Output Explanation const sum a b a b const memoizedSum memoize sum memoizedSum Returns sum was called as was not seen before memoizedSum Returns However sum was not called because the same inputs were seen before Total call count memoizedSum Returns sum was called as was not seen before Total call count Example Input factorial call call call getCallCount call getCallCount Output Explanation const factorial n n n factorial n const memoFactorial memoize factorial memoFactorial Returns memoFactorial Returns memoFactorial Returns However factorial was not called because was seen before Total call count memoFactorial Returns However factorial was not called because was seen before Total call count Example Input fib call getCallCount Output Explanation fib Total call count Constraints a b n at most function calls at most attempts to access callCount input function is sum fib or factorial
evaluate reverse polish notation You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation Evaluate the expression Return an integer that represents the value of the expression Note that The valid operators are and Each operand may be an integer or another expression The division between two integers always truncates toward zero There will not be any division by zero The input represents a valid arithmetic expression in a reverse polish notation The answer and all the intermediate calculations can be represented in a bit integer Example Input tokens Output Explanation Example Input tokens Output Explanation Example Input tokens Output Explanation Constraints tokens length tokens i is either an operator or or an integer in the range
peeking iterator Design an iterator that supports the peek operation on an existing iterator in addition to the hasNext and the next operations Implement the PeekingIterator class PeekingIterator Iterator int nums Initializes the object with the given integer iterator iterator int next Returns the next element in the array and moves the pointer to the next element boolean hasNext Returns true if there are still elements in the array int peek Returns the next element in the array without moving the pointer Note Each language may have a different implementation of the constructor and Iterator but they all support the int next and boolean hasNext functions Example Input PeekingIterator next peek next next hasNext Output null false Explanation PeekingIterator peekingIterator new PeekingIterator peekingIterator next return the pointer moves to the next element peekingIterator peek return the pointer does not move peekingIterator next return the pointer moves to the next element peekingIterator next return the pointer moves to the next element peekingIterator hasNext return False Constraints nums length nums i All the calls to next and peek are valid At most calls will be made to next hasNext and peek Follow up How would you extend your design to be generic and work with all types not just integer
valid phone numbers Given a text file file txt that contains a list of phone numbers one per line write a one liner bash script to print all valid phone numbers You may assume that a valid phone number must appear in one of the following two formats xxx xxx xxxx or xxx xxx xxxx x means a digit You may also assume each line in the text file must not contain leading or trailing white spaces Example Assume that file txt has the following content Your script should output the following valid phone numbers
zuma game You are playing a variation of the game Zuma In this variation of Zuma there is a single row of colored balls on a board where each ball can be colored red R yellow Y blue B green G or white W You also have several colored balls in your hand Your goal is to clear all of the balls from the board On each turn Pick any ball from your hand and insert it in between two balls in the row or on either end of the row If there is a group of three or more consecutive balls of the same color remove the group of balls from the board If this removal causes more groups of three or more of the same color to form then continue removing each group until there are none left If there are no more balls on the board then you win the game Repeat this process until you either win or do not have any more balls in your hand Given a string board representing the row of balls on the board and a string hand representing the balls in your hand return the minimum number of balls you have to insert to clear all the balls from the board If you cannot clear all the balls from the board using the balls in your hand return Example Input board WRRBBW hand RB Output Explanation It is impossible to clear all the balls The best you can do is Insert R so the board becomes WRRRBBW WRRRBBW WBBW Insert B so the board becomes WBBBW WBBBW WW There are still balls remaining on the board and you are out of balls to insert Example Input board WWRRBBWW hand WRBRW Output Explanation To make the board empty Insert R so the board becomes WWRRRBBWW WWRRRBBWW WWBBWW Insert B so the board becomes WWBBBWW WWBBBWW WWWW empty balls from your hand were needed to clear the board Example Input board G hand GGGGG Output Explanation To make the board empty Insert G so the board becomes GG Insert G so the board becomes GGG GGG empty balls from your hand were needed to clear the board Constraints board length hand length board and hand consist of the characters R Y B G and W The initial row of balls on the board will not have any groups of three or more consecutive balls of the same color
non-decreasing array Given an array nums with n integers your task is to check if it could become non decreasing by modifying at most one element We define an array is non decreasing if nums i nums i holds for every i based such that i n Example Input nums Output true Explanation You could modify the first to to get a non decreasing array Example Input nums Output false Explanation You cannot get a non decreasing array by modifying at most one element Constraints n nums length n nums i
stock price fluctuation You are given a stream of records about a particular stock Each record contains a timestamp and the corresponding price of the stock at that timestamp Unfortunately due to the volatile nature of the stock market the records do not come in order Even worse some records may be incorrect Another record with the same timestamp may appear later in the stream correcting the price of the previous wrong record Design an algorithm that Updates the price of the stock at a particular timestamp correcting the price from any previous records at the timestamp Finds the latest price of the stock based on the current records The latest price is the price at the latest timestamp recorded Finds the maximum price the stock has been based on the current records Finds the minimum price the stock has been based on the current records Implement the StockPrice class StockPrice Initializes the object with no price records void update int timestamp int price Updates the price of the stock at the given timestamp int current Returns the latest price of the stock int maximum Returns the maximum price of the stock int minimum Returns the minimum price of the stock Example Input StockPrice update update current maximum update maximum update minimum Output null null null null null Explanation StockPrice stockPrice new StockPrice stockPrice update Timestamps are with corresponding prices stockPrice update Timestamps are with corresponding prices stockPrice current return the latest timestamp is with the price being stockPrice maximum return the maximum price is at timestamp stockPrice update The previous timestamp had the wrong price so it is updated to Timestamps are with corresponding prices stockPrice maximum return the maximum price is after the correction stockPrice update Timestamps are with corresponding prices stockPrice minimum return the minimum price is at timestamp Constraints timestamp price At most calls will be made in total to update current maximum and minimum current maximum and minimum will be called only after update has been called at least once
perfect squares Given an integer n return the least number of perfect square numbers that sum to n A perfect square is an integer that is the square of an integer in other words it is the product of some integer with itself For example and are perfect squares while and are not Example Input n Output Explanation Example Input n Output Explanation Constraints n
count servers that communicate You are given a map of a server center represented as a m n integer matrix grid where means that on that cell there is a server and means that it is no server Two servers are said to communicate if they are on the same row or on the same column Return the number of servers that communicate with any other server Example Input grid Output Explanation No servers can communicate with others Example Input grid Output Explanation All three servers can communicate with at least one other server Example Input grid Output Explanation The two servers in the first row can communicate with each other The two servers in the third column can communicate with each other The server at right bottom corner can t communicate with any other server Constraints m grid length n grid i length m n grid i j or
maximum number of events that can be attended ii You are given an array of events where events i startDayi endDayi valuei The ith event starts at startDayi and ends at endDayi and if you attend this event you will receive a value of valuei You are also given an integer k which represents the maximum number of events you can attend You can only attend one event at a time If you choose to attend an event you must attend the entire event Note that the end day is inclusive that is you cannot attend two events where one of them starts and the other ends on the same day Return the maximum sum of values that you can receive by attending events Example Input events k Output Explanation Choose the green events and indexed for a total value of Example Input events k Output Explanation Choose event for a total value of Notice that you cannot attend any other event as they overlap and that you do not have to attend k events Example Input events k Output Explanation Although the events do not overlap you can only attend events Pick the highest valued three Constraints k events length k events length startDayi endDayi valuei
lexicographical numbers Given an integer n return all the numbers in the range n sorted in lexicographical order You must write an algorithm that runs in O n time and uses O extra space Example Input n Output Example Input n Output Constraints n
minimum time to visit a cell in a grid You are given a m x n matrix grid consisting of non negative integers where grid row col represents the minimum time required to be able to visit the cell row col which means you can visit the cell row col only when the time you visit it is greater than or equal to grid row col You are standing in the top left cell of the matrix in the second and you must move to any adjacent cell in the four directions up down left and right Each move you make takes second Return the minimum time required in which you can visit the bottom right cell of the matrix If you cannot visit the bottom right cell then return Example Input grid Output Explanation One of the paths that we can take is the following at t we are on the cell at t we move to the cell It is possible because grid at t we move to the cell It is possible because grid at t we move to the cell It is possible because grid at t we move to the cell It is possible because grid at t we move to the cell It is possible because grid at t we move to the cell It is possible because grid at t we move to the cell It is possible because grid The final time is It can be shown that it is the minimum time possible Example Input grid Output Explanation There is no path from the top left to the bottom right cell Constraints m grid length n grid i length m n m n grid i j grid
walking robot simulation A robot on an infinite XY plane starts at point facing north The robot can receive a sequence of these three possible types of commands Turn left degrees Turn right degrees k Move forward k units one unit at a time Some of the grid squares are obstacles The ith obstacle is at grid point obstacles i xi yi If the robot runs into an obstacle then it will instead stay in its current location and move on to the next command Return the maximum Euclidean distance that the robot ever gets from the origin squared i e if the distance is return Note North means Y direction East means X direction South means Y direction West means X direction Example Input commands obstacles Output Explanation The robot starts at Move north units to Turn right Move east units to The furthest point the robot ever gets from the origin is which squared is units away Example Input commands obstacles Output Explanation The robot starts at Move north units to Turn right Move east unit and get blocked by the obstacle at robot is at Turn left Move north units to The furthest point the robot ever gets from the origin is which squared is units away Example Input commands obstacles Output Explanation The robot starts at Move north units to Turn right Turn right Move south units to The furthest point the robot ever gets from the origin is which squared is units away Constraints commands length commands i is either or an integer in the range obstacles length xi yi The answer is guaranteed to be less than
merge sorted array You are given two integer arrays and sorted in non decreasing order and two integers m and n representing the number of elements in and respectively Merge and into a single array sorted in non decreasing order The final sorted array should not be returned by the function but instead be stored inside the array To accommodate this has a length of m n where the first m elements denote the elements that should be merged and the last n elements are set to and should be ignored has a length of n Example Input m n Output Explanation The arrays we are merging are and The result of the merge is with the underlined elements coming from Example Input m n Output Explanation The arrays we are merging are and The result of the merge is Example Input m n Output Explanation The arrays we are merging are and The result of the merge is Note that because m there are no elements in The is only there to ensure the merge result can fit in Constraints length m n length n m n m n i j Follow up Can you come up with an algorithm that runs in O m n time
design skiplist Design a Skiplist without using any built in libraries A skiplist is a data structure that takes O log n time to add erase and search Comparing with treap and red black tree which has the same function and performance the code length of Skiplist can be comparatively short and the idea behind Skiplists is just simple linked lists For example we have a Skiplist containing and we want to add and into it The Skiplist works this way Artyom Kalinin CC BY SA via Wikimedia Commons You can see there are many layers in the Skiplist Each layer is a sorted linked list With the help of the top layers add erase and search can be faster than O n It can be proven that the average time complexity for each operation is O log n and space complexity is O n See more about Skiplist https en wikipedia org wiki Implement the Skiplist class Skiplist Initializes the object of the skiplist bool search int target Returns true if the integer target exists in the Skiplist or false otherwise void add int num Inserts the value num into the SkipList bool erase int num Removes the value num from the Skiplist and returns true If num does not exist in the Skiplist do nothing and return false If there exist multiple num values removing any one of them is fine Note that duplicates may exist in the Skiplist your code needs to handle this situation Example Input Skiplist add add add search add search erase erase search Output null null null null false null true false true false Explanation Skiplist skiplist new Skiplist skiplist add skiplist add skiplist add skiplist search return False skiplist add skiplist search return True skiplist erase return False is not in skiplist skiplist erase return True skiplist search return False has already been erased Constraints num target At most calls will be made to search add and erase
minimum number of taps to open to water a garden There is a one dimensional garden on the x axis The garden starts at the point and ends at the point n i e The length of the garden is n There are n taps located at points n in the garden Given an integer n and an integer array ranges of length n where ranges i indexed means the i th tap can water the area i ranges i i ranges i if it was open Return the minimum number of taps that should be open to water the whole garden If the garden cannot be watered return Example Input n ranges Output Explanation The tap at point can cover the interval The tap at point can cover the interval The tap at point can cover the interval The tap at point can cover the interval The tap at point can cover the interval The tap at point can cover the interval Opening Only the second tap will water the whole garden Example Input n ranges Output Explanation Even if you activate all the four taps you cannot water the whole garden Constraints n ranges length n ranges i
number of provinces There are n cities Some of them are connected while some are not If city a is connected directly with city b and city b is connected directly with city c then city a is connected indirectly with city c A province is a group of directly or indirectly connected cities and no other cities outside of the group You are given an n x n matrix isConnected where isConnected i j if the ith city and the jth city are directly connected and isConnected i j otherwise Return the total number of provinces Example Input isConnected Output Example Input isConnected Output Constraints n n isConnected length n isConnected i length isConnected i j is or isConnected i i isConnected i j isConnected j i
number of distinct roll sequences You are given an integer n You roll a fair sided dice n times Determine the total number of distinct sequences of rolls possible such that the following conditions are satisfied The greatest common divisor of any adjacent values in the sequence is equal to There is at least a gap of rolls between equal valued rolls More formally if the value of the ith roll is equal to the value of the jth roll then abs i j Return the total number of distinct sequences possible Since the answer may be very large return it modulo Two sequences are considered distinct if at least one element is different Example Input n Output Explanation Some of the possible sequences are etc Some invalid sequences are is invalid since the first and third roll have an equal value and abs i and j are indexed is invalid since the greatest common divisor of and There are a total of distinct sequences possible so we return Example Input n Output Explanation Some of the possible sequences are Some invalid sequences are since the greatest common divisor is not equal to There are a total of distinct sequences possible so we return Constraints n
minimum genetic mutation A gene string can be represented by an character long string with choices from A C G and T Suppose we need to investigate a mutation from a gene string startGene to a gene string endGene where one mutation is defined as one single character changed in the gene string For example AACCGGTT AACCGGTA is one mutation There is also a gene bank bank that records all the valid gene mutations A gene must be in bank to make it a valid gene string Given the two gene strings startGene and endGene and the gene bank bank return the minimum number of mutations needed to mutate from startGene to endGene If there is no such a mutation return Note that the starting point is assumed to be valid so it might not be included in the bank Example Input startGene AACCGGTT endGene AACCGGTA bank AACCGGTA Output Example Input startGene AACCGGTT endGene AAACGGTA bank AACCGGTA AACCGCTA AAACGGTA Output Constraints bank length startGene length endGene length bank i length startGene endGene and bank i consist of only the characters A C G T
not boring movies SQL Schema Table Cinema Column Name Type id int movie varchar description varchar rating float id is the primary key for this table Each row contains information about the name of a movie its genre and its rating rating is a decimal places float in the range Write an SQL query to report the movies with an odd numbered ID and a description that is not boring Return the result table ordered by rating in descending order The query result format is in the following example Example Input Cinema table id movie description rating War great Science fiction irish boring Ice song Fantacy House card Interesting Output id movie description rating House card Interesting War great Explanation We have three movies with odd numbered IDs and The movie with ID is boring so we do not include it in the answer
circular array loop You are playing a game involving a circular array of non zero integers nums Each nums i denotes the number of indices forward backward you must move if you are located at index i If nums i is positive move nums i steps forward and If nums i is negative move nums i steps backward Since the array is circular you may assume that moving forward from the last element puts you on the first element and moving backwards from the first element puts you on the last element A cycle in the array consists of a sequence of indices seq of length k where Following the movement rules above results in the repeating index sequence seq seq seq k seq Every nums seq j is either all positive or all negative k Return true if there is a cycle in nums or false otherwise Example Input nums Output true Explanation The graph shows how the indices are connected White nodes are jumping forward while red is jumping backward We can see the cycle and all of its nodes are white jumping in the same direction Example Input nums Output false Explanation The graph shows how the indices are connected White nodes are jumping forward while red is jumping backward The only cycle is of size so we return false Example Input nums Output true Explanation The graph shows how the indices are connected White nodes are jumping forward while red is jumping backward We can see the cycle and while it is of size it has a node jumping forward and a node jumping backward so it is not a cycle We can see the cycle and all of its nodes are white jumping in the same direction Constraints nums length nums i nums i Follow up Could you solve it in O n time complexity and O extra space complexity
shortest path in a grid with obstacles elimination You are given an m x n integer matrix grid where each cell is either empty or obstacle You can move up down left or right from and to an empty cell in one step Return the minimum number of steps to walk from the upper left corner to the lower right corner m n given that you can eliminate at most k obstacles If it is not possible to find such walk return Example Input grid k Output Explanation The shortest path without eliminating any obstacle is The shortest path with one obstacle elimination at position is Such path is Example Input grid k Output Explanation We need to eliminate at least two obstacles to find such a walk Constraints m grid length n grid i length m n k m n grid i j is either or grid grid m n
matrix diagonal sum Given a square matrix mat return the sum of the matrix diagonals Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal Example Input mat Output Explanation Diagonals sum Notice that element mat is counted only once Example Input mat Output Example Input mat Output Constraints n mat length mat i length n mat i j
copy list with random pointer A linked list of length n is given such that each node contains an additional random pointer which could point to any node in the list or null Construct a deep copy of the list The deep copy should consist of exactly n brand new nodes where each new node has its value set to the value of its corresponding original node Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state None of the pointers in the new list should point to nodes in the original list For example if there are two nodes X and Y in the original list where X random Y then for the corresponding two nodes x and y in the copied list x random y Return the head of the copied linked list The linked list is represented in the input output as a list of n nodes Each node is represented as a pair of val where val an integer representing Node val the index of the node range from to n that the random pointer points to or null if it does not point to any node Your code will only be given the head of the original linked list Example Input head null Output null Example Input head Output Example Input head null null Output null null Constraints n Node val Node random is null or is pointing to some node in the linked list
convert bst to greater tree Given the root of a Binary Search Tree BST convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST As a reminder a binary search tree is a tree that satisfies these constraints The left subtree of a node contains only nodes with keys less than the node s key The right subtree of a node contains only nodes with keys greater than the node s key Both the left and right subtrees must also be binary search trees Example Input root null null null null null null Output null null null null null null Example Input root null Output null Constraints The number of nodes in the tree is in the range Node val All the values in the tree are unique root is guaranteed to be a valid binary search tree Note This question is the same as https leetcode com problems binary search tree to greater sum tree
binary search tree to greater sum tree Given the root of a Binary Search Tree BST convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST As a reminder a binary search tree is a tree that satisfies these constraints The left subtree of a node contains only nodes with keys less than the node s key The right subtree of a node contains only nodes with keys greater than the node s key Both the left and right subtrees must also be binary search trees Example Input root null null null null null null Output null null null null null null Example Input root null Output null Constraints The number of nodes in the tree is in the range Node val All the values in the tree are unique Note This question is the same as https leetcode com problems convert bst to greater tree
maximum total importance of roads You are given an integer n denoting the number of cities in a country The cities are numbered from to n You are also given a integer array roads where roads i ai bi denotes that there exists a bidirectional road connecting cities ai and bi You need to assign each city with an integer value from to n where each value can only be used once The importance of a road is then defined as the sum of the values of the two cities it connects Return the maximum total importance of all roads possible after assigning the values optimally Example Input n roads Output Explanation The figure above shows the country and the assigned values of The road has an importance of The road has an importance of The road has an importance of The road has an importance of The road has an importance of The road has an importance of The total importance of all roads is It can be shown that we cannot obtain a greater total importance than Example Input n roads Output Explanation The figure above shows the country and the assigned values of The road has an importance of The road has an importance of The road has an importance of The total importance of all roads is It can be shown that we cannot obtain a greater total importance than Constraints n roads length roads i length ai bi n ai bi There are no duplicate roads
linked list cycle ii Given the head of a linked list return the node where the cycle begins If there is no cycle return null There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer Internally pos is used to denote the index of the node that tail s next pointer is connected to indexed It is if there is no cycle Note that pos is not passed as a parameter Do not modify the linked list Example Input head pos Output tail connects to node index Explanation There is a cycle in the linked list where tail connects to the second node Example Input head pos Output tail connects to node index Explanation There is a cycle in the linked list where tail connects to the first node Example Input head pos Output no cycle Explanation There is no cycle in the linked list Constraints The number of the nodes in the list is in the range Node val pos is or a valid index in the linked list Follow up Can you solve it using O i e constant memory
sum of beauty in the array You are given a indexed integer array nums For each index i i nums length the beauty of nums i equals if nums j nums i nums k for all j i and for all i k nums length if nums i nums i nums i and the previous condition is not satisfied if none of the previous conditions holds Return the sum of beauty of all nums i where i nums length Example Input nums Output Explanation For each index i in the range i The beauty of nums equals Example Input nums Output Explanation For each index i in the range i The beauty of nums equals The beauty of nums equals Example Input nums Output Explanation For each index i in the range i The beauty of nums equals Constraints nums length nums i
ones and zeroes You are given an array of binary strings strs and two integers m and n Return the size of the largest subset of strs such that there are at most m s and n s in the subset A set x is a subset of a set y if all elements of x are also elements of y Example Input strs m n Output Explanation The largest subset with at most s and s is so the answer is Other valid but smaller subsets include and is an invalid subset because it contains s greater than the maximum of Example Input strs m n Output Explanation The largest subset is so the answer is Constraints strs length strs i length strs i consists only of digits and m n
subtract the product and sum of digits of an integer Given an integer number n return the difference between the product of its digits and the sum of its digits Example Input n Output Explanation Product of digits Sum of digits Result Example Input n Output Explanation Product of digits Sum of digits Result Constraints n
equal rational numbers Given two strings s and t each of which represents a non negative rational number return true if and only if they represent the same number The strings may use parentheses to denote the repeating part of the rational number A rational number can be represented using up to three parts IntegerPart NonRepeatingPart and a RepeatingPart The number will be represented in one of the following three ways IntegerPart For example and IntegerPart NonRepeatingPart For example and IntegerPart NonRepeatingPart RepeatingPart For example The repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets For example Example Input s t Output true Explanation Because represents and represents the strings represent the same number Example Input s t Output true Example Input s t Output true Explanation represents repeated forever which equals See this link for an explanation represents the number which is formed correctly IntegerPart and NonRepeatingPart Constraints Each part consists only of digits The IntegerPart does not have leading zeros except for the zero itself IntegerPart length NonRepeatingPart length RepeatingPart length
valid palindrome A phrase is a palindrome if after converting all uppercase letters into lowercase letters and removing all non alphanumeric characters it reads the same forward and backward Alphanumeric characters include letters and numbers Given a string s return true if it is a palindrome or false otherwise Example Input s A man a plan a canal Panama Output true Explanation amanaplanacanalpanama is a palindrome Example Input s race a car Output false Explanation raceacar is not a palindrome Example Input s Output true Explanation s is an empty string after removing non alphanumeric characters Since an empty string reads the same forward and backward it is a palindrome Constraints s length s consists only of printable ASCII characters
maximum points you can obtain from cards There are several cards arranged in a row and each card has an associated number of points The points are given in the integer array cardPoints In one step you can take one card from the beginning or from the end of the row You have to take exactly k cards Your score is the sum of the points of the cards you have taken Given the integer array cardPoints and the integer k return the maximum score you can obtain Example Input cardPoints k Output Explanation After the first step your score will always be However choosing the rightmost card first will maximize your total score The optimal strategy is to take the three cards on the right giving a final score of Example Input cardPoints k Output Explanation Regardless of which two cards you take your score will always be Example Input cardPoints k Output Explanation You have to take all the cards Your score is the sum of points of all cards Constraints cardPoints length cardPoints i k cardPoints length
movie rating SQL Schema Table Movies Column Name Type int title varchar is the primary key for this table title is the name of the movie Table Users Column Name Type int name varchar is the primary key for this table Table MovieRating Column Name Type int int rating int date is the primary key for this table This table contains the rating of a movie by a user in their review is the user s review date Write an SQL query to Find the name of the user who has rated the greatest number of movies In case of a tie return the lexicographically smaller user name Find the movie name with the highest average rating in February In case of a tie return the lexicographically smaller movie name The query result format is in the following example Example Input Movies table title Avengers Frozen Joker Users table name Daniel Monica Maria James MovieRating table rating Output results Daniel Frozen Explanation Daniel and Monica have rated movies Avengers Frozen and Joker but Daniel is smaller lexicographically Frozen and Joker have a rating average of in February but Frozen is smaller lexicographically
text justification Given an array of strings words and a width maxWidth format the text such that each line has exactly maxWidth characters and is fully left and right justified You should pack your words in a greedy approach that is pack as many words as you can in each line Pad extra spaces when necessary so that each line has exactly maxWidth characters Extra spaces between words should be distributed as evenly as possible If the number of spaces on a line does not divide evenly between words the empty slots on the left will be assigned more spaces than the slots on the right For the last line of text it should be left justified and no extra space is inserted between words Note A word is defined as a character sequence consisting of non space characters only Each word s length is guaranteed to be greater than and not exceed maxWidth The input array words contains at least one word Example Input words This is an example of text justification maxWidth Output This is an example of text justification Example Input words What must be acknowledgment shall be maxWidth Output What must be acknowledgment shall be Explanation Note that the last line is shall be instead of shall be because the last line must be left justified instead of fully justified Note that the second line is also left justified because it contains only one word Example Input words Science is what we understand well enough to explain to a computer Art is everything else we do maxWidth Output Science is what we understand well enough to explain to a computer Art is everything else we do Constraints words length words i length words i consists of only English letters and symbols maxWidth words i length maxWidth
strange printer ii There is a strange printer with the following two special requirements On each turn the printer will print a solid rectangular pattern of a single color on the grid This will cover up the existing colors in the rectangle Once the printer has used a color for the above operation the same color cannot be used again You are given a m x n matrix targetGrid where targetGrid row col is the color in the position row col of the grid Return true if it is possible to print the matrix targetGrid otherwise return false Example Input targetGrid Output true Example Input targetGrid Output true Example Input targetGrid Output false Explanation It is impossible to form targetGrid because it is not allowed to print the same color in different turns Constraints m targetGrid length n targetGrid i length m n targetGrid row col
min max game You are given a indexed integer array nums whose length is a power of Apply the following algorithm on nums Let n be the length of nums If n end the process Otherwise create a new indexed integer array newNums of length n For every even index i where i n assign the value of newNums i as min nums i nums i For every odd index i where i n assign the value of newNums i as max nums i nums i Replace the array nums with newNums Repeat the entire process starting from step Return the last number that remains in nums after applying the algorithm Example Input nums Output Explanation The following arrays are the results of applying the algorithm repeatedly First nums Second nums Third nums is the last remaining number so we return Example Input nums Output Explanation is already the last remaining number so we return Constraints nums length nums i nums length is a power of
stream of characters Design an algorithm that accepts a stream of characters and checks if a suffix of these characters is a string of a given array of strings words For example if words abc xyz and the stream added the four characters one by one a x y and z your algorithm should detect that the suffix xyz of the characters axyz matches xyz from words Implement the StreamChecker class StreamChecker String words Initializes the object with the strings array words boolean query char letter Accepts a new character from the stream and returns true if any non empty suffix from the stream forms a word that is in words Example Input StreamChecker query query query query query query query query query query query query cd f kl a b c d e f g h i j k l Output null false false false true false true false false false false false true Explanation StreamChecker streamChecker new StreamChecker cd f kl streamChecker query a return False streamChecker query b return False streamChecker query c return False streamChecker query d return True because cd is in the wordlist streamChecker query e return False streamChecker query f return True because f is in the wordlist streamChecker query g return False streamChecker query h return False streamChecker query i return False streamChecker query j return False streamChecker query k return False streamChecker query l return True because kl is in the wordlist Constraints words length words i length words i consists of lowercase English letters letter is a lowercase English letter At most calls will be made to query
prime palindrome Given an integer n return the smallest prime palindrome greater than or equal to n An integer is prime if it has exactly two divisors and itself Note that is not a prime number For example and are all primes An integer is a palindrome if it reads the same from left to right as it does from right to left For example and are palindromes The test cases are generated so that the answer always exists and is in the range Example Input n Output Example Input n Output Example Input n Output Constraints n
check knight tour configuration There is a knight on an n x n chessboard In a valid configuration the knight starts at the top left cell of the board and visits every cell on the board exactly once You are given an n x n integer matrix grid consisting of distinct integers from the range n n where grid row col indicates that the cell row col is the grid row col th cell that the knight visited The moves are indexed Return true if grid represents a valid configuration of the knight s movements or false otherwise Note that a valid knight move consists of moving two squares vertically and one square horizontally or two squares horizontally and one square vertically The figure below illustrates all the possible eight moves of a knight from some cell Example Input grid Output true Explanation The above diagram represents the grid It can be shown that it is a valid configuration Example Input grid Output false Explanation The above diagram represents the grid The move of the knight is not valid considering its position after the move Constraints n grid length grid i length n grid row col n n All integers in grid are unique
minimum cost for tickets You have planned some train traveling one year in advance The days of the year in which you will travel are given as an integer array days Each day is an integer from to Train tickets are sold in three different ways a day pass is sold for costs dollars a day pass is sold for costs dollars and a day pass is sold for costs dollars The passes allow that many days of consecutive travel For example if we get a day pass on day then we can travel for days and Return the minimum number of dollars you need to travel every day in the given list of days Example Input days costs Output Explanation For example here is one way to buy passes that lets you travel your travel plan On day you bought a day pass for costs which covered day On day you bought a day pass for costs which covered days On day you bought a day pass for costs which covered day In total you spent and covered all the days of your travel Example Input days costs Output Explanation For example here is one way to buy passes that lets you travel your travel plan On day you bought a day pass for costs which covered days On day you bought a day pass for costs which covered day In total you spent and covered all the days of your travel Constraints days length days i days is in strictly increasing order costs length costs i
detect squares You are given a stream of points on the X Y plane Design an algorithm that Adds new points from the stream into a data structure Duplicate points are allowed and should be treated as different points Given a query point counts the number of ways to choose three points from the data structure such that the three points and the query point form an axis aligned square with positive area An axis aligned square is a square whose edges are all the same length and are either parallel or perpendicular to the x axis and y axis Implement the DetectSquares class DetectSquares Initializes the object with an empty data structure void add int point Adds a new point point x y to the data structure int count int point Counts the number of ways to form axis aligned squares with point point x y as described above Example Input DetectSquares add add add count count add count Output null null null null null Explanation DetectSquares detectSquares new DetectSquares detectSquares add detectSquares add detectSquares add detectSquares count return You can choose The first second and third points detectSquares count return The query point cannot form a square with any points in the data structure detectSquares add Adding duplicate points is allowed detectSquares count return You can choose The first second and third points The first third and fourth points Constraints point length x y At most calls in total will be made to add and count
wiggle sort ii Given an integer array nums reorder it such that nums nums nums nums You may assume the input array always has a valid answer Example Input nums Output Explanation is also accepted Example Input nums Output Constraints nums length nums i It is guaranteed that there will be an answer for the given input nums Follow Up Can you do it in O n time and or in place with O extra space
maximum number of groups entering a competition You are given a positive integer array grades which represents the grades of students in a university You would like to enter all these students into a competition in ordered non empty groups such that the ordering meets the following conditions The sum of the grades of students in the ith group is less than the sum of the grades of students in the i th group for all groups except the last The total number of students in the ith group is less than the total number of students in the i th group for all groups except the last Return the maximum number of groups that can be formed Example Input grades Output Explanation The following is a possible way to form groups of students group has the students with grades Sum of grades Student count group has the students with grades Sum of grades Student count group has the students with grades Sum of grades Student count It can be shown that it is not possible to form more than groups Example Input grades Output Explanation We can only form group since forming groups would lead to an equal number of students in both groups Constraints grades length grades i
mirror reflection There is a special square room with mirrors on each of the four walls Except for the southwest corner there are receptors on each of the remaining corners numbered and The square room has walls of length p and a laser ray from the southwest corner first meets the east wall at a distance q from the receptor Given the two integers p and q return the number of the receptor that the ray meets first The test cases are guaranteed so that the ray will meet a receptor eventually Example Input p q Output Explanation The ray meets receptor the first time it gets reflected back to the left wall Example Input p q Output Constraints q p
longest arithmetic subsequence of given difference Given an integer array arr and an integer difference return the length of the longest subsequence in arr which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals difference A subsequence is a sequence that can be derived from arr by deleting some or no elements without changing the order of the remaining elements Example Input arr difference Output Explanation The longest arithmetic subsequence is Example Input arr difference Output Explanation The longest arithmetic subsequence is any single element Example Input arr difference Output Explanation The longest arithmetic subsequence is Constraints arr length arr i difference
filter elements from array Given an integer array arr and a filtering function fn return a new array with a fewer or equal number of elements The returned array should only contain elements where fn arr i i evaluated to a truthy value Please solve it without the built in Array filter method Example Input arr fn function n return n Output Explanation const newArray filter arr fn The function filters out values that are not greater than Example Input arr fn function firstIndex n i return i Output Explanation fn can also accept the index of each element In this case the function removes elements not at index Example Input arr fn function plusOne n return n Output Explanation Falsey values such as should be filtered out Constraints arr length arr i
min cost to connect all points You are given an array points representing integer coordinates of some points on a plane where points i xi yi The cost of connecting two points xi yi and xj yj is the manhattan distance between them xi xj yi yj where val denotes the absolute value of val Return the minimum cost to make all points connected All points are connected if there is exactly one simple path between any two points Example Input points Output Explanation We can connect the points as shown above to get the minimum cost of Notice that there is a unique path between every pair of points Example Input points Output Constraints points length xi yi All pairs xi yi are distinct
allocate mailboxes Given the array houses where houses i is the location of the ith house along a street and an integer k allocate k mailboxes in the street Return the minimum total distance between each house and its nearest mailbox The test cases are generated so that the answer fits in a bit integer Example Input houses k Output Explanation Allocate mailboxes in position and Minimum total distance from each houses to nearest mailboxes is Example Input houses k Output Explanation Allocate mailboxes in position and Minimum total distance from each houses to nearest mailboxes is Constraints k houses length houses i All the integers of houses are unique
detect cycles in 2d grid Given a array of characters grid of size m x n you need to find if there exists any cycle consisting of the same value in grid A cycle is a path of length or more in the grid that starts and ends at the same cell From a given cell you can move to one of the cells adjacent to it in one of the four directions up down left or right if it has the same value of the current cell Also you cannot move to the cell that you visited in your last move For example the cycle is invalid because from we visited which was the last visited cell Return true if any cycle of the same value exists in grid otherwise return false Example Input grid a a a a a b b a a b b a a a a a Output true Explanation There are two valid cycles shown in different colors in the image below Example Input grid c c c a c d c c c c e c f c c c Output true Explanation There is only one valid cycle highlighted in the image below Example Input grid a b b b z b b b a Output false Constraints m grid length n grid i length m n grid consists only of lowercase English letters
maximum score from removing substrings You are given a string s and two integers x and y You can perform two types of operations any number of times Remove substring ab and gain x points For example when removing ab from cabxbae it becomes cxbae Remove substring ba and gain y points For example when removing ba from cabxbae it becomes cabxe Return the maximum points you can gain after applying the above operations on s Example Input s cdbcbbaaabab x y Output Explanation Remove the ba underlined in cdbcbbaaabab Now s cdbcbbaaab and points are added to the score Remove the ab underlined in cdbcbbaaab Now s cdbcbbaa and points are added to the score Remove the ba underlined in cdbcbbaa Now s cdbcba and points are added to the score Remove the ba underlined in cdbcba Now s cdbc and points are added to the score Total score Example Input s aabbaaxybbaabb x y Output Constraints s length x y s consists of lowercase English letters
serialize and deserialize binary tree Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer or transmitted across a network connection link to be reconstructed later in the same or another computer environment Design an algorithm to serialize and deserialize a binary tree There is no restriction on how your serialization deserialization algorithm should work You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure Clarification The input output format is the same as how LeetCode serializes a binary tree You do not necessarily need to follow this format so please be creative and come up with different approaches yourself Example Input root null null Output null null Example Input root Output Constraints The number of nodes in the tree is in the range Node val
maximum of absolute value expression Given two arrays of integers with equal lengths return the maximum value of i j i j i j where the maximum is taken over all i j length Example Input Output Example Input Output Constraints length length i i
total appeal of a string The appeal of a string is the number of distinct characters found in the string For example the appeal of abbca is because it has distinct characters a b and c Given a string s return the total appeal of all of its substrings A substring is a contiguous sequence of characters within a string Example Input s abbca Output Explanation The following are the substrings of abbca Substrings of length a b b c a have an appeal of and respectively The sum is Substrings of length ab bb bc ca have an appeal of and respectively The sum is Substrings of length abb bbc bca have an appeal of and respectively The sum is Substrings of length abbc bbca have an appeal of and respectively The sum is Substrings of length abbca has an appeal of The sum is The total sum is Example Input s code Output Explanation The following are the substrings of code Substrings of length c o d e have an appeal of and respectively The sum is Substrings of length co od de have an appeal of and respectively The sum is Substrings of length cod ode have an appeal of and respectively The sum is Substrings of length code has an appeal of The sum is The total sum is Constraints s length s consists of lowercase English letters
minimum adjacent swaps for k consecutive ones You are given an integer array nums and an integer k nums comprises of only s and s In one move you can choose two adjacent indices and swap their values Return the minimum number of moves required so that nums has k consecutive s Example Input nums k Output Explanation In move nums could be and have consecutive s Example Input nums k Output Explanation In moves the leftmost can be shifted right until nums Example Input nums k Output Explanation nums already has consecutive s Constraints nums length nums i is or k sum nums
second largest digit in a string Given an alphanumeric string s return the second largest numerical digit that appears in s or if it does not exist An alphanumeric string is a string consisting of lowercase English letters and digits Example Input s Output Explanation The digits that appear in s are The second largest digit is Example Input s Output Explanation The digits that appear in s are There is no second largest digit Constraints s length s consists of only lowercase English letters and or digits
counter Given an integer n return a counter function This counter function initially returns n and then returns more than the previous value every subsequent time it is called n n n etc Example Input n call call call Output Explanation counter The first time counter is called it returns n counter Returns more than the previous time counter Returns more than the previous time Example Input n call call call call call Output Explanation counter initially returns Then increases after each sebsequent call Constraints n At most calls to counter will be made
count primes Given an integer n return the number of prime numbers that are strictly less than n Example Input n Output Explanation There are prime numbers less than they are Example Input n Output Example Input n Output Constraints n
allow one function call Given a function fn return a new function that is identical to the original function except that it ensures fn is called at most once The first time the returned function is called it should return the same result as fn Every subsequent time it is called it should return undefined Example Input fn a b c a b c calls Output calls value Explanation const onceFn once fn onceFn onceFn undefined fn was not called Example Input fn a b c a b c calls Output calls value Explanation const onceFn once fn onceFn onceFn undefined fn was not called onceFn undefined fn was not called Constraints calls length calls i length JSON stringify calls length
implement rand10() using rand7() Given the API that generates a uniform random integer in the range write a function that generates a uniform random integer in the range You can only call the API and you shouldn t call any other API Please do not use a language s built in random API Each test case will have one internal argument n the number of times that your implemented function will be called while testing Note that this is not an argument passed to Example Input n Output Example Input n Output Example Input n Output Constraints n Follow up What is the expected value for the number of calls to function Could you minimize the number of calls to
shortest cycle in a graph There is a bi directional graph with n vertices where each vertex is labeled from to n The edges in the graph are represented by a given integer array edges where edges i ui vi denotes an edge between vertex ui and vertex vi Every vertex pair is connected by at most one edge and no vertex has an edge to itself Return the length of the shortest cycle in the graph If no cycle exists return A cycle is a path that starts and ends at the same node and each edge in the path is used only once Example Input n edges Output Explanation The cycle with the smallest length is Example Input n edges Output Explanation There are no cycles in this graph Constraints n edges length edges i length ui vi n ui vi There are no repeated edges
last moment before all ants fall out of a plank We have a wooden plank of the length n units Some ants are walking on the plank each ant moves with a speed of unit per second Some of the ants move to the left the other move to the right When two ants moving in two different directions meet at some point they change their directions and continue moving again Assume changing directions does not take any additional time When an ant reaches one end of the plank at a time t it falls out of the plank immediately Given an integer n and two integer arrays left and right the positions of the ants moving to the left and the right return the moment when the last ant s fall out of the plank Example Input n left right Output Explanation In the image above The ant at index is named A and going to the right The ant at index is named B and going to the right The ant at index is named C and going to the left The ant at index is named D and going to the left The last moment when an ant was on the plank is t seconds After that it falls immediately out of the plank i e We can say that at t there are no ants on the plank Example Input n left right Output Explanation All ants are going to the right the ant at index needs seconds to fall Example Input n left right Output Explanation All ants are going to the left the ant at index needs seconds to fall Constraints n left length n left i n right length n right i n left length right length n All values of left and right are unique and each value can appear only in one of the two arrays
simplified fractions Given an integer n return a list of all simplified fractions between and exclusive such that the denominator is less than or equal to n You can return the answer in any order Example Input n Output Explanation is the only unique fraction with a denominator less than or equal to Example Input n Output Example Input n Output Explanation is not a simplified fraction because it can be simplified to Constraints n
maximum subsequence score You are given two indexed integer arrays and of equal length n and a positive integer k You must choose a subsequence of indices from of length k For chosen indices ik your score is defined as The sum of the selected elements from multiplied with the minimum of the selected elements from It can defined simply as ik min ik Return the maximum possible score A subsequence of indices of an array is a set that can be derived from the set n by deleting some or no elements Example Input k Output Explanation The four possible subsequence scores are We choose the indices and with score min We choose the indices and with score min We choose the indices and with score min We choose the indices and with score min Therefore we return the max score which is Example Input k Output Explanation Choosing index is optimal is the maximum possible score Constraints n length length n i j k n
find the prefix common array of two arrays You are given two indexed integer permutations A and B of length n A prefix common array of A and B is an array C such that C i is equal to the count of numbers that are present at or before the index i in both A and B Return the prefix common array of A and B A sequence of n integers is called a permutation if it contains all integers from to n exactly once Example Input A B Output Explanation At i no number is common so C At i and are common in A and B so C At i and are common in A and B so C At i and are common in A and B so C Example Input A B Output Explanation At i no number is common so C At i only is common in A and B so C At i and are common in A and B so C Constraints A length B length n A i B i n It is guaranteed that A and B are both a permutation of n integers
top k frequent elements Given an integer array nums and an integer k return the k most frequent elements You may return the answer in any order Example Input nums k Output Example Input nums k Output Constraints nums length nums i k is in the range the number of unique elements in the array It is guaranteed that the answer is unique Follow up Your algorithm s time complexity must be better than O n log n where n is the array s size
determine if two events have conflict You are given two arrays of strings that represent two inclusive events that happened on the same day and where and Event times are valid hours format in the form of HH MM A conflict happens when two events have some non empty intersection i e some moment is common to both events Return true if there is a conflict between two events Otherwise return false Example Input Output true Explanation The two events intersect at time Example Input Output true Explanation The two events intersect starting from to Example Input Output false Explanation The two events do not intersect Constraints length length i length i length All the event times follow the HH MM format
count good nodes in binary tree Given a binary tree root a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X Return the number of good nodes in the binary tree Example Input root null Output Explanation Nodes in blue are good Root Node is always a good node Node is the maximum value in the path starting from the root Node is the maximum value in the path Node is the maximum value in the path Example Input root null Output Explanation Node is not good because is higher than it Example Input root Output Explanation Root is considered as good Constraints The number of nodes in the binary tree is in the range Each node s value is between
fancy sequence Write an API that generates fancy sequences using the append addAll and multAll operations Implement the Fancy class Fancy Initializes the object with an empty sequence void append val Appends an integer val to the end of the sequence void addAll inc Increments all existing values in the sequence by an integer inc void multAll m Multiplies all existing values in the sequence by an integer m int getIndex idx Gets the current value at index idx indexed of the sequence modulo If the index is greater or equal than the length of the sequence return Example Input Fancy append addAll append multAll getIndex addAll append multAll getIndex getIndex getIndex Output null null null null null null null null Explanation Fancy fancy new Fancy fancy append fancy sequence fancy addAll fancy sequence fancy append fancy sequence fancy multAll fancy sequence fancy getIndex return fancy addAll fancy sequence fancy append fancy sequence fancy multAll fancy sequence fancy getIndex return fancy getIndex return fancy getIndex return Constraints val inc m idx At most calls total will be made to append addAll multAll and getIndex
is graph bipartite? There is an undirected graph with n nodes where each node is numbered between and n You are given a array graph where graph u is an array of nodes that node u is adjacent to More formally for each v in graph u there is an undirected edge between node u and node v The graph has the following properties There are no self edges graph u does not contain u There are no parallel edges graph u does not contain duplicate values If v is in graph u then u is in graph v the graph is undirected The graph may not be connected meaning there may be two nodes u and v such that there is no path between them A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B Return true if and only if it is bipartite Example Input graph Output false Explanation There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other Example Input graph Output true Explanation We can partition the nodes into two sets and Constraints graph length n n graph u length n graph u i n graph u does not contain u All the values of graph u are unique If graph u contains v then graph v contains u
sort the students by their kth score There is a class with m students and n exams You are given a indexed m x n integer matrix score where each row represents one student and score i j denotes the score the ith student got in the jth exam The matrix score contains distinct integers only You are also given an integer k Sort the students i e the rows of the matrix by their scores in the kth indexed exam from the highest to the lowest Return the matrix after sorting it Example Input score k Output Explanation In the above diagram S denotes the student while E denotes the exam The student with index scored in exam which is the highest score so they got first place The student with index scored in exam which is the second highest score so they got second place The student with index scored in exam which is the lowest score so they got third place Example Input score k Output Explanation In the above diagram S denotes the student while E denotes the exam The student with index scored in exam which is the highest score so they got first place The student with index scored in exam which is the lowest score so they got second place Constraints m score length n score i length m n score i j score consists of distinct integers k n
grumpy bookstore owner There is a bookstore owner that has a store open for n minutes Every minute some number of customers enter the store You are given an integer array customers of length n where customers i is the number of the customer that enters the store at the start of the ith minute and all those customers leave after the end of that minute On some minutes the bookstore owner is grumpy You are given a binary array grumpy where grumpy i is if the bookstore owner is grumpy during the ith minute and is otherwise When the bookstore owner is grumpy the customers of that minute are not satisfied otherwise they are satisfied The bookstore owner knows a secret technique to keep themselves not grumpy for minutes consecutive minutes but can only use it once Return the maximum number of customers that can be satisfied throughout the day Example Input customers grumpy minutes Output Explanation The bookstore owner keeps themselves not grumpy for the last minutes The maximum number of customers that can be satisfied Example Input customers grumpy minutes Output Constraints n customers length grumpy length minutes n customers i grumpy i is either or
best sightseeing pair You are given an integer array values where values i represents the value of the ith sightseeing spot Two sightseeing spots i and j have a distance j i between them The score of a pair i j of sightseeing spots is values i values j i j the sum of the values of the sightseeing spots minus the distance between them Return the maximum score of a pair of sightseeing spots Example Input values Output Explanation i j values i values j i j Example Input values Output Constraints values length values i
divisor game Alice and Bob take turns playing a game with Alice starting first Initially there is a number n on the chalkboard On each player s turn that player makes a move consisting of Choosing any x with x n and n x Replacing the number n on the chalkboard with n x Also if a player cannot make a move they lose the game Return true if and only if Alice wins the game assuming both players play optimally Example Input n Output true Explanation Alice chooses and Bob has no more moves Example Input n Output false Explanation Alice chooses Bob chooses and Alice has no more moves Constraints n
non-decreasing subsequences Given an integer array nums return all the different possible non decreasing subsequences of the given array with at least two elements You may return the answer in any order Example Input nums Output Example Input nums Output Constraints nums length nums i
stone game viii Alice and Bob take turns playing a game with Alice starting first There are n stones arranged in a row On each player s turn while the number of stones is more than one they will do the following Choose an integer x and remove the leftmost x stones from the row Add the sum of the removed stones values to the player s score Place a new stone whose value is equal to that sum on the left side of the row The game stops when only one stone is left in the row The score difference between Alice and Bob is Alice s score Bob s score Alice s goal is to maximize the score difference and Bob s goal is the minimize the score difference Given an integer array stones of length n where stones i represents the value of the ith stone from the left return the score difference between Alice and Bob if they both play optimally Example Input stones Output Explanation Alice removes the first stones adds to her score and places a stone of value on the left stones Bob removes the first stones adds to his score and places a stone of value on the left stones The difference between their scores is Example Input stones Output Explanation Alice removes all stones adds to her score and places a stone of value on the left stones The difference between their scores is Example Input stones Output Explanation Alice can only make one move which is to remove both stones She adds to her score and places a stone of value on the left stones The difference between their scores is Constraints n stones length n stones i
confirmation rate SQL Schema Table Signups Column Name Type int datetime is the primary key for this table Each row contains information about the signup time for the user with ID Table Confirmations Column Name Type int datetime action ENUM is the primary key for this table is a foreign key with a reference to the Signups table action is an ENUM of the type confirmed timeout Each row of this table indicates that the user with ID requested a confirmation message at and that confirmation message was either confirmed confirmed or expired without confirming timeout The confirmation rate of a user is the number of confirmed messages divided by the total number of requested confirmation messages The confirmation rate of a user that did not request any confirmation messages is Round the confirmation rate to two decimal places Write an SQL query to find the confirmation rate of each user Return the result table in any order The query result format is in the following example Example Input Signups table Confirmations table action timeout timeout confirmed confirmed confirmed confirmed timeout Output Explanation User did not request any confirmation messages The confirmation rate is User made requests and both timed out The confirmation rate is User made requests and all were confirmed The confirmation rate is User made requests where one was confirmed and the other timed out The confirmation rate is
largest number Given a list of non negative integers nums arrange them such that they form the largest number and return it Since the result may be very large so you need to return a string instead of an integer Example Input nums Output Example Input nums Output Constraints nums length nums i
solving questions with brainpower You are given a indexed integer array questions where questions i pointsi brainpoweri The array describes the questions of an exam where you have to process the questions in order i e starting from question and make a decision whether to solve or skip each question Solving question i will earn you pointsi points but you will be unable to solve each of the next brainpoweri questions If you skip question i you get to make the decision on the next question For example given questions If question is solved you will earn points but you will be unable to solve questions and If instead question is skipped and question is solved you will earn points but you will be unable to solve questions and Return the maximum points you can earn for the exam Example Input questions Output Explanation The maximum points can be earned by solving questions and Solve question Earn points will be unable to solve the next questions Unable to solve questions and Solve question Earn points Total points earned There is no other way to earn or more points Example Input questions Output Explanation The maximum points can be earned by solving questions and Skip question Solve question Earn points will be unable to solve the next questions Unable to solve questions and Solve question Earn points Total points earned There is no other way to earn or more points Constraints questions length questions i length pointsi brainpoweri
most visited sector in a circular track Given an integer n and an integer array rounds We have a circular track which consists of n sectors labeled from to n A marathon will be held on this track the marathon consists of m rounds The ith round starts at sector rounds i and ends at sector rounds i For example round starts at sector rounds and ends at sector rounds Return an array of the most visited sectors sorted in ascending order Notice that you circulate the track in ascending order of sector numbers in the counter clockwise direction See the first example Example Input n rounds Output Explanation The marathon starts at sector The order of the visited sectors is as follows end of round end of round end of round and the marathon We can see that both sectors and are visited twice and they are the most visited sectors Sectors and are visited only once Example Input n rounds Output Example Input n rounds Output Constraints n m rounds length m rounds i n rounds i rounds i for i m
linked list in binary tree Given a binary tree root and a linked list with head as the first node Return True if all the elements in the linked list starting from the head correspond to some downward path connected in the binary tree otherwise return False In this context downward path means a path that starts at some node and goes downwards Example Input head root null null null null null null null Output true Explanation Nodes in blue form a subpath in the binary Tree Example Input head root null null null null null null null Output true Example Input head root null null null null null null null Output false Explanation There is no path in the binary tree that contains all the elements of the linked list from head Constraints The number of nodes in the tree will be in the range The number of nodes in the list will be in the range Node val for each node in the linked list and binary tree
employees whose manager left the company SQL Schema Table Employees Column Name Type int name varchar int salary int is the primary key for this table This table contains information about the employees their salary and the ID of their manager Some employees do not have a manager is null Write an SQL query to report the IDs of the employees whose salary is strictly less than and whose manager left the company When a manager leaves the company their information is deleted from the Employees table but the reports still have their set to the manager that left Return the result table ordered by The query result format is in the following example Example Input Employees table name salary Mila Antonella null Emery null Kalel Mikaela null Joziah Output Explanation The employees with a salary less than are Kalel and Joziah Kalel s manager is employee who is still in the company Joziah Joziah s manager is employee who left the company because there is no row for employee as it was deleted
largest number at least twice of others You are given an integer array nums where the largest integer is unique Determine whether the largest element in the array is at least twice as much as every other number in the array If it is return the index of the largest element or return otherwise Example Input nums Output Explanation is the largest integer For every other number in the array x is at least twice as big as x The index of value is so we return Example Input nums Output Explanation is less than twice the value of so we return Constraints nums length nums i The largest element in nums is unique
recyclable and low fat products SQL Schema Table Products Column Name Type int enum recyclable enum is the primary key for this table is an ENUM of type Y N where Y means this product is low fat and N means it is not recyclable is an ENUM of types Y N where Y means this product is recyclable and N means it is not Write an SQL query to find the ids of products that are both low fat and recyclable Return the result table in any order The query result format is in the following example Example Input Products table recyclable Y N Y Y N Y Y Y N N Output Explanation Only products and are both low fat and recyclable
nth magical number A positive integer is magical if it is divisible by either a or b Given the three integers n a and b return the nth magical number Since the answer may be very large return it modulo Example Input n a b Output Example Input n a b Output Constraints n a b
coin change ii You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money Return the number of combinations that make up that amount If that amount of money cannot be made up by any combination of the coins return You may assume that you have an infinite number of each kind of coin The answer is guaranteed to fit into a signed bit integer Example Input amount coins Output Explanation there are four ways to make up the amount Example Input amount coins Output Explanation the amount of cannot be made up just with coins of Example Input amount coins Output Constraints coins length coins i All the values of coins are unique amount
car fleet There are n cars going to the same destination along a one lane road The destination is target miles away You are given two integer array position and speed both of length n where position i is the position of the ith car and speed i is the speed of the ith car in miles per hour A car can never pass another car ahead of it but it can catch up to it and drive bumper to bumper at the same speed The faster car will slow down to match the slower car s speed The distance between these two cars is ignored i e they are assumed to have the same position A car fleet is some non empty set of cars driving at the same position and same speed Note that a single car is also a car fleet If a car catches up to a car fleet right at the destination point it will still be considered as one car fleet Return the number of car fleets that will arrive at the destination Example Input target position speed Output Explanation The cars starting at speed and speed become a fleet meeting each other at The car starting at does not catch up to any other car so it is a fleet by itself The cars starting at speed and speed become a fleet meeting each other at The fleet moves at speed until it reaches target Note that no other cars meet these fleets before the destination so the answer is Example Input target position speed Output Explanation There is only one car hence there is only one fleet Example Input target position speed Output Explanation The cars starting at speed and speed become a fleet meeting each other at The fleet moves at speed Then the fleet speed and the car starting at speed become one fleet meeting each other at The fleet moves at speed until it reaches target Constraints n position length speed length n target position i target All the values of position are unique speed i
remove digit from number to maximize result You are given a string number representing a positive integer and a character digit Return the resulting string after removing exactly one occurrence of digit from number such that the value of the resulting string in decimal form is maximized The test cases are generated such that digit occurs at least once in number Example Input number digit Output Explanation There is only one in After removing the result is Example Input number digit Output Explanation We can remove the first to get or remove the second to get Since we return Example Input number digit Output Explanation We can remove either the first or second from Both result in the string Constraints number length number consists of digits from to digit is a digit from to digit occurs at least once in number
minimum time difference Given a list of hour clock time points in HH MM format return the minimum minutes difference between any two time points in the list Example Input timePoints Output Example Input timePoints Output Constraints timePoints length timePoints i is in the format HH MM
destroying asteroids You are given an integer mass which represents the original mass of a planet You are further given an integer array asteroids where asteroids i is the mass of the ith asteroid You can arrange for the planet to collide with the asteroids in any arbitrary order If the mass of the planet is greater than or equal to the mass of the asteroid the asteroid is destroyed and the planet gains the mass of the asteroid Otherwise the planet is destroyed Return true if all asteroids can be destroyed Otherwise return false Example Input mass asteroids Output true Explanation One way to order the asteroids is The planet collides with the asteroid with a mass of New planet mass The planet collides with the asteroid with a mass of New planet mass The planet collides with the asteroid with a mass of New planet mass The planet collides with the asteroid with a mass of New planet mass The planet collides with the asteroid with a mass of New planet mass All asteroids are destroyed Example Input mass asteroids Output false Explanation The planet cannot ever gain enough mass to destroy the asteroid with a mass of After the planet destroys the other asteroids it will have a mass of This is less than so a collision would not destroy the last asteroid Constraints mass asteroids length asteroids i
n-ary tree level order traversal Given an n ary tree return the level order traversal of its nodes values Nary Tree input serialization is represented in their level order traversal each group of children is separated by the null value See examples Example Input root null null Output Example Input root null null null null null null null null null null null Output Constraints The height of the n ary tree is less than or equal to The total number of nodes is between
the latest time to catch a bus You are given a indexed integer array buses of length n where buses i represents the departure time of the ith bus You are also given a indexed integer array passengers of length m where passengers j represents the arrival time of the jth passenger All bus departure times are unique All passenger arrival times are unique You are given an integer capacity which represents the maximum number of passengers that can get on each bus When a passenger arrives they will wait in line for the next available bus You can get on a bus that departs at x minutes if you arrive at y minutes where y x and the bus is not full Passengers with the earliest arrival times get on the bus first More formally when a bus arrives either If capacity or fewer passengers are waiting for a bus they will all get on the bus or The capacity passengers with the earliest arrival times will get on the bus Return the latest time you may arrive at the bus station to catch a bus You cannot arrive at the same time as another passenger Note The arrays buses and passengers are not necessarily sorted Example Input buses passengers capacity Output Explanation Suppose you arrive at time At time the first bus departs with the passenger At time the second bus departs with you and the passenger Note that you may not arrive at the same time as another passenger which is why you must arrive before the passenger to catch the bus Example Input buses passengers capacity Output Explanation Suppose you arrive at time At time the first bus departs with the passenger At time the second bus departs with the and passengers At time the third bus departs with the passenger and you Notice if you had arrived any later then the passenger would have taken your seat on the third bus Constraints n buses length m passengers length n m capacity buses i passengers i Each element in buses is unique Each element in passengers is unique
number of ways to buy pens and pencils You are given an integer total indicating the amount of money you have You are also given two integers and indicating the price of a pen and pencil respectively You can spend part or all of your money to buy multiple quantities or none of each kind of writing utensil Return the number of distinct ways you can buy some number of pens and pencils Example Input total Output Explanation The price of a pen is and the price of a pencil is If you buy pens you can buy or pencils If you buy pen you can buy or pencils If you buy pens you cannot buy any pencils The total number of ways to buy pens and pencils is Example Input total Output Explanation The price of both pens and pencils are which cost more than total so you cannot buy any writing utensils Therefore there is only way buy pens and pencils Constraints total
remove one element to make the array strictly increasing Given a indexed integer array nums return true if it can be made strictly increasing after removing exactly one element or false otherwise If the array is already strictly increasing return true The array nums is strictly increasing if nums i nums i for each index i nums length Example Input nums Output true Explanation By removing at index from nums it becomes is strictly increasing so return true Example Input nums Output false Explanation is the result of removing the element at index is the result of removing the element at index is the result of removing the element at index is the result of removing the element at index No resulting array is strictly increasing so return false Example Input nums Output false Explanation The result of removing any element is is not strictly increasing so return false Constraints nums length nums i
longest word in dictionary Given an array of strings words representing an English Dictionary return the longest word in words that can be built one character at a time by other words in words If there is more than one possible answer return the longest word with the smallest lexicographical order If there is no answer return the empty string Note that the word should be built from left to right with each additional character being added to the end of a previous word Example Input words w wo wor worl world Output world Explanation The word world can be built one character at a time by w wo wor and worl Example Input words a banana app appl ap apply apple Output apple Explanation Both apply and apple can be built from other words in the dictionary However apple is lexicographically smaller than apply Constraints words length words i length words i consists of lowercase English letters
rotate array Given an integer array nums rotate the array to the right by k steps where k is non negative Example Input nums k Output Explanation rotate steps to the right rotate steps to the right rotate steps to the right Example Input nums k Output Explanation rotate steps to the right rotate steps to the right Constraints nums length nums i k Follow up Try to come up with as many solutions as you can There are at least three different ways to solve this problem Could you do it in place with O extra space
kth largest element in an array Given an integer array nums and an integer k return the kth largest element in the array Note that it is the kth largest element in the sorted order not the kth distinct element You must solve it in O n time complexity Example Input nums k Output Example Input nums k Output Constraints k nums length nums i
swim in rising water You are given an n x n integer matrix grid where each value grid i j represents the elevation at that point i j The rain starts to fall At time t the depth of the water everywhere is t You can swim from a square to another directionally adjacent square if and only if the elevation of both squares individually are at most t You can swim infinite distances in zero time Of course you must stay within the boundaries of the grid during your swim Return the least time until you can reach the bottom right square n n if you start at the top left square Example Input grid Output Explanation At time you are in grid location You cannot go anywhere else because directionally adjacent neighbors have a higher elevation than t You cannot reach point until time When the depth of water is we can swim anywhere inside the grid Example Input grid Output Explanation The final route is shown We need to wait until time so that and are connected Constraints n grid length n grid i length n grid i j Each value grid i j is unique
minimum number of vertices to reach all nodes Given a directed acyclic graph with n vertices numbered from to n and an array edges where edges i fromi toi represents a directed edge from node fromi to node toi Find the smallest set of vertices from which all nodes in the graph are reachable It s guaranteed that a unique solution exists Notice that you can return the vertices in any order Example Input n edges Output Explanation It s not possible to reach all the nodes from a single vertex From we can reach From we can reach So we output Example Input n edges Output Explanation Notice that vertices and are not reachable from any other node so we must include them Also any of these vertices can reach nodes and Constraints n edges length min n n edges i length fromi toi n All pairs fromi toi are distinct
integer break Given an integer n break it into the sum of k positive integers where k and maximize the product of those integers Return the maximum product you can get Example Input n Output Explanation Example Input n Output Explanation Constraints n
check array formation through concatenation You are given an array of distinct integers arr and an array of integer arrays pieces where the integers in pieces are distinct Your goal is to form arr by concatenating the arrays in pieces in any order However you are not allowed to reorder the integers in each array pieces i Return true if it is possible to form the array arr from pieces Otherwise return false Example Input arr pieces Output true Explanation Concatenate then Example Input arr pieces Output false Explanation Even though the numbers match we cannot reorder pieces Example Input arr pieces Output true Explanation Concatenate then then Constraints pieces length arr length sum pieces i length arr length pieces i length arr length arr i pieces i j The integers in arr are distinct The integers in pieces are distinct i e If we flatten pieces in a array all the integers in this array are distinct
count sorted vowel strings Given an integer n return the number of strings of length n that consist only of vowels a e i o u and are lexicographically sorted A string s is lexicographically sorted if for all valid i s i is the same as or comes before s i in the alphabet Example Input n Output Explanation The sorted strings that consist of vowels only are a e i o u Example Input n Output Explanation The sorted strings that consist of vowels only are aa ae ai ao au ee ei eo eu ii io iu oo ou uu Note that ea is not a valid string since e comes after a in the alphabet Example Input n Output Constraints n
longest happy prefix A string is called a happy prefix if is a non empty prefix which is also a suffix excluding itself Given a string s return the longest happy prefix of s Return an empty string if no such prefix exists Example Input s level Output l Explanation s contains prefix excluding itself l le lev leve and suffix l el vel evel The largest prefix which is also suffix is given by l Example Input s ababab Output abab Explanation abab is the largest prefix which is also suffix They can overlap in the original string Constraints s length s contains only lowercase English letters
rle iterator We can use run length encoding i e RLE to encode a sequence of integers In a run length encoded array of even length encoding indexed for all even i encoding i tells us the number of times that the non negative integer value encoding i is repeated in the sequence For example the sequence arr can be encoded to be encoding encoding and encoding are also valid RLE of arr Given a run length encoded array design an iterator that iterates through it Implement the RLEIterator class RLEIterator int encoded Initializes the object with the encoded array encoded int next int n Exhausts the next n elements and returns the last element exhausted in this way If there is no element left to exhaust return instead Example Input RLEIterator next next next next Output null Explanation RLEIterator rLEIterator new RLEIterator This maps to the sequence rLEIterator next exhausts terms of the sequence returning The remaining sequence is now rLEIterator next exhausts term of the sequence returning The remaining sequence is now rLEIterator next exhausts term of the sequence returning The remaining sequence is now rLEIterator next exhausts terms returning This is because the first term exhausted was but the second term did not exist Since the last term exhausted does not exist we return Constraints encoding length encoding length is even encoding i n At most calls will be made to next
flatten deeply nested array Given a multi dimensional array arr and a depth n return a flattened version of that array A multi dimensional array is a recursive data structure that contains integers or other multi dimensional arrays A flattened array is a version of that array with some or all of the sub arrays removed and replaced with the actual elements in that sub array This flattening operation should only be done if the current depth of nesting is less than n The depth of the elements in the first array are considered to be Please solve it without the built in Array flat method Example Input arr n Output Explanation Passing a depth of n will always result in the original array This is because the smallest possible depth of a subarray is not less than n Thus no subarray should be flattened Example Input arr n Output Explanation The subarrays starting with and are all flattened This is because their depth of is less than However remains unflattened because its depth is Example Input arr n Output Explanation The maximum depth of any subarray is Thus all of them are flattened Constraints count of numbers in arr count of subarrays in arr maxDepth each number n
split message based on limit You are given a string message and a positive integer limit You must split message into one or more parts based on limit Each resulting part should have the suffix a b where b is to be replaced with the total number of parts and a is to be replaced with the index of the part starting from and going up to b Additionally the length of each resulting part including its suffix should be equal to limit except for the last part whose length can be at most limit The resulting parts should be formed such that when their suffixes are removed and they are all concatenated in order they should be equal to message Also the result should contain as few parts as possible Return the parts message would be split into as an array of strings If it is impossible to split message as required return an empty array Example Input message this is really a very awesome message limit Output thi s i s r eal ly a v ery aw eso me m es sa ge Explanation The first parts take characters each from the beginning of message The next parts take characters each to finish splitting message In this example each part including the last has length It can be shown it is not possible to split message into less than parts Example Input message short message limit Output short mess age Explanation Under the given constraints the string can be split into two parts The first part comprises of the first characters and has a length The next part comprises of the last characters and has a length Constraints message length message consists only of lowercase English letters and limit
maximum length of pair chain You are given an array of n pairs pairs where pairs i lefti righti and lefti righti A pair c d follows a pair a b if b c A chain of pairs can be formed in this fashion Return the length longest chain which can be formed You do not need to use up all the given intervals You can select pairs in any order Example Input pairs Output Explanation The longest chain is Example Input pairs Output Explanation The longest chain is Constraints n pairs length n lefti righti
escape the spreading fire You are given a indexed integer array grid of size m x n which represents a field Each cell has one of three values represents grass represents fire represents a wall that you and fire cannot pass through You are situated in the top left cell and you want to travel to the safehouse at the bottom right cell m n Every minute you may move to an adjacent grass cell After your move every fire cell will spread to all adjacent cells that are not walls Return the maximum number of minutes that you can stay in your initial position before moving while still safely reaching the safehouse If this is impossible return If you can always reach the safehouse regardless of the minutes stayed return Note that even if the fire spreads to the safehouse immediately after you have reached it it will be counted as safely reaching the safehouse A cell is adjacent to another cell if the former is directly north east south or west of the latter i e their sides are touching Example Input grid Output Explanation The figure above shows the scenario where you stay in the initial position for minutes You will still be able to safely reach the safehouse Staying for more than minutes will not allow you to safely reach the safehouse Example Input grid Output Explanation The figure above shows the scenario where you immediately move towards the safehouse Fire will spread to any cell you move towards and it is impossible to safely reach the safehouse Thus is returned Example Input grid Output Explanation The figure above shows the initial grid Notice that the fire is contained by walls and you will always be able to safely reach the safehouse Thus is returned Constraints m grid length n grid i length m n m n grid i j is either or grid grid m n
maximum number of groups getting fresh donuts There is a donuts shop that bakes donuts in batches of batchSize They have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch You are given an integer batchSize and an integer array groups where groups i denotes that there is a group of groups i customers that will visit the shop Each customer will get exactly one donut When a group visits the shop all customers of the group must be served before serving any of the following groups A group will be happy if they all get fresh donuts That is the first customer of the group does not receive a donut that was left over from the previous group You can freely rearrange the ordering of the groups Return the maximum possible number of happy groups after rearranging the groups Example Input batchSize groups Output Explanation You can arrange the groups as Then the and groups will be happy Example Input batchSize groups Output Constraints batchSize groups length groups i
minimum insertion steps to make a string palindrome Given a string s In one step you can insert any character at any index of the string Return the minimum number of steps to make s palindrome A Palindrome String is one that reads the same backward as well as forward Example Input s zzazz Output Explanation The string zzazz is already palindrome we do not need any insertions Example Input s mbadm Output Explanation String can be mbdadbm or mdbabdm Example Input s leetcode Output Explanation Inserting characters the string becomes leetcodocteel Constraints s length s consists of lowercase English letters
maximum profit in job scheduling We have n jobs where every job is scheduled to be done from startTime i to endTime i obtaining a profit of profit i You re given the startTime endTime and profit arrays return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range If you choose a job that ends at time X you will be able to start another job that starts at time X Example Input startTime endTime profit Output Explanation The subset chosen is the first and fourth job Time range we get profit of Example Input startTime endTime profit Output Explanation The subset chosen is the first fourth and fifth job Profit obtained Example Input startTime endTime profit Output Constraints startTime length endTime length profit length startTime i endTime i profit i
print binary tree Given the root of a binary tree construct a indexed m x n string matrix res that represents a formatted layout of the tree The formatted layout matrix should be constructed using the following rules The height of the tree is height and the number of rows m should be equal to height The number of columns n should be equal to Place the root node in the middle of the top row more formally at location res n For each node that has been placed in the matrix at position res r c place its left child at res r c r and its right child at res r c r Continue this process until all the nodes in the tree have been placed Any empty cells should contain the empty string Return the constructed matrix res Example Input root Output Example Input root null Output Constraints The number of nodes in the tree is in the range Node val The depth of the tree will be in the range
check if n and its double exist Given an array arr of integers check if there exist two indices i and j such that i j i j arr length arr i arr j Example Input arr Output true Explanation For i and j arr i arr j Example Input arr Output false Explanation There is no i and j that satisfy the conditions Constraints arr length arr i
rectangle area Given the coordinates of two rectilinear rectangles in a plane return the total area covered by the two rectangles The first rectangle is defined by its bottom left corner and its top right corner The second rectangle is defined by its bottom left corner and its top right corner Example Input Output Example Input Output Constraints
number of subarrays with lcm equal to k Given an integer array nums and an integer k return the number of subarrays of nums where the least common multiple of the subarray s elements is k A subarray is a contiguous non empty sequence of elements within an array The least common multiple of an array is the smallest positive integer that is divisible by all the array elements Example Input nums k Output Explanation The subarrays of nums where is the least common multiple of all the subarray s elements are Example Input nums k Output Explanation There are no subarrays of nums where is the least common multiple of all the subarray s elements Constraints nums length nums i k
count number of rectangles containing each point You are given a integer array rectangles where rectangles i li hi indicates that ith rectangle has a length of li and a height of hi You are also given a integer array points where points j xj yj is a point with coordinates xj yj The ith rectangle has its bottom left corner point at the coordinates and its top right corner point at li hi Return an integer array count of length points length where count j is the number of rectangles that contain the jth point The ith rectangle contains the jth point if xj li and yj hi Note that points that lie on the edges of a rectangle are also considered to be contained by that rectangle Example Input rectangles points Output Explanation The first rectangle contains no points The second rectangle contains only the point The third rectangle contains the points and The number of rectangles that contain the point is The number of rectangles that contain the point is Therefore we return Example Input rectangles points Output Explanation The first rectangle contains only the point The second rectangle contains only the point The third rectangle contains the points and The number of rectangles that contain the point is The number of rectangles that contain the point is Therefore we return Constraints rectangles length points length rectangles i length points j length li xj hi yj All the rectangles are unique All the points are unique
can i win In the game two players take turns adding to a running total any integer from to The player who first causes the running total to reach or exceed wins What if we change the game so that players cannot re use integers For example two players might take turns drawing from a common pool of numbers from to without replacement until they reach a total Given two integers maxChoosableInteger and desiredTotal return true if the first player to move can force a win otherwise return false Assume both players play optimally Example Input maxChoosableInteger desiredTotal Output false Explanation No matter which integer the first player choose the first player will lose The first player can choose an integer from up to If the first player choose the second player can only choose integers from up to The second player will win by choosing and get a total which is desiredTotal Same with other integers chosen by the first player the second player will always win Example Input maxChoosableInteger desiredTotal Output true Example Input maxChoosableInteger desiredTotal Output true Constraints maxChoosableInteger desiredTotal
maximum score of a node sequence There is an undirected graph with n nodes numbered from to n You are given a indexed integer array scores of length n where scores i denotes the score of node i You are also given a integer array edges where edges i ai bi denotes that there exists an undirected edge connecting nodes ai and bi A node sequence is valid if it meets the following conditions There is an edge connecting every pair of adjacent nodes in the sequence No node appears more than once in the sequence The score of a node sequence is defined as the sum of the scores of the nodes in the sequence Return the maximum score of a valid node sequence with a length of If no such sequence exists return Example Input scores edges Output Explanation The figure above shows the graph and the chosen node sequence The score of the node sequence is It can be shown that no other node sequence has a score of more than Note that the sequences and are also valid and have a score of The sequence is not valid since no edge connects nodes and Example Input scores edges Output Explanation The figure above shows the graph There are no valid node sequences of length so we return Constraints n scores length n scores i edges length edges i length ai bi n ai bi There are no duplicate edges
find winner on a tic tac toe game Tic tac toe is played by two players A and B on a x grid The rules of Tic Tac Toe are Players take turns placing characters into empty squares The first player A always places X characters while the second player B always places O characters X and O characters are always placed into empty squares never on filled ones The game ends when there are three of the same non empty character filling any row column or diagonal The game also ends if all squares are non empty No more moves can be played if the game is over Given a integer array moves where moves i rowi coli indicates that the ith move will be played on grid rowi coli return the winner of the game if it exists A or B In case the game ends in a draw return Draw If there are still movements to play return Pending You can assume that moves is valid i e it follows the rules of Tic Tac Toe the grid is initially empty and A will play first Example Input moves Output A Explanation A wins they always play first Example Input moves Output B Explanation B wins Example Input moves Output Draw Explanation The game ends in a draw since there are no moves to make Constraints moves length moves i length rowi coli There are no repeated elements on moves moves follow the rules of tic tac toe
number of unique good subsequences You are given a binary string binary A subsequence of binary is considered good if it is not empty and has no leading zeros with the exception of Find the number of unique good subsequences of binary For example if binary then all the good subsequences are so the unique good subsequences are and Note that subsequences and are not good because they have leading zeros Return the number of unique good subsequences of binary Since the answer may be very large return it modulo A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements Example Input binary Output Explanation The good subsequences of binary are The unique good subsequences are and Example Input binary Output Explanation The good subsequences of binary are The unique good subsequences are and Example Input binary Output Explanation The good subsequences of binary are The unique good subsequences are and Constraints binary length binary consists of only s and s
lru cache Design a data structure that follows the constraints of a Least Recently Used LRU cache Implement the LRUCache class LRUCache int capacity Initialize the LRU cache with positive size capacity int get int key Return the value of the key if the key exists otherwise return void put int key int value Update the value of the key if the key exists Otherwise add the key value pair to the cache If the number of keys exceeds the capacity from this operation evict the least recently used key The functions get and put must each run in O average time complexity Example Input LRUCache put put get put get put get get get Output null null null null null Explanation LRUCache lRUCache new LRUCache lRUCache put cache is lRUCache put cache is lRUCache get return lRUCache put LRU key was evicts key cache is lRUCache get returns not found lRUCache put LRU key was evicts key cache is lRUCache get return not found lRUCache get return lRUCache get return Constraints capacity key value At most calls will be made to get and put
check if the sentence is pangram A pangram is a sentence where every letter of the English alphabet appears at least once Given a string sentence containing only lowercase English letters return true if sentence is a pangram or false otherwise Example Input sentence thequickbrownfoxjumpsoverthelazydog Output true Explanation sentence contains at least one of every letter of the English alphabet Example Input sentence leetcode Output false Constraints sentence length sentence consists of lowercase English letters
odd even linked list Given the head of a singly linked list group all the nodes with odd indices together followed by the nodes with even indices and return the reordered list The first node is considered odd and the second node is even and so on Note that the relative order inside both the even and odd groups should remain as it was in the input You must solve the problem in O extra space complexity and O n time complexity Example Input head Output Example Input head Output Constraints The number of nodes in the linked list is in the range Node val
operations on tree You are given a tree with n nodes numbered from to n in the form of a parent array parent where parent i is the parent of the ith node The root of the tree is node so parent since it has no parent You want to design a data structure that allows users to lock unlock and upgrade nodes in the tree The data structure should support the following functions Lock Locks the given node for the given user and prevents other users from locking the same node You may only lock a node using this function if the node is unlocked Unlock Unlocks the given node for the given user You may only unlock a node using this function if it is currently locked by the same user Upgrade Locks the given node for the given user and unlocks all of its descendants regardless of who locked it You may only upgrade a node if all conditions are true The node is unlocked It has at least one locked descendant by any user and It does not have any locked ancestors Implement the LockingTree class LockingTree int parent initializes the data structure with the parent array lock int num int user returns true if it is possible for the user with id user to lock the node num or false otherwise If it is possible the node num will become locked by the user with id user unlock int num int user returns true if it is possible for the user with id user to unlock the node num or false otherwise If it is possible the node num will become unlocked upgrade int num int user returns true if it is possible for the user with id user to upgrade the node num or false otherwise If it is possible the node num will be upgraded Example Input LockingTree lock unlock unlock lock upgrade lock Output null true false true true true false Explanation LockingTree lockingTree new LockingTree lockingTree lock return true because node is unlocked Node will now be locked by user lockingTree unlock return false because user cannot unlock a node locked by user lockingTree unlock return true because node was previously locked by user Node will now be unlocked lockingTree lock return true because node is unlocked Node will now be locked by user lockingTree upgrade return true because node is unlocked and has at least one locked descendant node Node will now be locked by user and node will now be unlocked lockingTree lock return false because node is already locked Constraints n parent length n parent i n for i parent num n user parent represents a valid tree At most calls in total will be made to lock unlock and upgrade
minimum window substring Given two strings s and t of lengths m and n respectively return the minimum window substring of s such that every character in t including duplicates is included in the window If there is no such substring return the empty string The testcases will be generated such that the answer is unique Example Input s ADOBECODEBANC t ABC Output BANC Explanation The minimum window substring BANC includes A B and C from string t Example Input s a t a Output a Explanation The entire string s is the minimum window Example Input s a t aa Output Explanation Both a s from t must be included in the window Since the largest window of s only has one a return empty string Constraints m s length n t length m n s and t consist of uppercase and lowercase English letters Follow up Could you find an algorithm that runs in O m n time
airplane seat assignment probability n passengers board an airplane with exactly n seats The first passenger has lost the ticket and picks a seat randomly But after that the rest of the passengers will Take their own seat if it is still available and Pick other seats randomly when they find their seat occupied Return the probability that the nth person gets his own seat Example Input n Output Explanation The first person can only get the first seat Example Input n Output Explanation The second person has a probability of to get the second seat when first person gets the first seat Constraints n
minimum possible integer after at most k adjacent swaps on digits You are given a string num representing the digits of a very large integer and an integer k You are allowed to swap any two adjacent digits of the integer at most k times Return the minimum integer you can obtain also as a string Example Input num k Output Explanation The steps to obtain the minimum integer from with adjacent swaps are shown Example Input num k Output Explanation It s ok for the output to have leading zeros but the input is guaranteed not to have any leading zeros Example Input num k Output Explanation We can keep the number without any swaps Constraints num length num consists of only digits and does not contain leading zeros k
find minimum time to finish all jobs You are given an integer array jobs where jobs i is the amount of time it takes to complete the ith job There are k workers that you can assign jobs to Each job should be assigned to exactly one worker The working time of a worker is the sum of the time it takes to complete all jobs assigned to them Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized Return the minimum possible maximum working time of any assignment Example Input jobs k Output Explanation By assigning each person one job the maximum time is Example Input jobs k Output Explanation Assign the jobs the following way Worker working time Worker working time The maximum working time is Constraints k jobs length jobs i
how many numbers are smaller than the current number Given the array nums for each nums i find out how many numbers in the array are smaller than it That is for each nums i you have to count the number of valid j s such that j i and nums j nums i Return the answer in an array Example Input nums Output Explanation For nums there exist four smaller numbers than it and For nums does not exist any smaller number than it For nums there exist one smaller number than it For nums there exist one smaller number than it For nums there exist three smaller numbers than it and Example Input nums Output Example Input nums Output Constraints nums length nums i
smallest sufficient team In a project you have a list of required skills and a list of people The ith person people i contains a list of skills that the person has Consider a sufficient team a set of people such that for every required skill in there is at least one person in the team who has that skill We can represent these teams by the index of each person For example team represents the people with skills people people and people Return any sufficient team of the smallest possible size represented by the index of each person You may return the answer in any order It is guaranteed an answer exists Example Input java nodejs reactjs people java nodejs nodejs reactjs Output Example Input algorithms math java reactjs csharp aws people algorithms math java algorithms math reactjs java csharp aws reactjs csharp csharp math aws java Output Constraints length i length i consists of lowercase English letters All the strings of are unique people length people i length people i j length people i j consists of lowercase English letters All the strings of people i are unique Every skill in people i is a skill in It is guaranteed a sufficient team exists
string to integer (atoi) Implement the myAtoi string s function which converts a string to a bit signed integer similar to C C s atoi function The algorithm for myAtoi string s is as follows Read in and ignore any leading whitespace Check if the next character if not already at the end of the string is or Read this character in if it is either This determines if the final result is negative or positive respectively Assume the result is positive if neither is present Read in next the characters until the next non digit character or the end of the input is reached The rest of the string is ignored Convert these digits into an integer i e If no digits were read then the integer is Change the sign as necessary from step If the integer is out of the bit signed integer range then clamp the integer so that it remains in the range Specifically integers less than should be clamped to and integers greater than should be clamped to Return the integer as the final result Note Only the space character is considered a whitespace character Do not ignore any characters other than the leading whitespace or the rest of the string after the digits Example Input s Output Explanation The underlined characters are what is read in the caret is the current reader position Step no characters read because there is no leading whitespace Step no characters read because there is neither a nor Step is read in The parsed integer is Since is in the range the final result is Example Input s Output Explanation Step leading whitespace is read and ignored Step is read so the result should be negative Step is read in The parsed integer is Since is in the range the final result is Example Input s with words Output Explanation Step with words no characters read because there is no leading whitespace Step with words no characters read because there is neither a nor Step with words is read in reading stops because the next character is a non digit The parsed integer is Since is in the range the final result is Constraints s length s consists of English letters lower case and upper case digits and
valid number A valid number can be split up into these components in order A decimal number or an integer Optional An e or E followed by an integer A decimal number can be split up into these components in order Optional A sign character either or One of the following formats One or more digits followed by a dot One or more digits followed by a dot followed by one or more digits A dot followed by one or more digits An integer can be split up into these components in order Optional A sign character either or One or more digits For example all the following are valid numbers while the following are not valid numbers abc Given a string s return true if s is a valid number Example Input s Output true Example Input s e Output false Example Input s Output false Constraints s length s consists of only English letters both uppercase and lowercase digits plus minus or dot
remove zero sum consecutive nodes from linked list Given the head of a linked list we repeatedly delete consecutive sequences of nodes that sum to until there are no such sequences After doing so return the head of the final linked list You may return any such answer Note that in the examples below all sequences are serializations of ListNode objects Example Input head Output Note The answer would also be accepted Example Input head Output Example Input head Output Constraints The given linked list will contain between and nodes Each node in the linked list has node val
maximum candies you can get from boxes You have n boxes labeled from to n You are given four arrays status candies keys and containedBoxes where status i is if the ith box is open and if the ith box is closed candies i is the number of candies in the ith box keys i is a list of the labels of the boxes you can open after opening the ith box containedBoxes i is a list of the boxes you found inside the ith box You are given an integer array initialBoxes that contains the labels of the boxes you initially have You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it Return the maximum number of candies you can get following the rules above Example Input status candies keys containedBoxes initialBoxes Output Explanation You will be initially given box You will find candies in it and boxes and Box is closed and you do not have a key for it so you will open box You will find candies and a key to box in box In box you will find candies and box but you will not find a key to box so box will remain closed Total number of candies collected candy Example Input status candies keys containedBoxes initialBoxes Output Explanation You have initially box Opening it you can find boxes and and their keys The total number of candies will be Constraints n status length candies length keys length containedBoxes length n status i is either or candies i keys i length n keys i j n All values of keys i are unique containedBoxes i length n containedBoxes i j n All values of containedBoxes i are unique Each box is contained in one box at most initialBoxes length n initialBoxes i n
maximum number of points with cost You are given an m x n integer matrix points indexed Starting with points you want to maximize the number of points you can get from the matrix To gain points you must pick one cell in each row Picking the cell at coordinates r c will add points r c to your score However you will lose points if you pick a cell too far from the cell that you picked in the previous row For every two adjacent rows r and r where r m picking cells at coordinates r and r will subtract abs from your score Return the maximum number of points you can achieve abs x is defined as x for x x for x Example Input points Output Explanation The blue cells denote the optimal cells to pick which have coordinates and You add to your score However you must subtract abs abs from your score Your final score is Example Input points Output Explanation The blue cells denote the optimal cells to pick which have coordinates and You add to your score However you must subtract abs abs from your score Your final score is Constraints m points length n points r length m n m n points r c
closest room There is a hotel with n rooms The rooms are represented by a integer array rooms where rooms i roomIdi sizei denotes that there is a room with room number roomIdi and size equal to sizei Each roomIdi is guaranteed to be unique You are also given k queries in a array queries where queries j preferredj minSizej The answer to the jth query is the room number id of a room such that The room has a size of at least minSizej and abs id preferredj is minimized where abs x is the absolute value of x If there is a tie in the absolute difference then use the room with the smallest such id If there is no such room the answer is Return an array answer of length k where answer j contains the answer to the jth query Example Input rooms queries Output Explanation The answers to the queries are as follows Query Room number is the closest as abs and its size of is at least The answer is Query There are no rooms with a size of at least so the answer is Query Room number is the closest as abs and its size of is at least The answer is Example Input rooms queries Output Explanation The answers to the queries are as follows Query Room number is the closest as abs and its size of is at least The answer is Query Room numbers and both have sizes of at least The answer is since it is smaller Query Room number is the only room with a size of at least The answer is Constraints n rooms length n k queries length k roomIdi preferredj sizei minSizej
minimum one bit operations to make integers zero Given an integer n you must transform it into using the following operations any number of times Change the rightmost bit in the binary representation of n Change the ith bit in the binary representation of n if the i th bit is set to and the i th through bits are set to Return the minimum number of operations to transform n into Example Input n Output Explanation The binary representation of is with the operation since the bit is with the operation Example Input n Output Explanation The binary representation of is with the operation since the bit is and through bits are with the operation with the operation since the bit is with the operation Constraints n
minimum deletions to make array divisible You are given two positive integer arrays nums and numsDivide You can delete any number of elements from nums Return the minimum number of deletions such that the smallest element in nums divides all the elements of numsDivide If this is not possible return Note that an integer x divides y if y x Example Input nums numsDivide Output Explanation The smallest element in is which does not divide all the elements of numsDivide We use deletions to delete the elements in nums that are equal to which makes nums The smallest element in is which divides all the elements of numsDivide It can be shown that is the minimum number of deletions needed Example Input nums numsDivide Output Explanation We want the smallest element in nums to divide all the elements of numsDivide There is no way to delete elements from nums to allow this Constraints nums length numsDivide length nums i numsDivide i
capital gain/loss SQL Schema Table Stocks Column Name Type varchar operation enum int price int is the primary key for this table The operation column is an ENUM of type Sell Buy Each row of this table indicates that the stock which has had an operation on the day with the price It is guaranteed that each Sell operation for a stock has a corresponding Buy operation in a previous day It is also guaranteed that each Buy operation for a stock has a corresponding Sell operation in an upcoming day Write an SQL query to report the Capital gain loss for each stock The Capital gain loss of a stock is the total gain or loss after buying and selling the stock one or many times Return the result table in any order The query result format is in the following example Example Input Stocks table operation price Leetcode Buy Corona Masks Buy Leetcode Sell Handbags Buy Corona Masks Sell Corona Masks Buy Corona Masks Sell Corona Masks Buy Handbags Sell Corona Masks Sell Output Corona Masks Leetcode Handbags Explanation Leetcode stock was bought at day for and was sold at day for Capital gain Handbags stock was bought at day for and was sold at day for Capital loss Corona Masks stock was bought at day for and was sold at day for It was bought again at day for and was sold at day for At last it was bought at day for and was sold at day for Capital gain loss is the sum of capital gains losses for each Buy Sell operation
min cost climbing stairs You are given an integer array cost where cost i is the cost of ith step on a staircase Once you pay the cost you can either climb one or two steps You can either start from the step with index or the step with index Return the minimum cost to reach the top of the floor Example Input cost Output Explanation You will start at index Pay and climb two steps to reach the top The total cost is Example Input cost Output Explanation You will start at index Pay and climb two steps to reach index Pay and climb two steps to reach index Pay and climb two steps to reach index Pay and climb one step to reach index Pay and climb two steps to reach index Pay and climb one step to reach the top The total cost is Constraints cost length cost i
maximum sum of an hourglass You are given an m x n integer matrix grid We define an hourglass as a part of the matrix with the following form Return the maximum sum of the elements of an hourglass Note that an hourglass cannot be rotated and must be entirely contained within the matrix Example Input grid Output Explanation The cells shown above represent the hourglass with the maximum sum Example Input grid Output Explanation There is only one hourglass in the matrix with the sum Constraints m grid length n grid i length m n grid i j
subarray product less than k Given an array of integers nums and an integer k return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k Example Input nums k Output Explanation The subarrays that have product less than are Note that is not included as the product of is not strictly less than k Example Input nums k Output Constraints nums length nums i k
special positions in a binary matrix Given an m x n binary matrix mat return the number of special positions in mat A position i j is called special if mat i j and all other elements in row i and column j are rows and columns are indexed Example Input mat Output Explanation is a special position because mat and all other elements in row and column are Example Input mat Output Explanation and are special positions Constraints m mat length n mat i length m n mat i j is either or
reducing dishes A chef has collected data on the satisfaction level of his n dishes Chef can cook any dish in unit of time Like time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i e time i satisfaction i Return the maximum sum of like time coefficient that the chef can obtain after dishes preparation Dishes can be prepared in any order and the chef can discard some dishes to get this maximum value Example Input satisfaction Output Explanation After Removing the second and last dish the maximum total like time coefficient will be equal to Each dish is prepared in one unit of time Example Input satisfaction Output Explanation Dishes can be prepared in any order Example Input satisfaction Output Explanation People do not like the dishes No dish is prepared Constraints n satisfaction length n satisfaction i
find longest awesome substring You are given a string s An awesome substring is a non empty substring of s such that we can make any number of swaps in order to make it a palindrome Return the length of the maximum length awesome substring of s Example Input s Output Explanation is the longest awesome substring we can form the palindrome with some swaps Example Input s Output Example Input s Output Explanation is the longest awesome substring we can form the palindrome with some swaps Constraints s length s consists only of digits
apply discount to prices A sentence is a string of single space separated words where each word can contain digits lowercase letters and the dollar sign A word represents a price if it is a sequence of digits preceded by a dollar sign For example and represent prices while and do not You are given a string sentence representing a sentence and an integer discount For each word representing a price apply a discount of discount on the price and update the word in the sentence All updated prices should be represented with exactly two decimal places Return a string representing the modified sentence Note that all prices will contain at most digits Example Input sentence there are and candies in the shop discount Output there are and candies in the shop Explanation The words which represent prices are and A discount on yields so is replaced by A discount on yields Since we need to have exactly decimal places after a price we replace with Example Input sentence discount Output Explanation Applying a discount on any price will result in The words representing prices are and Each of them is replaced by Constraints sentence length sentence consists of lowercase English letters digits and sentence does not have leading or trailing spaces All words in sentence are separated by a single space All prices will be positive numbers without leading zeros All prices will have at most digits discount
rearrange array elements by sign You are given a indexed integer array nums of even length consisting of an equal number of positive and negative integers You should rearrange the elements of nums such that the modified array follows the given conditions Every consecutive pair of integers have opposite signs For all integers with the same sign the order in which they were present in nums is preserved The rearranged array begins with a positive integer Return the modified array after rearranging the elements to satisfy the aforementioned conditions Example Input nums Output Explanation The positive integers in nums are The negative integers are The only possible way to rearrange them such that they satisfy all conditions is Other ways such as are incorrect because they do not satisfy one or more conditions Example Input nums Output Explanation is the only positive integer and the only negative integer in nums So nums is rearranged to Constraints nums length nums length is even nums i nums consists of equal number of positive and negative integers
word frequency Write a bash script to calculate the frequency of each word in a text file words txt For simplicity sake you may assume words txt contains only lowercase characters and space characters Each word must consist of lowercase characters only Words are separated by one or more whitespace characters Example Assume that words txt has the following content the day is sunny the the the sunny is is Your script should output the following sorted by descending frequency the is sunny day Note Don t worry about handling ties it is guaranteed that each word s frequency count is unique Could you write it in one line using Unix pipes
median of two sorted arrays Given two sorted arrays and of size m and n respectively return the median of the two sorted arrays The overall run time complexity should be O log m n Example Input Output Explanation merged array and median is Example Input Output Explanation merged array and median is Constraints length m length n m n m n i i
time needed to inform all employees A company has n employees with a unique ID for each employee from to n The head of the company is the one with headID Each employee has one direct manager given in the manager array where manager i is the direct manager of the i th employee manager headID Also it is guaranteed that the subordination relationships have a tree structure The head of the company wants to inform all the company employees of an urgent piece of news He will inform his direct subordinates and they will inform their subordinates and so on until all employees know about the urgent news The i th employee needs informTime i minutes to inform all of his direct subordinates i e After informTime i minutes all his direct subordinates can start spreading the news Return the number of minutes needed to inform all the employees about the urgent news Example Input n headID manager informTime Output Explanation The head of the company is the only employee in the company Example Input n headID manager informTime Output Explanation The head of the company with id is the direct manager of all the employees in the company and needs minute to inform them all The tree structure of the employees in the company is shown Constraints n headID n manager length n manager i n manager headID informTime length n informTime i informTime i if employee i has no subordinates It is guaranteed that all the employees can be informed
cut off trees for golf event You are asked to cut off all the trees in a forest for a golf event The forest is represented as an m x n matrix In this matrix means the cell cannot be walked through represents an empty cell that can be walked through A number greater than represents a tree in a cell that can be walked through and this number is the tree s height In one step you can walk in any of the four directions north east south and west If you are standing in a cell with a tree you can choose whether to cut it off You must cut off the trees in order from shortest to tallest When you cut off a tree the value at its cell becomes an empty cell Starting from the point return the minimum steps you need to walk to cut off all the trees If you cannot cut off all the trees return Note The input is generated such that no two trees have the same height and there is at least one tree needs to be cut off Example Input forest Output Explanation Following the path above allows you to cut off the trees from shortest to tallest in steps Example Input forest Output Explanation The trees in the bottom row cannot be accessed as the middle row is blocked Example Input forest Output Explanation You can follow the same path as Example to cut off all the trees Note that you can cut off the first tree at before making any steps Constraints m forest length n forest i length m n forest i j Heights of all trees are distinct
increasing order search tree Given the root of a binary search tree rearrange the tree in in order so that the leftmost node in the tree is now the root of the tree and every node has no left child and only one right child Example Input root null null null null Output null null null null null null null null Example Input root Output null null Constraints The number of nodes in the given tree will be in the range Node val
sort the people You are given an array of strings names and an array heights that consists of distinct positive integers Both arrays are of length n For each index i names i and heights i denote the name and height of the ith person Return names sorted in descending order by the people s heights Example Input names Mary John Emma heights Output Mary Emma John Explanation Mary is the tallest followed by Emma and John Example Input names Alice Bob Bob heights Output Bob Alice Bob Explanation The first Bob is the tallest followed by Alice and the second Bob Constraints n names length heights length n names i length heights i names i consists of lower and upper case English letters All the values of heights are distinct
truncate sentence A sentence is a list of words that are separated by a single space with no leading or trailing spaces Each of the words consists of only uppercase and lowercase English letters no punctuation For example Hello World HELLO and hello world hello world are all sentences You are given a sentence s and an integer k You want to truncate s such that it contains only the first k words Return s after truncating it Example Input s Hello how are you Contestant k Output Hello how are you Explanation The words in s are Hello how are you Contestant The first words are Hello how are you Hence you should return Hello how are you Example Input s What is the solution to this problem k Output What is the solution Explanation The words in s are What is the solution to this problem The first words are What is the solution Hence you should return What is the solution Example Input s chopper is not a tanuki k Output chopper is not a tanuki Constraints s length k is in the range the number of words in s s consist of only lowercase and uppercase English letters and spaces The words in s are separated by a single space There are no leading or trailing spaces
remove stones to minimize the total You are given a indexed integer array piles where piles i represents the number of stones in the ith pile and an integer k You should apply the following operation exactly k times Choose any piles i and remove floor piles i stones from it Notice that you can apply the operation on the same pile more than once Return the minimum possible total number of stones remaining after applying the k operations floor x is the greatest integer that is smaller than or equal to x i e rounds x down Example Input piles k Output Explanation Steps of a possible scenario are Apply the operation on pile The resulting piles are Apply the operation on pile The resulting piles are The total number of stones in is Example Input piles k Output Explanation Steps of a possible scenario are Apply the operation on pile The resulting piles are Apply the operation on pile The resulting piles are Apply the operation on pile The resulting piles are The total number of stones in is Constraints piles length piles i k
number of nodes in the sub-tree with the same label You are given a tree i e a connected undirected graph that has no cycles consisting of n nodes numbered from to n and exactly n edges The root of the tree is the node and each node of the tree has a label which is a lower case character given in the string labels i e The node with the number i has the label labels i The edges array is given on the form edges i ai bi which means there is an edge between nodes ai and bi in the tree Return an array of size n where ans i is the number of nodes in the subtree of the ith node which have the same label as node i A subtree of a tree T is the tree consisting of a node in T and all of its descendant nodes Example Input n edges labels abaedcd Output Explanation Node has label a and its sub tree has node with label a as well thus the answer is Notice that any node is part of its sub tree Node has a label b The sub tree of node contains nodes and as nodes and have different labels than node the answer is just the node itself Example Input n edges labels bbbb Output Explanation The sub tree of node contains only node so the answer is The sub tree of node contains only node so the answer is The sub tree of node contains nodes and both have label b thus the answer is The sub tree of node contains nodes and all with label b thus the answer is Example Input n edges labels aabab Output Constraints n edges length n edges i length ai bi n ai bi labels length n labels is consisting of only of lowercase English letters
count good meals A good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two You can pick any two different foods to make a good meal Given an array of integers deliciousness where deliciousness i is the deliciousness of the ith item of food return the number of different good meals you can make from this list modulo Note that items with different indices are considered different even if they have the same deliciousness value Example Input deliciousness Output Explanation The good meals are and Their respective sums are and all of which are powers of Example Input deliciousness Output Explanation The good meals are with ways with ways and with ways Constraints deliciousness length deliciousness i
max dot product of two subsequences Given two arrays and Return the maximum dot product between non empty subsequences of and with the same length A subsequence of a array is a new array which is formed from the original array by deleting some can be none of the characters without disturbing the relative positions of the remaining characters ie is a subsequence of while is not Example Input Output Explanation Take subsequence from and subsequence from Their dot product is Example Input Output Explanation Take subsequence from and subsequence from Their dot product is Example Input Output Explanation Take subsequence from and subsequence from Their dot product is Constraints length length i i
orderly queue You are given a string s and an integer k You can choose one of the first k letters of s and append it at the end of the string Return the lexicographically smallest string you could have after applying the mentioned step any number of moves Example Input s cba k Output acb Explanation In the first move we move the character c to the end obtaining the string bac In the second move we move the character b to the end obtaining the final result acb Example Input s baaca k Output aaabc Explanation In the first move we move the character b to the end obtaining the string aacab In the second move we move the character c to the end obtaining the final result aaabc Constraints k s length s consist of lowercase English letters
where will the ball fall You have a D grid of size m x n representing a box and you have n balls The box is open on the top and bottom sides Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left A board that redirects the ball to the right spans the top left corner to the bottom right corner and is represented in the grid as A board that redirects the ball to the left spans the top right corner to the bottom left corner and is represented in the grid as We drop one ball at the top of each column of the box Each ball can get stuck in the box or fall out of the bottom A ball gets stuck if it hits a V shaped pattern between two boards or if a board redirects the ball into either wall of the box Return an array answer of size n where answer i is the column that the ball falls out of at the bottom after dropping the ball from the ith column at the top or if the ball gets stuck in the box Example Input grid Output Explanation This example is shown in the photo Ball is dropped at column and falls out of the box at column Ball is dropped at column and will get stuck in the box between column and and row Ball is dropped at column and will get stuck on the box between column and and row Ball is dropped at column and will get stuck on the box between column and and row Ball is dropped at column and will get stuck on the box between column and and row Example Input grid Output Explanation The ball gets stuck against the left wall Example Input grid Output Constraints m grid length n grid i length m n grid i j is or
minimum cost to reach destination in time There is a country of n cities numbered from to n where all the cities are connected by bi directional roads The roads are represented as a integer array edges where edges i xi yi timei denotes a road between cities xi and yi that takes timei minutes to travel There may be multiple roads of differing travel times connecting the same two cities but no road connects a city to itself Each time you pass through a city you must pay a passing fee This is represented as a indexed integer array passingFees of length n where passingFees j is the amount of dollars you must pay when you pass through city j In the beginning you are at city and want to reach city n in maxTime minutes or less The cost of your journey is the summation of passing fees for each city that you passed through at some moment of your journey including the source and destination cities Given maxTime edges and passingFees return the minimum cost to complete your journey or if you cannot complete it within maxTime minutes Example Input maxTime edges passingFees Output Explanation The path to take is which takes minutes and has worth of passing fees Example Input maxTime edges passingFees Output Explanation The path to take is which takes minutes and has worth of passing fees You cannot take path since it would take too long Example Input maxTime edges passingFees Output Explanation There is no way to reach city from city within minutes Constraints maxTime n passingFees length n n edges length xi yi n timei passingFees j The graph may contain multiple edges between two nodes The graph does not contain self loops
check if array pairs are divisible by k Given an array of integers arr of even length n and an integer k We want to divide the array into exactly n pairs such that the sum of each pair is divisible by k Return true If you can find a way to do that or false otherwise Example Input arr k Output true Explanation Pairs are and Example Input arr k Output true Explanation Pairs are and Example Input arr k Output false Explanation You can try all possible pairs to see that there is no way to divide arr into pairs each with sum divisible by Constraints arr length n n n is even arr i k
the score of students solving math expression You are given a string s that contains digits addition symbols and multiplication symbols only representing a valid math expression of single digit numbers e g This expression was given to n elementary school students The students were instructed to get the answer of the expression by following this order of operations Compute multiplication reading from left to right Then Compute addition reading from left to right You are given an integer array answers of length n which are the submitted answers of the students in no particular order You are asked to grade the answers by following these rules If an answer equals the correct answer of the expression this student will be rewarded points Otherwise if the answer could be interpreted as if the student applied the operators in the wrong order but had correct arithmetic this student will be rewarded points Otherwise this student will be rewarded points Return the sum of the points of the students Example Input s answers Output Explanation As illustrated above the correct answer of the expression is therefore one student is rewarded points A student might have applied the operators in this wrong order Therefore one student is rewarded points The points for the students are The sum of the points is Example Input s answers Output Explanation The correct answer of the expression is therefore three students are rewarded points each A student might have applied the operators in this wrong order Therefore two students are rewarded points The points for the students are The sum of the points is Example Input s answers Output Explanation The correct answer of the expression is If a student had incorrectly done the answer would also be By the rules of grading the students will still be rewarded points as they got the correct answer not points The points for the students are The sum of the points is Constraints s length s represents a valid expression that contains only digits and only All the integer operands in the expression are in the inclusive range The count of all operators and in the math expression Test data are generated such that the correct answer of the expression is in the range of n answers length n answers i
convert object to json string Given an object return a valid JSON string of that object You may assume the object only inludes strings integers arrays objects booleans and null The returned string should not include extra spaces The order of keys should be the same as the order returned by Object keys Please solve it without using the built in JSON stringify method Example Input object y x Output y x Explanation Return the JSON representation Note that the order of keys should be the same as the order returned by Object keys Example Input object a str b c true d null Output a str b c true d null Explanation The primitives of JSON are strings numbers booleans and null Example Input object key a b null Hello Output key a b null Hello Explanation Objects and arrays can include other objects and arrays Example Input object true Output true Explanation Primitive types are valid inputs Constraints object includes strings integers booleans arrays objects and null JSON stringify object length maxNestingLevel all strings will only contain alphanumeric characters
count salary categories SQL Schema Table Accounts Column Name Type int income int is the primary key for this table Each row contains information about the monthly income for one bank account Write an SQL query to report the number of bank accounts of each salary category The salary categories are Low Salary All the salaries strictly less than Average Salary All the salaries in the inclusive range High Salary All the salaries strictly greater than The result table must contain all three categories If there are no accounts in a category then report Return the result table in any order The query result format is in the following example Example Input Accounts table income Output category Low Salary Average Salary High Salary Explanation Low Salary Account Average Salary No accounts High Salary Accounts and
maximize the confusion of an exam A teacher is writing a test with n true false questions with T denoting true and F denoting false He wants to confuse the students by maximizing the number of consecutive questions with the same answer multiple trues or multiple falses in a row You are given a string answerKey where answerKey i is the original answer to the ith question In addition you are given an integer k the maximum number of times you may perform the following operation Change the answer key for any question to T or F i e set answerKey i to T or F Return the maximum number of consecutive T s or F s in the answer key after performing the operation at most k times Example Input answerKey TTFF k Output Explanation We can replace both the F s with T s to make answerKey TTTT There are four consecutive T s Example Input answerKey TFFT k Output Explanation We can replace the first T with an F to make answerKey FFFT Alternatively we can replace the second T with an F to make answerKey TFFF In both cases there are three consecutive F s Example Input answerKey TTFTTFTT k Output Explanation We can replace the first F to make answerKey TTTTTFTT Alternatively we can replace the second F to make answerKey TTFTTTTT In both cases there are five consecutive T s Constraints n answerKey length n answerKey i is either T or F k n
distinct echo substrings Return the number of distinct non empty substrings of text that can be written as the concatenation of some string with itself i e it can be written as a a where a is some string Example Input text abcabcabc Output Explanation The substrings are abcabc bcabca and cabcab Example Input text leetcodeleetcode Output Explanation The substrings are ee and leetcodeleetcode Constraints text length text has only lowercase English letters
cyclically rotating a grid You are given an m x n integer matrix grid where m and n are both even integers and an integer k The matrix is composed of several layers which is shown in the below image where each color is its own layer A cyclic rotation of the matrix is done by cyclically rotating each layer in the matrix To cyclically rotate a layer once each element in the layer will take the place of the adjacent element in the counter clockwise direction An example rotation is shown below Return the matrix after applying k cyclic rotations to it Example Input grid k Output Explanation The figures above represent the grid at every state Example Input grid k Output Explanation The figures above represent the grid at every state Constraints m grid length n grid i length m n Both m and n are even integers grid i j k
reformat department table SQL Schema Table Department Column Name Type id int revenue int month varchar id month is the primary key of this table The table has information about the revenue of each department per month The month has values in Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec Write an SQL query to reformat the table such that there is a department id column and a revenue column for each month Return the result table in any order The query result format is in the following example Example Input Department table id revenue month Jan Jan Feb Feb Mar Output id null null null null null null null Explanation The revenue from Apr to Dec is null Note that the result table has columns for the department id for the months
bulls and cows You are playing the Bulls and Cows game with your friend You write down a secret number and ask your friend to guess what the number is When your friend makes a guess you provide a hint with the following info The number of bulls which are digits in the guess that are in the correct position The number of cows which are digits in the guess that are in your secret number but are located in the wrong position Specifically the non bull digits in the guess that could be rearranged such that they become bulls Given the secret number secret and your friend s guess guess return the hint for your friend s guess The hint should be formatted as xAyB where x is the number of bulls and y is the number of cows Note that both secret and guess may contain duplicate digits Example Input secret guess Output Explanation Bulls are connected with a and cows are underlined Example Input secret guess Output Explanation Bulls are connected with a and cows are underlined or Note that only one of the two unmatched is counted as a cow since the non bull digits can only be rearranged to allow one to be a bull Constraints secret length guess length secret length guess length secret and guess consist of digits only
find words that can be formed by characters You are given an array of strings words and a string chars A string is good if it can be formed by characters from chars each character can only be used once Return the sum of lengths of all good strings in words Example Input words cat bt hat tree chars atach Output Explanation The strings that can be formed are cat and hat so the answer is Example Input words hello world leetcode chars welldonehoneyr Output Explanation The strings that can be formed are hello and world so the answer is Constraints words length words i length chars length words i and chars consist of lowercase English letters
minimum changes to make alternating binary string You are given a string s consisting only of the characters and In one operation you can change any to or vice versa The string is called alternating if no two adjacent characters are equal For example the string is alternating while the string is not Return the minimum number of operations needed to make s alternating Example Input s Output Explanation If you change the last character to s will be which is alternating Example Input s Output Explanation s is already alternating Example Input s Output Explanation You need two operations to reach or Constraints s length s i is either or
closest dessert cost You would like to make dessert and are preparing to buy the ingredients You have n ice cream base flavors and m types of toppings to choose from You must follow these rules when making your dessert There must be exactly one ice cream base You can add one or more types of topping or have no toppings at all There are at most two of each type of topping You are given three inputs baseCosts an integer array of length n where each baseCosts i represents the price of the ith ice cream base flavor toppingCosts an integer array of length m where each toppingCosts i is the price of one of the ith topping target an integer representing your target price for dessert You want to make a dessert with a total cost as close to target as possible Return the closest possible cost of the dessert to target If there are multiple return the lower one Example Input baseCosts toppingCosts target Output Explanation Consider the following combination all indexed Choose base cost Take of topping cost x Take of topping cost x Total Example Input baseCosts toppingCosts target Output Explanation Consider the following combination all indexed Choose base cost Take of topping cost x Take of topping cost x Take of topping cost x Total You cannot make a dessert with a total cost of Example Input baseCosts toppingCosts target Output Explanation It is possible to make desserts with cost and Return as it is the lower cost Constraints n baseCosts length m toppingCosts length n m baseCosts i toppingCosts i target
design a stack with increment operation Design a stack that supports increment operations on its elements Implement the CustomStack class CustomStack int maxSize Initializes the object with maxSize which is the maximum number of elements in the stack void push int x Adds x to the top of the stack if the stack has not reached the maxSize int pop Pops and returns the top of the stack or if the stack is empty void inc int k int val Increments the bottom k elements of the stack by val If there are less than k elements in the stack increment all the elements in the stack Example Input CustomStack push push pop push push push increment increment pop pop pop pop Output null null null null null null null null Explanation CustomStack stk new CustomStack Stack is Empty stk push stack becomes stk push stack becomes stk pop return Return top of the stack stack becomes stk push stack becomes stk push stack becomes stk push stack still Do not add another elements as size is stk increment stack becomes stk increment stack becomes stk pop return Return top of the stack stack becomes stk pop return Return top of the stack stack becomes stk pop return Return top of the stack stack becomes stk pop return Stack is empty return Constraints maxSize x k val At most calls will be made to each method of increment push and pop each separately
minimum number of swaps to make the binary string alternating Given a binary string s return the minimum number of character swaps to make it alternating or if it is impossible The string is called alternating if no two adjacent characters are equal For example the strings and are alternating while the string is not Any two characters may be swapped even if they are not adjacent Example Input s Output Explanation Swap positions and The string is now alternating Example Input s Output Explanation The string is already alternating no swaps are needed Example Input s Output Constraints s length s i is either or
maximum number of words found in sentences A sentence is a list of words that are separated by a single space with no leading or trailing spaces You are given an array of strings sentences where each sentences i represents a single sentence Return the maximum number of words that appear in a single sentence Example Input sentences alice and bob love leetcode i think so too this is great thanks very much Output Explanation The first sentence alice and bob love leetcode has words in total The second sentence i think so too has words in total The third sentence this is great thanks very much has words in total Thus the maximum number of words in a single sentence comes from the third sentence which has words Example Input sentences please wait continue to fight continue to win Output Explanation It is possible that multiple sentences contain the same number of words In this example the second and third sentences underlined have the same number of words Constraints sentences length sentences i length sentences i consists only of lowercase English letters and only sentences i does not have leading or trailing spaces All the words in sentences i are separated by a single space
pacific atlantic water flow There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean The Pacific Ocean touches the island s left and top edges and the Atlantic Ocean touches the island s right and bottom edges The island is partitioned into a grid of square cells You are given an m x n integer matrix heights where heights r c represents the height above sea level of the cell at coordinate r c The island receives a lot of rain and the rain water can flow to neighboring cells directly north south east and west if the neighboring cell s height is less than or equal to the current cell s height Water can flow from any cell adjacent to an ocean into the ocean Return a list of grid coordinates result where result i ri ci denotes that rain water can flow from cell ri ci to both the Pacific and Atlantic oceans Example Input heights Output Explanation The following cells can flow to the Pacific and Atlantic oceans as shown below Pacific Ocean Atlantic Ocean Pacific Ocean Atlantic Ocean Pacific Ocean Atlantic Ocean Pacific Ocean Atlantic Ocean Pacific Ocean Atlantic Ocean Pacific Ocean Atlantic Ocean Pacific Ocean Atlantic Ocean Note that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans Example Input heights Output Explanation The water can flow from the only cell to the Pacific and Atlantic oceans Constraints m heights length n heights r length m n heights r c
largest 3-same-digit number in string You are given a string num representing a large integer An integer is good if it meets the following conditions It is a substring of num with length It consists of only one unique digit Return the maximum good integer as a string or an empty string if no such integer exists Note A substring is a contiguous sequence of characters within a string There may be leading zeroes in num or a good integer Example Input num Output Explanation There are two distinct good integers and is the largest so we return Example Input num Output Explanation is the only good integer Example Input num Output Explanation No substring of length consists of only one unique digit Therefore there are no good integers Constraints num length num only consists of digits
find xor sum of all pairs bitwise and The XOR sum of a list is the bitwise XOR of all its elements If the list only contains one element then its XOR sum will be equal to this element For example the XOR sum of is equal to XOR XOR XOR and the XOR sum of is equal to You are given two indexed arrays and that consist only of non negative integers Consider the list containing the result of i AND j bitwise AND for every i j pair where i length and j length Return the XOR sum of the aforementioned list Example Input Output Explanation The list AND AND AND AND AND AND The XOR sum XOR XOR XOR XOR XOR Example Input Output Explanation The list AND The XOR sum Constraints length length i j
minimum recolors to get k consecutive black blocks You are given a indexed string blocks of length n where blocks i is either W or B representing the color of the ith block The characters W and B denote the colors white and black respectively You are also given an integer k which is the desired number of consecutive black blocks In one operation you can recolor a white block such that it becomes a black block Return the minimum number of operations needed such that there is at least one occurrence of k consecutive black blocks Example Input blocks WBBWWBBWBW k Output Explanation One way to achieve consecutive black blocks is to recolor the and blocks so that blocks BBBBBBBWBW It can be shown that there is no way to achieve consecutive black blocks in less than operations Therefore we return Example Input blocks WBWBBBW k Output Explanation No changes need to be made since consecutive black blocks already exist Therefore we return Constraints n blocks length n blocks i is either W or B k n
palindrome pairs You are given a indexed array of unique strings words A palindrome pair is a pair of integers i j such that i j words length i j and words i words j the concatenation of the two strings is a palindrome Return an array of all the palindrome pairs of words Example Input words abcd dcba lls s sssll Output Explanation The palindromes are abcddcba dcbaabcd slls llssssll Example Input words bat tab cat Output Explanation The palindromes are battab tabbat Example Input words a Output Explanation The palindromes are a a Constraints words length words i length words i consists of lowercase English letters
smallest rotation with highest score You are given an array nums You can rotate it by a non negative integer k so that the array becomes nums k nums k nums nums length nums nums nums k Afterward any entries that are less than or equal to their index are worth one point For example if we have nums and we rotate by k it becomes This is worth points because no points no points one point one point one point Return the rotation index k that corresponds to the highest score we can achieve if we rotated nums by it If there are multiple answers return the smallest such index k Example Input nums Output Explanation Scores for each k are listed below k nums score k nums score k nums score k nums score k nums score So we should choose k which has the highest score Example Input nums Output Explanation nums will always have points no matter how it shifts So we will choose the smallest k which is Constraints nums length nums i nums length
falling squares There are several squares being dropped onto the X axis of a plane You are given a integer array positions where positions i lefti sideLengthi represents the ith square with a side length of sideLengthi that is dropped with its left edge aligned with X coordinate lefti Each square is dropped one at a time from a height above any landed squares It then falls downward negative Y direction until it either lands on the top side of another square or on the X axis A square brushing the left right side of another square does not count as landing on it Once it lands it freezes in place and cannot be moved After each square is dropped you must record the height of the current tallest stack of squares Return an integer array ans where ans i represents the height described above after dropping the ith square Example Input positions Output Explanation After the first drop the tallest stack is square with a height of After the second drop the tallest stack is squares and with a height of After the third drop the tallest stack is still squares and with a height of Thus we return an answer of Example Input positions Output Explanation After the first drop the tallest stack is square with a height of After the second drop the tallest stack is either square or square both with heights of Thus we return an answer of Note that square only brushes the right side of square which does not count as landing on it Constraints positions length lefti sideLengthi
array of objects to matrix Write a function that converts an array of objects arr into a matrix m arr is an array of objects or arrays Each item in the array can be deeply nested with child arrays and child objects It can also contain numbers strings booleans and null values The first row m should be the column names If there is no nesting the column names are the unique keys within the objects If there is nesting the column names are the respective paths in the object separated by Each of the remaining rows corresponds to an object in arr Each value in the matrix corresponds to a value in an object If a given object doesn t contain a value for a given column the cell should contain an empty string The colums in the matrix should be in lexographically ascending order Example Input arr b a b a Output a b Explanation There are two unique column names in the two objects a and b a corresponds with b coresponds with Example Input arr a b c d Output a b c d Explanation There are unique column names a b c d The first object has values associated with a and b The second object has values associated with c and d The third object has no keys so it is just a row of empty strings Example Input arr a b c a b d Output a b a c a d Explanation In this example the objects are nested The keys represent the full path to each value separated by periods There are three paths a b a c a d Example Input arr a null b true c x Output a b c null true x Explanation Arrays are also considered objects with their keys being their indices Each array has one element so the keys are a b and c Example Input arr Output Explanation There are no keys so every row is an empty array Constraints arr length unique keys
number of ways to earn points There is a test that has n types of questions You are given an integer target and a indexed integer array types where types i counti marksi indicates that there are counti questions of the ith type and each one of them is worth marksi points Return the number of ways you can earn exactly target points in the exam Since the answer may be too large return it modulo Note that questions of the same type are indistinguishable For example if there are questions of the same type then solving the and questions is the same as solving the and questions or the and questions Example Input target types Output Explanation You can earn points in one of the seven ways Solve questions of the type Solve questions of the type and question of the type Solve questions of the type and questions of the type Solve questions of the type and question of the type Solve question of the type question of the type and question of the type Solve questions of the type Solve questions of the type Example Input target types Output Explanation You can earn points in one of the four ways Solve questions of the type Solve questions of the type and question of the type Solve questions of the type and questions of the type Solve question of the type Example Input target types Output Explanation You can only earn points by answering all questions Constraints target n types length n types i length counti marksi
a number after a double reversal Reversing an integer means to reverse all its digits For example reversing gives Reversing gives as the leading zeros are not retained Given an integer num reverse num to get then reverse to get Return true if equals num Otherwise return false Example Input num Output true Explanation Reverse num to get then reverse to get which equals num Example Input num Output false Explanation Reverse num to get then reverse to get which does not equal num Example Input num Output true Explanation Reverse num to get then reverse to get which equals num Constraints num
minimum number of operations to reinitialize a permutation You are given an even integer n You initially have a permutation perm of size n where perm i i indexed In one operation you will create a new array arr and for each i If i then arr i perm i If i then arr i perm n i You will then assign arr to perm Return the minimum non zero number of operations you need to perform on perm to return the permutation to its initial value Example Input n Output Explanation perm initially After the operation perm So it takes only operation Example Input n Output Explanation perm initially After the operation perm After the operation perm So it takes only operations Example Input n Output Constraints n n is even
paint house iii There is a row of m houses in a small city each house must be painted with one of the n colors labeled from to n some houses that have been painted last summer should not be painted again A neighborhood is a maximal group of continuous houses that are painted with the same color For example houses contains neighborhoods Given an array houses an m x n matrix cost and an integer target where houses i is the color of the house i and if the house is not painted yet cost i j is the cost of paint the house i with the color j Return the minimum cost of painting all the remaining houses in such a way that there are exactly target neighborhoods If it is not possible return Example Input houses cost m n target Output Explanation Paint houses of this way This array contains target neighborhoods Cost of paint all houses Example Input houses cost m n target Output Explanation Some houses are already painted Paint the houses of this way This array contains target neighborhoods Cost of paint the first and last house Example Input houses cost m n target Output Explanation Houses are already painted with a total of neighborhoods different of target Constraints m houses length cost length n cost i length m n target m houses i n cost i j
minimum addition to make integer beautiful You are given two positive integers n and target An integer is considered beautiful if the sum of its digits is less than or equal to target Return the minimum non negative integer x such that n x is beautiful The input will be generated such that it is always possible to make n beautiful Example Input n target Output Explanation Initially n is and its digit sum is After adding n becomes and digit sum becomes It can be shown that we can not make n beautiful with adding non negative integer less than Example Input n target Output Explanation Initially n is and its digit sum is After adding n becomes and digit sum becomes It can be shown that we can not make n beautiful with adding non negative integer less than Example Input n target Output Explanation Initially n is and its digit sum is which is already smaller than or equal to target Constraints n target The input will be generated such that it is always possible to make n beautiful
container with most water You are given an integer array height of length n There are n vertical lines drawn such that the two endpoints of the ith line are i and i height i Find two lines that together with the x axis form a container such that the container contains the most water Return the maximum amount of water a container can store Notice that you may not slant the container Example Input height Output Explanation The above vertical lines are represented by array In this case the max area of water blue section the container can contain is Example Input height Output Constraints n height length n height i
mini parser Given a string s represents the serialization of a nested list implement a parser to deserialize it and return the deserialized NestedInteger Each element is either an integer or a list whose elements may also be integers or other lists Example Input s Output Explanation You should return a NestedInteger object which contains a single integer Example Input s Output Explanation Return a NestedInteger object containing a nested list with elements An integer containing value A nested list containing two elements i An integer containing value ii A nested list with one element a An integer containing value Constraints s length s consists of digits square brackets negative sign and commas s is the serialization of valid NestedInteger All the values in the input are in the range
filter restaurants by vegan-friendly, price and distance Given the array restaurants where restaurants i idi ratingi veganFriendlyi pricei distancei You have to filter the restaurants using three filters The veganFriendly filter will be either true meaning you should only include restaurants with veganFriendlyi set to true or false meaning you can include any restaurant In addition you have the filters maxPrice and maxDistance which are the maximum value for price and distance of restaurants you should consider respectively Return the array of restaurant IDs after filtering ordered by rating from highest to lowest For restaurants with the same rating order them by id from highest to lowest For simplicity veganFriendlyi and veganFriendly take value when it is true and when it is false Example Input restaurants veganFriendly maxPrice maxDistance Output Explanation The restaurants are Restaurant id rating veganFriendly price distance Restaurant id rating veganFriendly price distance Restaurant id rating veganFriendly price distance Restaurant id rating veganFriendly price distance Restaurant id rating veganFriendly price distance After filter restaurants with veganFriendly maxPrice and maxDistance we have restaurant restaurant and restaurant ordered by rating from highest to lowest Example Input restaurants veganFriendly maxPrice maxDistance Output Explanation The restaurants are the same as in example but in this case the filter veganFriendly therefore all restaurants are considered Example Input restaurants veganFriendly maxPrice maxDistance Output Constraints restaurants length restaurants i length idi ratingi pricei distancei maxPrice maxDistance veganFriendlyi and veganFriendly are or All idi are distinct
binary tree paths Given the root of a binary tree return all root to leaf paths in any order A leaf is a node with no children Example Input root null Output Example Input root Output Constraints The number of nodes in the tree is in the range Node val
tuple with same product Given an array nums of distinct positive integers return the number of tuples a b c d such that a b c d where a b c and d are elements of nums and a b c d Example Input nums Output Explanation There are valid tuples Example Input nums Output Explanation There are valid tuples Constraints nums length nums i All elements in nums are distinct
rank transform of an array Given an array of integers arr replace each element with its rank The rank represents how large the element is The rank has the following rules Rank is an integer starting from The larger the element the larger the rank If two elements are equal their rank must be the same Rank should be as small as possible Example Input arr Output Explanation is the largest element is the smallest is the second smallest is the third smallest Example Input arr Output Explanation Same elements share the same rank Example Input arr Output Constraints arr length arr i
maximize sum of array after k negations Given an integer array nums and an integer k modify the array in the following way choose an index i and replace nums i with nums i You should apply this process exactly k times You may choose the same index i multiple times Return the largest possible sum of the array after modifying it in this way Example Input nums k Output Explanation Choose index and nums becomes Example Input nums k Output Explanation Choose indices and nums becomes Example Input nums k Output Explanation Choose indices and nums becomes Constraints nums length nums i k
path sum iii Given the root of a binary tree and an integer targetSum return the number of paths where the sum of the values along the path equals targetSum The path does not need to start or end at the root or a leaf but it must go downwards i e traveling only from parent nodes to child nodes Example Input root null null targetSum Output Explanation The paths that sum to are shown Example Input root null null null targetSum Output Constraints The number of nodes in the tree is in the range Node val targetSum
cherry pickup You are given an n x n grid representing a field of cherries each cell is one of three possible integers means the cell is empty so you can pass through means the cell contains a cherry that you can pick up and pass through or means the cell contains a thorn that blocks your way Return the maximum number of cherries you can collect by following the rules below Starting at the position and reaching n n by moving right or down through valid path cells cells with value or After reaching n n returning to by moving left or up through valid path cells When passing through a path cell containing a cherry you pick it up and the cell becomes an empty cell If there is no valid path between and n n then no cherries can be collected Example Input grid Output Explanation The player started at and went down down right right to reach cherries were picked up during this single trip and the matrix becomes Then the player went left up up left to return home picking up one more cherry The total number of cherries picked up is and this is the maximum possible Example Input grid Output Constraints n grid length n grid i length n grid i j is or grid grid n n
camelcase matching Given an array of strings queries and a string pattern return a boolean array answer where answer i is true if queries i matches pattern and false otherwise A query word queries i matches pattern if you can insert lowercase English letters pattern so that it equals the query You may insert each character at any position and you may not insert any characters Example Input queries FooBar FooBarTest FootBall FrameBuffer ForceFeedBack pattern FB Output true false true true false Explanation FooBar can be generated like this F oo B ar FootBall can be generated like this F oot B all FrameBuffer can be generated like this F rame B uffer Example Input queries FooBar FooBarTest FootBall FrameBuffer ForceFeedBack pattern FoBa Output true false true false false Explanation FooBar can be generated like this Fo o Ba r FootBall can be generated like this Fo ot Ba ll Example Input queries FooBar FooBarTest FootBall FrameBuffer ForceFeedBack pattern FoBaT Output false true false false false Explanation FooBarTest can be generated like this Fo o Ba r T est Constraints pattern length queries length queries i length queries i and pattern consist of English letters
big countries SQL Schema Table World Column Name Type name varchar continent varchar area int population int gdp bigint name is the primary key column for this table Each row of this table gives information about the name of a country the continent to which it belongs its area the population and its GDP value A country is big if it has an area of at least three million i e or it has a population of at least twenty five million i e Write an SQL query to report the name population and area of the big countries Return the result table in any order The query result format is in the following example Example Input World table name continent area population gdp Afghanistan Asia Albania Europe Algeria Africa Andorra Europe Angola Africa Output name population area Afghanistan Algeria
maximum total beauty of the gardens Alice is a caretaker of n gardens and she wants to plant flowers to maximize the total beauty of all her gardens You are given a indexed integer array flowers of size n where flowers i is the number of flowers already planted in the ith garden Flowers that are already planted cannot be removed You are then given another integer newFlowers which is the maximum number of flowers that Alice can additionally plant You are also given the integers target full and partial A garden is considered complete if it has at least target flowers The total beauty of the gardens is then determined as the sum of the following The number of complete gardens multiplied by full The minimum number of flowers in any of the incomplete gardens multiplied by partial If there are no incomplete gardens then this value will be Return the maximum total beauty that Alice can obtain after planting at most newFlowers flowers Example Input flowers newFlowers target full partial Output Explanation Alice can plant flowers in the garden flowers in the garden flower in the garden flower in the garden The gardens will then be She planted a total of flowers There is garden that is complete The minimum number of flowers in the incomplete gardens is Thus the total beauty is No other way of planting flowers can obtain a total beauty higher than Example Input flowers newFlowers target full partial Output Explanation Alice can plant flowers in the garden flowers in the garden flowers in the garden flowers in the garden The gardens will then be She planted a total of flowers There are gardens that are complete The minimum number of flowers in the incomplete gardens is Thus the total beauty is No other way of planting flowers can obtain a total beauty higher than Note that Alice could make all the gardens complete but in this case she would obtain a lower total beauty Constraints flowers length flowers i target newFlowers full partial
find the substring with maximum cost You are given a string s a string chars of distinct characters and an integer array vals of the same length as chars The cost of the substring is the sum of the values of each character in the substring The cost of an empty string is considered The value of the character is defined in the following way If the character is not in the string chars then its value is its corresponding position indexed in the alphabet For example the value of a is the value of b is and so on The value of z is Otherwise assuming i is the index where the character occurs in the string chars then its value is vals i Return the maximum cost among all substrings of the string s Example Input s adaa chars d vals Output Explanation The value of the characters a and d is and respectively The substring with the maximum cost is aa and its cost is It can be proven that is the maximum cost Example Input s abc chars abc vals Output Explanation The value of the characters a b and c is and respectively The substring with the maximum cost is the empty substring and its cost is It can be proven that is the maximum cost Constraints s length s consist of lowercase English letters chars length chars consist of distinct lowercase English letters vals length chars length vals i
my calendar iii A k booking happens when k events have some non empty intersection i e there is some time that is common to all k events You are given some events startTime endTime after each given event return an integer k representing the maximum k booking between all the previous events Implement the MyCalendarThree class MyCalendarThree Initializes the object int book int startTime int endTime Returns an integer k representing the largest integer such that there exists a k booking in the calendar Example Input MyCalendarThree book book book book book book Output null Explanation MyCalendarThree myCalendarThree new MyCalendarThree myCalendarThree book return myCalendarThree book return myCalendarThree book return myCalendarThree book return myCalendarThree book return myCalendarThree book return Constraints startTime endTime At most calls will be made to book
group anagrams Given an array of strings strs group the anagrams together You can return the answer in any order An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase typically using all the original letters exactly once Example Input strs eat tea tan ate nat bat Output bat nat tan ate eat tea Example Input strs Output Example Input strs a Output a Constraints strs length strs i length strs i consists of lowercase English letters
pass the pillow There are n people standing in a line labeled from to n The first person in the line is holding a pillow initially Every second the person holding the pillow passes it to the next person standing in the line Once the pillow reaches the end of the line the direction changes and people continue passing the pillow in the opposite direction For example once the pillow reaches the nth person they pass it to the n person then to the n person and so on Given the two positive integers n and time return the index of the person holding the pillow after time seconds Example Input n time Output Explanation People pass the pillow in the following way Afer five seconds the pillow is given to the person Example Input n time Output Explanation People pass the pillow in the following way Afer two seconds the pillow is given to the person Constraints n time
k-concatenation maximum sum Given an integer array arr and an integer k modify the array by repeating it k times For example if arr and k then the modified array will be Return the maximum sub array sum in the modified array Note that the length of the sub array can be and its sum in that case is As the answer can be very large return the answer modulo Example Input arr k Output Example Input arr k Output Example Input arr k Output Constraints arr length k arr i
find smallest letter greater than target You are given an array of characters letters that is sorted in non decreasing order and a character target There are at least two different characters in letters Return the smallest character in letters that is lexicographically greater than target If such a character does not exist return the first character in letters Example Input letters c f j target a Output c Explanation The smallest character that is lexicographically greater than a in letters is c Example Input letters c f j target c Output f Explanation The smallest character that is lexicographically greater than c in letters is f Example Input letters x x y y target z Output x Explanation There are no characters in letters that is lexicographically greater than z so we return letters Constraints letters length letters i is a lowercase English letter letters is sorted in non decreasing order letters contains at least two different characters target is a lowercase English letter
lowest common ancestor of deepest leaves Given the root of a binary tree return the lowest common ancestor of its deepest leaves Recall that The node of a binary tree is a leaf if and only if it has no children The depth of the root of the tree is if the depth of a node is d the depth of each of its children is d The lowest common ancestor of a set S of nodes is the node A with the largest depth such that every node in S is in the subtree with root A Example Input root null null Output Explanation We return the node with value colored in yellow in the diagram The nodes coloured in blue are the deepest leaf nodes of the tree Note that nodes and are also leaf nodes but the depth of them is but the depth of nodes and is Example Input root Output Explanation The root is the deepest node in the tree and it s the lca of itself Example Input root null Output Explanation The deepest leaf node in the tree is the lca of one node is itself Constraints The number of nodes in the tree will be in the range Node val The values of the nodes in the tree are unique Note This question is the same as https leetcode com problems smallest subtree with all the deepest nodes
find common characters Given a string array words return an array of all characters that show up in all strings within the words including duplicates You may return the answer in any order Example Input words bella label roller Output e l l Example Input words cool lock cook Output c o Constraints words length words i length words i consists of lowercase English letters
find subarrays with equal sum Given a indexed integer array nums determine whether there exist two subarrays of length with equal sum Note that the two subarrays must begin at different indices Return true if these subarrays exist and false otherwise A subarray is a contiguous non empty sequence of elements within an array Example Input nums Output true Explanation The subarrays with elements and have the same sum of Example Input nums Output false Explanation No two subarrays of size have the same sum Example Input nums Output true Explanation The subarrays nums nums and nums nums have the same sum of Note that even though the subarrays have the same content the two subarrays are considered different because they are in different positions in the original array Constraints nums length nums i
repeated substring pattern Given a string s check if it can be constructed by taking a substring of it and appending multiple copies of the substring together Example Input s abab Output true Explanation It is the substring ab twice Example Input s aba Output false Example Input s abcabcabcabc Output true Explanation It is the substring abc four times or the substring abcabc twice Constraints s length s consists of lowercase English letters
swap adjacent in lr string In a string composed of L R and X characters like RXXLRXRXL a move consists of either replacing one occurrence of XL with LX or replacing one occurrence of RX with XR Given the starting string start and the ending string end return True if and only if there exists a sequence of moves to transform one string to the other Example Input start RXXLRXRXL end XRLXXRRLX Output true Explanation We can transform start to end following these steps RXXLRXRXL XRXLRXRXL XRLXRXRXL XRLXXRRXL XRLXXRRLX Example Input start X end L Output false Constraints start length start length end length Both start and end will only consist of characters in L R and X
maximum segment sum after removals You are given two indexed integer arrays nums and removeQueries both of length n For the ith query the element in nums at the index removeQueries i is removed splitting nums into different segments A segment is a contiguous sequence of positive integers in nums A segment sum is the sum of every element in a segment Return an integer array answer of length n where answer i is the maximum segment sum after applying the ith removal Note The same index will not be removed more than once Example Input nums removeQueries Output Explanation Using to indicate a removed element the answer is as follows Query Remove the element nums becomes and the maximum segment sum is for segment Query Remove the element nums becomes and the maximum segment sum is for segment Query Remove the element nums becomes and the maximum segment sum is for segment Query Remove the element nums becomes and the maximum segment sum is for segment Query Remove the element nums becomes and the maximum segment sum is since there are no segments Finally we return Example Input nums removeQueries Output Explanation Using to indicate a removed element the answer is as follows Query Remove the element nums becomes and the maximum segment sum is for segment Query Remove the element nums becomes and the maximum segment sum is for segment Query Remove the element nums becomes and the maximum segment sum is for segment Query Remove the element nums becomes and the maximum segment sum is since there are no segments Finally we return Constraints n nums length removeQueries length n nums i removeQueries i n All the values of removeQueries are unique
longest palindrome by concatenating two letter words You are given an array of strings words Each element of words consists of two lowercase English letters Create the longest possible palindrome by selecting some elements from words and concatenating them in any order Each element can be selected at most once Return the length of the longest palindrome that you can create If it is impossible to create any palindrome return A palindrome is a string that reads the same forward and backward Example Input words lc cl gg Output Explanation One longest palindrome is lc gg cl lcggcl of length Note that clgglc is another longest palindrome that can be created Example Input words ab ty yt lc cl ab Output Explanation One longest palindrome is ty lc cl yt tylcclyt of length Note that lcyttycl is another longest palindrome that can be created Example Input words cc ll xx Output Explanation One longest palindrome is cc of length Note that ll is another longest palindrome that can be created and so is xx Constraints words length words i length words i consists of lowercase English letters
determine the winner of a bowling game You are given two indexed integer arrays and that represent the number of pins that player and player hit in a bowling game respectively The bowling game consists of n turns and the number of pins in each turn is exactly Assume a player hit xi pins in the ith turn The value of the ith turn for the player is if the player hit pins in any of the previous two turns Otherwise It is xi The score of the player is the sum of the values of their n turns Return if the score of player is more than the score of player if the score of player is more than the score of player and in case of a draw Example Input Output Explanation The score of is The score of is Score of is more than the score of so is the winner and the answer is Example Input Output Explanation The score of is The score of is Score of is more than the score of so is the winner and the answer is Example Input Output Explanation The score of is The score of is The score of equals to the score of so there is a draw and the answer is Constraints n length length n i i
find elements in a contaminated binary tree Given a binary tree with the following rules root val If treeNode val x and treeNode left null then treeNode left val x If treeNode val x and treeNode right null then treeNode right val x Now the binary tree is contaminated which means all treeNode val have been changed to Implement the FindElements class FindElements TreeNode root Initializes the object with a contaminated binary tree and recovers it bool find int target Returns true if the target value exists in the recovered binary tree Example Input FindElements find find null Output null false true Explanation FindElements findElements new FindElements null findElements find return False findElements find return True Example Input FindElements find find find Output null true true false Explanation FindElements findElements new FindElements findElements find return True findElements find return True findElements find return False Example Input FindElements find find find find null null Output null true false false true Explanation FindElements findElements new FindElements null null findElements find return True findElements find return False findElements find return False findElements find return True Constraints TreeNode val The height of the binary tree is less than or equal to The total number of nodes is between Total calls of find is between target
flip equivalent binary trees For a binary tree T we can define a flip operation as follows choose any node and swap the left and right child subtrees A binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations Given the roots of two binary trees and return true if the two trees are flip equivalent or false otherwise Example Input null null null null null null null null Output true Explanation We flipped at nodes with values and Example Input Output true Example Input Output false Constraints The number of nodes in each tree is in the range Each tree will have unique node values in the range
sorting the sentence A sentence is a list of words that are separated by a single space with no leading or trailing spaces Each word consists of lowercase and uppercase English letters A sentence can be shuffled by appending the indexed word position to each word then rearranging the words in the sentence For example the sentence This is a sentence can be shuffled as or Given a shuffled sentence s containing no more than words reconstruct and return the original sentence Example Input s Output This is a sentence Explanation Sort the words in s to their original positions then remove the numbers Example Input s Output Me Myself and I Explanation Sort the words in s to their original positions then remove the numbers Constraints s length s consists of lowercase and uppercase English letters spaces and digits from to The number of words in s is between and The words in s are separated by a single space s contains no leading or trailing spaces
boats to save people You are given an array people where people i is the weight of the ith person and an infinite number of boats where each boat can carry a maximum weight of limit Each boat carries at most two people at the same time provided the sum of the weight of those people is at most limit Return the minimum number of boats to carry every given person Example Input people limit Output Explanation boat Example Input people limit Output Explanation boats and Example Input people limit Output Explanation boats Constraints people length people i limit
average salary excluding the minimum and maximum salary You are given an array of unique integers salary where salary i is the salary of the ith employee Return the average salary of employees excluding the minimum and maximum salary Answers within of the actual answer will be accepted Example Input salary Output Explanation Minimum salary and maximum salary are and respectively Average salary excluding minimum and maximum salary is Example Input salary Output Explanation Minimum salary and maximum salary are and respectively Average salary excluding minimum and maximum salary is Constraints salary length salary i All the integers of salary are unique
minimum common value Given two integer arrays and sorted in non decreasing order return the minimum integer common to both arrays If there is no common integer amongst and return Note that an integer is said to be common to and if both arrays have at least one occurrence of that integer Example Input Output Explanation The smallest element common to both arrays is so we return Example Input Output Explanation There are two common elements in the array and out of which is the smallest so is returned Constraints length length i j Both and are sorted in non decreasing order
validate binary search tree Given the root of a binary tree determine if it is a valid binary search tree BST A valid BST is defined as follows The left subtree of a node contains only nodes with keys less than the node s key The right subtree of a node contains only nodes with keys greater than the node s key Both the left and right subtrees must also be binary search trees Example Input root Output true Example Input root null null Output false Explanation The root node s value is but its right child s value is Constraints The number of nodes in the tree is in the range Node val
employees earning more than their managers SQL Schema Table Employee Column Name Type id int name varchar salary int managerId int id is the primary key column for this table Each row of this table indicates the ID of an employee their name salary and the ID of their manager Write an SQL query to find the employees who earn more than their managers Return the result table in any order The query result format is in the following example Example Input Employee table id name salary managerId Joe Henry Sam Null Max Null Output Employee Joe Explanation Joe is the only employee who earns more than his manager
string matching in an array Given an array of string words return all strings in words that is a substring of another word You can return the answer in any order A substring is a contiguous sequence of characters within a string Example Input words mass as hero superhero Output as hero Explanation as is substring of mass and hero is substring of superhero hero as is also a valid answer Example Input words leetcode et code Output et code Explanation et code are substring of leetcode Example Input words blue green bu Output Explanation No string of words is substring of another string Constraints words length words i length words i contains only lowercase English letters All the strings of words are unique
array partition Given an integer array nums of integers group these integers into n pairs an bn such that the sum of min ai bi for all i is maximized Return the maximized sum Example Input nums Output Explanation All possible pairings ignoring the ordering of elements are min min min min min min So the maximum possible sum is Example Input nums Output Explanation The optimal pairing is min min min Constraints n nums length n nums i
count complete tree nodes Given the root of a complete binary tree return the number of the nodes in the tree According to Wikipedia every level except possibly the last is completely filled in a complete binary tree and all nodes in the last level are as far left as possible It can have between and nodes inclusive at the last level h Design an algorithm that runs in less than O n time complexity Example Input root Output Example Input root Output Example Input root Output Constraints The number of nodes in the tree is in the range Node val The tree is guaranteed to be complete
length of the longest alphabetical continuous substring An alphabetical continuous string is a string consisting of consecutive letters in the alphabet In other words it is any substring of the string abcdefghijklmnopqrstuvwxyz For example abc is an alphabetical continuous string while acb and za are not Given a string s consisting of lowercase letters only return the length of the longest alphabetical continuous substring Example Input s abacaba Output Explanation There are distinct continuous substrings a b c and ab ab is the longest continuous substring Example Input s abcde Output Explanation abcde is the longest continuous substring Constraints s length s consists of only English lowercase letters
convert sorted list to binary search tree Given the head of a singly linked list where elements are sorted in ascending order convert it to a height balanced binary search tree Example Input head Output null Explanation One possible answer is null which represents the shown height balanced BST Example Input head Output Constraints The number of nodes in head is in the range Node val
memoize ii Given a function fn return a memoized version of that function A memoized function is a function that will never be called twice with the same inputs Instead it will return a cached value fn can be any function and there are no constraints on what type of values it accepts Inputs are considered identical if they are to each other Example Input getInputs fn function a b return a b Output val calls val calls val calls Explanation const inputs getInputs const memoized memoize fn for const arr of inputs memoized arr For the inputs of and it required a call to fn For the inputs of but those inputs were seen before so no call to fn was required For the inputs of and it required another call to fn for a total of Example Input getInputs fn function a b return a b Output val calls val calls val calls Explanation Merging two empty objects will always result in an empty object It may seem like there should only be call to fn because of cache hits however none of those objects are to each other Example Input getInputs const o return o o o o o o fn function a b return a b Output val calls val calls val calls Explanation Merging two empty objects will always result in an empty object The and third function calls result in a cache hit This is because every object passed in is identical Constraints inputs length inputs flat length inputs i j NaN
search a 2d matrix ii Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix This matrix has the following properties Integers in each row are sorted in ascending from left to right Integers in each column are sorted in ascending from top to bottom Example Input matrix target Output true Example Input matrix target Output false Constraints m matrix length n matrix i length n m matrix i j All the integers in each row are sorted in ascending order All the integers in each column are sorted in ascending order target
minimum penalty for a shop You are given the customer visit log of a shop represented by a indexed string customers consisting only of characters N and Y if the ith character is Y it means that customers come at the ith hour whereas N indicates that no customers come at the ith hour If the shop closes at the jth hour j n the penalty is calculated as follows For every hour when the shop is open and no customers come the penalty increases by For every hour when the shop is closed and customers come the penalty increases by Return the earliest hour at which the shop must be closed to incur a minimum penalty Note that if a shop closes at the jth hour it means the shop is closed at the hour j Example Input customers YYNY Output Explanation Closing the shop at the hour incurs in penalty Closing the shop at the hour incurs in penalty Closing the shop at the hour incurs in penalty Closing the shop at the hour incurs in penalty Closing the shop at the hour incurs in penalty Closing the shop at or hour gives a minimum penalty Since is earlier the optimal closing time is Example Input customers NNNNN Output Explanation It is best to close the shop at the hour as no customers arrive Example Input customers YYYY Output Explanation It is best to close the shop at the hour as customers arrive at each hour Constraints customers length customers consists only of characters Y and N
height checker A school is trying to take an annual photo of all the students The students are asked to stand in a single file line in non decreasing order by height Let this ordering be represented by the integer array expected where expected i is the expected height of the ith student in line You are given an integer array heights representing the current order that the students are standing in Each heights i is the height of the ith student in line indexed Return the number of indices where heights i expected i Example Input heights Output Explanation heights expected Indices and do not match Example Input heights Output Explanation heights expected All indices do not match Example Input heights Output Explanation heights expected All indices match Constraints heights length heights i
water bottles There are numBottles water bottles that are initially full of water You can exchange numExchange empty water bottles from the market with one full water bottle The operation of drinking a full water bottle turns it into an empty bottle Given the two integers numBottles and numExchange return the maximum number of water bottles you can drink Example Input numBottles numExchange Output Explanation You can exchange empty bottles to get full water bottle Number of water bottles you can drink Example Input numBottles numExchange Output Explanation You can exchange empty bottles to get full water bottle Number of water bottles you can drink Constraints numBottles numExchange
number of equivalent domino pairs Given a list of dominoes dominoes i a b is equivalent to dominoes j c d if and only if either a c and b d or a d and b c that is one domino can be rotated to be equal to another domino Return the number of pairs i j for which i j dominoes length and dominoes i is equivalent to dominoes j Example Input dominoes Output Example Input dominoes Output Constraints dominoes length dominoes i length dominoes i j
k-th symbol in grammar We build a table of n rows indexed We start by writing in the row Now in every subsequent row we look at the previous row and replace each occurrence of with and each occurrence of with For example for n the row is the row is and the row is Given two integer n and k return the kth indexed symbol in the nth row of a table of n rows Example Input n k Output Explanation row Example Input n k Output Explanation row row Example Input n k Output Explanation row row Constraints n k
construct the lexicographically largest valid sequence Given an integer n find a sequence that satisfies all of the following The integer occurs once in the sequence Each integer between and n occurs twice in the sequence For every integer i between and n the distance between the two occurrences of i is exactly i The distance between two numbers on the sequence a i and a j is the absolute difference of their indices j i Return the lexicographically largest sequence It is guaranteed that under the given constraints there is always a solution A sequence a is lexicographically larger than a sequence b of the same length if in the first position where a and b differ sequence a has a number greater than the corresponding number in b For example is lexicographically larger than because the first position they differ is at the third number and is greater than Example Input n Output Explanation is also a valid sequence but is the lexicographically largest valid sequence Example Input n Output Constraints n
throttle Given a function fn and a time in milliseconds t return a throttled version of that function A throttled function is first called without delay and then for a time interval of t milliseconds can t be executed but should store the latest function arguments provided to call fn with them after the end of the delay For instance t and the function was called at and The first function call would block calling functions for the following t milliseconds The second function call would save arguments and the third call arguments should overwrite currently stored arguments from the second call because the second and third calls are called before Once the delay has passed the throttled function should be called with the latest arguments provided during the delay period and it should also create another delay period of t The above diagram shows how throttle will transform events Each rectangle represents and the throttle time is Each color represents a different set of inputs Example Input t calls t inputs Output t inputs Explanation The call is always called without delay Example Input t calls t inputs t inputs Output t inputs t inputs Explanation The is called a function with arguments without delay The is called at within the delay period because so the next call can be reached at Therefore we save arguments from the call to use them at the callback of the call Example Input t calls t inputs t inputs t inputs t inputs t inputs Output t inputs t inputs t inputs t inputs Explanation The is called a function with arguments without delay The is called at within the delay period because so it should only save arguments The is also called within the delay period and because we need just the latest function arguments we overwrite previous ones After the delay period we do a callback at with saved arguments That callback makes another delay period of so that the next function can be called at The is called at in the delay period so it should be called as a callback at That will create another delay period of The is called at but it is after so it should be called immediately and should create another delay period of Constraints t calls length calls i t calls i inputs i calls i inputs length
target sum You are given an integer array nums and an integer target You want to build an expression out of nums by adding one of the symbols and before each integer in nums and then concatenate all the integers For example if nums you can add a before and a before and concatenate them to build the expression Return the number of different expressions that you can build which evaluates to target Example Input nums target Output Explanation There are ways to assign symbols to make the sum of nums be target Example Input nums target Output Constraints nums length nums i sum nums i target
brace expansion ii Under the grammar given below strings can represent a set of lowercase words Let R expr denote the set of words the expression represents The grammar can best be understood through simple examples Single letters represent a singleton set containing that word R a a R w w When we take a comma delimited list of two or more expressions we take the union of possibilities R a b c a b c R a b b c a b c notice the final set only contains each word at most once When we concatenate two expressions we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression R a b c d ac ad bc bd R a b c d e f g h abdfg abdfh abefg abefh acdfg acdfh acefg acefh Formally the three rules for our grammar For every lowercase letter x we have R x x For expressions ek with k we have R R R For expressions and we have R a b for a b in R R where denotes concatenation and denotes the cartesian product Given an expression representing a set of words under the given grammar return the sorted list of words that the expression represents Example Input expression a b c d e Output ac ad ae bc bd be Example Input expression a z a b c ab z Output a ab ac z Explanation Each distinct word is written only once in the final answer Constraints expression length expression i consists of or lowercase English letters The given expression represents a set of words based on the grammar given in the description
closest divisors Given an integer num find the closest two integers in absolute difference whose product equals num or num Return the two integers in any order Example Input num Output Explanation For num the closest divisors are for num the closest divisors are hence is chosen Example Input num Output Example Input num Output Constraints num
destroy sequential targets You are given a indexed array nums consisting of positive integers representing targets on a number line You are also given an integer space You have a machine which can destroy targets Seeding the machine with some nums i allows it to destroy all targets with values that can be represented as nums i c space where c is any non negative integer You want to destroy the maximum number of targets in nums Return the minimum value of nums i you can seed the machine with to destroy the maximum number of targets Example Input nums space Output Explanation If we seed the machine with nums then we destroy all targets equal to In this case we would destroy total targets all except for nums It is impossible to destroy more than targets so we return nums Example Input nums space Output Explanation Seeding the machine with nums or nums destroys targets It is not possible to destroy more than targets Since nums is the minimal integer that can destroy targets we return Example Input nums space Output Explanation Whatever initial seed we select we can only destroy target The minimal seed is nums Constraints nums length nums i space
find all numbers disappeared in an array Given an array nums of n integers where nums i is in the range n return an array of all the integers in the range n that do not appear in nums Example Input nums Output Example Input nums Output Constraints n nums length n nums i n Follow up Could you do it without extra space and in O n runtime You may assume the returned list does not count as extra space
candy There are n children standing in a line Each child is assigned a rating value given in the integer array ratings You are giving candies to these children subjected to the following requirements Each child must have at least one candy Children with a higher rating get more candies than their neighbors Return the minimum number of candies you need to have to distribute the candies to the children Example Input ratings Output Explanation You can allocate to the first second and third child with candies respectively Example Input ratings Output Explanation You can allocate to the first second and third child with candies respectively The third child gets candy because it satisfies the above two conditions Constraints n ratings length n ratings i
neighboring bitwise xor A indexed array derived with length n is derived by computing the bitwise XOR of adjacent values in a binary array original of length n Specifically for each index i in the range n If i n then derived i original i original Otherwise derived i original i original i Given an array derived your task is to determine whether there exists a valid binary array original that could have formed derived Return true if such an array exists or false otherwise A binary array is an array containing only s and s Example Input derived Output true Explanation A valid original array that gives derived is derived original original derived original original derived original original Example Input derived Output true Explanation A valid original array that gives derived is derived original original derived original original Example Input derived Output false Explanation There is no valid original array that gives derived Constraints n derived length n The values in derived are either s or s
minesweeper Let s play the minesweeper game Wikipedia online game You are given an m x n char matrix board representing the game board where M represents an unrevealed mine E represents an unrevealed empty square B represents a revealed blank square that has no adjacent mines i e above below left right and all diagonals digit to represents how many mines are adjacent to this revealed square and X represents a revealed mine You are also given an integer array click where click clickr clickc represents the next click position among all the unrevealed squares M or E Return the board after revealing this position according to the following rules If a mine M is revealed then the game is over You should change it to X If an empty square E with no adjacent mines is revealed then change it to a revealed blank B and all of its adjacent unrevealed squares should be revealed recursively If an empty square E with at least one adjacent mine is revealed then change it to a digit to representing the number of adjacent mines Return the board when no more squares will be revealed Example Input board E E E E E E E M E E E E E E E E E E E E click Output B E B B M B B B B B B B B Example Input board B E B B M B B B B B B B B click Output B E B B X B B B B B B B B Constraints m board length n board i length m n board i j is either M E B or a digit from to click length clickr m clickc n board clickr clickc is either M or E
k-th smallest prime fraction You are given a sorted integer array arr containing and prime numbers where all the integers of arr are unique You are also given an integer k For every i and j where i j arr length we consider the fraction arr i arr j Return the kth smallest fraction considered Return your answer as an array of integers of size where answer arr i and answer arr j Example Input arr k Output Explanation The fractions to be considered in sorted order are and The third fraction is Example Input arr k Output Constraints arr length arr i arr arr i is a prime number for i All the numbers of arr are unique and sorted in strictly increasing order k arr length arr length Follow up Can you solve the problem with better than O complexity
daily temperatures Given an array of integers temperatures represents the daily temperatures return an array answer such that answer i is the number of days you have to wait after the ith day to get a warmer temperature If there is no future day for which this is possible keep answer i instead Example Input temperatures Output Example Input temperatures Output Example Input temperatures Output Constraints temperatures length temperatures i
count vowels permutation Given an integer n your task is to count how many strings of length n can be formed under the following rules Each character is a lower case vowel a e i o u Each vowel a may only be followed by an e Each vowel e may only be followed by an a or an i Each vowel i may not be followed by another i Each vowel o may only be followed by an i or a u Each vowel u may only be followed by an a Since the answer may be too large return it modulo Example Input n Output Explanation All possible strings are a e i o and u Example Input n Output Explanation All possible strings are ae ea ei ia ie io iu oi ou and ua Example Input n Output Constraints n
find mode in binary search tree Given the root of a binary search tree BST with duplicates return all the mode s i e the most frequently occurred element in it If the tree has more than one mode return them in any order Assume a BST is defined as follows The left subtree of a node contains only nodes with keys less than or equal to the node s key The right subtree of a node contains only nodes with keys greater than or equal to the node s key Both the left and right subtrees must also be binary search trees Example Input root null Output Example Input root Output Constraints The number of nodes in the tree is in the range Node val Follow up Could you do that without using any extra space Assume that the implicit stack space incurred due to recursion does not count
maximum points in an archery competition Alice and Bob are opponents in an archery competition The competition has set the following rules Alice first shoots numArrows arrows and then Bob shoots numArrows arrows The points are then calculated as follows The target has integer scoring sections ranging from to inclusive For each section of the target with score k in between to say Alice and Bob have shot ak and bk arrows on that section respectively If ak bk then Alice takes k points If ak bk then Bob takes k points However if ak bk then nobody takes k points For example if Alice and Bob both shot arrows on the section with score then Alice takes points On the other hand if Alice shot arrows on the section with score and Bob shot arrows on that same section then Bob takes points You are given the integer numArrows and an integer array aliceArrows of size which represents the number of arrows Alice shot on each scoring section from to Now Bob wants to maximize the total number of points he can obtain Return the array bobArrows which represents the number of arrows Bob shot on each scoring section from to The sum of the values in bobArrows should equal numArrows If there are multiple ways for Bob to earn the maximum total points return any one of them Example Input numArrows aliceArrows Output Explanation The table above shows how the competition is scored Bob earns a total point of It can be shown that Bob cannot obtain a score higher than points Example Input numArrows aliceArrows Output Explanation The table above shows how the competition is scored Bob earns a total point of It can be shown that Bob cannot obtain a score higher than points Constraints numArrows aliceArrows length bobArrows length aliceArrows i bobArrows i numArrows sum aliceArrows i numArrows
verbal arithmetic puzzle Given an equation represented by words on the left side and the result on the right side You need to check if the equation is solvable under the following rules Each character is decoded as one digit No two characters can map to the same digit Each words i and result are decoded as one number without leading zeros Sum of numbers on the left side words will equal to the number on the right side result Return true if the equation is solvable otherwise return false Example Input words SEND MORE result MONEY Output true Explanation Map S E N D M O R Y Such that SEND MORE MONEY Example Input words SIX SEVEN SEVEN result TWENTY Output true Explanation Map S I X E V N T W Y Such that SIX SEVEN SEVEN TWENTY Example Input words LEET CODE result POINT Output false Explanation There is no possible mapping to satisfy the equation so we return false Note that two different characters cannot map to the same digit Constraints words length words i length result length words i result contain only uppercase English letters The number of different characters used in the expression is at most
delete duplicate folders in system Due to a bug there are many duplicate folders in a file system You are given a array paths where paths i is an array representing an absolute path to the ith folder in the file system For example one two three represents the path one two three Two folders not necessarily on the same level are identical if they contain the same non empty set of identical subfolders and underlying subfolder structure The folders do not need to be at the root level to be identical If two or more folders are identical then mark the folders as well as all their subfolders For example folders a and b in the file structure below are identical They as well as their subfolders should all be marked a a x a x y a z b b x b x y b z However if the file structure also included the path b w then the folders a and b would not be identical Note that a x and b x would still be considered identical even with the added folder Once all the identical folders and their subfolders have been marked the file system will delete all of them The file system only runs the deletion once so any folders that become identical after the initial deletion are not deleted Return the array ans containing the paths of the remaining folders after deleting all the marked folders The paths may be returned in any order Example Input paths a c d a b c b d a Output d d a Explanation The file structure is as shown Folders a and c and their subfolders are marked for deletion because they both contain an empty folder named b Example Input paths a c a b c b a b x a b x y w w y Output c c b a a b Explanation The file structure is as shown Folders a b x and w and their subfolders are marked for deletion because they both contain an empty folder named y Note that folders a and c are identical after the deletion but they are not deleted because they were not marked beforehand Example Input paths a b c d c a Output c c d a a b Explanation All folders are unique in the file system Note that the returned array can be in a different order as the order does not matter Constraints paths length paths i length paths i j length sum paths i j length path i j consists of lowercase English letters No two paths lead to the same folder For any folder not at the root level its parent folder will also be in the input
split a string in balanced strings Balanced strings are those that have an equal quantity of L and R characters Given a balanced string s split it into some number of substrings such that Each substring is balanced Return the maximum number of balanced strings you can obtain Example Input s RLRRLLRLRL Output Explanation s can be split into RL RRLL RL RL each substring contains same number of L and R Example Input s RLRRRLLRLL Output Explanation s can be split into RL RRRLLRLL each substring contains same number of L and R Note that s cannot be split into RL RR RL LR LL because the and substrings are not balanced Example Input s LLLLRRRR Output Explanation s can be split into LLLLRRRR Constraints s length s i is either L or R s is a balanced string
count collisions on a road There are n cars on an infinitely long road The cars are numbered from to n from left to right and each car is present at a unique point You are given a indexed string directions of length n directions i can be either L R or S denoting whether the ith car is moving towards the left towards the right or staying at its current point respectively Each moving car has the same speed The number of collisions can be calculated as follows When two cars moving in opposite directions collide with each other the number of collisions increases by When a moving car collides with a stationary car the number of collisions increases by After a collision the cars involved can no longer move and will stay at the point where they collided Other than that cars cannot change their state or direction of motion Return the total number of collisions that will happen on the road Example Input directions RLRSLL Output Explanation The collisions that will happen on the road are Cars and will collide with each other Since they are moving in opposite directions the number of collisions becomes Cars and will collide with each other Since car is stationary the number of collisions becomes Cars and will collide with each other Since car is stationary the number of collisions becomes Cars and will collide with each other After car collides with car it will stay at the point of collision and get hit by car The number of collisions becomes Thus the total number of collisions that will happen on the road is Example Input directions LLRR Output Explanation No cars will collide with each other Thus the total number of collisions that will happen on the road is Constraints directions length directions i is either L R or S
compare version numbers Given two version numbers and compare them Version numbers consist of one or more revisions joined by a dot Each revision consists of digits and may contain leading zeros Every revision contains at least one character Revisions are indexed from left to right with the leftmost revision being revision the next revision being revision and so on For example and are valid version numbers To compare version numbers compare their revisions in left to right order Revisions are compared using their integer value ignoring any leading zeros This means that revisions and are considered equal If a version number does not specify a revision at an index then treat the revision as For example version is less than version because their revision are the same but their revision are and respectively and Return the following If return If return Otherwise return Example Input Output Explanation Ignoring leading zeroes both and represent the same integer Example Input Output Explanation does not specify revision which means it is treated as Example Input Output Explanation s revision is while s revision is so Constraints length length and only contain digits and and are valid version numbers All the given revisions in and can be stored in a bit integer
robot bounded in circle On an infinite plane a robot initially stands at and faces north Note that The north direction is the positive direction of the y axis The south direction is the negative direction of the y axis The east direction is the positive direction of the x axis The west direction is the negative direction of the x axis The robot can receive one of three instructions G go straight unit L turn degrees to the left i e anti clockwise direction R turn degrees to the right i e clockwise direction The robot performs the instructions given in order and repeats them forever Return true if and only if there exists a circle in the plane such that the robot never leaves the circle Example Input instructions GGLLGG Output true Explanation The robot is initially at facing the north direction G move one step Position Direction North G move one step Position Direction North L turn degrees anti clockwise Position Direction West L turn degrees anti clockwise Position Direction South G move one step Position Direction South G move one step Position Direction South Repeating the instructions the robot goes into the cycle Based on that we return true Example Input instructions GG Output false Explanation The robot is initially at facing the north direction G move one step Position Direction North G move one step Position Direction North Repeating the instructions keeps advancing in the north direction and does not go into cycles Based on that we return false Example Input instructions GL Output true Explanation The robot is initially at facing the north direction G move one step Position Direction North L turn degrees anti clockwise Position Direction West G move one step Position Direction West L turn degrees anti clockwise Position Direction South G move one step Position Direction South L turn degrees anti clockwise Position Direction East G move one step Position Direction East L turn degrees anti clockwise Position Direction North Repeating the instructions the robot goes into the cycle Based on that we return true Constraints instructions length instructions i is G L or R
recover the original array Alice had a indexed array arr consisting of n positive integers She chose an arbitrary positive integer k and created two new indexed integer arrays lower and higher in the following manner lower i arr i k for every index i where i n higher i arr i k for every index i where i n Unfortunately Alice lost all three arrays However she remembers the integers that were present in the arrays lower and higher but not the array each integer belonged to Help Alice and recover the original array Given an array nums consisting of integers where exactly n of the integers were present in lower and the remaining in higher return the original array arr In case the answer is not unique return any valid array Note The test cases are generated such that there exists at least one valid array arr Example Input nums Output Explanation If arr and k we get lower and higher Combining lower and higher gives us which is a permutation of nums Another valid possibility is that arr and k In that case lower and higher Example Input nums Output Explanation If arr and k we get lower and higher Combining lower and higher gives us which is equal to nums Note that arr cannot be because in that case the only possible way to obtain is with k This is invalid since k must be positive Example Input nums Output Explanation The only possible combination is arr and k Using them we get lower and higher Constraints n nums length n nums i The test cases are generated such that there exists at least one valid array arr
create target array in the given order Given two arrays of integers nums and index Your task is to create target array under the following rules Initially target array is empty From left to right read nums i and index i insert at index index i the value nums i in target array Repeat the previous step until there are no elements to read in nums and index Return the target array It is guaranteed that the insertion operations will be valid Example Input nums index Output Explanation nums index target Example Input nums index Output Explanation nums index target Example Input nums index Output Constraints nums length index length nums length index length nums i index i i
maximum product of three numbers Given an integer array nums find three numbers whose product is maximum and return the maximum product Example Input nums Output Example Input nums Output Example Input nums Output Constraints nums length nums i
numbers with same consecutive differences Given two integers n and k return an array of all the integers of length n where the difference between every two consecutive digits is k You may return the answer in any order Note that the integers should not have leading zeros Integers as and are not allowed Example Input n k Output Explanation Note that is not a valid number because it has leading zeroes Example Input n k Output Constraints n k
maximum width ramp A ramp in an integer array nums is a pair i j for which i j and nums i nums j The width of such a ramp is j i Given an integer array nums return the maximum width of a ramp in nums If there is no ramp in nums return Example Input nums Output Explanation The maximum width ramp is achieved at i j nums and nums Example Input nums Output Explanation The maximum width ramp is achieved at i j nums and nums Constraints nums length nums i
interval list intersections You are given two lists of closed intervals firstList and secondList where firstList i starti endi and secondList j startj endj Each list of intervals is pairwise disjoint and in sorted order Return the intersection of these two interval lists A closed interval a b with a b denotes the set of real numbers x with a x b The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval For example the intersection of and is Example Input firstList secondList Output Example Input firstList secondList Output Constraints firstList length secondList length firstList length secondList length starti endi endi starti startj endj endj startj
find unique binary string Given an array of strings nums containing n unique binary strings each of length n return a binary string of length n that does not appear in nums If there are multiple answers you may return any of them Example Input nums Output Explanation does not appear in nums would also be correct Example Input nums Output Explanation does not appear in nums would also be correct Example Input nums Output Explanation does not appear in nums and would also be correct Constraints n nums length n nums i length n nums i is either or All the strings of nums are unique
fibonacci number The Fibonacci numbers commonly denoted F n form a sequence called the Fibonacci sequence such that each number is the sum of the two preceding ones starting from and That is F F F n F n F n for n Given n calculate F n Example Input n Output Explanation F F F Example Input n Output Explanation F F F Example Input n Output Explanation F F F Constraints n
splitting a string into descending consecutive values You are given a string s that consists of only digits Check if we can split s into two or more non empty substrings such that the numerical values of the substrings are in descending order and the difference between numerical values of every two adjacent substrings is equal to For example the string s can be split into with numerical values The values are in descending order and adjacent values differ by so this way is valid Another example the string s can be split into or However all the ways are invalid because they have numerical values and respectively all of which are not in descending order Return true if it is possible to split s as described above or false otherwise A substring is a contiguous sequence of characters in a string Example Input s Output false Explanation There is no valid way to split s Example Input s Output true Explanation s can be split into with numerical values The values are in descending order with adjacent values differing by Example Input s Output false Explanation There is no valid way to split s Constraints s length s only consists of digits
shifting letters ii You are given a string s of lowercase English letters and a integer array shifts where shifts i starti endi directioni For every i shift the characters in s from the index starti to the index endi inclusive forward if directioni or shift the characters backward if directioni Shifting a character forward means replacing it with the next letter in the alphabet wrapping around so that z becomes a Similarly shifting a character backward means replacing it with the previous letter in the alphabet wrapping around so that a becomes z Return the final string after all such shifts to s are applied Example Input s abc shifts Output ace Explanation Firstly shift the characters from index to index backward Now s zac Secondly shift the characters from index to index forward Now s zbd Finally shift the characters from index to index forward Now s ace Example Input s dztz shifts Output catz Explanation Firstly shift the characters from index to index backward Now s cztz Finally shift the characters from index to index forward Now s catz Constraints s length shifts length shifts i length starti endi s length directioni s consists of lowercase English letters
super ugly number A super ugly number is a positive integer whose prime factors are in the array primes Given an integer n and an array of integers primes return the nth super ugly number The nth super ugly number is guaranteed to fit in a bit signed integer Example Input n primes Output Explanation is the sequence of the first super ugly numbers given primes Example Input n primes Output Explanation has no prime factors therefore all of its prime factors are in the array primes Constraints n primes length primes i primes i is guaranteed to be a prime number All the values of primes are unique and sorted in ascending order
find good days to rob the bank You and a gang of thieves are planning on robbing a bank You are given a indexed integer array security where security i is the number of guards on duty on the ith day The days are numbered starting from You are also given an integer time The ith day is a good day to rob the bank if There are at least time days before and after the ith day The number of guards at the bank for the time days before i are non increasing and The number of guards at the bank for the time days after i are non decreasing More formally this means day i is a good day to rob the bank if and only if security i time security i time security i security i time security i time Return a list of all days indexed that are good days to rob the bank The order that the days are returned in does not matter Example Input security time Output Explanation On day we have security security security security security On day we have security security security security security No other days satisfy this condition so days and are the only good days to rob the bank Example Input security time Output Explanation Since time equals every day is a good day to rob the bank so return every day Example Input security time Output Explanation No day has days before it that have a non increasing number of guards Thus no day is a good day to rob the bank so return an empty list Constraints security length security i time
patching array Given a sorted integer array nums and an integer n add patch elements to the array such that any number in the range n inclusive can be formed by the sum of some elements in the array Return the minimum number of patches required Example Input nums n Output Explanation Combinations of nums are which form possible sums of Now if we add patch to nums the combinations are Possible sums are which now covers the range So we only need patch Example Input nums n Output Explanation The two patches can be Example Input nums n Output Constraints nums length nums i nums is sorted in ascending order n
most frequent subtree sum Given the root of a binary tree return the most frequent subtree sum If there is a tie return all the values with the highest frequency in any order The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node including the node itself Example Input root Output Example Input root Output Constraints The number of nodes in the tree is in the range Node val
check if all characters have equal number of occurrences Given a string s return true if s is a good string or false otherwise A string s is good if all the characters that appear in s have the same number of occurrences i e the same frequency Example Input s abacbc Output true Explanation The characters that appear in s are a b and c All characters occur times in s Example Input s aaabb Output false Explanation The characters that appear in s are a and b a occurs times while b occurs times which is not the same number of times Constraints s length s consists of lowercase English letters
maximum frequency stack Design a stack like data structure to push elements to the stack and pop the most frequent element from the stack Implement the FreqStack class FreqStack constructs an empty frequency stack void push int val pushes an integer val onto the top of the stack int pop removes and returns the most frequent element in the stack If there is a tie for the most frequent element the element closest to the stack s top is removed and returned Example Input FreqStack push push push push push push pop pop pop pop Output null null null null null null null Explanation FreqStack freqStack new FreqStack freqStack push The stack is freqStack push The stack is freqStack push The stack is freqStack push The stack is freqStack push The stack is freqStack push The stack is freqStack pop return as is the most frequent The stack becomes freqStack pop return as and is the most frequent but is closest to the top The stack becomes freqStack pop return as is the most frequent The stack becomes freqStack pop return as and is the most frequent but is closest to the top The stack becomes Constraints val At most calls will be made to push and pop It is guaranteed that there will be at least one element in the stack before calling pop
put marbles in bags You have k bags You are given a indexed integer array weights where weights i is the weight of the ith marble You are also given the integer k Divide the marbles into the k bags according to the following rules No bag is empty If the ith marble and jth marble are in a bag then all marbles with an index between the ith and jth indices should also be in that same bag If a bag consists of all the marbles with an index from i to j inclusively then the cost of the bag is weights i weights j The score after distributing the marbles is the sum of the costs of all the k bags Return the difference between the maximum and minimum scores among marble distributions Example Input weights k Output Explanation The distribution results in the minimal score of The distribution results in the maximal score of Thus we return their difference Example Input weights k Output Explanation The only distribution possible is Since both the maximal and minimal score are the same we return Constraints k weights length weights i
surrounded regions Given an m x n matrix board containing X and O capture all regions that are directionally surrounded by X A region is captured by flipping all O s into X s in that surrounded region Example Input board X X X X X O O X X X O X X O X X Output X X X X X X X X X X X X X O X X Explanation Notice that an O should not be flipped if It is on the border or It is adjacent to an O that should not be flipped The bottom O is on the border so it is not flipped The other three O form a surrounded region so they are flipped Example Input board X Output X Constraints m board length n board i length m n board i j is X or O
number of visible people in a queue There are n people standing in a queue and they numbered from to n in left to right order You are given an array heights of distinct integers where heights i represents the height of the ith person A person can see another person to their right in the queue if everybody in between is shorter than both of them More formally the ith person can see the jth person if i j and min heights i heights j max heights i heights i heights j Return an array answer of length n where answer i is the number of people the ith person can see to their right in the queue Example Input heights Output Explanation Person can see person and Person can see person Person can see person and Person can see person Person can see person Person can see no one since nobody is to the right of them Example Input heights Output Constraints n heights length n heights i All the values of heights are unique
collect coins in a tree There exists an undirected and unrooted tree with n nodes indexed from to n You are given an integer n and a integer array edges of length n where edges i ai bi indicates that there is an edge between nodes ai and bi in the tree You are also given an array coins of size n where coins i can be either or where indicates the presence of a coin in the vertex i Initially you choose to start at any vertex in the tree Then you can perform the following operations any number of times Collect all the coins that are at a distance of at most from the current vertex or Move to any adjacent vertex in the tree Find the minimum number of edges you need to go through to collect all the coins and go back to the initial vertex Note that if you pass an edge several times you need to count it into the answer several times Example Input coins edges Output Explanation Start at vertex collect the coin at vertex move to vertex collect the coin at vertex then move back to vertex Example Input coins edges Output Explanation Start at vertex collect the coins at vertices and move to vertex collect the coin at vertex then move back to vertex Constraints n coins length n coins i edges length n edges i length ai bi n ai bi edges represents a valid tree
largest merge of two strings You are given two strings and You want to construct a string merge in the following way while either or are non empty choose one of the following options If is non empty append the first character in to merge and delete it from For example if abc and merge dv then after choosing this operation bc and merge dva If is non empty append the first character in to merge and delete it from For example if abc and merge then after choosing this operation bc and merge a Return the lexicographically largest merge you can construct A string a is lexicographically larger than a string b of the same length if in the first position where a and b differ a has a character strictly larger than the corresponding character in b For example abcd is lexicographically larger than abcc because the first position they differ is at the fourth character and d is greater than c Example Input cabaa bcaaa Output cbcabaaaaa Explanation One way to get the lexicographically largest merge is Take from merge c abaa bcaaa Take from merge cb abaa caaa Take from merge cbc abaa aaa Take from merge cbca baa aaa Take from merge cbcab aa aaa Append the remaining a s from and at the end of merge Example Input abcabc abdcaba Output abdcabcabcaba Constraints length length and consist only of lowercase English letters
check if it is a good array Given an array nums of positive integers Your task is to select some subset of nums multiply each element by an integer and add all these numbers The array is said to be good if you can obtain a sum of from the array by any possible subset and multiplicand Return True if the array is good otherwise return False Example Input nums Output true Explanation Pick numbers and Example Input nums Output true Explanation Pick numbers and Example Input nums Output false Constraints nums length nums i
path with maximum probability You are given an undirected weighted graph of n nodes indexed represented by an edge list where edges i a b is an undirected edge connecting the nodes a and b with a probability of success of traversing that edge succProb i Given two nodes start and end find the path with the maximum probability of success to go from start to end and return its success probability If there is no path from start to end return Your answer will be accepted if it differs from the correct answer by at most Example Input n edges succProb start end Output Explanation There are two paths from start to end one having a probability of success and the other has Example Input n edges succProb start end Output Example Input n edges succProb start end Output Explanation There is no path between and Constraints n start end n start end a b n a b succProb length edges length succProb i There is at most one edge between every two nodes
count number of pairs with absolute difference k Given an integer array nums and an integer k return the number of pairs i j where i j such that nums i nums j k The value of x is defined as x if x x if x Example Input nums k Output Explanation The pairs with an absolute difference of are Example Input nums k Output Explanation There are no pairs with an absolute difference of Example Input nums k Output Explanation The pairs with an absolute difference of are Constraints nums length nums i k
find the score of all prefixes of an array We define the conversion array conver of an array arr as follows conver i arr i max arr i where max arr i is the maximum value of arr j over j i We also define the score of an array arr as the sum of the values of the conversion array of arr Given a indexed integer array nums of length n return an array ans of length n where ans i is the score of the prefix nums i Example Input nums Output Explanation For the prefix the conversion array is hence the score is For the prefix the conversion array is hence the score is For the prefix the conversion array is hence the score is For the prefix the conversion array is hence the score is For the prefix the conversion array is hence the score is Example Input nums Output Explanation For the prefix the conversion array is hence the score is For the prefix the conversion array is hence the score is For the prefix the conversion array is hence the score is For the prefix the conversion array is hence the score is For the prefix the conversion array is hence the score is For the prefix the conversion array is hence the score is Constraints nums length nums i
longest substring with at least k repeating characters Given a string s and an integer k return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k Example Input s aaabb k Output Explanation The longest substring is aaa as a is repeated times Example Input s ababbc k Output Explanation The longest substring is ababb as a is repeated times and b is repeated times Constraints s length s consists of only lowercase English letters k
maximum average pass ratio There is a school that has classes of students and each class will be having a final exam You are given a integer array classes where classes i passi totali You know beforehand that in the ith class there are totali total students but only passi number of students will pass the exam You are also given an integer extraStudents There are another extraStudents brilliant students that are guaranteed to pass the exam of any class they are assigned to You want to assign each of the extraStudents students to a class in a way that maximizes the average pass ratio across all the classes The pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class The average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes Return the maximum possible average pass ratio after assigning the extraStudents students Answers within of the actual answer will be accepted Example Input classes extraStudents Output Explanation You can assign the two extra students to the first class The average pass ratio will be equal to Example Input classes extraStudents Output Constraints classes length classes i length passi totali extraStudents
find score of an array after marking all elements You are given an array nums consisting of positive integers Starting with score apply the following algorithm Choose the smallest integer of the array that is not marked If there is a tie choose the one with the smallest index Add the value of the chosen integer to score Mark the chosen element and its two adjacent elements if they exist Repeat until all the array elements are marked Return the score you get after applying the above algorithm Example Input nums Output Explanation We mark the elements as follows is the smallest unmarked element so we mark it and its two adjacent elements is the smallest unmarked element so we mark it and its left adjacent element is the only remaining unmarked element so we mark it Our score is Example Input nums Output Explanation We mark the elements as follows is the smallest unmarked element so we mark it and its two adjacent elements is the smallest unmarked element since there are two of them we choose the left most one so we mark the one at index and its right adjacent element is the only remaining unmarked element so we mark it Our score is Constraints nums length nums i
minimize the maximum difference of pairs You are given a indexed integer array nums and an integer p Find p pairs of indices of nums such that the maximum difference amongst all the pairs is minimized Also ensure no index appears more than once amongst the p pairs Note that for a pair of elements at the index i and j the difference of this pair is nums i nums j where x represents the absolute value of x Return the minimum maximum difference among all p pairs We define the maximum of an empty set to be zero Example Input nums p Output Explanation The first pair is formed from the indices and and the second pair is formed from the indices and The maximum difference is max nums nums nums nums max Therefore we return Example Input nums p Output Explanation Let the indices and form a pair The difference of that pair is which is the minimum we can attain Constraints nums length nums i p nums length
remove boxes You are given several boxes with different colors represented by different positive numbers You may experience several rounds to remove boxes until there is no box left Each time you can choose some continuous boxes with the same color i e composed of k boxes k remove them and get k k points Return the maximum points you can get Example Input boxes Output Explanation points points points points Example Input boxes Output Example Input boxes Output Constraints boxes length boxes i
sum of digits in base k Given an integer n in base and a base k return the sum of the digits of n after converting n from base to base k After converting each digit should be interpreted as a base number and the sum should be returned in base Example Input n k Output Explanation base expressed in base is Example Input n k Output Explanation n is already in base Constraints n k
longest zigzag path in a binary tree You are given the root of a binary tree A ZigZag path for a binary tree is defined as follow Choose any node in the binary tree and a direction right or left If the current direction is right move to the right child of the current node otherwise move to the left child Change the direction from right to left or from left to right Repeat the second and third steps until you can t move in the tree Zigzag length is defined as the number of nodes visited A single node has a length of Return the longest ZigZag path contained in that tree Example Input root null null null null null null null Output Explanation Longest ZigZag path in blue nodes right left right Example Input root null null null null Output Explanation Longest ZigZag path in blue nodes left right left right Example Input root Output Constraints The number of nodes in the tree is in the range Node val
design add and search words data structure Design a data structure that supports adding new words and finding if a string matches any previously added string Implement the WordDictionary class WordDictionary Initializes the object void addWord word Adds word to the data structure it can be matched later bool search word Returns true if there is any string in the data structure that matches word or false otherwise word may contain dots where dots can be matched with any letter Example Input WordDictionary addWord addWord addWord search search search search bad dad mad pad bad ad b Output null null null null false true true true Explanation WordDictionary wordDictionary new WordDictionary wordDictionary addWord bad wordDictionary addWord dad wordDictionary addWord mad wordDictionary search pad return False wordDictionary search bad return True wordDictionary search ad return True wordDictionary search b return True Constraints word length word in addWord consists of lowercase English letters word in search consist of or lowercase English letters There will be at most dots in word for search queries At most calls will be made to addWord and search
minimum cost to change the final value of expression You are given a valid boolean expression as a string expression consisting of the characters bitwise AND operator bitwise OR operator and For example and are not valid while and are valid expressions Return the minimum cost to change the final value of the expression For example if expression its value is We want to apply operations so that the new expression evaluates to The cost of changing the final value of an expression is the number of operations performed on the expression The types of operations are described as follows Turn a into a Turn a into a Turn a into a Turn a into a Note does not take precedence over in the order of calculation Evaluate parentheses first then in left to right order Example Input expression Output Explanation We can turn into by changing the to a using operation The new expression evaluates to Example Input expression Output Explanation We can turn into using operations The new expression evaluates to Example Input expression Output Explanation We can turn into using operation The new expression evaluates to Constraints expression length expression only contains and All parentheses are properly matched There will be no empty parentheses i e is not a substring of expression
find the duplicate number Given an array of integers nums containing n integers where each integer is in the range n inclusive There is only one repeated number in nums return this repeated number You must solve the problem without modifying the array nums and uses only constant extra space Example Input nums Output Example Input nums Output Constraints n nums length n nums i n All the integers in nums appear only once except for precisely one integer which appears two or more times Follow up How can we prove that at least one duplicate number must exist in nums Can you solve the problem in linear runtime complexity
minimum cost of buying candies with discount A shop is selling candies at a discount For every two candies sold the shop gives a third candy for free The customer can choose any candy to take away for free as long as the cost of the chosen candy is less than or equal to the minimum cost of the two candies bought For example if there are candies with costs and and the customer buys candies with costs and they can take the candy with cost for free but not the candy with cost Given a indexed integer array cost where cost i denotes the cost of the ith candy return the minimum cost of buying all the candies Example Input cost Output Explanation We buy the candies with costs and and take the candy with cost for free The total cost of buying all candies is This is the only way we can buy the candies Note that we cannot buy candies with costs and and then take the candy with cost for free The cost of the free candy has to be less than or equal to the minimum cost of the purchased candies Example Input cost Output Explanation The way in which we can get the minimum cost is described below Buy candies with costs and Take the candy with cost for free We buy candies with costs and Take the last remaining candy with cost for free Hence the minimum cost to buy all candies is Example Input cost Output Explanation Since there are only candies we buy both of them There is not a third candy we can take for free Hence the minimum cost to buy all candies is Constraints cost length cost i
alphabet board path On an alphabet board we start at position corresponding to character board Here board abcde fghij klmno pqrst uvwxy z as shown in the diagram below We may make the following moves U moves our position up one row if the position exists on the board D moves our position down one row if the position exists on the board L moves our position left one column if the position exists on the board R moves our position right one column if the position exists on the board adds the character board r c at our current position r c to the answer Here the only positions that exist on the board are positions with letters on them Return a sequence of moves that makes our answer equal to target in the minimum number of moves You may return any path that does so Example Input target leet Output DDR UURRR DDD Example Input target code Output RR DDRR UUL R Constraints target length target consists only of English lowercase letters
champagne tower We stack glasses in a pyramid where the first row has glass the second row has glasses and so on until the row Each glass holds one cup of champagne Then some champagne is poured into the first glass at the top When the topmost glass is full any excess liquid poured will fall equally to the glass immediately to the left and right of it When those glasses become full any excess champagne will fall equally to the left and right of those glasses and so on A glass at the bottom row has its excess champagne fall on the floor For example after one cup of champagne is poured the top most glass is full After two cups of champagne are poured the two glasses on the second row are half full After three cups of champagne are poured those two cups become full there are full glasses total now After four cups of champagne are poured the third row has the middle glass half full and the two outside glasses are a quarter full as pictured below Now after pouring some non negative integer cups of champagne return how full the jth glass in the ith row is both i and j are indexed Example Input poured Output Explanation We poured cup of champange to the top glass of the tower which is indexed as There will be no excess liquid so all the glasses under the top glass will remain empty Example Input poured Output Explanation We poured cups of champange to the top glass of the tower which is indexed as There is one cup of excess liquid The glass indexed as and the glass indexed as will share the excess liquid equally and each will get half cup of champange Example Input poured Output Constraints poured
count nice pairs in an array You are given an array nums that consists of non negative integers Let us define rev x as the reverse of the non negative integer x For example rev and rev A pair of indices i j is nice if it satisfies all of the following conditions i j nums length nums i rev nums j nums j rev nums i Return the number of nice pairs of indices Since that number can be too large return it modulo Example Input nums Output Explanation The two pairs are rev rev rev rev Example Input nums Output Constraints nums length nums i
rotated digits An integer x is a good if after rotating each digit individually by degrees we get a valid number that is different from x Each digit must be rotated we cannot choose to leave it alone A number is valid if each digit remains a digit after rotation For example and rotate to themselves and rotate to each other in this case they are rotated in a different direction in other words or gets mirrored and rotate to each other and the rest of the numbers do not rotate to any other number and become invalid Given an integer n return the number of good integers in the range n Example Input n Output Explanation There are four good numbers in the range Note that and are not good numbers since they remain unchanged after rotating Example Input n Output Example Input n Output Constraints n
koko eating bananas Koko loves to eat bananas There are n piles of bananas the ith pile has piles i bananas The guards have gone and will come back in h hours Koko can decide her bananas per hour eating speed of k Each hour she chooses some pile of bananas and eats k bananas from that pile If the pile has less than k bananas she eats all of them instead and will not eat any more bananas during this hour Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return Return the minimum integer k such that she can eat all the bananas within h hours Example Input piles h Output Example Input piles h Output Example Input piles h Output Constraints piles length piles length h piles i
first letter to appear twice Given a string s consisting of lowercase English letters return the first letter to appear twice Note A letter a appears twice before another letter b if the second occurrence of a is before the second occurrence of b s will contain at least one letter that appears twice Example Input s abccbaacz Output c Explanation The letter a appears on the indexes and The letter b appears on the indexes and The letter c appears on the indexes and The letter z appears on the index The letter c is the first letter to appear twice because out of all the letters the index of its second occurrence is the smallest Example Input s abcdd Output d Explanation The only letter that appears twice is d so we return d Constraints s length s consists of lowercase English letters s has at least one repeated letter
furthest building you can reach You are given an integer array heights representing the heights of buildings some bricks and some ladders You start your journey from building and move to the next building by possibly using bricks or ladders While moving from building i to building i indexed If the current building s height is greater than or equal to the next building s height you do not need a ladder or bricks If the current building s height is less than the next building s height you can either use one ladder or h i h i bricks Return the furthest building index indexed you can reach if you use the given ladders and bricks optimally Example Input heights bricks ladders Output Explanation Starting at building you can follow these steps Go to building without using ladders nor bricks since Go to building using bricks You must use either bricks or ladders because Go to building without using ladders nor bricks since Go to building using your only ladder You must use either bricks or ladders because It is impossible to go beyond building because you do not have any more bricks or ladders Example Input heights bricks ladders Output Example Input heights bricks ladders Output Constraints heights length heights i bricks ladders heights length
longest continuous subarray with absolute diff less than or equal to limit Given an array of integers nums and an integer limit return the size of the longest non empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit Example Input nums limit Output Explanation All subarrays are with maximum absolute diff with maximum absolute diff with maximum absolute diff with maximum absolute diff with maximum absolute diff with maximum absolute diff with maximum absolute diff with maximum absolute diff with maximum absolute diff with maximum absolute diff Therefore the size of the longest subarray is Example Input nums limit Output Explanation The subarray is the longest since the maximum absolute diff is Example Input nums limit Output Constraints nums length nums i limit
maximize number of nice divisors You are given a positive integer primeFactors You are asked to construct a positive integer n that satisfies the following conditions The number of prime factors of n not necessarily distinct is at most primeFactors The number of nice divisors of n is maximized Note that a divisor of n is nice if it is divisible by every prime factor of n For example if n then its prime factors are then and are nice divisors while and are not Return the number of nice divisors of n Since that number can be too large return it modulo Note that a prime number is a natural number greater than that is not a product of two smaller natural numbers The prime factors of a number n is a list of prime numbers such that their product equals n Example Input primeFactors Output Explanation is a valid value of n It has prime factors and it has nice divisors There is not other value of n that has at most prime factors and more nice divisors Example Input primeFactors Output Constraints primeFactors
number of substrings containing all three characters Given a string s consisting only of characters a b and c Return the number of substrings containing at least one occurrence of all these characters a b and c Example Input s abcabc Output Explanation The substrings containing at least one occurrence of the characters a b and c are abc abca abcab abcabc bca bcab bcabc cab cabc and abc again Example Input s aaacb Output Explanation The substrings containing at least one occurrence of the characters a b and c are aaacb aacb and acb Example Input s abc Output Constraints s length x s only consists of a b or c characters
design graph with shortest path calculator There is a directed weighted graph that consists of n nodes numbered from to n The edges of the graph are initially represented by the given array edges where edges i fromi toi edgeCosti meaning that there is an edge from fromi to toi with the cost edgeCosti Implement the Graph class Graph int n int edges initializes the object with n nodes and the given edges addEdge int edge adds an edge to the list of edges where edge from to edgeCost It is guaranteed that there is no edge between the two nodes before adding this one int shortestPath int int returns the minimum cost of a path from to If no path exists return The cost of a path is the sum of the costs of the edges in the path Example Input Graph shortestPath shortestPath addEdge shortestPath Output null null Explanation Graph g new Graph g shortestPath return The shortest path from to in the first diagram above is with a total cost of g shortestPath return There is no path from to g addEdge We add an edge from node to node and we get the second diagram above g shortestPath return The shortest path from to now is with a total cost of Constraints n edges length n n edges i length edge length fromi toi from to n edgeCosti edgeCost There are no repeated edges and no self loops in the graph at any point At most calls will be made for addEdge At most calls will be made for shortestPath
count increasing quadruplets Given a indexed integer array nums of size n containing all numbers from to n return the number of increasing quadruplets A quadruplet i j k l is increasing if i j k l n and nums i nums k nums j nums l Example Input nums Output Explanation When i j k and l nums i nums k nums j nums l When i j k and l nums i nums k nums j nums l There are no other quadruplets so we return Example Input nums Output Explanation There exists only one quadruplet with i j k l but since nums j nums k we return Constraints nums length nums i nums length All the integers of nums are unique nums is a permutation
binary number with alternating bits Given a positive integer check whether it has alternating bits namely if two adjacent bits will always have different values Example Input n Output true Explanation The binary representation of is Example Input n Output false Explanation The binary representation of is Example Input n Output false Explanation The binary representation of is Constraints n
design a text editor Design a text editor with a cursor that can do the following Add text to where the cursor is Delete text from where the cursor is simulating the backspace key Move the cursor either left or right When deleting text only characters to the left of the cursor will be deleted The cursor will also remain within the actual text and cannot be moved beyond it More formally we have that cursor position currentText length always holds Implement the TextEditor class TextEditor Initializes the object with empty text void addText string text Appends text to where the cursor is The cursor ends to the right of text int deleteText int k Deletes k characters to the left of the cursor Returns the number of characters actually deleted string cursorLeft int k Moves the cursor to the left k times Returns the last min len characters to the left of the cursor where len is the number of characters to the left of the cursor string cursorRight int k Moves the cursor to the right k times Returns the last min len characters to the left of the cursor where len is the number of characters to the left of the cursor Example Input TextEditor addText deleteText addText cursorRight cursorLeft deleteText cursorLeft cursorRight leetcode practice Output null null null etpractice leet practi Explanation TextEditor textEditor new TextEditor The current text is The character represents the cursor textEditor addText leetcode The current text is leetcode textEditor deleteText return The current text is leet characters were deleted textEditor addText practice The current text is leetpractice textEditor cursorRight return etpractice The current text is leetpractice The cursor cannot be moved beyond the actual text and thus did not move etpractice is the last characters to the left of the cursor textEditor cursorLeft return leet The current text is leet practice leet is the last min characters to the left of the cursor textEditor deleteText return The current text is practice Only characters were deleted textEditor cursorLeft return The current text is practice The cursor cannot be moved beyond the actual text and thus did not move is the last min characters to the left of the cursor textEditor cursorRight return practi The current text is practi ce practi is the last min characters to the left of the cursor Constraints text length k text consists of lowercase English letters At most calls in total will be made to addText deleteText cursorLeft and cursorRight Follow up Could you find a solution with time complexity of O k per call
maximal score after applying k operations You are given a indexed integer array nums and an integer k You have a starting score of In one operation choose an index i such that i nums length increase your score by nums i and replace nums i with ceil nums i Return the maximum possible score you can attain after applying exactly k operations The ceiling function ceil val is the least integer greater than or equal to val Example Input nums k Output Explanation Apply the operation to each array element exactly once The final score is Example Input nums k Output Explanation You can do the following operations Operation Select i so nums becomes Your score increases by Operation Select i so nums becomes Your score increases by Operation Select i so nums becomes Your score increases by The final score is Constraints nums length k nums i
stone game ii Alice and Bob continue their games with piles of stones There are a number of piles arranged in a row and each pile has a positive integer number of stones piles i The objective of the game is to end with the most stones Alice and Bob take turns with Alice starting first Initially M On each player s turn that player can take all the stones in the first X remaining piles where X Then we set M max M X The game continues until all the stones have been taken Assuming Alice and Bob play optimally return the maximum number of stones Alice can get Example Input piles Output Explanation If Alice takes one pile at the beginning Bob takes two piles then Alice takes piles again Alice can get piles in total If Alice takes two piles at the beginning then Bob can take all three piles left In this case Alice get piles in total So we return since it s larger Example Input piles Output Constraints piles length piles i
number of substrings with only 1s Given a binary string s return the number of substrings with all characters s Since the answer may be too large return it modulo Example Input s Output Explanation There are substring in total with only s characters times times time Example Input s Output Explanation Substring is shown times in s Example Input s Output Explanation Each substring contains only s characters Constraints s length s i is either or
latest time by replacing hidden digits You are given a string time in the form of hh mm where some of the digits in the string are hidden represented by The valid times are those inclusively between and Return the latest valid time you can get from time by replacing the hidden digits Example Input time Output Explanation The latest hour beginning with the digit is and the latest minute ending with the digit is Example Input time Output Example Input time Output Constraints time is in the format hh mm It is guaranteed that you can produce a valid time from the given string
count pairs with xor in a range Given a indexed integer array nums and two integers low and high return the number of nice pairs A nice pair is a pair i j where i j nums length and low nums i XOR nums j high Example Input nums low high Output Explanation All nice pairs i j are as follows nums XOR nums nums XOR nums nums XOR nums nums XOR nums nums XOR nums nums XOR nums Example Input nums low high Output Explanation All nice pairs i j are as follows nums XOR nums nums XOR nums nums XOR nums nums XOR nums nums XOR nums nums XOR nums nums XOR nums nums XOR nums Constraints nums length nums i low high
minimum moves to reach target with rotations In an n n grid there is a snake that spans cells and starts moving from the top left corner at and The grid has empty cells represented by zeros and blocked cells represented by ones The snake wants to reach the lower right corner at n n and n n In one move the snake can Move one cell to the right if there are no blocked cells there This move keeps the horizontal vertical position of the snake as it is Move down one cell if there are no blocked cells there This move keeps the horizontal vertical position of the snake as it is Rotate clockwise if it s in a horizontal position and the two cells under it are both empty In that case the snake moves from r c and r c to r c and r c Rotate counterclockwise if it s in a vertical position and the two cells to its right are both empty In that case the snake moves from r c and r c to r c and r c Return the minimum number of moves to reach the target If there is no way to reach the target return Example Input grid Output Explanation One possible solution is right right rotate clockwise right down down down down rotate counterclockwise right down Example Input grid Output Constraints n grid i j It is guaranteed that the snake starts at empty cells
thousand separator Given an integer n add a dot as the thousands separator and return it in string format Example Input n Output Example Input n Output Constraints n
subarray with elements greater than varying threshold You are given an integer array nums and an integer threshold Find any subarray of nums of length k such that every element in the subarray is greater than threshold k Return the size of any such subarray If there is no such subarray return A subarray is a contiguous non empty sequence of elements within an array Example Input nums threshold Output Explanation The subarray has a size of and every element is greater than Note that this is the only valid subarray Example Input nums threshold Output Explanation The subarray has a size of and So is returned Note that the subarray has a size of and every element is greater than Similarly the subarrays also satisfy the given conditions Therefore or may also be returned Constraints nums length nums i threshold
single element in a sorted array You are given a sorted array consisting of only integers where every element appears exactly twice except for one element which appears exactly once Return the single element that appears only once Your solution must run in O log n time and O space Example Input nums Output Example Input nums Output Constraints nums length nums i
alert using same key-card three or more times in a one hour period LeetCode company workers use key cards to unlock office doors Each time a worker uses their key card the security system saves the worker s name and the time when it was used The system emits an alert if any worker uses the key card three or more times in a one hour period You are given a list of strings keyName and keyTime where keyName i keyTime i corresponds to a person s name and the time when their key card was used in a single day Access times are given in the hour time format HH MM such as and Return a list of unique worker names who received an alert for frequent keycard use Sort the names in ascending order alphabetically Notice that is considered to be within a one hour period while is not considered to be within a one hour period Example Input keyName daniel daniel daniel luis luis luis luis keyTime Output daniel Explanation daniel used the keycard times in a one hour period Example Input keyName alice alice alice bob bob bob bob keyTime Output bob Explanation bob used the keycard times in a one hour period Constraints keyName length keyTime length keyName length keyTime length keyTime i is in the format HH MM keyName i keyTime i is unique keyName i length keyName i contains only lowercase English letters
minimum number of operations to make array continuous You are given an integer array nums In one operation you can replace any element in nums with any integer nums is considered continuous if both of the following conditions are fulfilled All elements in nums are unique The difference between the maximum element and the minimum element in nums equals nums length For example nums is continuous but nums is not continuous Return the minimum number of operations to make nums continuous Example Input nums Output Explanation nums is already continuous Example Input nums Output Explanation One possible solution is to change the last element to The resulting array is which is continuous Example Input nums Output Explanation One possible solution is to Change the second element to Change the third element to Change the fourth element to The resulting array is which is continuous Constraints nums length nums i
maximum number of consecutive values you can make You are given an integer array coins of length n which represents the n coins that you own The value of the ith coin is coins i You can make some value x if you can choose some of your n coins such that their values sum up to x Return the maximum number of consecutive integer values that you can make with your coins starting from and including Note that you may have multiple coins of the same value Example Input coins Output Explanation You can make the following values take take You can make consecutive integer values starting from Example Input coins Output Explanation You can make the following values take take take take take take take take You can make consecutive integer values starting from Example Input nums Output Constraints coins length n n coins i
contains duplicate ii Given an integer array nums and an integer k return true if there are two distinct indices i and j in the array such that nums i nums j and abs i j k Example Input nums k Output true Example Input nums k Output true Example Input nums k Output false Constraints nums length nums i k
next greater element ii Given a circular integer array nums i e the next element of nums nums length is nums return the next greater number for every element in nums The next greater number of a number x is the first greater number to its traversing order next in the array which means you could search circularly to find its next greater number If it doesn t exist return for this number Example Input nums Output Explanation The first s next greater number is The number can t find next greater number The second s next greater number needs to search circularly which is also Example Input nums Output Constraints nums length nums i
three consecutive odds Given an integer array arr return true if there are three consecutive odd numbers in the array Otherwise return false Example Input arr Output false Explanation There are no three consecutive odds Example Input arr Output true Explanation are three consecutive odds Constraints arr length arr i
chalkboard xor game You are given an array of integers nums represents the numbers written on a chalkboard Alice and Bob take turns erasing exactly one number from the chalkboard with Alice starting first If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become then that player loses The bitwise XOR of one element is that element itself and the bitwise XOR of no elements is Also if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to then that player wins Return true if and only if Alice wins the game assuming both players play optimally Example Input nums Output false Explanation Alice has two choices erase or erase If she erases the nums array becomes The bitwise XOR of all the elements of the chalkboard is XOR Now Bob can remove any element he wants because Alice will be the one to erase the last element and she will lose If Alice erases first now nums become The bitwise XOR of all the elements of the chalkboard is XOR Alice will lose Example Input nums Output true Example Input nums Output true Constraints nums length nums i
max consecutive ones iii Given a binary array nums and an integer k return the maximum number of consecutive s in the array if you can flip at most k s Example Input nums k Output Explanation Bolded numbers were flipped from to The longest subarray is underlined Example Input nums k Output Explanation Bolded numbers were flipped from to The longest subarray is underlined Constraints nums length nums i is either or k nums length
move zeroes Given an integer array nums move all s to the end of it while maintaining the relative order of the non zero elements Note that you must do this in place without making a copy of the array Example Input nums Output Example Input nums Output Constraints nums length nums i Follow up Could you minimize the total number of operations done
validate binary tree nodes You have n binary tree nodes numbered from to n where node i has two children leftChild i and rightChild i return true if and only if all the given nodes form exactly one valid binary tree If node i has no left child then leftChild i will equal similarly for the right child Note that the nodes have no values and that we only use the node numbers in this problem Example Input n leftChild rightChild Output true Example Input n leftChild rightChild Output false Example Input n leftChild rightChild Output false Constraints n leftChild length rightChild length n leftChild i rightChild i n
maximum product of the length of two palindromic subsequences Given a string s find two disjoint palindromic subsequences of s such that the product of their lengths is maximized The two subsequences are disjoint if they do not both pick a character at the same index Return the maximum possible product of the lengths of the two palindromic subsequences A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters A string is palindromic if it reads the same forward and backward Example Input s leetcodecom Output Explanation An optimal solution is to choose ete for the subsequence and cdc for the subsequence The product of their lengths is Example Input s bb Output Explanation An optimal solution is to choose b the first character for the subsequence and b the second character for the subsequence The product of their lengths is Example Input s accbcaxxcxx Output Explanation An optimal solution is to choose accca for the subsequence and xxcxx for the subsequence The product of their lengths is Constraints s length s consists of lowercase English letters only
valid parentheses Given a string s containing just the characters and determine if the input string is valid An input string is valid if Open brackets must be closed by the same type of brackets Open brackets must be closed in the correct order Every close bracket has a corresponding open bracket of the same type Example Input s Output true Example Input s Output true Example Input s Output false Constraints s length s consists of parentheses only
count unhappy friends You are given a list of preferences for n friends where n is always even For each person i preferences i contains a list of friends sorted in the order of preference In other words a friend earlier in the list is more preferred than a friend later in the list Friends in each list are denoted by integers from to n All the friends are divided into pairs The pairings are given in a list pairs where pairs i xi yi denotes xi is paired with yi and yi is paired with xi However this pairing may cause some of the friends to be unhappy A friend x is unhappy if x is paired with y and there exists a friend u who is paired with v but x prefers u over y and u prefers x over v Return the number of unhappy friends Example Input n preferences pairs Output Explanation Friend is unhappy because is paired with but prefers over and prefers over Friend is unhappy because is paired with but prefers over and prefers over Friends and are happy Example Input n preferences pairs Output Explanation Both friends and are happy Example Input n preferences pairs Output Constraints n n is even preferences length n preferences i length n preferences i j n preferences i does not contain i All values in preferences i are unique pairs length n pairs i length xi yi xi yi n Each person is contained in exactly one pair
custom sort string You are given two strings order and s All the characters of order are unique and were sorted in some custom order previously Permute the characters of s so that they match the order that order was sorted More specifically if a character x occurs before a character y in order then x should occur before y in the permuted string Return any permutation of s that satisfies this property Example Input order cba s abcd Output cbad Explanation a b c appear in order so the order of a b c should be c b and a Since d does not appear in order it can be at any position in the returned string dcba cdba cbda are also valid outputs Example Input order cbafg s abcd Output cbad Constraints order length s length order and s consist of lowercase English letters All the characters of order are unique
power of four Given an integer n return true if it is a power of four Otherwise return false An integer n is a power of four if there exists an integer x such that n Example Input n Output true Example Input n Output false Example Input n Output true Constraints n Follow up Could you solve it without loops recursion
minimum deletions to make array beautiful You are given a indexed integer array nums The array nums is beautiful if nums length is even nums i nums i for all i Note that an empty array is considered beautiful You can delete any number of elements from nums When you delete an element all the elements to the right of the deleted element will be shifted one unit to the left to fill the gap created and all the elements to the left of the deleted element will remain unchanged Return the minimum number of elements to delete from nums to make it beautiful Example Input nums Output Explanation You can delete either nums or nums to make nums which is beautiful It can be proven you need at least deletion to make nums beautiful Example Input nums Output Explanation You can delete nums and nums to make nums which is beautiful It can be proven you need at least deletions to make nums beautiful Constraints nums length nums i
implement trie (prefix tree) A trie pronounced as try or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings There are various applications of this data structure such as autocomplete and spellchecker Implement the Trie class Trie Initializes the trie object void insert String word Inserts the string word into the trie boolean search String word Returns true if the string word is in the trie i e was inserted before and false otherwise boolean startsWith String prefix Returns true if there is a previously inserted string word that has the prefix prefix and false otherwise Example Input Trie insert search search startsWith insert search apple apple app app app app Output null null true false true null true Explanation Trie trie new Trie trie insert apple trie search apple return True trie search app return False trie startsWith app return True trie insert app trie search app return True Constraints word length prefix length word and prefix consist only of lowercase English letters At most calls in total will be made to insert search and startsWith
find two non-overlapping sub-arrays each with target sum You are given an array of integers arr and an integer target You have to find two non overlapping sub arrays of arr each with a sum equal target There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub arrays is minimum Return the minimum sum of the lengths of the two required sub arrays or return if you cannot find such two sub arrays Example Input arr target Output Explanation Only two sub arrays have sum and The sum of their lengths is Example Input arr target Output Explanation Although we have three non overlapping sub arrays of sum and but we will choose the first and third sub arrays as the sum of their lengths is Example Input arr target Output Explanation We have only one sub array of sum Constraints arr length arr i target
single number iii Given an integer array nums in which exactly two elements appear only once and all the other elements appear exactly twice Find the two elements that appear only once You can return the answer in any order You must write an algorithm that runs in linear runtime complexity and uses only constant extra space Example Input nums Output Explanation is also a valid answer Example Input nums Output Example Input nums Output Constraints nums length nums i Each integer in nums will appear twice only two integers will appear once
balance a binary search tree Given the root of a binary search tree return a balanced binary search tree with the same node values If there is more than one answer return any of them A binary search tree is balanced if the depth of the two subtrees of every node never differs by more than Example Input root null null null null null Output null null null Explanation This is not the only correct answer null is also correct Example Input root Output Constraints The number of nodes in the tree is in the range Node val
apply discount every n orders There is a supermarket that is frequented by many customers The products sold at the supermarket are represented as two parallel integer arrays products and prices where the ith product has an ID of products i and a price of prices i When a customer is paying their bill is represented as two parallel integer arrays product and amount where the jth product they purchased has an ID of product j and amount j is how much of the product they bought Their subtotal is calculated as the sum of each amount j price of the jth product The supermarket decided to have a sale Every nth customer paying for their groceries will be given a percentage discount The discount amount is given by discount where they will be given discount percent off their subtotal More formally if their subtotal is bill then they would actually pay bill discount Implement the Cashier class Cashier int n int discount int products int prices Initializes the object with n the discount and the products and their prices double getBill int product int amount Returns the final total of the bill with the discount applied if any Answers within of the actual value will be accepted Example Input Cashier getBill getBill getBill getBill getBill getBill getBill Output null Explanation Cashier cashier new Cashier cashier getBill return customer no discount bill cashier getBill return customer no discount bill cashier getBill return customer discount Original bill Actual bill cashier getBill return customer no discount cashier getBill return customer no discount cashier getBill return customer discount Original bill but with Actual bill cashier getBill return customer no discount Constraints n discount products length prices length products length products i prices i The elements in products are unique product length products length amount length product length product j exists in products amount j The elements of product are unique At most calls will be made to getBill Answers within of the actual value will be accepted
statistics from a large sample You are given a large sample of integers in the range Since the sample is so large it is represented by an array count where count k is the number of times that k appears in the sample Calculate the following statistics minimum The minimum element in the sample maximum The maximum element in the sample mean The average of the sample calculated as the total sum of all elements divided by the total number of elements median If the sample has an odd number of elements then the median is the middle element once the sample is sorted If the sample has an even number of elements then the median is the average of the two middle elements once the sample is sorted mode The number that appears the most in the sample It is guaranteed to be unique Return the statistics of the sample as an array of floating point numbers minimum maximum mean median mode Answers within of the actual answer will be accepted Example Input count Output Explanation The sample represented by count is The minimum and maximum are and respectively The mean is Since the size of the sample is even the median is the average of the two middle elements and which is The mode is as it appears the most in the sample Example Input count Output Explanation The sample represented by count is The minimum and maximum are and respectively The mean is for display purposes the output shows the rounded number Since the size of the sample is odd the median is the middle element The mode is as it appears the most in the sample Constraints count length count i sum count The mode of the sample that count represents is unique
find if path exists in graph There is a bi directional graph with n vertices where each vertex is labeled from to n inclusive The edges in the graph are represented as a integer array edges where each edges i ui vi denotes a bi directional edge between vertex ui and vertex vi Every vertex pair is connected by at most one edge and no vertex has an edge to itself You want to determine if there is a valid path that exists from vertex source to vertex destination Given edges and the integers n source and destination return true if there is a valid path from source to destination or false otherwise Example Input n edges source destination Output true Explanation There are two paths from vertex to vertex Example Input n edges source destination Output false Explanation There is no path from vertex to vertex Constraints n edges length edges i length ui vi n ui vi source destination n There are no duplicate edges There are no self edges
minimum operations to reduce an integer to 0 You are given a positive integer n you can do the following operation any number of times Add or subtract a power of from n Return the minimum number of operations to make n equal to A number x is power of if x where i Example Input n Output Explanation We can do the following operations Add to n so now n Subtract from n so now n Subtract from n so now n It can be shown that is the minimum number of operations we need to make n equal to Example Input n Output Explanation We can do the following operations Add to n so now n Add to n so now n Subtract from n so now n So the minimum number of operations is Constraints n
range frequency queries Design a data structure to find the frequency of a given value in a given subarray The frequency of a value in a subarray is the number of occurrences of that value in the subarray Implement the RangeFreqQuery class RangeFreqQuery int arr Constructs an instance of the class with the given indexed integer array arr int query int left int right int value Returns the frequency of value in the subarray arr left right A subarray is a contiguous sequence of elements within an array arr left right denotes the subarray that contains the elements of nums between indices left and right inclusive Example Input RangeFreqQuery query query Output null Explanation RangeFreqQuery rangeFreqQuery new RangeFreqQuery rangeFreqQuery query return The value occurs time in the subarray rangeFreqQuery query return The value occurs times in the whole array Constraints arr length arr i value left right arr length At most calls will be made to query
maximum number of points from grid queries You are given an m x n integer matrix grid and an array queries of size k Find an array answer of size k such that for each integer queries i you start in the top left cell of the matrix and repeat the following process If queries i is strictly greater than the value of the current cell that you are in then you get one point if it is your first time visiting this cell and you can move to any adjacent cell in all directions up down left and right Otherwise you do not get any points and you end this process After the process answer i is the maximum number of points you can get Note that for each query you are allowed to visit the same cell multiple times Return the resulting array answer Example Input grid queries Output Explanation The diagrams above show which cells we visit to get points for each query Example Input grid queries Output Explanation We can not get any points because the value of the top left cell is already greater than or equal to Constraints m grid length n grid i length m n m n k queries length k grid i j queries i
minimum operations to halve array sum You are given an array nums of positive integers In one operation you can choose any number from nums and reduce it to exactly half the number Note that you may choose this reduced number in future operations Return the minimum number of operations to reduce the sum of nums by at least half Example Input nums Output Explanation The initial sum of nums is equal to The following is one of the ways to reduce the sum by at least half Pick the number and reduce it to Pick the number and reduce it to Pick the number and reduce it to The final array is with a total sum of The sum of nums has been reduced by which is at least half of the initial sum Overall operations were used so we return It can be shown that we cannot reduce the sum by at least half in less than operations Example Input nums Output Explanation The initial sum of nums is equal to The following is one of the ways to reduce the sum by at least half Pick the number and reduce it to Pick the number and reduce it to Pick the number and reduce it to The final array is with a total sum of The sum of nums has been reduced by which is at least half of the initial sum Overall operations were used so we return It can be shown that we cannot reduce the sum by at least half in less than operations Constraints nums length nums i
remove covered intervals Given an array intervals where intervals i li ri represent the interval li ri remove all intervals that are covered by another interval in the list The interval a b is covered by the interval c d if and only if c a and b d Return the number of remaining intervals Example Input intervals Output Explanation Interval is covered by therefore it is removed Example Input intervals Output Constraints intervals length intervals i length li ri All the given intervals are unique
valid arrangement of pairs You are given a indexed integer array pairs where pairs i starti endi An arrangement of pairs is valid if for every index i where i pairs length we have endi starti Return any valid arrangement of pairs Note The inputs will be generated such that there exists a valid arrangement of pairs Example Input pairs Output Explanation This is a valid arrangement since endi always equals starti Example Input pairs Output Explanation This is a valid arrangement since endi always equals starti The arrangements and are also valid Example Input pairs Output Explanation This is a valid arrangement since endi always equals starti Constraints pairs length pairs i length starti endi starti endi No two pairs are exactly the same There exists a valid arrangement of pairs
teemo attacking Our hero Teemo is attacking an enemy Ashe with poison attacks When Teemo attacks Ashe Ashe gets poisoned for a exactly duration seconds More formally an attack at second t will mean Ashe is poisoned during the inclusive time interval t t duration If Teemo attacks again before the poison effect ends the timer for it is reset and the poison effect will end duration seconds after the new attack You are given a non decreasing integer array timeSeries where timeSeries i denotes that Teemo attacks Ashe at second timeSeries i and an integer duration Return the total number of seconds that Ashe is poisoned Example Input timeSeries duration Output Explanation Teemo s attacks on Ashe go as follows At second Teemo attacks and Ashe is poisoned for seconds and At second Teemo attacks and Ashe is poisoned for seconds and Ashe is poisoned for seconds and which is seconds in total Example Input timeSeries duration Output Explanation Teemo s attacks on Ashe go as follows At second Teemo attacks and Ashe is poisoned for seconds and At second however Teemo attacks again and resets the poison timer Ashe is poisoned for seconds and Ashe is poisoned for seconds and which is seconds in total Constraints timeSeries length timeSeries i duration timeSeries is sorted in non decreasing order
minimum number of people to teach On a social network consisting of m users and some friendships between users two users can communicate with each other if they know a common language You are given an integer n an array languages and an array friendships where There are n languages numbered through n languages i is the set of languages the ith user knows and friendships i ui vi denotes a friendship between the users ui and vi You can choose one language and teach it to some users so that all friends can communicate with each other Return the minimum number of users you need to teach Note that friendships are not transitive meaning if x is a friend of y and y is a friend of z this doesn t guarantee that x is a friend of z Example Input n languages friendships Output Explanation You can either teach user the second language or user the first language Example Input n languages friendships Output Explanation Teach the third language to users and yielding two users to teach Constraints n languages length m m languages i length n languages i j n ui vi languages length friendships length All tuples ui vi are unique languages i contains only unique values
split a string into the max number of unique substrings Given a string s return the maximum number of unique substrings that the given string can be split into You can split string s into any list of non empty substrings where the concatenation of the substrings forms the original string However you must split the substrings such that all of them are unique A substring is a contiguous sequence of characters within a string Example Input s ababccc Output Explanation One way to split maximally is a b ab c cc Splitting like a b a b c cc is not valid as you have a and b multiple times Example Input s aba Output Explanation One way to split maximally is a ba Example Input s aa Output Explanation It is impossible to split the string any further Constraints s length s contains only lower case English letters
check if binary string has at most one segment of ones Given a binary string s without leading zeros return true if s contains at most one contiguous segment of ones Otherwise return false Example Input s Output false Explanation The ones do not form a contiguous segment Example Input s Output true Constraints s length s i is either or s is
frog position after t seconds Given an undirected tree consisting of n vertices numbered from to n A frog starts jumping from vertex In one second the frog jumps from its current vertex to another unvisited vertex if they are directly connected The frog can not jump back to a visited vertex In case the frog can jump to several vertices it jumps randomly to one of them with the same probability Otherwise when the frog can not jump to any unvisited vertex it jumps forever on the same vertex The edges of the undirected tree are given in the array edges where edges i ai bi means that exists an edge connecting the vertices ai and bi Return the probability that after t seconds the frog is on the vertex target Answers within of the actual answer will be accepted Example Input n edges t target Output Explanation The figure above shows the given graph The frog starts at vertex jumping with probability to the vertex after second and then jumping with probability to vertex after second Thus the probability for the frog is on the vertex after seconds is Example Input n edges t target Output Explanation The figure above shows the given graph The frog starts at vertex jumping with probability to the vertex after second Constraints n edges length n edges i length ai bi n t target n
check if one string swap can make strings equal You are given two strings and of equal length A string swap is an operation where you choose two indices in a string not necessarily different and swap the characters at these indices Return true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings Otherwise return false Example Input bank kanb Output true Explanation For example swap the first character with the last character of to make bank Example Input attack defend Output false Explanation It is impossible to make them equal with one string swap Example Input kelb kelb Output true Explanation The two strings are already equal so no string swap operation is required Constraints length length length length and consist of only lowercase English letters
backspace string compare Given two strings s and t return true if they are equal when both are typed into empty text editors means a backspace character Note that after backspacing an empty text the text will continue empty Example Input s ab c t ad c Output true Explanation Both s and t become ac Example Input s ab t c d Output true Explanation Both s and t become Example Input s a c t b Output false Explanation s becomes c while t becomes b Constraints s length t length s and t only contain lowercase letters and characters Follow up Can you solve it in O n time and O space
maximum width of binary tree Given the root of a binary tree return the maximum width of the given tree The maximum width of a tree is the maximum width among all levels The width of one level is defined as the length between the end nodes the leftmost and rightmost non null nodes where the null nodes between the end nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation It is guaranteed that the answer will in the range of a bit signed integer Example Input root null Output Explanation The maximum width exists in the third level with length null Example Input root null null null Output Explanation The maximum width exists in the fourth level with length null null null null null Example Input root Output Explanation The maximum width exists in the second level with length Constraints The number of nodes in the tree is in the range Node val
number of lines to write string You are given a string s of lowercase English letters and an array widths denoting how many pixels wide each lowercase English letter is Specifically widths is the width of a widths is the width of b and so on You are trying to write s across several lines where each line is no longer than pixels Starting at the beginning of s write as many letters on the first line such that the total width does not exceed pixels Then from where you stopped in s continue writing as many letters as you can on the second line Continue this process until you have written all of s Return an array result of length where result is the total number of lines result is the width of the last line in pixels Example Input widths s abcdefghijklmnopqrstuvwxyz Output Explanation You can write s as follows abcdefghij pixels wide klmnopqrst pixels wide uvwxyz pixels wide There are a total of lines and the last line is pixels wide Example Input widths s bbbcccdddaaa Output Explanation You can write s as follows bbbcccdddaa pixels wide a pixels wide There are a total of lines and the last line is pixels wide Constraints widths length widths i s length s contains only lowercase English letters
design an atm machine There is an ATM machine that stores banknotes of denominations and dollars Initially the ATM is empty The user can use the machine to deposit or withdraw any amount of money When withdrawing the machine prioritizes using banknotes of larger values For example if you want to withdraw and there are banknotes banknote and banknote then the machine will use the and banknotes However if you try to withdraw and there are banknotes and banknote then the withdraw request will be rejected because the machine will first try to use the banknote and then be unable to use banknotes to complete the remaining Note that the machine is not allowed to use the banknotes instead of the banknote Implement the ATM class ATM Initializes the ATM object void deposit int banknotesCount Deposits new banknotes in the order and int withdraw int amount Returns an array of length of the number of banknotes that will be handed to the user in the order and and update the number of banknotes in the ATM after withdrawing Returns if it is not possible do not withdraw any banknotes in this case Example Input ATM deposit withdraw deposit withdraw withdraw Output null null null Explanation ATM atm new ATM atm deposit Deposits banknote banknotes and banknote atm withdraw Returns The machine uses banknote and banknote The banknotes left over in the machine are atm deposit Deposits and banknote The banknotes in the machine are now atm withdraw Returns The machine will try to use a banknote and then be unable to complete the remaining so the withdraw request will be rejected Since the request is rejected the number of banknotes in the machine is not modified atm withdraw Returns The machine uses banknote and banknote Constraints banknotesCount length banknotesCount i amount At most calls in total will be made to withdraw and deposit At least one call will be made to each function withdraw and deposit
vowel spellchecker Given a wordlist we want to implement a spellchecker that converts a query word into a correct word For a given query word the spell checker handles two categories of spelling mistakes Capitalization If the query matches a word in the wordlist case insensitive then the query word is returned with the same case as the case in the wordlist Example wordlist yellow query YellOw correct yellow Example wordlist Yellow query yellow correct Yellow Example wordlist yellow query yellow correct yellow Vowel Errors If after replacing the vowels a e i o u of the query word with any vowel individually it matches a word in the wordlist case insensitive then the query word is returned with the same case as the match in the wordlist Example wordlist YellOw query yollow correct YellOw Example wordlist YellOw query yeellow correct no match Example wordlist YellOw query yllw correct no match In addition the spell checker operates under the following precedence rules When the query exactly matches a word in the wordlist case sensitive you should return the same word back When the query matches a word up to capitlization you should return the first such match in the wordlist When the query matches a word up to vowel errors you should return the first such match in the wordlist If the query has no matches in the wordlist you should return the empty string Given some queries return a list of words answer where answer i is the correct word for query queries i Example Input wordlist KiTe kite hare Hare queries kite Kite KiTe Hare HARE Hear hear keti keet keto Output kite KiTe KiTe Hare hare KiTe KiTe Example Input wordlist yellow queries YellOw Output yellow Constraints wordlist length queries length wordlist i length queries i length wordlist i and queries i consist only of only English letters
the employee that worked on the longest task There are n employees each with a unique id from to n You are given a integer array logs where logs i idi leaveTimei where idi is the id of the employee that worked on the ith task and leaveTimei is the time at which the employee finished the ith task All the values leaveTimei are unique Note that the ith task starts the moment right after the i th task ends and the task starts at time Return the id of the employee that worked the task with the longest time If there is a tie between two or more employees return the smallest id among them Example Input n logs Output Explanation Task started at and ended at with units of times Task started at and ended at with units of times Task started at and ended at with units of times Task started at and ended at with units of times The task with the longest time is task and the employee with id is the one that worked on it so we return Example Input n logs Output Explanation Task started at and ended at with unit of times Task started at and ended at with units of times Task started at and ended at with units of times Task started at and ended at with units of times The tasks with the longest time is task The employee that worked on it is so we return Example Input n logs Output Explanation Task started at and ended at with units of times Task started at and ended at with units of times The tasks with the longest time are tasks and The employees that worked on them are and so we return the smallest id Constraints n logs length logs i length idi n leaveTimei idi idi leaveTimei are sorted in a strictly increasing order
construct target array with multiple sums You are given an array target of n integers From a starting array arr consisting of n s you may perform the following procedure let x be the sum of all elements currently in your array choose index i such that i n and set the value of arr at index i to x You may repeat this procedure as many times as needed Return true if it is possible to construct the target array from arr otherwise return false Example Input target Output true Explanation Start with arr sum choose index sum choose index sum choose index Done Example Input target Output false Explanation Impossible to create target array from Example Input target Output true Constraints n target length n target i
intersection of multiple arrays Given a integer array nums where nums i is a non empty array of distinct positive integers return the list of integers that are present in each array of nums sorted in ascending order Example Input nums Output Explanation The only integers present in each of nums nums and nums are and so we return Example Input nums Output Explanation There does not exist any integer present both in nums and nums so we return an empty list Constraints nums length sum nums i length nums i j All the values of nums i are unique
largest combination with bitwise and greater than zero The bitwise AND of an array nums is the bitwise AND of all integers in nums For example for nums the bitwise AND is equal to Also for nums the bitwise AND is You are given an array of positive integers candidates Evaluate the bitwise AND of every combination of numbers of candidates Each number in candidates may only be used once in each combination Return the size of the largest combination of candidates with a bitwise AND greater than Example Input candidates Output Explanation The combination has a bitwise AND of The size of the combination is It can be shown that no combination with a size greater than has a bitwise AND greater than Note that more than one combination may have the largest size For example the combination has a bitwise AND of Example Input candidates Output Explanation The largest combination has a bitwise AND of The size of the combination is so we return Constraints candidates length candidates i
minimum number of flips to make the binary string alternating You are given a binary string s You are allowed to perform two types of operations on the string in any sequence Type Remove the character at the start of the string s and append it to the end of the string Type Pick any character in s and flip its value i e if its value is it becomes and vice versa Return the minimum number of type operations you need to perform such that s becomes alternating The string is called alternating if no two adjacent characters are equal For example the strings and are alternating while the string is not Example Input s Output Explanation Use the first operation two times to make s Then use the second operation on the third and sixth elements to make s Example Input s Output Explanation The string is already alternating Example Input s Output Explanation Use the second operation on the second element to make s Constraints s length s i is either or
next greater numerically balanced number An integer x is numerically balanced if for every digit d in the number x there are exactly d occurrences of that digit in x Given an integer n return the smallest numerically balanced number strictly greater than n Example Input n Output Explanation is numerically balanced since The digit occurs times It is also the smallest numerically balanced number strictly greater than Example Input n Output Explanation is numerically balanced since The digit occurs time The digit occurs times It is also the smallest numerically balanced number strictly greater than Note that cannot be the answer because appeared more than times Example Input n Output Explanation is numerically balanced since The digit occurs time The digit occurs times It is also the smallest numerically balanced number strictly greater than Constraints n
restore ip addresses A valid IP address consists of exactly four integers separated by single dots Each integer is between and inclusive and cannot have leading zeros For example and are valid IP addresses but and are invalid IP addresses Given a string s containing only digits return all possible valid IP addresses that can be formed by inserting dots into s You are not allowed to reorder or remove any digits in s You may return the valid IP addresses in any order Example Input s Output Example Input s Output Example Input s Output Constraints s length s consists of digits only
minimum sideway jumps There is a lane road of length n that consists of n points labeled from to n A frog starts at point in the second lane and wants to jump to point n However there could be obstacles along the way You are given an array obstacles of length n where each obstacles i ranging from to describes an obstacle on the lane obstacles i at point i If obstacles i there are no obstacles at point i There will be at most one obstacle in the lanes at each point For example if obstacles then there is an obstacle on lane at point The frog can only travel from point i to point i on the same lane if there is not an obstacle on the lane at point i To avoid obstacles the frog can also perform a side jump to jump to another lane even if they are not adjacent at the same point if there is no obstacle on the new lane For example the frog can jump from lane at point to lane at point Return the minimum number of side jumps the frog needs to reach any lane at point n starting from lane at point Note There will be no obstacles on points and n Example Input obstacles Output Explanation The optimal solution is shown by the arrows above There are side jumps red arrows Note that the frog can jump over obstacles only when making side jumps as shown at point Example Input obstacles Output Explanation There are no obstacles on lane No side jumps are required Example Input obstacles Output Explanation The optimal solution is shown by the arrows above There are side jumps Constraints obstacles length n n obstacles i obstacles obstacles n
determine whether matrix can be obtained by rotation Given two n x n binary matrices mat and target return true if it is possible to make mat equal to target by rotating mat in degree increments or false otherwise Example Input mat target Output true Explanation We can rotate mat degrees clockwise to make mat equal target Example Input mat target Output false Explanation It is impossible to make mat equal to target by rotating mat Example Input mat target Output true Explanation We can rotate mat degrees clockwise two times to make mat equal target Constraints n mat length target length n mat i length target i length n mat i j and target i j are either or
generate parentheses Given n pairs of parentheses write a function to generate all combinations of well formed parentheses Example Input n Output Example Input n Output Constraints n
minimum value to get positive step by step sum Given an array of integers nums you start with an initial positive value startValue In each iteration you calculate the step by step sum of startValue plus elements in nums from left to right Return the minimum positive value of startValue such that the step by step sum is never less than Example Input nums Output Explanation If you choose startValue in the third iteration your step by step sum is less than step by step sum startValue startValue nums Example Input nums Output Explanation Minimum start value should be positive Example Input nums Output Constraints nums length nums i
array of doubled pairs Given an integer array of even length arr return true if it is possible to reorder arr such that arr i arr i for every i len arr or false otherwise Example Input arr Output false Example Input arr Output false Example Input arr Output true Explanation We can take two groups and to form or Constraints arr length arr length is even arr i
sum of beauty of all substrings The beauty of a string is the difference in frequencies between the most frequent and least frequent characters For example the beauty of abaacc is Given a string s return the sum of beauty of all of its substrings Example Input s aabcb Output Explanation The substrings with non zero beauty are aab aabc aabcb abcb bcb each with beauty equal to Example Input s aabcbaa Output Constraints s length s consists of only lowercase English letters
perfect number A perfect number is a positive integer that is equal to the sum of its positive divisors excluding the number itself A divisor of an integer x is an integer that can divide x evenly Given an integer n return true if n is a perfect number otherwise return false Example Input num Output true Explanation and are all divisors of Example Input num Output false Constraints num
count of range sum Given an integer array nums and two integers lower and upper return the number of range sums that lie in lower upper inclusive Range sum S i j is defined as the sum of the elements in nums between indices i and j inclusive where i j Example Input nums lower upper Output Explanation The three ranges are and and their respective sums are Example Input nums lower upper Output Constraints nums length nums i lower upper The answer is guaranteed to fit in a bit integer
find nearest point that has the same x or y coordinate You are given two integers x and y which represent your current location on a Cartesian grid x y You are also given an array points where each points i ai bi represents that a point exists at ai bi A point is valid if it shares the same x coordinate or the same y coordinate as your location Return the index indexed of the valid point with the smallest Manhattan distance from your current location If there are multiple return the valid point with the smallest index If there are no valid points return The Manhattan distance between two points and is abs abs Example Input x y points Output Explanation Of all the points only and are valid Of the valid points and have the smallest Manhattan distance from your current location with a distance of has the smallest index so return Example Input x y points Output Explanation The answer is allowed to be on the same location as your current location Example Input x y points Output Explanation There are no valid points Constraints points length points i length x y ai bi
can place flowers You have a long flowerbed in which some of the plots are planted and some are not However flowers cannot be planted in adjacent plots Given an integer array flowerbed containing s and s where means empty and means not empty and an integer n return true if n new flowers can be planted in the flowerbed without violating the no adjacent flowers rule and false otherwise Example Input flowerbed n Output true Example Input flowerbed n Output false Constraints flowerbed length flowerbed i is or There are no two adjacent flowers in flowerbed n flowerbed length
reverse string ii Given a string s and an integer k reverse the first k characters for every characters counting from the start of the string If there are fewer than k characters left reverse all of them If there are less than but greater than or equal to k characters then reverse the first k characters and leave the other as original Example Input s abcdefg k Output bacdfeg Example Input s abcd k Output bacd Constraints s length s consists of only lowercase English letters k
difference between element sum and digit sum of an array You are given a positive integer array nums The element sum is the sum of all the elements in nums The digit sum is the sum of all the digits not necessarily distinct that appear in nums Return the absolute difference between the element sum and digit sum of nums Note that the absolute difference between two integers x and y is defined as x y Example Input nums Output Explanation The element sum of nums is The digit sum of nums is The absolute difference between the element sum and digit sum is Example Input nums Output Explanation The element sum of nums is The digit sum of nums is The absolute difference between the element sum and digit sum is Constraints nums length nums i
most common word Given a string paragraph and a string array of the banned words banned return the most frequent word that is not banned It is guaranteed there is at least one word that is not banned and that the answer is unique The words in paragraph are case insensitive and the answer should be returned in lowercase Example Input paragraph Bob hit a ball the hit BALL flew far after it was hit banned hit Output ball Explanation hit occurs times but it is a banned word ball occurs twice and no other word does so it is the most frequent non banned word in the paragraph Note that words in the paragraph are not case sensitive that punctuation is ignored even if adjacent to words such as ball and that hit isn t the answer even though it occurs more because it is banned Example Input paragraph a banned Output a Constraints paragraph length paragraph consists of English letters space or one of the symbols banned length banned i length banned i consists of only lowercase English letters
number of ways to reconstruct a tree You are given an array pairs where pairs i xi yi and There are no duplicates xi yi Let ways be the number of rooted trees that satisfy the following conditions The tree consists of nodes whose values appeared in pairs A pair xi yi exists in pairs if and only if xi is an ancestor of yi or yi is an ancestor of xi Note the tree does not have to be a binary tree Two ways are considered to be different if there is at least one node that has different parents in both ways Return if ways if ways if ways A rooted tree is a tree that has a single root node and all edges are oriented to be outgoing from the root An ancestor of a node is any node on the path from the root to that node excluding the node itself The root has no ancestors Example Input pairs Output Explanation There is exactly one valid rooted tree which is shown in the above figure Example Input pairs Output Explanation There are multiple valid rooted trees Three of them are shown in the above figures Example Input pairs Output Explanation There are no valid rooted trees Constraints pairs length xi yi The elements in pairs are unique
perfect rectangle Given an array rectangles where rectangles i xi yi ai bi represents an axis aligned rectangle The bottom left point of the rectangle is xi yi and the top right point of it is ai bi Return true if all the rectangles together form an exact cover of a rectangular region Example Input rectangles Output true Explanation All rectangles together form an exact cover of a rectangular region Example Input rectangles Output false Explanation Because there is a gap between the two rectangular regions Example Input rectangles Output false Explanation Because two of the rectangles overlap with each other Constraints rectangles length rectangles i length xi yi ai bi
cycle length queries in a tree You are given an integer n There is a complete binary tree with nodes The root of that tree is the node with the value and every node with a value val in the range has two children where The left node has the value val and The right node has the value val You are also given a integer array queries of length m where queries i ai bi For each query solve the following problem Add an edge between the nodes with values ai and bi Find the length of the cycle in the graph Remove the added edge between nodes with values ai and bi Note that A cycle is a path that starts and ends at the same node and each edge in the path is visited only once The length of a cycle is the number of edges visited in the cycle There could be multiple edges between two nodes in the tree after adding the edge of the query Return an array answer of length m where answer i is the answer to the ith query Example Input n queries Output Explanation The diagrams above show the tree of nodes Nodes colored in red describe the nodes in the cycle after adding the edge After adding the edge between nodes and the graph contains a cycle of nodes Thus answer to the first query is We delete the added edge and process the next query After adding the edge between nodes and the graph contains a cycle of nodes Thus answer to the second query is We delete the added edge and process the next query After adding the edge between nodes and the graph contains a cycle of nodes Thus answer to the third query is We delete the added edge Example Input n queries Output Explanation The diagram above shows the tree of nodes Nodes colored in red describe the nodes in the cycle after adding the edge After adding the edge between nodes and the graph contains a cycle of nodes Thus answer for the first query is We delete the added edge Constraints n m queries length m queries i length ai bi ai bi
power of heroes You are given a indexed integer array nums representing the strength of some heroes The power of a group of heroes is defined as follows Let ik be the indices of the heroes in a group Then the power of this group is max nums nums nums ik min nums nums nums ik Return the sum of the power of all non empty groups of heroes possible Since the sum could be very large return it modulo Example Input nums Output Explanation group has power group has power group has power group has power group has power group has power group has power The sum of powers of all groups is Example Input nums Output Explanation A total of groups are possible and the power of each group will be Therefore the sum of the powers of all groups is Constraints nums length nums i
smallest number in infinite set You have a set which contains all positive integers Implement the SmallestInfiniteSet class SmallestInfiniteSet Initializes the SmallestInfiniteSet object to contain all positive integers int popSmallest Removes and returns the smallest integer contained in the infinite set void addBack int num Adds a positive integer num back into the infinite set if it is not already in the infinite set Example Input SmallestInfiniteSet addBack popSmallest popSmallest popSmallest addBack popSmallest popSmallest popSmallest Output null null null Explanation SmallestInfiniteSet smallestInfiniteSet new SmallestInfiniteSet smallestInfiniteSet addBack is already in the set so no change is made smallestInfiniteSet popSmallest return since is the smallest number and remove it from the set smallestInfiniteSet popSmallest return and remove it from the set smallestInfiniteSet popSmallest return and remove it from the set smallestInfiniteSet addBack is added back to the set smallestInfiniteSet popSmallest return since was added back to the set and is the smallest number and remove it from the set smallestInfiniteSet popSmallest return and remove it from the set smallestInfiniteSet popSmallest return and remove it from the set Constraints num At most calls will be made in total to popSmallest and addBack
maximum number of darts inside of a circular dartboard Alice is throwing n darts on a very large wall You are given an array darts where darts i xi yi is the position of the ith dart that Alice threw on the wall Bob knows the positions of the n darts on the wall He wants to place a dartboard of radius r on the wall so that the maximum number of darts that Alice throws lies on the dartboard Given the integer r return the maximum number of darts that can lie on the dartboard Example Input darts r Output Explanation Circle dartboard with center in and radius contain all points Example Input darts r Output Explanation Circle dartboard with center in and radius contain all points except the point Constraints darts length darts i length xi yi All the darts are unique r
masking personal information You are given a personal information string s representing either an email address or a phone number Return the masked personal information using the below rules Email address An email address is A name consisting of uppercase and lowercase English letters followed by The symbol followed by The domain consisting of uppercase and lowercase English letters with a dot somewhere in the middle not the first or last character To mask an email The uppercase letters in the name and domain must be converted to lowercase letters The middle letters of the name i e all but the first and last letters must be replaced by asterisks Phone number A phone number is formatted as follows The phone number contains digits The last digits make up the local number The remaining digits in the beginning make up the country code Separation characters from the set separate the above digits in some way To mask a phone number Remove all separation characters The masked phone number should have the form XXXX if the country code has digits XXXX if the country code has digit XXXX if the country code has digits XXXX if the country code has digits XXXX is the last digits of the local number Example Input s LeetCode LeetCode com Output l e leetcode com Explanation s is an email address The name and domain are converted to lowercase and the middle of the name is replaced by asterisks Example Input s AB qq com Output a b qq com Explanation s is an email address The name and domain are converted to lowercase and the middle of the name is replaced by asterisks Note that even though ab is characters it still must have asterisks in the middle Example Input s Output Explanation s is a phone number There are digits so the local number is digits and the country code is digits Thus the resulting masked number is Constraints s is either a valid email or a phone number If s is an email s length s consists of uppercase and lowercase English letters and exactly one symbol and symbol If s is a phone number s length s consists of digits spaces and the symbols and
count nodes equal to average of subtree Given the root of a binary tree return the number of nodes where the value of the node is equal to the average of the values in its subtree Note The average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer A subtree of root is a tree consisting of root and all of its descendants Example Input root null Output Explanation For the node with value The average of its subtree is For the node with value The average of its subtree is For the node with value The average of its subtree is For the node with value The average of its subtree is For the node with value The average of its subtree is Example Input root Output Explanation For the node with value The average of its subtree is Constraints The number of nodes in the tree is in the range Node val
arithmetic slices An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same For example and are arithmetic sequences Given an integer array nums return the number of arithmetic subarrays of nums A subarray is a contiguous subsequence of the array Example Input nums Output Explanation We have arithmetic slices in nums and itself Example Input nums Output Constraints nums length nums i
reconstruct original digits from english Given a string s containing an out of order English representation of digits return the digits in ascending order Example Input s owoztneoer Output Example Input s fviefuro Output Constraints s length s i is one of the characters e g f i h o n s r u t w v x z s is guaranteed to be valid
check if move is legal You are given a indexed x grid board where board r c represents the cell r c on a game board On the board free cells are represented by white cells are represented by W and black cells are represented by B Each move in this game consists of choosing a free cell and changing it to the color you are playing as either white or black However a move is only legal if after changing it the cell becomes the endpoint of a good line horizontal vertical or diagonal A good line is a line of three or more cells including the endpoints where the endpoints of the line are one color and the remaining cells in the middle are the opposite color no cells in the line are free You can find examples for good lines in the figure below Given two integers rMove and cMove and a character color representing the color you are playing as white or black return true if changing cell rMove cMove to color color is a legal move or false if it is not legal Example Input board B W W W W B B W W W B B B W rMove cMove color B Output true Explanation W and B are represented by the colors blue white and black respectively and cell rMove cMove is marked with an X The two good lines with the chosen cell as an endpoint are annotated above with the red rectangles Example Input board B W W W B B W W B rMove cMove color W Output false Explanation While there are good lines with the chosen cell as a middle cell there are no good lines with the chosen cell as an endpoint Constraints board length board r length rMove cMove board rMove cMove color is either B or W
check if a string can break another string Given two strings and with the same size check if some permutation of string can break some permutation of string or vice versa In other words can break or vice versa A string x can break string y both of size n if x i y i in alphabetical order for all i between and n Example Input abc xya Output true Explanation ayx is a permutation of xya which can break to string abc which is a permutation of abc Example Input abe acd Output false Explanation All permutations for abe are abe aeb bae bea eab and eba and all permutation for acd are acd adc cad cda dac and dca However there is not any permutation from which can break some permutation from and vice versa Example Input leetcodee interview Output true Constraints length n length n n All strings consist of lowercase English letters
shifting letters You are given a string s of lowercase English letters and an integer array shifts of the same length Call the shift of a letter the next letter in the alphabet wrapping around so that z becomes a For example shift a b shift t u and shift z a Now for each shifts i x we want to shift the first i letters of s x times Return the final string after all such shifts to s are applied Example Input s abc shifts Output rpl Explanation We start with abc After shifting the first letters of s by we have dbc After shifting the first letters of s by we have igc After shifting the first letters of s by we have rpl the answer Example Input s aaa shifts Output gfd Constraints s length s consists of lowercase English letters shifts length s length shifts i
longest uncommon subsequence i Given two strings a and b return the length of the longest uncommon subsequence between a and b If the longest uncommon subsequence does not exist return An uncommon subsequence between two strings is a string that is a subsequence of one but not the other A subsequence of a string s is a string that can be obtained after deleting any number of characters from s For example abc is a subsequence of aebdc because you can delete the underlined characters in aebdc to get abc Other subsequences of aebdc include aebdc aeb and empty string Example Input a aba b cdc Output Explanation One longest uncommon subsequence is aba because aba is a subsequence of aba but not cdc Note that cdc is also a longest uncommon subsequence Example Input a aaa b bbb Output Explanation The longest uncommon subsequences are aaa and bbb Example Input a aaa b aaa Output Explanation Every subsequence of string a is also a subsequence of string b Similarly every subsequence of string b is also a subsequence of string a Constraints a length b length a and b consist of lower case English letters
maximum nesting depth of the parentheses A string is a valid parentheses string denoted VPS if it meets one of the following It is an empty string or a single character not equal to or It can be written as AB A concatenated with B where A and B are VPS s or It can be written as A where A is a VPS We can similarly define the nesting depth depth S of any VPS S as follows depth depth C where C is a string with a single character not equal to or depth A B max depth A depth B where A and B are VPS s depth A depth A where A is a VPS For example and are VPS s with nesting depths and and and are not VPS s Given a VPS represented as string s return the nesting depth of s Example Input s Output Explanation Digit is inside of nested parentheses in the string Example Input s Output Constraints s length s consists of digits and characters and It is guaranteed that parentheses expression s is a VPS
decrease elements to make array zigzag Given an array nums of integers a move consists of choosing any element and decreasing it by An array A is a zigzag array if either Every even indexed element is greater than adjacent elements ie A A A A A OR every odd indexed element is greater than adjacent elements ie A A A A A Return the minimum number of moves to transform the given array nums into a zigzag array Example Input nums Output Explanation We can decrease to or to Example Input nums Output Constraints nums length nums i
contain virus A virus is spreading rapidly and your task is to quarantine the infected area by installing walls The world is modeled as an m x n binary grid isInfected where isInfected i j represents uninfected cells and isInfected i j represents cells contaminated with the virus A wall and only one wall can be installed between any two directionally adjacent cells on the shared boundary Every night the virus spreads to all neighboring cells in all four directions unless blocked by a wall Resources are limited Each day you can install walls around only one region i e the affected area continuous block of infected cells that threatens the most uninfected cells the following night There will never be a tie Return the number of walls used to quarantine all the infected regions If the world will become fully infected return the number of walls used Example Input isInfected Output Explanation There are contaminated regions On the first day add walls to quarantine the viral region on the left The board after the virus spreads is On the second day add walls to quarantine the viral region on the right The virus is fully contained Example Input isInfected Output Explanation Even though there is only one cell saved there are walls built Notice that walls are only built on the shared boundary of two different cells Example Input isInfected Output Explanation The region on the left only builds two new walls Constraints m isInfected length n isInfected i length m n isInfected i j is either or There is always a contiguous viral region throughout the described process that will infect strictly more uncontaminated squares in the next round
split array into consecutive subsequences You are given an integer array nums that is sorted in non decreasing order Determine if it is possible to split nums into one or more subsequences such that both of the following conditions are true Each subsequence is a consecutive increasing sequence i e each integer is exactly one more than the previous integer All subsequences have a length of or more Return true if you can split nums according to the above conditions or false otherwise A subsequence of an array is a new array that is formed from the original array by deleting some can be none of the elements without disturbing the relative positions of the remaining elements i e is a subsequence of while is not Example Input nums Output true Explanation nums can be split into the following subsequences Example Input nums Output true Explanation nums can be split into the following subsequences Example Input nums Output false Explanation It is impossible to split nums into consecutive increasing subsequences of length or more Constraints nums length nums i nums is sorted in non decreasing order
remove duplicates from sorted list ii Given the head of a sorted linked list delete all nodes that have duplicate numbers leaving only distinct numbers from the original list Return the linked list sorted as well Example Input head Output Example Input head Output Constraints The number of nodes in the list is in the range Node val The list is guaranteed to be sorted in ascending order
increasing triplet subsequence Given an integer array nums return true if there exists a triple of indices i j k such that i j k and nums i nums j nums k If no such indices exists return false Example Input nums Output true Explanation Any triplet where i j k is valid Example Input nums Output false Explanation No triplet exists Example Input nums Output true Explanation The triplet is valid because nums nums nums Constraints nums length nums i Follow up Could you implement a solution that runs in O n time complexity and O space complexity
short encoding of words A valid encoding of an array of words is any reference string s and array of indices indices such that words length indices length The reference string s ends with the character For each index indices i the substring of s starting from indices i and up to but not including the next character is equal to words i Given an array of words return the length of the shortest reference string s possible of any valid encoding of words Example Input words time me bell Output Explanation A valid encoding would be s time bell and indices words time the substring of s starting from indices to the next is underlined in time bell words me the substring of s starting from indices to the next is underlined in time bell words bell the substring of s starting from indices to the next is underlined in time bell Example Input words t Output Explanation A valid encoding would be s t and indices Constraints words length words i length words i consists of only lowercase letters
minimize hamming distance after swap operations You are given two integer arrays source and target both of length n You are also given an array allowedSwaps where each allowedSwaps i ai bi indicates that you are allowed to swap the elements at index ai and index bi indexed of array source Note that you can swap elements at a specific pair of indices multiple times and in any order The Hamming distance of two arrays of the same length source and target is the number of positions where the elements are different Formally it is the number of indices i for i n where source i target i indexed Return the minimum Hamming distance of source and target after performing any amount of swap operations on array source Example Input source target allowedSwaps Output Explanation source can be transformed the following way Swap indices and source Swap indices and source The Hamming distance of source and target is as they differ in position index Example Input source target allowedSwaps Output Explanation There are no allowed swaps The Hamming distance of source and target is as they differ in positions index and index Example Input source target allowedSwaps Output Constraints n source length target length n source i target i allowedSwaps length allowedSwaps i length ai bi n ai bi
longest mountain in array You may recall that an array arr is a mountain array if and only if arr length There exists some index i indexed with i arr length such that arr arr arr i arr i arr i arr i arr arr length Given an integer array arr return the length of the longest subarray which is a mountain Return if there is no mountain subarray Example Input arr Output Explanation The largest mountain is which has length Example Input arr Output Explanation There is no mountain Constraints arr length arr i Follow up Can you solve it using only one pass Can you solve it in O space
sort integers by the number of 1 bits You are given an integer array arr Sort the integers in the array in ascending order by the number of s in their binary representation and in case of two or more integers have the same number of s you have to sort them in ascending order Return the array after sorting it Example Input arr Output Explantion is the only integer with bits all have bit have bits has bits The sorted array by bits is Example Input arr Output Explantion All integers have bit in the binary representation you should just sort them in ascending order Constraints arr length arr i
minimum number of operations to move all balls to each box You have n boxes You are given a binary string boxes of length n where boxes i is if the ith box is empty and if it contains one ball In one operation you can move one ball from a box to an adjacent box Box i is adjacent to box j if abs i j Note that after doing so there may be more than one ball in some boxes Return an array answer of size n where answer i is the minimum number of operations needed to move all the balls to the ith box Each answer i is calculated considering the initial state of the boxes Example Input boxes Output Explanation The answer for each box is as follows First box you will have to move one ball from the second box to the first box in one operation Second box you will have to move one ball from the first box to the second box in one operation Third box you will have to move one ball from the first box to the third box in two operations and move one ball from the second box to the third box in one operation Example Input boxes Output Constraints n boxes length n boxes i is either or
task scheduler ii You are given a indexed array of positive integers tasks representing tasks that need to be completed in order where tasks i represents the type of the ith task You are also given a positive integer space which represents the minimum number of days that must pass after the completion of a task before another task of the same type can be performed Each day until all tasks have been completed you must either Complete the next task from tasks or Take a break Return the minimum number of days needed to complete all tasks Example Input tasks space Output Explanation One way to complete all tasks in days is as follows Day Complete the task Day Complete the task Day Take a break Day Take a break Day Complete the task Day Complete the task Day Take a break Day Complete the task Day Complete the task It can be shown that the tasks cannot be completed in less than days Example Input tasks space Output Explanation One way to complete all tasks in days is as follows Day Complete the task Day Complete the task Day Take a break Day Take a break Day Complete the task Day Complete the task It can be shown that the tasks cannot be completed in less than days Constraints tasks length tasks i space tasks length
difference between ones and zeros in row and column You are given a indexed m x n binary matrix grid A indexed m x n difference matrix diff is created with the following procedure Let the number of ones in the ith row be onesRowi Let the number of ones in the jth column be onesColj Let the number of zeros in the ith row be zerosRowi Let the number of zeros in the jth column be zerosColj diff i j onesRowi onesColj zerosRowi zerosColj Return the difference matrix diff Example Input grid Output Explanation diff diff diff diff diff diff diff diff diff Example Input grid Output Explanation diff diff diff diff diff diff Constraints m grid length n grid i length m n m n grid i j is either or
check if all 1's are at least length k places away Given an binary array nums and an integer k return true if all s are at least k places away from each other otherwise return false Example Input nums k Output true Explanation Each of the are at least places away from each other Example Input nums k Output false Explanation The second and third are only one apart from each other Constraints nums length k nums length nums i is or
maximum sum bst in binary tree Given a binary tree root return the maximum sum of all keys of any sub tree which is also a Binary Search Tree BST Assume a BST is defined as follows The left subtree of a node contains only nodes with keys less than the node s key The right subtree of a node contains only nodes with keys greater than the node s key Both the left and right subtrees must also be binary search trees Example Input root null null null null null null Output Explanation Maximum sum in a valid Binary search tree is obtained in root node with key equal to Example Input root null Output Explanation Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to Example Input root Output Explanation All values are negatives Return an empty BST Constraints The number of nodes in the tree is in the range Node val
insertion sort list Given the head of a singly linked list sort the list using insertion sort and return the sorted list s head The steps of the insertion sort algorithm Insertion sort iterates consuming one input element each repetition and growing a sorted output list At each iteration insertion sort removes one element from the input data finds the location it belongs within the sorted list and inserts it there It repeats until no input elements remain The following is a graphical example of the insertion sort algorithm The partially sorted list black initially contains only the first element in the list One element red is removed from the input data and inserted in place into the sorted list with each iteration Example Input head Output Example Input head Output Constraints The number of nodes in the list is in the range Node val
monotone increasing digits An integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x y Given an integer n return the largest number that is less than or equal to n with monotone increasing digits Example Input n Output Example Input n Output Example Input n Output Constraints n
best team with no conflicts You are the manager of a basketball team For the upcoming tournament you want to choose the team with the highest overall score The score of the team is the sum of scores of all the players in the team However the basketball team is not allowed to have conflicts A conflict exists if a younger player has a strictly higher score than an older player A conflict does not occur between players of the same age Given two lists scores and ages where each scores i and ages i represents the score and age of the ith player respectively return the highest overall score of all possible basketball teams Example Input scores ages Output Explanation You can choose all the players Example Input scores ages Output Explanation It is best to choose the last players Notice that you are allowed to choose multiple people of the same age Example Input scores ages Output Explanation It is best to choose the first players Constraints scores length ages length scores length ages length scores i ages i
count number of bad pairs You are given a indexed integer array nums A pair of indices i j is a bad pair if i j and j i nums j nums i Return the total number of bad pairs in nums Example Input nums Output Explanation The pair is a bad pair since The pair is a bad pair since The pair is a bad pair since The pair is a bad pair since The pair is a bad pair since There are a total of bad pairs so we return Example Input nums Output Explanation There are no bad pairs Constraints nums length nums i
utf-8 validation Given an integer array data representing the data return whether it is a valid UTF encoding i e it translates to a sequence of valid UTF encoded characters A character in can be from to bytes long subjected to the following rules For a byte character the first bit is a followed by its Unicode code For an n bytes character the first n bits are all one s the n bit is followed by n bytes with the most significant bits being This is how the UTF encoding would work Number of Bytes UTF Octet Sequence binary x denotes a bit in the binary form of a byte that may be either or Note The input is an array of integers Only the least significant bits of each integer is used to store the data This means each integer represents only byte of data Example Input data Output true Explanation data represents the octet sequence It is a valid utf encoding for a bytes character followed by a byte character Example Input data Output false Explanation data represented the octet sequence The first bits are all one s and the bit is means it is a bytes character The next byte is a continuation byte which starts with and that s correct But the second continuation byte does not start with so it is invalid Constraints data length data i
kth missing positive number Given an array arr of positive integers sorted in a strictly increasing order and an integer k Return the kth positive integer that is missing from this array Example Input arr k Output Explanation The missing positive integers are The missing positive integer is Example Input arr k Output Explanation The missing positive integers are The missing positive integer is Constraints arr length arr i k arr i arr j for i j arr length Follow up Could you solve this problem in less than O n complexity
find the longest valid obstacle course at each position You want to build some obstacle courses You are given a indexed integer array obstacles of length n where obstacles i describes the height of the ith obstacle For every index i between and n inclusive find the length of the longest obstacle course in obstacles such that You choose any number of obstacles between and i inclusive You must include the ith obstacle in the course You must put the chosen obstacles in the same order as they appear in obstacles Every obstacle except the first is taller than or the same height as the obstacle immediately before it Return an array ans of length n where ans i is the length of the longest obstacle course for index i as described above Example Input obstacles Output Explanation The longest valid obstacle course at each position is i has length i has length i has length i has length Example Input obstacles Output Explanation The longest valid obstacle course at each position is i has length i has length i has length Example Input obstacles Output Explanation The longest valid obstacle course at each position is i has length i has length i has length is also valid i has length is also valid i has length is also valid i has length Constraints n obstacles length n obstacles i
1-bit and 2-bit characters We have two special characters The first character can be represented by one bit The second character can be represented by two bits or Given a binary array bits that ends with return true if the last character must be a one bit character Example Input bits Output true Explanation The only way to decode it is two bit character and one bit character So the last character is one bit character Example Input bits Output false Explanation The only way to decode it is two bit character and two bit character So the last character is not one bit character Constraints bits length bits i is either or
transpose file Given a text file file txt transpose its content You may assume that each row has the same number of columns and each field is separated by the character Example If file txt has the following content name age alice ryan Output the following name alice ryan age
minimum time to make rope colorful Alice has n balloons arranged on a rope You are given a indexed string colors where colors i is the color of the ith balloon Alice wants the rope to be colorful She does not want two consecutive balloons to be of the same color so she asks Bob for help Bob can remove some balloons from the rope to make it colorful You are given a indexed integer array neededTime where neededTime i is the time in seconds that Bob needs to remove the ith balloon from the rope Return the minimum time Bob needs to make the rope colorful Example Input colors abaac neededTime Output Explanation In the above image a is blue b is red and c is green Bob can remove the blue balloon at index This takes seconds There are no longer two consecutive balloons of the same color Total time Example Input colors abc neededTime Output Explanation The rope is already colorful Bob does not need to remove any balloons from the rope Example Input colors aabaa neededTime Output Explanation Bob will remove the ballons at indices and Each ballon takes second to remove There are no longer two consecutive balloons of the same color Total time Constraints n colors length neededTime length n neededTime i colors contains only lowercase English letters
find center of star graph There is an undirected star graph consisting of n nodes labeled from to n A star graph is a graph where there is one center node and exactly n edges that connect the center node with every other node You are given a integer array edges where each edges i ui vi indicates that there is an edge between the nodes ui and vi Return the center of the given star graph Example Input edges Output Explanation As shown in the figure above node is connected to every other node so is the center Example Input edges Output Constraints n edges length n edges i length ui vi n ui vi The given edges represent a valid star graph
intersection of two arrays ii Given two integer arrays and return an array of their intersection Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order Example Input Output Example Input Output Explanation is also accepted Constraints length length i i Follow up What if the given array is already sorted How would you optimize your algorithm What if s size is small compared to s size Which algorithm is better What if elements of are stored on disk and the memory is limited such that you cannot load all elements into the memory at once
largest 1-bordered square Given a grid of and return the number of elements in the largest square subgrid that has all on its border or if such a subgrid doesn t exist in the grid Example Input grid Output Example Input grid Output Constraints grid length grid length grid i j is or
count binary substrings Given a binary string s return the number of non empty substrings that have the same number of s and s and all the s and all the s in these substrings are grouped consecutively Substrings that occur multiple times are counted the number of times they occur Example Input s Output Explanation There are substrings that have equal number of consecutive s and s and Notice that some of these substrings repeat and are counted the number of times they occur Also is not a valid substring because all the s and s are not grouped together Example Input s Output Explanation There are substrings that have equal number of consecutive s and s Constraints s length s i is either or
sort list Given the head of a linked list return the list after sorting it in ascending order Example Input head Output Example Input head Output Example Input head Output Constraints The number of nodes in the list is in the range Node val Follow up Can you sort the linked list in O n logn time and O memory i e constant space
k items with the maximum sum There is a bag that consists of items each item has a number or written on it You are given four non negative integers numOnes numZeros numNegOnes and k The bag initially contains numOnes items with written on them numZeroes items with written on them numNegOnes items with written on them We want to pick exactly k items among the available items Return the maximum possible sum of numbers written on the items Example Input numOnes numZeros numNegOnes k Output Explanation We have a bag of items with numbers written on them We take items with written on them and get a sum in a total of It can be proven that is the maximum possible sum Example Input numOnes numZeros numNegOnes k Output Explanation We have a bag of items with numbers written on them We take items with written on them and item with written on it and get a sum in a total of It can be proven that is the maximum possible sum Constraints numOnes numZeros numNegOnes k numOnes numZeros numNegOnes
reverse nodes in even length groups You are given the head of a linked list The nodes in the linked list are sequentially assigned to non empty groups whose lengths form the sequence of the natural numbers The length of a group is the number of nodes assigned to it In other words The node is assigned to the first group The and the nodes are assigned to the second group The and nodes are assigned to the third group and so on Note that the length of the last group may be less than or equal to the length of the second to last group Reverse the nodes in each group with an even length and return the head of the modified linked list Example Input head Output Explanation The length of the first group is which is odd hence no reversal occurs The length of the second group is which is even hence the nodes are reversed The length of the third group is which is odd hence no reversal occurs The length of the last group is which is even hence the nodes are reversed Example Input head Output Explanation The length of the first group is No reversal occurs The length of the second group is The nodes are reversed The length of the last group is No reversal occurs Example Input head Output Explanation The length of the first group is No reversal occurs The length of the second group is The nodes are reversed The length of the last group is The nodes are reversed Constraints The number of nodes in the list is in the range Node val
find all good indices You are given a indexed integer array nums of size n and a positive integer k We call an index i in the range k i n k good if the following conditions are satisfied The k elements that are just before the index i are in non increasing order The k elements that are just after the index i are in non decreasing order Return an array of all good indices sorted in increasing order Example Input nums k Output Explanation There are two good indices in the array Index The subarray is in non increasing order and the subarray is in non decreasing order Index The subarray is in non increasing order and the subarray is in non decreasing order Note that the index is not good because is not non decreasing Example Input nums k Output Explanation There are no good indices in this array Constraints n nums length n nums i k n
divide a string into groups of size k A string s can be partitioned into groups of size k using the following procedure The first group consists of the first k characters of the string the second group consists of the next k characters of the string and so on Each character can be a part of exactly one group For the last group if the string does not have k characters remaining a character fill is used to complete the group Note that the partition is done so that after removing the fill character from the last group if it exists and concatenating all the groups in order the resultant string should be s Given the string s the size of each group k and the character fill return a string array denoting the composition of every group s has been divided into using the above procedure Example Input s abcdefghi k fill x Output abc def ghi Explanation The first characters abc form the first group The next characters def form the second group The last characters ghi form the third group Since all groups can be completely filled by characters from the string we do not need to use fill Thus the groups formed are abc def and ghi Example Input s abcdefghij k fill x Output abc def ghi jxx Explanation Similar to the previous example we are forming the first three groups abc def and ghi For the last group we can only use the character j from the string To complete this group we add x twice Thus the groups formed are abc def ghi and jxx Constraints s length s consists of lowercase English letters only k fill is a lowercase English letter
check if array is sorted and rotated Given an array nums return true if the array was originally sorted in non decreasing order then rotated some number of positions including zero Otherwise return false There may be duplicates in the original array Note An array A rotated by x positions results in an array B of the same length such that A i B i x A length where is the modulo operation Example Input nums Output true Explanation is the original sorted array You can rotate the array by x positions to begin on the the element of value Example Input nums Output false Explanation There is no sorted array once rotated that can make nums Example Input nums Output true Explanation is the original sorted array You can rotate the array by x positions i e no rotation to make nums Constraints nums length nums i
max increase to keep city skyline There is a city composed of n x n blocks where each block contains a single building shaped like a vertical square prism You are given a indexed n x n integer matrix grid where grid r c represents the height of the building located in the block at row r and column c A city s skyline is the outer contour formed by all the building when viewing the side of the city from a distance The skyline from each cardinal direction north east south and west may be different We are allowed to increase the height of any number of buildings by any amount the amount can be different per building The height of a height building can also be increased However increasing the height of a building should not affect the city s skyline from any cardinal direction Return the maximum total sum that the height of the buildings can be increased by without changing the city s skyline from any cardinal direction Example Input grid Output Explanation The building heights are shown in the center of the above image The skylines when viewed from each cardinal direction are drawn in red The grid after increasing the height of buildings without affecting skylines is gridNew Example Input grid Output Explanation Increasing the height of any building will result in the skyline changing Constraints n grid length n grid r length n grid r c
root equals sum of children You are given the root of a binary tree that consists of exactly nodes the root its left child and its right child Return true if the value of the root is equal to the sum of the values of its two children or false otherwise Example Input root Output true Explanation The values of the root its left child and its right child are and respectively is equal to so we return true Example Input root Output false Explanation The values of the root its left child and its right child are and respectively is not equal to so we return false Constraints The tree consists only of the root its left child and its right child Node val
probability of a two boxes having the same number of distinct balls Given balls of k distinct colors You will be given an integer array balls of size k where balls i is the number of balls of color i All the balls will be shuffled uniformly at random then we will distribute the first n balls to the first box and the remaining n balls to the other box Please read the explanation of the second example carefully Please note that the two boxes are considered different For example if we have two balls of colors a and b and two boxes and then the distribution a b is considered different than the distribution b a Please read the explanation of the first example carefully Return the probability that the two boxes have the same number of distinct balls Answers within of the actual value will be accepted as correct Example Input balls Output Explanation Only ways to divide the balls equally A ball of color to box and a ball of color to box A ball of color to box and a ball of color to box In both ways the number of distinct colors in each box is equal The probability is Example Input balls Output Explanation We have the set of balls This set of balls will be shuffled randomly and we may have one of the distinct shuffles with equal probability i e After that we add the first two balls to the first box and the second two balls to the second box We can see that of these possible random distributions have the same number of distinct colors of balls in each box Probability is Example Input balls Output Explanation The set of balls is It is hard to display all the possible random shuffles of this set but it is easy to check that of them will have the same number of distinct colors in each box Probability Constraints balls length balls i sum balls is even
number of ways to wear different hats to each other There are n people and types of hats labeled from to Given a integer array hats where hats i is a list of all hats preferred by the ith person Return the number of ways that the n people wear different hats to each other Since the answer may be too large return it modulo Example Input hats Output Explanation There is only one way to choose hats given the conditions First person choose hat Second person choose hat and last one hat Example Input hats Output Explanation There are ways to choose hats and Example Input hats Output Explanation Each person can choose hats labeled from to Number of Permutations of Constraints n hats length n hats i length hats i j hats i contains a list of unique integers
intersection of two arrays Given two integer arrays and return an array of their intersection Each element in the result must be unique and you may return the result in any order Example Input Output Example Input Output Explanation is also accepted Constraints length length i i
maximal rectangle Given a rows x cols binary matrix filled with s and s find the largest rectangle containing only s and return its area Example Input matrix Output Explanation The maximal rectangle is shown in the above picture Example Input matrix Output Example Input matrix Output Constraints rows matrix length cols matrix i length row cols matrix i j is or
find the array concatenation value You are given a indexed integer array nums The concatenation of two numbers is the number formed by concatenating their numerals For example the concatenation of is The concatenation value of nums is initially equal to Perform this operation until nums becomes empty If there exists more than one number in nums pick the first element and last element in nums respectively and add the value of their concatenation to the concatenation value of nums then delete the first and last element from nums If one element exists add its value to the concatenation value of nums then delete it Return the concatenation value of the nums Example Input nums Output Explanation Before performing any operation nums is and concatenation value is In the first operation We pick the first element and the last element Their concatenation is and we add it to the concatenation value so it becomes equal to Then we delete them from nums so nums becomes equal to In the second operation We pick the first element and the last element Their concatenation is and we add it to the concatenation value so it becomes equal to Then we delete them from the nums so nums becomes empty Since the concatenation value is so the answer is Example Input nums Output Explanation Before performing any operation nums is and concatenation value is In the first operation We pick the first element and the last element Their concatenation is and we add it to the concatenation value so it becomes equal to Then we delete them from the nums so nums becomes equal to In the second operation We pick the first element and the last element Their concatenation is and we add it to the concatenation value so it becomes equal to Then we delete them from the nums so nums becomes equal to In the third operation nums has only one element so we pick and add it to the concatenation value so it becomes equal to Then we delete it from nums so nums become empty Since the concatenation value is so the answer is Constraints nums length nums i
employees with missing information SQL Schema Table Employees Column Name Type int name varchar is the primary key for this table Each row of this table indicates the name of the employee whose ID is Table Salaries Column Name Type int salary int is the primary key for this table Each row of this table indicates the salary of the employee whose ID is Write an SQL query to report the IDs of all the employees with missing information The information of an employee is missing if The employee s name is missing or The employee s salary is missing Return the result table ordered by in ascending order The query result format is in the following example Example Input Employees table name Crew Haven Kristian Salaries table salary Output Explanation Employees and are working at this company The name of employee is missing The salary of employee is missing
missing number Given an array nums containing n distinct numbers in the range n return the only number in the range that is missing from the array Example Input nums Output Explanation n since there are numbers so all numbers are in the range is the missing number in the range since it does not appear in nums Example Input nums Output Explanation n since there are numbers so all numbers are in the range is the missing number in the range since it does not appear in nums Example Input nums Output Explanation n since there are numbers so all numbers are in the range is the missing number in the range since it does not appear in nums Constraints n nums length n nums i n All the numbers of nums are unique Follow up Could you implement a solution using only O extra space complexity and O n runtime complexity
the k weakest rows in a matrix You are given an m x n binary matrix mat of s representing soldiers and s representing civilians The soldiers are positioned in front of the civilians That is all the s will appear to the left of all the s in each row A row i is weaker than a row j if one of the following is true The number of soldiers in row i is less than the number of soldiers in row j Both rows have the same number of soldiers and i j Return the indices of the k weakest rows in the matrix ordered from weakest to strongest Example Input mat k Output Explanation The number of soldiers in each row is Row Row Row Row Row The rows ordered from weakest to strongest are Example Input mat k Output Explanation The number of soldiers in each row is Row Row Row Row The rows ordered from weakest to strongest are Constraints m mat length n mat i length n m k m matrix i j is either or
sum game Alice and Bob take turns playing a game with Alice starting first You are given a string num of even length consisting of digits and characters On each turn a player will do the following if there is still at least one in num Choose an index i where num i Replace num i with any digit between and The game ends when there are no more characters in num For Bob to win the sum of the digits in the first half of num must be equal to the sum of the digits in the second half For Alice to win the sums must not be equal For example if the game ended with num then Bob wins because If the game ended with num then Alice wins because Assuming Alice and Bob play optimally return true if Alice will win and false if Bob will win Example Input num Output false Explanation There are no moves to be made The sum of the first half is equal to the sum of the second half Example Input num Output true Explanation Alice can replace one of the s with and it will be impossible for Bob to make the sums equal Example Input num Output false Explanation It can be proven that Bob will always win One possible outcome is Alice replaces the first with num Bob replaces one of the in the right half with num Alice replaces one of the in the right half with num Bob replaces the last in the right half with num Bob wins because Constraints num length num length is even num consists of only digits and
distribute money to maximum children You are given an integer money denoting the amount of money in dollars that you have and another integer children denoting the number of children that you must distribute the money to You have to distribute the money according to the following rules All money must be distributed Everyone must receive at least dollar Nobody receives dollars Return the maximum number of children who may receive exactly dollars if you distribute the money according to the aforementioned rules If there is no way to distribute the money return Example Input money children Output Explanation The maximum number of children with dollars will be One of the ways to distribute the money is dollars to the first child dollars to the second child dollars to the third child It can be proven that no distribution exists such that number of children getting dollars is greater than Example Input money children Output Explanation Each child can be given dollars Constraints money children
count number of ways to place houses There is a street with n plots where there are n plots on each side of the street The plots on each side are numbered from to n On each plot a house can be placed Return the number of ways houses can be placed such that no two houses are adjacent to each other on the same side of the street Since the answer may be very large return it modulo Note that if a house is placed on the ith plot on one side of the street a house can also be placed on the ith plot on the other side of the street Example Input n Output Explanation Possible arrangements All plots are empty A house is placed on one side of the street A house is placed on the other side of the street Two houses are placed one on each side of the street Example Input n Output Explanation The possible arrangements are shown in the diagram above Constraints n
count distinct numbers on board You are given a positive integer n that is initially placed on a board Every day for days you perform the following procedure For each number x present on the board find all numbers i n such that x i Then place those numbers on the board Return the number of distinct integers present on the board after days have elapsed Note Once a number is placed on the board it will remain on it until the end stands for the modulo operation For example is Example Input n Output Explanation Initially is present on the board The next day and will be added since and After that day will be added to the board because At the end of a billion days the distinct numbers on the board will be and Example Input n Output Explanation Since will be added to the board After a billion days the only two distinct numbers on the board are and Constraints n
reverse substrings between each pair of parentheses You are given a string s that consists of lower case English letters and brackets Reverse the strings in each pair of matching parentheses starting from the innermost one Your result should not contain any brackets Example Input s abcd Output dcba Example Input s u love i Output iloveu Explanation The substring love is reversed first then the whole string is reversed Example Input s ed et oc el Output leetcode Explanation First we reverse the substring oc then etco and finally the whole string Constraints s length s only contains lower case English characters and parentheses It is guaranteed that all parentheses are balanced
kth smallest product of two sorted arrays Given two sorted indexed integer arrays and as well as an integer k return the kth based smallest product of i j where i length and j length Example Input k Output Explanation The smallest products are The smallest product is Example Input k Output Explanation The smallest products are The smallest product is Example Input k Output Explanation The smallest products are The smallest product is Constraints length length i j k length length and are sorted
binary tree tilt Given the root of a binary tree return the sum of every tree node s tilt The tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values If a node does not have a left child then the sum of the left subtree node values is treated as The rule is similar if the node does not have a right child Example Input root Output Explanation Tilt of node no children Tilt of node no children Tilt of node left subtree is just left child so sum is right subtree is just right child so sum is Sum of every tilt Example Input root null Output Explanation Tilt of node no children Tilt of node no children Tilt of node no children Tilt of node left subtree is just left child so sum is right subtree is just right child so sum is Tilt of node no left child so sum is right subtree is just right child so sum is Tilt of node left subtree values are and which sums to right subtree values are and which sums to Sum of every tilt Example Input root Output Constraints The number of nodes in the tree is in the range Node val
apply bitwise operations to make strings equal You are given two indexed binary strings s and target of the same length n You can do the following operation on s any number of times Choose two different indices i and j where i j n Simultaneously replace s i with s i OR s j and s j with s i XOR s j For example if s you can choose i and j then simultaneously replace s with s OR s OR and s with s XOR s XOR so we will have s Return true if you can make the string s equal to target or false otherwise Example Input s target Output true Explanation We can do the following operations Choose i and j We have now s Choose i and j We have now s Since we can make s equal to target we return true Example Input s target Output false Explanation It is not possible to make s equal to target with any number of operations Constraints n s length target length n s and target consist of only the digits and
sum of floored pairs Given an integer array nums return the sum of floor nums i nums j for all pairs of indices i j nums length in the array Since the answer may be too large return it modulo The floor function returns the integer part of the division Example Input nums Output Explanation floor floor floor floor floor floor floor floor floor We calculate the floor of the division for every pair of indices in the array then sum them up Example Input nums Output Constraints nums length nums i
bulb switcher ii There is a room with n bulbs labeled from to n that all are turned on initially and four buttons on the wall Each of the four buttons has a different functionality where Button Flips the status of all the bulbs Button Flips the status of all the bulbs with even labels i e Button Flips the status of all the bulbs with odd labels i e Button Flips the status of all the bulbs with a label j where k i e You must make exactly presses button presses in total For each press you may pick any of the four buttons to press Given the two integers n and presses return the number of different possible statuses after performing all presses button presses Example Input n presses Output Explanation Status can be off by pressing button on by pressing button Example Input n presses Output Explanation Status can be off off by pressing button on off by pressing button off on by pressing button Example Input n presses Output Explanation Status can be off off off by pressing button off on off by pressing button on off on by pressing button off on on by pressing button Constraints n presses
maximum subarray Given an integer array nums find the subarray with the largest sum and return its sum Example Input nums Output Explanation The subarray has the largest sum Example Input nums Output Explanation The subarray has the largest sum Example Input nums Output Explanation The subarray has the largest sum Constraints nums length nums i Follow up If you have figured out the O n solution try coding another solution using the divide and conquer approach which is more subtle
customer who visited but did not make any transactions SQL Schema Table Visits Column Name Type int int is the primary key for this table This table contains information about the customers who visited the mall Table Transactions Column Name Type int int amount int is the primary key for this table This table contains information about the transactions made during the Write a SQL query to find the IDs of the users who visited without making any transactions and the number of times they made these types of visits Return the result table sorted in any order The query result format is in the following example Example Input Visits Transactions amount Output Explanation Customer with id visited the mall once and made one transaction during the visit with id Customer with id visited the mall once and made one transaction during the visit with id Customer with id visited the mall once and did not make any transactions Customer with id visited the mall three times During visits they did not make any transactions and during one visit they made transactions Customer with id visited the mall once and did not make any transactions As we can see users with IDs and visited the mall one time without making any transactions Also user visited the mall twice and did not make any transactions
convert an array into a 2d array with conditions You are given an integer array nums You need to create a array from nums satisfying the following conditions The array should contain only the elements of the array nums Each row in the array contains distinct integers The number of rows in the array should be minimal Return the resulting array If there are multiple answers return any of them Note that the array can have a different number of elements on each row Example Input nums Output Explanation We can create a array that contains the following rows All elements of nums were used and each row of the array contains distinct integers so it is a valid answer It can be shown that we cannot have less than rows in a valid array Example Input nums Output Explanation All elements of the array are distinct so we can keep all of them in the first row of the array Constraints nums length nums i nums length
reordered power of 2 You are given an integer n We reorder the digits in any order including the original order such that the leading digit is not zero Return true if and only if we can do this so that the resulting number is a power of two Example Input n Output true Example Input n Output false Constraints n
remove invalid parentheses Given a string s that contains parentheses and letters remove the minimum number of invalid parentheses to make the input string valid Return a list of unique strings that are valid with the minimum number of removals You may return the answer in any order Example Input s Output Example Input s a Output a a Example Input s Output Constraints s length s consists of lowercase English letters and parentheses and There will be at most parentheses in s
decoded string at index You are given an encoded string s To decode the string to a tape the encoded string is read one character at a time and the following steps are taken If the character read is a letter that letter is written onto the tape If the character read is a digit d the entire current tape is repeatedly written d more times in total Given an integer k return the kth letter indexed in the decoded string Example Input s k Output o Explanation The decoded string is leetleetcodeleetleetcodeleetleetcode The letter in the string is o Example Input s k Output h Explanation The decoded string is hahahaha The letter is h Example Input s k Output a Explanation The decoded string is a repeated times The letter is a Constraints s length s consists of lowercase English letters and digits through s starts with a letter k It is guaranteed that k is less than or equal to the length of the decoded string The decoded string is guaranteed to have less than letters
max consecutive ones Given a binary array nums return the maximum number of consecutive s in the array Example Input nums Output Explanation The first two digits or the last three digits are consecutive The maximum number of consecutive is Example Input nums Output Constraints nums length nums i is either or
find all possible recipes from given supplies You have information about n different recipes You are given a string array recipes and a string array ingredients The ith recipe has the name recipes i and you can create it if you have all the needed ingredients from ingredients i Ingredients to a recipe may need to be created from other recipes i e ingredients i may contain a string that is in recipes You are also given a string array supplies containing all the ingredients that you initially have and you have an infinite supply of all of them Return a list of all the recipes that you can create You may return the answer in any order Note that two recipes may contain each other in their ingredients Example Input recipes bread ingredients yeast flour supplies yeast flour corn Output bread Explanation We can create bread since we have the ingredients yeast and flour Example Input recipes bread sandwich ingredients yeast flour bread meat supplies yeast flour meat Output bread sandwich Explanation We can create bread since we have the ingredients yeast and flour We can create sandwich since we have the ingredient meat and can create the ingredient bread Example Input recipes bread sandwich burger ingredients yeast flour bread meat sandwich meat bread supplies yeast flour meat Output bread sandwich burger Explanation We can create bread since we have the ingredients yeast and flour We can create sandwich since we have the ingredient meat and can create the ingredient bread We can create burger since we have the ingredient meat and can create the ingredients bread and sandwich Constraints n recipes length ingredients length n ingredients i length supplies length recipes i length ingredients i j length supplies k length recipes i ingredients i j and supplies k consist only of lowercase English letters All the values of recipes and supplies combined are unique Each ingredients i does not contain any duplicate values
count days spent together Alice and Bob are traveling to Rome for separate business meetings You are given strings arriveAlice leaveAlice arriveBob and leaveBob Alice will be in the city from the dates arriveAlice to leaveAlice inclusive while Bob will be in the city from the dates arriveBob to leaveBob inclusive Each will be a character string in the format MM DD corresponding to the month and day of the date Return the total number of days that Alice and Bob are in Rome together You can assume that all dates occur in the same calendar year which is not a leap year Note that the number of days per month can be represented as Example Input arriveAlice leaveAlice arriveBob leaveBob Output Explanation Alice will be in Rome from August to August Bob will be in Rome from August to August They are both in Rome together on August and so the answer is Example Input arriveAlice leaveAlice arriveBob leaveBob Output Explanation There is no day when Alice and Bob are in Rome together so we return Constraints All dates are provided in the format MM DD Alice and Bob s arrival dates are earlier than or equal to their leaving dates The given dates are valid dates of a non leap year
rectangle overlap An axis aligned rectangle is represented as a list where is the coordinate of its bottom left corner and is the coordinate of its top right corner Its top and bottom edges are parallel to the X axis and its left and right edges are parallel to the Y axis Two rectangles overlap if the area of their intersection is positive To be clear two rectangles that only touch at the corner or edges do not overlap Given two axis aligned rectangles and return true if they overlap otherwise return false Example Input Output true Example Input Output false Example Input Output false Constraints length length i i and represent a valid rectangle with a non zero area
minimum money required before transactions You are given a indexed integer array transactions where transactions i costi cashbacki The array describes transactions where each transaction must be completed exactly once in some order At any given moment you have a certain amount of money In order to complete transaction i money costi must hold true After performing a transaction money becomes money costi cashbacki Return the minimum amount of money required before any transaction so that all of the transactions can be completed regardless of the order of the transactions Example Input transactions Output Explanation Starting with money the transactions can be performed in any order It can be shown that starting with money will fail to complete all transactions in some order Example Input transactions Output Explanation If transactions are in the order the minimum money required to complete the transactions is If transactions are in the order the minimum money required to complete the transactions is Thus starting with money the transactions can be performed in any order Constraints transactions length transactions i length costi cashbacki
minimum cost to hire k workers There are n workers You are given two integer arrays quality and wage where quality i is the quality of the ith worker and wage i is the minimum wage expectation for the ith worker We want to hire exactly k workers to form a paid group To hire a group of k workers we must pay them according to the following rules Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group Every worker in the paid group must be paid at least their minimum wage expectation Given the integer k return the least amount of money needed to form a paid group satisfying the above conditions Answers within of the actual answer will be accepted Example Input quality wage k Output Explanation We pay to worker and to worker Example Input quality wage k Output Explanation We pay to worker to and workers separately Constraints n quality length wage length k n quality i wage i
average value of even numbers that are divisible by three Given an integer array nums of positive integers return the average value of all even integers that are divisible by Note that the average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer Example Input nums Output Explanation and are even numbers that are divisible by Example Input nums Output Explanation There is no single number that satisfies the requirement so return Constraints nums length nums i
max chunks to make sorted You are given an integer array arr of length n that represents a permutation of the integers in the range n We split arr into some number of chunks i e partitions and individually sort each chunk After concatenating them the result should equal the sorted array Return the largest number of chunks we can make to sort the array Example Input arr Output Explanation Splitting into two or more chunks will not return the required result For example splitting into will result in which isn t sorted Example Input arr Output Explanation We can split into two chunks such as However splitting into is the highest number of chunks possible Constraints n arr length n arr i n All the elements of arr are unique
longest substring of all vowels in order A string is considered beautiful if it satisfies the following conditions Each of the English vowels a e i o u must appear at least once in it The letters must be sorted in alphabetical order i e all a s before e s all e s before i s etc For example strings aeiou and aaaaaaeiiiioou are considered beautiful but uaeio aeoiu and aaaeeeooo are not beautiful Given a string word consisting of English vowels return the length of the longest beautiful substring of word If no such substring exists return A substring is a contiguous sequence of characters in a string Example Input word aeiaaioaaaaeiiiiouuuooaauuaeiu Output Explanation The longest beautiful substring in word is aaaaeiiiiouuu of length Example Input word aeeeiiiioooauuuaeiou Output Explanation The longest beautiful substring in word is aeiou of length Example Input word a Output Explanation There is no beautiful substring so return Constraints word length word consists of characters a e i o and u
divide array into equal pairs You are given an integer array nums consisting of n integers You need to divide nums into n pairs such that Each element belongs to exactly one pair The elements present in a pair are equal Return true if nums can be divided into n pairs otherwise return false Example Input nums Output true Explanation There are elements in nums so they should be divided into pairs If nums is divided into the pairs and it will satisfy all the conditions Example Input nums Output false Explanation There is no way to divide nums into pairs such that the pairs satisfy every condition Constraints nums length n n nums i
minimum number of days to make m bouquets You are given an integer array bloomDay an integer m and an integer k You want to make m bouquets To make a bouquet you need to use k adjacent flowers from the garden The garden consists of n flowers the ith flower will bloom in the bloomDay i and then can be used in exactly one bouquet Return the minimum number of days you need to wait to be able to make m bouquets from the garden If it is impossible to make m bouquets return Example Input bloomDay m k Output Explanation Let us see what happened in the first three days x means flower bloomed and means flower did not bloom in the garden We need bouquets each should contain flower After day x we can only make one bouquet After day x x we can only make two bouquets After day x x x we can make bouquets The answer is Example Input bloomDay m k Output Explanation We need bouquets each has flowers that means we need flowers We only have flowers so it is impossible to get the needed bouquets and we return Example Input bloomDay m k Output Explanation We need bouquets each should have flowers Here is the garden after the and days After day x x x x x x We can make one bouquet of the first three flowers that bloomed We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent After day x x x x x x x It is obvious that we can make two bouquets in different ways Constraints bloomDay length n n bloomDay i m k n
word break ii Given a string s and a dictionary of strings wordDict add spaces in s to construct a sentence where each word is a valid dictionary word Return all such possible sentences in any order Note that the same word in the dictionary may be reused multiple times in the segmentation Example Input s catsanddog wordDict cat cats and sand dog Output cats and dog cat sand dog Example Input s pineapplepenapple wordDict apple pen applepen pine pineapple Output pine apple pen apple pineapple pen apple pine applepen apple Explanation Note that you are allowed to reuse a dictionary word Example Input s catsandog wordDict cats dog sand and cat Output Constraints s length wordDict length wordDict i length s and wordDict i consist of only lowercase English letters All the strings of wordDict are unique Input is generated in a way that the length of the answer doesn t exceed
magnetic force between two balls In the universe Earth C Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket Rick has n empty baskets the ith basket is at position i Morty has m balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum Rick stated that magnetic force between two different balls at positions x and y is x y Given the integer array position and the integer m Return the required force Example Input position m Output Explanation Distributing the balls into baskets and will make the magnetic force between ball pairs The minimum magnetic force is We cannot achieve a larger minimum magnetic force than Example Input position m Output Explanation We can use baskets and Constraints n position length n position i All integers in position are distinct m position length
binary tree zigzag level order traversal Given the root of a binary tree return the zigzag level order traversal of its nodes values i e from left to right then right to left for the next level and alternate between Example Input root null null Output Example Input root Output Example Input root Output Constraints The number of nodes in the tree is in the range Node val
bitwise xor of all pairings You are given two indexed arrays and consisting of non negative integers There exists another array which contains the bitwise XOR of all pairings of integers between and every integer in is paired with every integer in exactly once Return the bitwise XOR of all integers in Example Input Output Explanation A possible array is The bitwise XOR of all these numbers is so we return Example Input Output Explanation All possible pairs of bitwise XORs are and Thus one possible array is so we return Constraints length length i j
make k-subarray sums equal You are given a indexed integer array arr and an integer k The array arr is circular In other words the first element of the array is the next element of the last element and the last element of the array is the previous element of the first element You can do the following operation any number of times Pick any element from arr and increase or decrease it by Return the minimum number of operations such that the sum of each subarray of length k is equal A subarray is a contiguous part of the array Example Input arr k Output Explanation we can do one operation on index to make its value equal to The array after the operation is Subarray starts at index is and its sum is Subarray starts at index is and its sum is Subarray starts at index is and its sum is Subarray starts at index is and its sum is Example Input arr k Output Explanation we can do three operations on index to make its value equal to and two operations on index to make its value equal to The array after the operations is Subarray starts at index is and its sum is Subarray starts at index is and its sum is Subarray starts at index is and its sum is Subarray starts at index is and its sum is Constraints k arr length arr i
the number of full rounds you have played You are participating in an online chess tournament There is a chess round that starts every minutes The first round of the day starts at and after every minutes a new round starts For example the second round starts at the fourth round starts at and the seventh round starts at You are given two strings loginTime and logoutTime where loginTime is the time you will login to the game and logoutTime is the time you will logout from the game If logoutTime is earlier than loginTime this means you have played from loginTime to midnight and from midnight to logoutTime Return the number of full chess rounds you have played in the tournament Note All the given times follow the hour clock That means the first round of the day starts at and the last round of the day starts at Example Input loginTime logoutTime Output Explanation You played one full round from to You did not play the full round from to because you logged in at after it began You did not play the full round from to because you logged out at before it ended Example Input loginTime logoutTime Output Explanation You played full rounds from to and full rounds from to Constraints loginTime and logoutTime are in the format hh mm hh mm loginTime and logoutTime are not equal
single-threaded cpu You are given n tasks labeled from to n represented by a integer array tasks where tasks i enqueueTimei processingTimei means that the ith task will be available to process at enqueueTimei and will take processingTimei to finish processing You have a single threaded CPU that can process at most one task at a time and will act in the following way If the CPU is idle and there are no available tasks to process the CPU remains idle If the CPU is idle and there are available tasks the CPU will choose the one with the shortest processing time If multiple tasks have the same shortest processing time it will choose the task with the smallest index Once a task is started the CPU will process the entire task without stopping The CPU can finish a task then start a new one instantly Return the order in which the CPU will process the tasks Example Input tasks Output Explanation The events go as follows At time task is available to process Available tasks Also at time the idle CPU starts processing task Available tasks At time task is available to process Available tasks At time task is available to process Available tasks Also at time the CPU finishes task and starts processing task as it is the shortest Available tasks At time task is available to process Available tasks At time the CPU finishes task and starts processing task as it is the shortest Available tasks At time the CPU finishes task and starts processing task Available tasks At time the CPU finishes task and becomes idle Example Input tasks Output Explanation The events go as follows At time all the tasks become available Available tasks Also at time the idle CPU starts processing task Available tasks At time the CPU finishes task and starts processing task Available tasks At time the CPU finishes task and starts processing task Available tasks At time the CPU finishes task and starts processing task Available tasks At time the CPU finishes task and starts processing task Available tasks At time the CPU finishes task and becomes idle Constraints tasks length n n enqueueTimei processingTimei
extra characters in a string You are given a indexed string s and a dictionary of words dictionary You have to break s into one or more non overlapping substrings such that each substring is present in dictionary There may be some extra characters in s which are not present in any of the substrings Return the minimum number of extra characters left over if you break up s optimally Example Input s leetscode dictionary leet code leetcode Output Explanation We can break s in two substrings leet from index to and code from index to There is only unused character at index so we return Example Input s sayhelloworld dictionary hello world Output Explanation We can break s in two substrings hello from index to and world from index to The characters at indices are not used in any substring and thus are considered as extra characters Hence we return Constraints s length dictionary length dictionary i length dictionary i and s consists of only lowercase English letters dictionary contains distinct words
detect pattern of length m repeated k or more times Given an array of positive integers arr find a pattern of length m that is repeated k or more times A pattern is a subarray consecutive sub sequence that consists of one or more values repeated multiple times consecutively without overlapping A pattern is defined by its length and the number of repetitions Return true if there exists a pattern of length m that is repeated k or more times otherwise return false Example Input arr m k Output true Explanation The pattern of length is repeated consecutive times Notice that pattern can be repeated k or more times but not less Example Input arr m k Output true Explanation The pattern of length is repeated consecutive times Another valid pattern is also repeated times Example Input arr m k Output false Explanation The pattern is of length but is repeated only times There is no pattern of length that is repeated or more times Constraints arr length arr i m k
disconnect path in a binary matrix by at most one flip You are given a indexed m x n binary matrix grid You can move from a cell row col to any of the cells row col or row col that has the value The matrix is disconnected if there is no path from to m n You can flip the value of at most one possibly none cell You cannot flip the cells and m n Return true if it is possible to make the matrix disconnect or false otherwise Note that flipping a cell changes its value from to or from to Example Input grid Output true Explanation We can change the cell shown in the diagram above There is no path from to in the resulting grid Example Input grid Output false Explanation It is not possible to change at most one cell such that there is not path from to Constraints m grid length n grid i length m n m n grid i j is either or grid grid m n
spiral matrix iii You start at the cell rStart cStart of an rows x cols grid facing east The northwest corner is at the first row and column in the grid and the southeast corner is at the last row and column You will walk in a clockwise spiral shape to visit every position in this grid Whenever you move outside the grid s boundary we continue our walk outside the grid but may return to the grid boundary later Eventually we reach all rows cols spaces of the grid Return an array of coordinates representing the positions of the grid in the order you visited them Example Input rows cols rStart cStart Output Example Input rows cols rStart cStart Output Constraints rows cols rStart rows cStart cols
arithmetic slices ii - subsequence Given an integer array nums return the number of all the arithmetic subsequences of nums A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same For example and are arithmetic sequences For example is not an arithmetic sequence A subsequence of an array is a sequence that can be formed by removing some elements possibly none of the array For example is a subsequence of The test cases are generated so that the answer fits in bit integer Example Input nums Output Explanation All arithmetic subsequence slices are Example Input nums Output Explanation Any subsequence of this array is arithmetic Constraints nums length nums i
maximum number of moves in a grid You are given a indexed m x n matrix grid consisting of positive integers You can start at any cell in the first column of the matrix and traverse the grid in the following way From a cell row col you can move to any of the cells row col row col and row col such that the value of the cell you move to should be strictly bigger than the value of the current cell Return the maximum number of moves that you can perform Example Input grid Output Explanation We can start at the cell and make the following moves It can be shown that it is the maximum number of moves that can be made Example Input grid Output Explanation Starting from any cell in the first column we cannot perform any moves Constraints m grid length n grid i length m n m n grid i j
rising temperature SQL Schema Table Weather Column Name Type id int recordDate date temperature int id is the primary key for this table This table contains information about the temperature on a certain day Write an SQL query to find all dates Id with higher temperatures compared to its previous dates yesterday Return the result table in any order The query result format is in the following example Example Input Weather table id recordDate temperature Output id Explanation In the temperature was higher than the previous day In the temperature was higher than the previous day
open the lock You have a lock in front of you with circular wheels Each wheel has slots The wheels can rotate freely and wrap around for example we can turn to be or to be Each move consists of turning one wheel one slot The lock initially starts at a string representing the state of the wheels You are given a list of deadends dead ends meaning if the lock displays any of these codes the wheels of the lock will stop turning and you will be unable to open it Given a target representing the value of the wheels that will unlock the lock return the minimum total number of turns required to open the lock or if it is impossible Example Input deadends target Output Explanation A sequence of valid moves would be Note that a sequence like would be invalid because the wheels of the lock become stuck after the display becomes the dead end Example Input deadends target Output Explanation We can turn the last wheel in reverse to move from Example Input deadends target Output Explanation We cannot reach the target without getting stuck Constraints deadends length deadends i length target length target will not be in the list deadends target and deadends i consist of digits only
friends of appropriate ages There are n persons on a social media website You are given an integer array ages where ages i is the age of the ith person A Person x will not send a friend request to a person y x y if any of the following conditions is true age y age x age y age x age y age x Otherwise x will send a friend request to y Note that if x sends a request to y y will not necessarily send a request to x Also a person will not send a friend request to themself Return the total number of friend requests made Example Input ages Output Explanation people friend request each other Example Input ages Output Explanation Friend requests are made Example Input ages Output Explanation Friend requests are made Constraints n ages length n ages i
letter combinations of a phone number Given a string containing digits from inclusive return all possible letter combinations that the number could represent Return the answer in any order A mapping of digits to letters just like on the telephone buttons is given below Note that does not map to any letters Example Input digits Output ad ae af bd be bf cd ce cf Example Input digits Output Example Input digits Output a b c Constraints digits length digits i is a digit in the range
permutation sequence The set n contains a total of n unique permutations By listing and labeling all of the permutations in order we get the following sequence for n Given n and k return the kth permutation sequence Example Input n k Output Example Input n k Output Example Input n k Output Constraints n k n
integer to roman Roman numerals are represented by seven different symbols I V X L C D and M Symbol Value I V X L C D M For example is written as II in Roman numeral just two one s added together is written as XII which is simply X II The number is written as XXVII which is XX V II Roman numerals are usually written largest to smallest from left to right However the numeral for four is not IIII Instead the number four is written as IV Because the one is before the five we subtract it making four The same principle applies to the number nine which is written as IX There are six instances where subtraction is used I can be placed before V and X to make and X can be placed before L and C to make and C can be placed before D and M to make and Given an integer convert it to a roman numeral Example Input num Output III Explanation is represented as ones Example Input num Output LVIII Explanation L V III Example Input num Output MCMXCIV Explanation M CM XC and IV Constraints num
third maximum number Given an integer array nums return the third distinct maximum number in this array If the third maximum does not exist return the maximum number Example Input nums Output Explanation The first distinct maximum is The second distinct maximum is The third distinct maximum is Example Input nums Output Explanation The first distinct maximum is The second distinct maximum is The third distinct maximum does not exist so the maximum is returned instead Example Input nums Output Explanation The first distinct maximum is The second distinct maximum is both s are counted together since they have the same value The third distinct maximum is Constraints nums length nums i Follow up Can you find an O n solution
find total time spent by each employee SQL Schema Table Employees Column Name Type int date int int is the primary key of this table The table shows the employees entries and exits in an office is the day at which this event happened is the minute at which the employee entered the office and is the minute at which they left the office and are between and It is guaranteed that no two events on the same day intersect in time and Write an SQL query to calculate the total time in minutes spent by each employee on each day at the office Note that within one day an employee can enter and leave more than once The time spent in the office for a single entry is Return the result table in any order The query result format is in the following example Example Input Employees table Output day Explanation Employee has three events two on day with a total of and one on day with a total of Employee has two events one on day with a total of and one on day with a total of
rings and rods There are n rings and each ring is either red green or blue The rings are distributed across ten rods labeled from to You are given a string rings of length that describes the n rings that are placed onto the rods Every two characters in rings forms a color position pair that is used to describe each ring where The first character of the ith pair denotes the ith ring s color R G B The second character of the ith pair denotes the rod that the ith ring is placed on to For example describes n rings a red ring placed onto the rod labeled a green ring placed onto the rod labeled and a blue ring placed onto the rod labeled Return the number of rods that have all three colors of rings on them Example Input rings Output Explanation The rod labeled holds rings with all colors red green and blue The rod labeled holds rings but it only has red and blue The rod labeled holds only a green ring Thus the number of rods with all three colors is Example Input rings Output Explanation The rod labeled holds rings with all colors red green and blue The rod labeled holds only a red ring Thus the number of rods with all three colors is Example Input rings Output Explanation Only one ring is given Thus no rods have all three colors Constraints rings length n n rings i where i is even is either R G or B indexed rings i where i is odd is a digit from to indexed
capitalize the title You are given a string title consisting of one or more words separated by a single space where each word consists of English letters Capitalize the string by changing the capitalization of each word such that If the length of the word is or letters change all letters to lowercase Otherwise change the first letter to uppercase and the remaining letters to lowercase Return the capitalized title Example Input title capiTalIze tHe titLe Output Capitalize The Title Explanation Since all the words have a length of at least the first letter of each word is uppercase and the remaining letters are lowercase Example Input title First leTTeR of EACH Word Output First Letter of Each Word Explanation The word of has length so it is all lowercase The remaining words have a length of at least so the first letter of each remaining word is uppercase and the remaining letters are lowercase Example Input title i lOve leetcode Output i Love Leetcode Explanation The word i has length so it is lowercase The remaining words have a length of at least so the first letter of each remaining word is uppercase and the remaining letters are lowercase Constraints title length title consists of words separated by a single space without any leading or trailing spaces Each word consists of uppercase and lowercase English letters and is non empty
gas station There are n gas stations along a circular route where the amount of gas at the ith station is gas i You have a car with an unlimited gas tank and it costs cost i of gas to travel from the ith station to its next i th station You begin the journey with an empty tank at one of the gas stations Given two integer arrays gas and cost return the starting gas station s index if you can travel around the circuit once in the clockwise direction otherwise return If there exists a solution it is guaranteed to be unique Example Input gas cost Output Explanation Start at station index and fill up with unit of gas Your tank Travel to station Your tank Travel to station Your tank Travel to station Your tank Travel to station Your tank Travel to station The cost is Your gas is just enough to travel back to station Therefore return as the starting index Example Input gas cost Output Explanation You can t start at station or as there is not enough gas to travel to the next station Let s start at station and fill up with unit of gas Your tank Travel to station Your tank Travel to station Your tank You cannot travel back to station as it requires unit of gas but you only have Therefore you can t travel around the circuit once no matter where you start Constraints n gas length cost length n gas i cost i
nth digit Given an integer n return the nth digit of the infinite integer sequence Example Input n Output Example Input n Output Explanation The digit of the sequence is a which is part of the number Constraints n
number of burgers with no waste of ingredients Given two integers tomatoSlices and cheeseSlices The ingredients of different burgers are as follows Jumbo Burger tomato slices and cheese slice Small Burger Tomato slices and cheese slice Return so that the number of remaining tomatoSlices equal to and the number of remaining cheeseSlices equal to If it is not possible to make the remaining tomatoSlices and cheeseSlices equal to return Example Input tomatoSlices cheeseSlices Output Explantion To make one jumbo burger and small burgers we need tomato and cheese There will be no remaining ingredients Example Input tomatoSlices cheeseSlices Output Explantion There will be no way to use all ingredients to make small and jumbo burgers Example Input tomatoSlices cheeseSlices Output Explantion Making jumbo burger there will be cheese remaining and making small burgers there will be cheese remaining Constraints tomatoSlices cheeseSlices
minimum cuts to divide a circle A valid cut in a circle can be A cut that is represented by a straight line that touches two points on the edge of the circle and passes through its center or A cut that is represented by a straight line that touches one point on the edge of the circle and its center Some valid and invalid cuts are shown in the figures below Given the integer n return the minimum number of cuts needed to divide a circle into n equal slices Example Input n Output Explanation The above figure shows how cutting the circle twice through the middle divides it into equal slices Example Input n Output Explanation At least cuts are needed to divide the circle into equal slices It can be shown that less than cuts cannot result in slices of equal size and shape Also note that the first cut will not divide the circle into distinct parts Constraints n
unique paths There is a robot on an m x n grid The robot is initially located at the top left corner i e grid The robot tries to move to the bottom right corner i e grid m n The robot can only move either down or right at any point in time Given the two integers m and n return the number of possible unique paths that the robot can take to reach the bottom right corner The test cases are generated so that the answer will be less than or equal to Example Input m n Output Example Input m n Output Explanation From the top left corner there are a total of ways to reach the bottom right corner Right Down Down Down Down Right Down Right Down Constraints m n
01 matrix Given an m x n binary matrix mat return the distance of the nearest for each cell The distance between two adjacent cells is Example Input mat Output Example Input mat Output Constraints m mat length n mat i length m n m n mat i j is either or There is at least one in mat
maximum length of subarray with positive product Given an array of integers nums find the maximum length of a subarray where the product of all its elements is positive A subarray of an array is a consecutive sequence of zero or more values taken out of that array Return the maximum length of a subarray with positive product Example Input nums Output Explanation The array nums already has a positive product of Example Input nums Output Explanation The longest subarray with positive product is which has a product of Notice that we cannot include in the subarray since that ll make the product which is not positive Example Input nums Output Explanation The longest subarray with positive product is or Constraints nums length nums i
maximum earnings from taxi There are n points on a road you are driving your taxi on The n points on the road are labeled from to n in the direction you are going and you want to drive from point to point n to make money by picking up passengers You cannot change the direction of the taxi The passengers are represented by a indexed integer array rides where rides i starti endi tipi denotes the ith passenger requesting a ride from point starti to point endi who is willing to give a tipi dollar tip For each passenger i you pick up you earn endi starti tipi dollars You may only drive at most one passenger at a time Given n and rides return the maximum number of dollars you can earn by picking up the passengers optimally Note You may drop off a passenger and pick up a different passenger at the same point Example Input n rides Output Explanation We can pick up passenger to earn dollars Example Input n rides Output Explanation We will pick up the following passengers Drive passenger from point to point for a profit of dollars Drive passenger from point to point for a profit of dollars Drive passenger from point to point for a profit of dollars We earn dollars in total Constraints n rides length rides i length starti endi n tipi
find and replace pattern Given a list of strings words and a string pattern return a list of words i that match pattern You may return the answer in any order A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p x we get the desired word Recall that a permutation of letters is a bijection from letters to letters every letter maps to another letter and no two letters map to the same letter Example Input words abc deq mee aqq dkd ccc pattern abb Output mee aqq Explanation mee matches the pattern because there is a permutation a m b e ccc does not match the pattern because a c b c is not a permutation since a and b map to the same letter Example Input words a b c pattern a Output a b c Constraints pattern length words length words i length pattern length pattern and words i are lowercase English letters
length of last word Given a string s consisting of words and spaces return the length of the last word in the string A word is a maximal substring consisting of non space characters only Example Input s Hello World Output Explanation The last word is World with length Example Input s fly me to the moon Output Explanation The last word is moon with length Example Input s luffy is still joyboy Output Explanation The last word is joyboy with length Constraints s length s consists of only English letters and spaces There will be at least one word in s
contains duplicate iii You are given an integer array nums and two integers indexDiff and valueDiff Find a pair of indices i j such that i j abs i j indexDiff abs nums i nums j valueDiff and Return true if such pair exists or false otherwise Example Input nums indexDiff valueDiff Output true Explanation We can choose i j We satisfy the three conditions i j abs i j indexDiff abs abs nums i nums j valueDiff abs Example Input nums indexDiff valueDiff Output false Explanation After trying all the possible pairs i j we cannot satisfy the three conditions so we return false Constraints nums length nums i indexDiff nums length valueDiff
minimum ascii delete sum for two strings Given two strings and return the lowest ASCII sum of deleted characters to make two strings equal Example Input sea eat Output Explanation Deleting s from sea adds the ASCII value of s to the sum Deleting t from eat adds to the sum At the end both strings are equal and is the minimum sum possible to achieve this Example Input delete leet Output Explanation Deleting dee from delete to turn the string into let adds d e e to the sum Deleting e from leet adds e to the sum At the end both strings are equal to let and the answer is If instead we turned both strings into lee or eet we would get answers of or which are higher Constraints length length and consist of lowercase English letters
the kth factor of n You are given two positive integers n and k A factor of an integer n is defined as an integer i where n i Consider a list of all factors of n sorted in ascending order return the kth factor in this list or return if n has less than k factors Example Input n k Output Explanation Factors list is the factor is Example Input n k Output Explanation Factors list is the factor is Example Input n k Output Explanation Factors list is there is only factors We should return Constraints k n Follow up Could you solve this problem in less than O n complexity
range sum of sorted subarray sums You are given the array nums consisting of n positive integers You computed the sum of all non empty continuous subarrays from the array and then sorted them in non decreasing order creating a new array of n n numbers Return the sum of the numbers from index left to index right indexed from inclusive in the new array Since the answer can be a huge number return it modulo Example Input nums n left right Output Explanation All subarray sums are After sorting them in non decreasing order we have the new array The sum of the numbers from index le to ri is Example Input nums n left right Output Explanation The given array is the same as example We have the new array The sum of the numbers from index le to ri is Example Input nums n left right Output Constraints n nums length nums length nums i left right n n
optimal division You are given an integer array nums The adjacent integers in nums will perform the float division For example for nums we will evaluate the expression However you can add any number of parenthesis at any position to change the priority of operations You want to add these parentheses such the value of the expression after the evaluation is maximum Return the corresponding expression that has the maximum value in string format Note your expression should not contain redundant parenthesis Example Input nums Output Explanation However the bold parenthesis in are redundant since they do not influence the operation priority So you should return Other cases Example Input nums Output Explanation It can be shown that after trying all possibilities we cannot get an expression with evaluation greater than Constraints nums length nums i There is only one optimal division for the given input
frog jump A frog is crossing a river The river is divided into some number of units and at each unit there may or may not exist a stone The frog can jump on a stone but it must not jump into the water Given a list of stones positions in units in sorted ascending order determine if the frog can cross the river by landing on the last stone Initially the frog is on the first stone and assumes the first jump must be unit If the frog s last jump was k units its next jump must be either k k or k units The frog can only jump in the forward direction Example Input stones Output true Explanation The frog can jump to the last stone by jumping unit to the stone then units to the stone then units to the stone then units to the stone units to the stone and units to the stone Example Input stones Output false Explanation There is no way to jump to the last stone as the gap between the and stone is too large Constraints stones length stones i stones stones is sorted in a strictly increasing order
maximum building height You want to build n new buildings in a city The new buildings will be built in a line and are labeled from to n However there are city restrictions on the heights of the new buildings The height of each building must be a non negative integer The height of the first building must be The height difference between any two adjacent buildings cannot exceed Additionally there are city restrictions on the maximum height of specific buildings These restrictions are given as a integer array restrictions where restrictions i idi maxHeighti indicates that building idi must have a height less than or equal to maxHeighti It is guaranteed that each building will appear at most once in restrictions and building will not be in restrictions Return the maximum possible height of the tallest building Example Input n restrictions Output Explanation The green area in the image indicates the maximum allowed height for each building We can build the buildings with heights and the tallest building has a height of Example Input n restrictions Output Explanation The green area in the image indicates the maximum allowed height for each building We can build the buildings with heights and the tallest building has a height of Example Input n restrictions Output Explanation The green area in the image indicates the maximum allowed height for each building We can build the buildings with heights and the tallest building has a height of Constraints n restrictions length min n idi n idi is unique maxHeighti
check if a string contains all binary codes of size k Given a binary string s and an integer k return true if every binary code of length k is a substring of s Otherwise return false Example Input s k Output true Explanation The binary codes of length are and They can be all found as substrings at indices and respectively Example Input s k Output true Explanation The binary codes of length are and it is clear that both exist as a substring Example Input s k Output false Explanation The binary code is of length and does not exist in the array Constraints s length s i is either or k
calculate amount paid in taxes You are given a indexed integer array brackets where brackets i upperi percenti means that the ith tax bracket has an upper bound of upperi and is taxed at a rate of percenti The brackets are sorted by upper bound i e upperi upperi for i brackets length Tax is calculated as follows The first dollars earned are taxed at a rate of The next dollars earned are taxed at a rate of The next dollars earned are taxed at a rate of And so on You are given an integer income representing the amount of money you earned Return the amount of money that you have to pay in taxes Answers within of the actual answer will be accepted Example Input brackets income Output Explanation Based on your income you have dollars in the tax bracket dollars in the tax bracket and dollars in the tax bracket The tax rate for the three tax brackets is and respectively In total you pay in taxes Example Input brackets income Output Explanation Based on your income you have dollar in the tax bracket and dollar in the tax bracket The tax rate for the two tax brackets is and respectively In total you pay in taxes Example Input brackets income Output Explanation You have no income to tax so you have to pay a total of in taxes Constraints brackets length upperi percenti income upperi is sorted in ascending order All the values of upperi are unique The upper bound of the last tax bracket is greater than or equal to income
minimum swaps to make strings equal You are given two strings and of equal length consisting of letters x and y only Your task is to make these two strings equal to each other You can swap any two characters that belong to different strings which means swap i and j Return the minimum number of swaps required to make and equal or return if it is impossible to do so Example Input xx yy Output Explanation Swap and yx yx Example Input xy yx Output Explanation Swap and yy xx Swap and xy xy Note that you cannot swap and to make equal to yx cause we can only swap chars in different strings Example Input xx xy Output Constraints length length length length only contain x or y
number of submatrices that sum to target Given a matrix and a target return the number of non empty submatrices that sum to target A submatrix is the set of all cells matrix x y with x and y Two submatrices and are different if they have some coordinate that is different for example if Example Input matrix target Output Explanation The four submatrices that only contain Example Input matrix target Output Explanation The two submatrices plus the two submatrices plus the submatrix Example Input matrix target Output Constraints matrix length matrix length matrix i target
subrectangle queries Implement the class SubrectangleQueries which receives a rows x cols rectangle as a matrix of integers in the constructor and supports two methods updateSubrectangle int int int int int newValue Updates all values with newValue in the subrectangle whose upper left coordinate is and bottom right coordinate is getValue int row int col Returns the current value of the coordinate row col from the rectangle Example Input SubrectangleQueries getValue updateSubrectangle getValue getValue updateSubrectangle getValue getValue Output null null null Explanation SubrectangleQueries subrectangleQueries new SubrectangleQueries The initial rectangle looks like subrectangleQueries getValue return subrectangleQueries updateSubrectangle After this update the rectangle looks like subrectangleQueries getValue return subrectangleQueries getValue return subrectangleQueries updateSubrectangle After this update the rectangle looks like subrectangleQueries getValue return subrectangleQueries getValue return Example Input SubrectangleQueries getValue updateSubrectangle getValue getValue updateSubrectangle getValue Output null null null Explanation SubrectangleQueries subrectangleQueries new SubrectangleQueries subrectangleQueries getValue return subrectangleQueries updateSubrectangle subrectangleQueries getValue return subrectangleQueries getValue return subrectangleQueries updateSubrectangle subrectangleQueries getValue return Constraints There will be at most operations considering both methods updateSubrectangle and getValue rows cols rows rectangle length cols rectangle i length rows cols newValue rectangle i j row rows col cols
find the city with the smallest number of neighbors at a threshold distance There are n cities numbered from to n Given the array edges where edges i fromi toi weighti represents a bidirectional and weighted edge between cities fromi and toi and given the integer distanceThreshold Return the city with the smallest number of cities that are reachable through some path and whose distance is at most distanceThreshold If there are multiple such cities return the city with the greatest number Notice that the distance of a path connecting cities i and j is equal to the sum of the edges weights along that path Example Input n edges distanceThreshold Output Explanation The figure above describes the graph The neighboring cities at a distanceThreshold for each city are City City City City City City City City City City City City City City Cities and have neighboring cities at a distanceThreshold but we have to return city since it has the greatest number Example Input n edges distanceThreshold Output Explanation The figure above describes the graph The neighboring cities at a distanceThreshold for each city are City City City City City City City City City City City City City City City The city has neighboring city at a distanceThreshold Constraints n edges length n n edges i length fromi toi n weighti distanceThreshold All pairs fromi toi are distinct
number of adjacent elements with the same color There is a indexed array nums of length n Initially all elements are uncolored has a value of You are given a integer array queries where queries i indexi colori For each query you color the index indexi with the color colori in the array nums Return an array answer of the same length as queries where answer i is the number of adjacent elements with the same color after the ith query More formally answer i is the number of indices j such that j n and nums j nums j and nums j after the ith query Example Input n queries Output Explanation Initially array nums where denotes uncolored elements of the array After the query nums The count of adjacent elements with the same color is After the query nums The count of adjacent elements with the same color is After the query nums The count of adjacent elements with the same color is After the query nums The count of adjacent elements with the same color is After the query nums The count of adjacent elements with the same color is Example Input n queries Output Explanation Initially array nums where denotes uncolored elements of the array After the query nums The count of adjacent elements with the same color is Constraints n queries length queries i length indexi n colori
max difference you can get from changing an integer You are given an integer num You will apply the following steps exactly two times Pick a digit x x Pick another digit y y The digit y can be equal to x Replace all the occurrences of x in the decimal representation of num by y The new integer cannot have any leading zeros also the new integer cannot be Let a and b be the results of applying the operations to num the first and second times respectively Return the max difference between a and b Example Input num Output Explanation The first time pick x and y and store the new integer in a The second time pick x and y and store the new integer in b We have now a and b and max difference Example Input num Output Explanation The first time pick x and y and store the new integer in a The second time pick x and y and store the new integer in b We have now a and b and max difference Constraints num
last stone weight ii You are given an array of integers stones where stones i is the weight of the ith stone We are playing a game with the stones On each turn we choose any two stones and smash them together Suppose the stones have weights x and y with x y The result of this smash is If x y both stones are destroyed and If x y the stone of weight x is destroyed and the stone of weight y has new weight y x At the end of the game there is at most one stone left Return the smallest possible weight of the left stone If there are no stones left return Example Input stones Output Explanation We can combine and to get so the array converts to then we can combine and to get so the array converts to then we can combine and to get so the array converts to then we can combine and to get so the array converts to then that s the optimal value Example Input stones Output Constraints stones length stones i
largest sum of averages You are given an integer array nums and an integer k You can partition the array into at most k non empty adjacent subarrays The score of a partition is the sum of the averages of each subarray Note that the partition must use every integer in nums and that the score is not necessarily an integer Return the maximum score you can achieve of all the possible partitions Answers within of the actual answer will be accepted Example Input nums k Output Explanation The best choice is to partition nums into The answer is We could have also partitioned nums into for example That partition would lead to a score of which is worse Example Input nums k Output Constraints nums length nums i k nums length
reverse subarray to maximize array value You are given an integer array nums The value of this array is defined as the sum of nums i nums i for all i nums length You are allowed to select any subarray of the given array and reverse it You can perform this operation only once Find maximum possible value of the final array Example Input nums Output Explanation By reversing the subarray the array becomes whose value is Example Input nums Output Constraints nums length nums i
ugly number iii An ugly number is a positive integer that is divisible by a b or c Given four integers n a b and c return the nth ugly number Example Input n a b c Output Explanation The ugly numbers are The is Example Input n a b c Output Explanation The ugly numbers are The is Example Input n a b c Output Explanation The ugly numbers are The is Constraints n a b c a b c It is guaranteed that the result will be in range
array reduce transformation Given an integer array nums a reducer function fn and an initial value init return a reduced array A reduced array is created by applying the following operation val fn init nums val fn val nums val fn val nums until every element in the array has been processed The final value of val is returned If the length of the array is it should return init Please solve it without using the built in Array reduce method Example Input nums fn function sum accum curr return accum curr init Output Explanation initially the value is init nums nums nums nums The final answer is Example Input nums fn function sum accum curr return accum curr curr init Output Explanation initially the value is init nums nums nums nums The final answer is Example Input nums fn function sum accum curr return init Output Explanation For empty arrays the answer is always init Constraints nums length nums i init
permutation in string Given two strings and return true if contains a permutation of or false otherwise In other words return true if one of s permutations is the substring of Example Input ab eidbaooo Output true Explanation contains one permutation of ba Example Input ab eidboaoo Output false Constraints length length and consist of lowercase English letters
rearrange products table SQL Schema Table Products Column Name Type int int int int is the primary key for this table Each row in this table indicates the product s price in different stores and If the product is not available in a store the price will be null in that store s column Write an SQL query to rearrange the Products table so that each row has store price If a product is not available in a store do not include a row with that and store combination in the result table Return the result table in any order The query result format is in the following example Example Input Products table null Output store price Explanation Product is available in all three stores with prices and respectively Product is available in with price and with price The product is not available in
sum of subsequence widths The width of a sequence is the difference between the maximum and minimum elements in the sequence Given an array of integers nums return the sum of the widths of all the non empty subsequences of nums Since the answer may be very large return it modulo A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements For example is a subsequence of the array Example Input nums Output Explanation The subsequences are The corresponding widths are The sum of these widths is Example Input nums Output Constraints nums length nums i
debounce Given a function fn and a time in milliseconds t return a debounced version of that function A debounced function is a function whose execution is delayed by t milliseconds and whose execution is cancelled if it is called again within that window of time The debounced function should also recieve the passed parameters For example let s say t and the function was called at and The first function calls would be cancelled and the function call would be executed at If instead t The call would be cancelled the would be executed at and the would be executed at The above diagram shows how debounce will transform events Each rectangle represents and the debounce time is Each color represents a different set of inputs Please solve it without using lodash s debounce function Example Input t calls t inputs t inputs Output t inputs Explanation let start Date now function log inputs console log Date now start inputs const dlog debounce log setTimeout dlog setTimeout dlog The call is cancelled by the call because the call occurred before The call is delayed by and executed at The inputs were Example Input t calls t inputs t inputs Output t inputs t inputs Explanation The call is delayed until The inputs were The call is delayed until The inputs were Example Input t calls t inputs t inputs t inputs Output t inputs t inputs Explanation The call is delayed by and ran at The inputs were The call is cancelled by the call The call is delayed by and ran at The inputs were Constraints t calls length calls i t calls i inputs length
check if all a's appears before all b's Given a string s consisting of only the characters a and b return true if every a appears before every b in the string Otherwise return false Example Input s aaabbb Output true Explanation The a s are at indices and while the b s are at indices and Hence every a appears before every b and we return true Example Input s abab Output false Explanation There is an a at index and a b at index Hence not every a appears before every b and we return false Example Input s bbb Output true Explanation There are no a s hence every a appears before every b and we return true Constraints s length s i is either a or b
maximum product of word lengths Given a string array words return the maximum value of length word i length word j where the two words do not share common letters If no such two words exist return Example Input words abcw baz foo bar xtfn abcdef Output Explanation The two words can be abcw xtfn Example Input words a ab abc d cd bcd abcd Output Explanation The two words can be ab cd Example Input words a aa aaa aaaa Output Explanation No such pair of words Constraints words length words i length words i consists only of lowercase English letters
count items matching a rule You are given an array items where each items i typei colori namei describes the type color and name of the ith item You are also given a rule represented by two strings ruleKey and ruleValue The ith item is said to match the rule if one of the following is true ruleKey type and ruleValue typei ruleKey color and ruleValue colori ruleKey name and ruleValue namei Return the number of items that match the given rule Example Input items phone blue pixel computer silver lenovo phone gold iphone ruleKey color ruleValue silver Output Explanation There is only one item matching the given rule which is computer silver lenovo Example Input items phone blue pixel computer silver phone phone gold iphone ruleKey type ruleValue phone Output Explanation There are only two items matching the given rule which are phone blue pixel and phone gold iphone Note that the item computer silver phone does not match Constraints items length typei length colori length namei length ruleValue length ruleKey is equal to either type color or name All strings consist only of lowercase letters
change minimum characters to satisfy one of three conditions You are given two strings a and b that consist of lowercase letters In one operation you can change any character in a or b to any lowercase letter Your goal is to satisfy one of the following three conditions Every letter in a is strictly less than every letter in b in the alphabet Every letter in b is strictly less than every letter in a in the alphabet Both a and b consist of only one distinct letter Return the minimum number of operations needed to achieve your goal Example Input a aba b caa Output Explanation Consider the best way to make each condition true Change b to ccc in operations then every letter in a is less than every letter in b Change a to bbb and b to aaa in operations then every letter in b is less than every letter in a Change a to aaa and b to aaa in operations then a and b consist of one distinct letter The best way was done in operations either condition or condition Example Input a dabadd b cda Output Explanation The best way is to make condition true by changing b to eee Constraints a length b length a and b consist only of lowercase letters
lowest common ancestor of a binary tree Given a binary tree find the lowest common ancestor LCA of two given nodes in the tree According to the definition of LCA on Wikipedia The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants where we allow a node to be a descendant of itself Example Input root null null p q Output Explanation The LCA of nodes and is Example Input root null null p q Output Explanation The LCA of nodes and is since a node can be a descendant of itself according to the LCA definition Example Input root p q Output Constraints The number of nodes in the tree is in the range Node val All Node val are unique p q p and q will exist in the tree
heaters Winter is coming During the contest your first job is to design a standard heater with a fixed warm radius to warm all the houses Every house can be warmed as long as the house is within the heater s warm radius range Given the positions of houses and heaters on a horizontal line return the minimum radius standard of heaters so that those heaters could cover all houses Notice that all the heaters follow your radius standard and the warm radius will the same Example Input houses heaters Output Explanation The only heater was placed in the position and if we use the radius standard then all the houses can be warmed Example Input houses heaters Output Explanation The two heater was placed in the position and We need to use radius standard then all the houses can be warmed Example Input houses heaters Output Constraints houses length heaters length houses i heaters i
make array strictly increasing Given two integer arrays and return the minimum number of operations possibly zero needed to make strictly increasing In one operation you can choose two indices i length and j length and do the assignment i j If there is no way to make strictly increasing return Example Input Output Explanation Replace with then Example Input Output Explanation Replace with and then replace with Example Input Output Explanation You can t make strictly increasing Constraints length length i i
count largest group You are given an integer n Each number from to n is grouped according to the sum of its digits Return the number of groups that have the largest size Example Input n Output Explanation There are groups in total they are grouped according sum of its digits of numbers from to There are groups with largest size Example Input n Output Explanation There are groups of size Constraints n
first day where you have been in all the rooms There are n rooms you need to visit labeled from to n Each day is labeled starting from You will go in and visit one room a day Initially on day you visit room The order you visit the rooms for the coming days is determined by the following rules and a given indexed array nextVisit of length n Assuming that on a day you visit room i if you have been in room i an odd number of times including the current visit on the next day you will visit a room with a lower or equal room number specified by nextVisit i where nextVisit i i if you have been in room i an even number of times including the current visit on the next day you will visit room i mod n Return the label of the first day where you have been in all the rooms It can be shown that such a day exists Since the answer may be very large return it modulo Example Input nextVisit Output Explanation On day you visit room The total times you have been in room is which is odd On the next day you will visit room nextVisit On day you visit room The total times you have been in room is which is even On the next day you will visit room mod On day you visit room This is the first day where you have been in all the rooms Example Input nextVisit Output Explanation Your room visiting order for each day is Day is the first day where you have been in all the rooms Example Input nextVisit Output Explanation Your room visiting order for each day is Day is the first day where you have been in all the rooms Constraints n nextVisit length n nextVisit i i
minimum cost to cut a stick Given a wooden stick of length n units The stick is labelled from to n For example a stick of length is labelled as follows Given an integer array cuts where cuts i denotes a position you should perform a cut at You should perform the cuts in order you can change the order of the cuts as you wish The cost of one cut is the length of the stick to be cut the total cost is the sum of costs of all cuts When you cut a stick it will be split into two smaller sticks i e the sum of their lengths is the length of the stick before the cut Please refer to the first example for a better explanation Return the minimum total cost of the cuts Example Input n cuts Output Explanation Using cuts order as in the input leads to the following scenario The first cut is done to a rod of length so the cost is The second cut is done to a rod of length i e the second part of the first cut the third is done to a rod of length and the last cut is to a rod of length The total cost is Rearranging the cuts to be for example will lead to a scenario with total cost as shown in the example photo Example Input n cuts Output Explanation If you try the given cuts ordering the cost will be There are much ordering with total cost for example the order has total cost which is the minimum possible Constraints n cuts length min n cuts i n All the integers in cuts array are distinct
snapshot array Implement a SnapshotArray that supports the following interface SnapshotArray int length initializes an array like data structure with the given length Initially each element equals void set index val sets the element at the given index to be equal to val int snap takes a snapshot of the array and returns the the total number of times we called snap minus int get index returns the value at the given index at the time we took the snapshot with the given Example Input SnapshotArray set snap set get Output null null null Explanation SnapshotArray snapshotArr new SnapshotArray set the length to be snapshotArr set Set array snapshotArr snap Take a snapshot return snapshotArr set snapshotArr get Get the value of array with return Constraints length index length val the total number of times we call snap At most calls will be made to set snap and get
strong password checker ii A password is said to be strong if it satisfies all the following criteria It has at least characters It contains at least one lowercase letter It contains at least one uppercase letter It contains at least one digit It contains at least one special character The special characters are the characters in the following string It does not contain of the same character in adjacent positions i e aab violates this condition but aba does not Given a string password return true if it is a strong password Otherwise return false Example Input password Output true Explanation The password meets all the requirements Therefore we return true Example Input password Me You IsMyDream Output false Explanation The password does not contain a digit and also contains of the same character in adjacent positions Therefore we return false Example Input password Output false Explanation The password does not meet the length requirement Therefore we return false Constraints password length password consists of letters digits and special characters
k inverse pairs array For an integer array nums an inverse pair is a pair of integers i j where i j nums length and nums i nums j Given two integers n and k return the number of different arrays consist of numbers from to n such that there are exactly k inverse pairs Since the answer can be huge return it modulo Example Input n k Output Explanation Only the array which consists of numbers from to has exactly inverse pairs Example Input n k Output Explanation The array and have exactly inverse pair Constraints n k
maximum fruits harvested after at most k steps Fruits are available at some positions on an infinite x axis You are given a integer array fruits where fruits i positioni amounti depicts amounti fruits at the position positioni fruits is already sorted by positioni in ascending order and each positioni is unique You are also given an integer startPos and an integer k Initially you are at the position startPos From any position you can either walk to the left or right It takes one step to move one unit on the x axis and you can walk at most k steps in total For every position you reach you harvest all the fruits at that position and the fruits will disappear from that position Return the maximum total number of fruits you can harvest Example Input fruits startPos k Output Explanation The optimal way is to Move right to position and harvest fruits Move right to position and harvest fruits You moved steps and harvested fruits in total Example Input fruits startPos k Output Explanation You can move at most k steps so you cannot reach position nor The optimal way is to Harvest the fruits at the starting position Move left to position and harvest fruit Move right to position and harvest fruits Move right to position and harvest fruits You moved steps and harvested fruits in total Example Input fruits startPos k Output Explanation You can move at most k steps and cannot reach any position with fruits Constraints fruits length fruits i length startPos positioni positioni positioni for any i indexed amounti k
number of segments in a string Given a string s return the number of segments in the string A segment is defined to be a contiguous sequence of non space characters Example Input s Hello my name is John Output Explanation The five segments are Hello my name is John Example Input s Hello Output Constraints s length s consists of lowercase and uppercase English letters digits or one of the following characters The only space character in s is
convert binary number in a linked list to integer Given head which is a reference node to a singly linked list The value of each node in the linked list is either or The linked list holds the binary representation of a number Return the decimal value of the number in the linked list The most significant bit is at the head of the linked list Example Input head Output Explanation in base in base Example Input head Output Constraints The Linked List is not empty Number of nodes will not exceed Each node s value is either or
construct quad tree Given a n n matrix grid of s and s only We want to represent grid with a Quad Tree Return the root of the Quad Tree representing grid A Quad Tree is a tree data structure in which each internal node has exactly four children Besides each node has two attributes val True if the node represents a grid of s or False if the node represents a grid of s Notice that you can assign the val to True or False when isLeaf is False and both are accepted in the answer isLeaf True if the node is a leaf node on the tree or False if the node has four children class Node public boolean val public boolean isLeaf public Node topLeft public Node topRight public Node bottomLeft public Node bottomRight We can construct a Quad Tree from a two dimensional area using the following steps If the current grid has the same value i e all s or all s set isLeaf True and set val to the value of the grid and set the four children to Null and stop If the current grid has different values set isLeaf to False and set val to any value and divide the current grid into four sub grids as shown in the photo Recurse for each of the children with the proper sub grid If you want to know more about the Quad Tree you can refer to the wiki Quad Tree format You don t need to read this section for solving the problem This is only if you want to understand the output format here The output represents the serialized format of a Quad Tree using level order traversal where null signifies a path terminator where no node exists below It is very similar to the serialization of the binary tree The only difference is that the node is represented as a list isLeaf val If the value of isLeaf or val is True we represent it as in the list isLeaf val and if the value of isLeaf or val is False we represent it as Example Input grid Output Explanation The explanation of this example is shown below Notice that represnts False and represents True in the photo representing the Quad Tree Example Input grid Output null null null null Explanation All values in the grid are not the same We divide the grid into four sub grids The topLeft bottomLeft and bottomRight each has the same value The topRight have different values so we divide it into sub grids where each has the same value Explanation is shown in the photo below Constraints n grid length grid i length n where x
maximum enemy forts that can be captured You are given a indexed integer array forts of length n representing the positions of several forts forts i can be or where represents there is no fort at the ith position indicates there is an enemy fort at the ith position indicates the fort at the ith the position is under your command Now you have decided to move your army from one of your forts at position i to an empty position j such that i j n The army travels over enemy forts only Formally for all k where min i j k max i j forts k While moving the army all the enemy forts that come in the way are captured Return the maximum number of enemy forts that can be captured In case it is impossible to move your army or you do not have any fort under your command return Example Input forts Output Explanation Moving the army from position to position captures enemy forts at and Moving the army from position to position captures enemy forts Since is the maximum number of enemy forts that can be captured we return Example Input forts Output Explanation Since no enemy fort can be captured is returned Constraints forts length forts i
count subarrays with median k You are given an array nums of size n consisting of distinct integers from to n and a positive integer k Return the number of non empty subarrays in nums that have a median equal to k Note The median of an array is the middle element after sorting the array in ascending order If the array is of even length the median is the left middle element For example the median of is and the median of is A subarray is a contiguous part of an array Example Input nums k Output Explanation The subarrays that have a median equal to are and Example Input nums k Output Explanation is the only subarray that has a median equal to Constraints n nums length n nums i k n The integers in nums are distinct
build an array with stack operations You are given an integer array target and an integer n You have an empty stack with the two following operations Push pushes an integer to the top of the stack Pop removes the integer on the top of the stack You also have a stream of the integers in the range n Use the two stack operations to make the numbers in the stack from the bottom to the top equal to target You should follow the following rules If the stream of the integers is not empty pick the next integer from the stream and push it to the top of the stack If the stack is not empty pop the integer at the top of the stack If at any moment the elements in the stack from the bottom to the top are equal to target do not read new integers from the stream and do not do more operations on the stack Return the stack operations needed to build target following the mentioned rules If there are multiple valid answers return any of them Example Input target n Output Push Push Pop Push Explanation Initially the stack s is empty The last element is the top of the stack Read from the stream and push it to the stack s Read from the stream and push it to the stack s Pop the integer on the top of the stack s Read from the stream and push it to the stack s Example Input target n Output Push Push Push Explanation Initially the stack s is empty The last element is the top of the stack Read from the stream and push it to the stack s Read from the stream and push it to the stack s Read from the stream and push it to the stack s Example Input target n Output Push Push Explanation Initially the stack s is empty The last element is the top of the stack Read from the stream and push it to the stack s Read from the stream and push it to the stack s Since the stack from the bottom to the top is equal to target we stop the stack operations The answers that read integer from the stream are not accepted Constraints target length n target i n target is strictly increasing
smallest missing genetic value in each subtree There is a family tree rooted at consisting of n nodes numbered to n You are given a indexed integer array parents where parents i is the parent for node i Since node is the root parents There are genetic values each represented by an integer in the inclusive range You are given a indexed integer array nums where nums i is a distinct genetic value for node i Return an array ans of length n where ans i is the smallest genetic value that is missing from the subtree rooted at node i The subtree rooted at a node x contains node x and all of its descendant nodes Example Input parents nums Output Explanation The answer for each subtree is calculated as follows The subtree contains nodes with values is the smallest missing value The subtree contains only node with value is the smallest missing value The subtree contains nodes with values is the smallest missing value The subtree contains only node with value is the smallest missing value Example Input parents nums Output Explanation The answer for each subtree is calculated as follows The subtree contains nodes with values is the smallest missing value The subtree contains nodes with values is the smallest missing value The subtree contains only node with value is the smallest missing value The subtree contains nodes with values is the smallest missing value The subtree contains only node with value is the smallest missing value The subtree contains only node with value is the smallest missing value Example Input parents nums Output Explanation The value is missing from all the subtrees Constraints n parents length nums length n parents i n for i parents parents represents a valid tree nums i Each nums i is distinct
search suggestions system You are given an array of strings products and a string searchWord Design a system that suggests at most three product names from products after each character of searchWord is typed Suggested products should have common prefix with searchWord If there are more than three products with a common prefix return the three lexicographically minimums products Return a list of lists of the suggested products after each character of searchWord is typed Example Input products mobile mouse moneypot monitor mousepad searchWord mouse Output mobile moneypot monitor mobile moneypot monitor mouse mousepad mouse mousepad mouse mousepad Explanation products sorted lexicographically mobile moneypot monitor mouse mousepad After typing m and mo all products match and we show user mobile moneypot monitor After typing mou mous and mouse the system suggests mouse mousepad Example Input products havana searchWord havana Output havana havana havana havana havana havana Explanation The only word havana will be always suggested while typing the search word Constraints products length products i length sum products i length All the strings of products are unique products i consists of lowercase English letters searchWord length searchWord consists of lowercase English letters
prime in diagonal You are given a indexed two dimensional integer array nums Return the largest prime number that lies on at least one of the diagonals of nums In case no prime is present on any of the diagonals return Note that An integer is prime if it is greater than and has no positive integer divisors other than and itself An integer val is on one of the diagonals of nums if there exists an integer i for which nums i i val or an i for which nums i nums length i val In the above diagram one diagonal is and another diagonal is Example Input nums Output Explanation The numbers and are the only numbers present on at least one of the diagonals Since is the largest prime we return Example Input nums Output Explanation The numbers and are all present on at least one of the diagonals is the largest prime so we return Constraints nums length nums length numsi length nums i j
maximum number of tasks you can assign You have n tasks and m workers Each task has a strength requirement stored in a indexed integer array tasks with the ith task requiring tasks i strength to complete The strength of each worker is stored in a indexed integer array workers with the jth worker having workers j strength Each worker can only be assigned to a single task and must have a strength greater than or equal to the task s strength requirement i e workers j tasks i Additionally you have pills magical pills that will increase a worker s strength by strength You can decide which workers receive the magical pills however you may only give each worker at most one magical pill Given the indexed integer arrays tasks and workers and the integers pills and strength return the maximum number of tasks that can be completed Example Input tasks workers pills strength Output Explanation We can assign the magical pill and tasks as follows Give the magical pill to worker Assign worker to task Assign worker to task Assign worker to task Example Input tasks workers pills strength Output Explanation We can assign the magical pill and tasks as follows Give the magical pill to worker Assign worker to task Example Input tasks workers pills strength Output Explanation We can assign the magical pills and tasks as follows Give the magical pill to worker and worker Assign worker to task Assign worker to task The last pill is not given because it will not make any worker strong enough for the last task Constraints n tasks length m workers length n m pills m tasks i workers j strength
rotting oranges You are given an m x n grid where each cell can have one of three values representing an empty cell representing a fresh orange or representing a rotten orange Every minute any fresh orange that is directionally adjacent to a rotten orange becomes rotten Return the minimum number of minutes that must elapse until no cell has a fresh orange If this is impossible return Example Input grid Output Example Input grid Output Explanation The orange in the bottom left corner row column is never rotten because rotting only happens directionally Example Input grid Output Explanation Since there are already no fresh oranges at minute the answer is just Constraints m grid length n grid i length m n grid i j is or
house robber iv There are several consecutive houses along a street each of which has some money inside There is also a robber who wants to steal money from the homes but he refuses to steal from adjacent homes The capability of the robber is the maximum amount of money he steals from one house of all the houses he robbed You are given an integer array nums representing how much money is stashed in each house More formally the ith house from the left has nums i dollars You are also given an integer k representing the minimum number of houses the robber will steal from It is always possible to steal at least k houses Return the minimum capability of the robber out of all the possible ways to steal at least k houses Example Input nums k Output Explanation There are three ways to rob at least houses Rob the houses at indices and Capability is max nums nums Rob the houses at indices and Capability is max nums nums Rob the houses at indices and Capability is max nums nums Therefore we return min Example Input nums k Output Explanation There are ways to rob the houses The way which leads to minimum capability is to rob the house at index and Return max nums nums Constraints nums length nums i k nums length
maximum value of k coins from piles There are n piles of coins on a table Each pile consists of a positive number of coins of assorted denominations In one move you can choose any coin on top of any pile remove it and add it to your wallet Given a list piles where piles i is a list of integers denoting the composition of the ith pile from top to bottom and a positive integer k return the maximum total value of coins you can have in your wallet if you choose exactly k coins optimally Example Input piles k Output Explanation The above diagram shows the different ways we can choose k coins The maximum total we can obtain is Example Input piles k Output Explanation The maximum total can be obtained if we choose all coins from the last pile Constraints n piles length n piles i j k sum piles i length
sum of even numbers after queries You are given an integer array nums and an array queries where queries i vali indexi For each query i first apply nums indexi nums indexi vali then print the sum of the even values of nums Return an integer array answer where answer i is the answer to the ith query Example Input nums queries Output Explanation At the beginning the array is After adding to nums the array is and the sum of even values is After adding to nums the array is and the sum of even values is After adding to nums the array is and the sum of even values is After adding to nums the array is and the sum of even values is Example Input nums queries Output Constraints nums length nums i queries length vali indexi nums length
zigzag conversion The string PAYPALISHIRING is written in a zigzag pattern on a given number of rows like this you may want to display this pattern in a fixed font for better legibility P A H N A P L S I I G Y I R And then read line by line PAHNAPLSIIGYIR Write the code that will take a string and make this conversion given a number of rows string convert string s int numRows Example Input s PAYPALISHIRING numRows Output PAHNAPLSIIGYIR Example Input s PAYPALISHIRING numRows Output PINALSIGYAHRPI Explanation P I N A L S I G Y A H R P I Example Input s A numRows Output A Constraints s length s consists of English letters lower case and upper case and numRows
24 game You are given an integer array cards of length You have four cards each containing a number in the range You should arrange the numbers on these cards in a mathematical expression using the operators and the parentheses and to get the value You are restricted with the following rules The division operator represents real division not integer division For example Every operation done is between two numbers In particular we cannot use as a unary operator For example if cards the expression is not allowed You cannot concatenate numbers together For example if cards the expression is not valid Return true if you can get such expression that evaluates to and false otherwise Example Input cards Output true Explanation Example Input cards Output false Constraints cards length cards i
monotonic array An array is monotonic if it is either monotone increasing or monotone decreasing An array nums is monotone increasing if for all i j nums i nums j An array nums is monotone decreasing if for all i j nums i nums j Given an integer array nums return true if the given array is monotonic or false otherwise Example Input nums Output true Example Input nums Output true Example Input nums Output false Constraints nums length nums i
product of array except self Given an integer array nums return an array answer such that answer i is equal to the product of all the elements of nums except nums i The product of any prefix or suffix of nums is guaranteed to fit in a bit integer You must write an algorithm that runs in O n time and without using the division operation Example Input nums Output Example Input nums Output Constraints nums length nums i The product of any prefix or suffix of nums is guaranteed to fit in a bit integer Follow up Can you solve the problem in O extra space complexity The output array does not count as extra space for space complexity analysis
remove all occurrences of a substring Given two strings s and part perform the following operation on s until all occurrences of the substring part are removed Find the leftmost occurrence of the substring part and remove it from s Return s after removing all occurrences of part A substring is a contiguous sequence of characters in a string Example Input s daabcbaabcbc part abc Output dab Explanation The following operations are done s daabcbaabcbc remove abc starting at index so s dabaabcbc s dabaabcbc remove abc starting at index so s dababc s dababc remove abc starting at index so s dab Now s has no occurrences of abc Example Input s axxxxyyyyb part xy Output ab Explanation The following operations are done s axxxxyyyyb remove xy starting at index so s axxxyyyb s axxxyyyb remove xy starting at index so s axxyyb s axxyyb remove xy starting at index so s axyb s axyb remove xy starting at index so s ab Now s has no occurrences of xy Constraints s length part length s and part consists of lowercase English letters
sum of distances in tree There is an undirected connected tree with n nodes labeled from to n and n edges You are given the integer n and the array edges where edges i ai bi indicates that there is an edge between nodes ai and bi in the tree Return an array answer of length n where answer i is the sum of the distances between the ith node in the tree and all other nodes Example Input n edges Output Explanation The tree is shown above We can see that dist dist dist dist dist equals Hence answer and so on Example Input n edges Output Example Input n edges Output Constraints n edges length n edges i length ai bi n ai bi The given input represents a valid tree
delete greatest value in each row You are given an m x n matrix grid consisting of positive integers Perform the following operation until grid becomes empty Delete the element with the greatest value from each row If multiple such elements exist delete any of them Add the maximum of deleted elements to the answer Note that the number of columns decreases by one after each operation Return the answer after performing the operations described above Example Input grid Output Explanation The diagram above shows the removed values in each step In the first operation we remove from the first row and from the second row notice that there are two cells with value and we can remove any of them We add to the answer In the second operation we remove from the first row and from the second row We add to the answer In the third operation we remove from the first row and from the second row We add to the answer The final answer Example Input grid Output Explanation The diagram above shows the removed values in each step In the first operation we remove from the first row We add to the answer The final answer Constraints m grid length n grid i length m n grid i j
merge two sorted lists You are given the heads of two sorted linked lists and Merge the two lists in a one sorted list The list should be made by splicing together the nodes of the first two lists Return the head of the merged linked list Example Input Output Example Input Output Example Input Output Constraints The number of nodes in both lists is in the range Node val Both and are sorted in non decreasing order
n-repeated element in size 2n array You are given an integer array nums with the following properties nums length n nums contains n unique elements Exactly one element of nums is repeated n times Return the element that is repeated n times Example Input nums Output Example Input nums Output Example Input nums Output Constraints n nums length n nums i nums contains n unique elements and one of them is repeated exactly n times
find eventual safe states There is a directed graph of n nodes with each node labeled from to n The graph is represented by a indexed integer array graph where graph i is an integer array of nodes adjacent to node i meaning there is an edge from node i to each node in graph i A node is a terminal node if there are no outgoing edges A node is a safe node if every possible path starting from that node leads to a terminal node or another safe node Return an array containing all the safe nodes of the graph The answer should be sorted in ascending order Example Input graph Output Explanation The given graph is shown above Nodes and are terminal nodes as there are no outgoing edges from either of them Every path starting at nodes and all lead to either node or Example Input graph Output Explanation Only node is a terminal node and every path starting at node leads to node Constraints n graph length n graph i length n graph i j n graph i is sorted in a strictly increasing order The graph may contain self loops The number of edges in the graph will be in the range
number of common factors Given two positive integers a and b return the number of common factors of a and b An integer x is a common factor of a and b if x divides both a and b Example Input a b Output Explanation The common factors of and are Example Input a b Output Explanation The common factors of and are Constraints a b
set matrix zeroes Given an m x n integer matrix matrix if an element is set its entire row and column to s You must do it in place Example Input matrix Output Example Input matrix Output Constraints m matrix length n matrix length m n matrix i j Follow up A straightforward solution using O mn space is probably a bad idea A simple improvement uses O m n space but still not the best solution Could you devise a constant space solution
find all good strings Given the strings and of size n and the string evil return the number of good strings A good string has size n it is alphabetically greater than or equal to it is alphabetically smaller than or equal to and it does not contain the string evil as a substring Since the answer can be a huge number return this modulo Example Input n aa da evil b Output Explanation There are good strings starting with a aa ac ad az Then there are good strings starting with c ca cc cd cz and finally there is one good string starting with d da Example Input n leetcode leetgoes evil leet Output Explanation All strings greater than or equal to and smaller than or equal to start with the prefix leet therefore there is not any good string Example Input n gx gz evil x Output Constraints length n length n n evil length All strings consist of lowercase English letters
minimum cost to make at least one valid path in a grid Given an m x n grid Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell The sign of grid i j can be which means go to the cell to the right i e go from grid i j to grid i j which means go to the cell to the left i e go from grid i j to grid i j which means go to the lower cell i e go from grid i j to grid i j which means go to the upper cell i e go from grid i j to grid i j Notice that there could be some signs on the cells of the grid that point outside the grid You will initially start at the upper left cell A valid path in the grid is a path that starts from the upper left cell and ends at the bottom right cell m n following the signs on the grid The valid path does not have to be the shortest You can modify the sign on a cell with cost You can modify the sign on a cell one time only Return the minimum cost to make the grid have at least one valid path Example Input grid Output Explanation You will start at point The path to is as follows change the arrow to down with cost change the arrow to down with cost change the arrow to down with cost The total cost Example Input grid Output Explanation You can follow the path from to Example Input grid Output Constraints m grid length n grid i length m n grid i j
investments in 2016 SQL Schema Table Insurance Column Name Type pid int float float lat float lon float pid is the primary key column for this table Each row of this table contains information about one policy where pid is the policyholder s policy ID is the total investment value in and is the total investment value in lat is the latitude of the policy holder s city It s guaranteed that lat is not NULL lon is the longitude of the policy holder s city It s guaranteed that lon is not NULL Write an SQL query to report the sum of all total investment values in for all policyholders who have the same value as one or more other policyholders and are not located in the same city like any other policyholder i e the lat lon attribute pairs must be unique Round to two decimal places The query result format is in the following example Example Input Insurance table pid lat lon Output Explanation The first record in the table like the last record meets both of the two criteria The value is the same as the third and fourth records and its location is unique The second record does not meet any of the two criteria Its is not like any other policyholders and its location is the same as the third record which makes the third record fail too So the result is the sum of of the first and last record which is
make costs of paths equal in a binary tree You are given an integer n representing the number of nodes in a perfect binary tree consisting of nodes numbered from to n The root of the tree is node and each node i in the tree has two children where the left child is the node i and the right child is i Each node in the tree also has a cost represented by a given indexed integer array cost of size n where cost i is the cost of node i You are allowed to increment the cost of any node by any number of times Return the minimum number of increments you need to make the cost of paths from the root to each leaf node equal Note A perfect binary tree is a tree where each node except the leaf nodes has exactly children The cost of a path is the sum of costs of nodes in the path Example Input n cost Output Explanation We can do the following increments Increase the cost of node one time Increase the cost of node three times Increase the cost of node two times Each path from the root to a leaf will have a total cost of The total increments we did is It can be shown that this is the minimum answer we can achieve Example Input n cost Output Explanation The two paths already have equal total costs so no increments are needed Constraints n n is a power of cost length n cost i
count anagrams You are given a string s containing one or more words Every consecutive pair of words is separated by a single space A string t is an anagram of string s if the ith word of t is a permutation of the ith word of s For example acb dfe is an anagram of abc def but def cab and adc bef are not Return the number of distinct anagrams of s Since the answer may be very large return it modulo Example Input s too hot Output Explanation Some of the anagrams of the given string are too hot oot hot oto toh too toh and too oht Example Input s aa Output Explanation There is only one anagram possible for the given string Constraints s length s consists of lowercase English letters and spaces There is single space between consecutive words
rearranging fruits You have two fruit baskets containing n fruits each You are given two indexed integer arrays and representing the cost of fruit in each basket You want to make both baskets equal To do so you can use the following operation as many times as you want Chose two indices i and j and swap the ith fruit of with the jth fruit of The cost of the swap is min i j Two baskets are considered equal if sorting them according to the fruit cost makes them exactly the same baskets Return the minimum cost to make both the baskets equal or if impossible Example Input Output Explanation Swap index of with index of which has cost Now and Rearranging both the arrays makes them equal Example Input Output Explanation It can be shown that it is impossible to make both the baskets equal Constraints length length length i i
percentage of letter in string Given a string s and a character letter return the percentage of characters in s that equal letter rounded down to the nearest whole percent Example Input s foobar letter o Output Explanation The percentage of characters in s that equal the letter o is when rounded down so we return Example Input s jjjj letter k Output Explanation The percentage of characters in s that equal the letter k is so we return Constraints s length s consists of lowercase English letters letter is a lowercase English letter
linked list cycle Given head the head of a linked list determine if the linked list has a cycle in it There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer Internally pos is used to denote the index of the node that tail s next pointer is connected to Note that pos is not passed as a parameter Return true if there is a cycle in the linked list Otherwise return false Example Input head pos Output true Explanation There is a cycle in the linked list where the tail connects to the node indexed Example Input head pos Output true Explanation There is a cycle in the linked list where the tail connects to the node Example Input head pos Output false Explanation There is no cycle in the linked list Constraints The number of the nodes in the list is in the range Node val pos is or a valid index in the linked list Follow up Can you solve it using O i e constant memory
sqrt(x) Given a non negative integer x return the square root of x rounded down to the nearest integer The returned integer should be non negative as well You must not use any built in exponent function or operator For example do not use pow x in c or x in python Example Input x Output Explanation The square root of is so we return Example Input x Output Explanation The square root of is and since we round it down to the nearest integer is returned Constraints x
rotate string Given two strings s and goal return true if and only if s can become goal after some number of shifts on s A shift on s consists of moving the leftmost character of s to the rightmost position For example if s abcde then it will be bcdea after one shift Example Input s abcde goal cdeab Output true Example Input s abcde goal abced Output false Constraints s length goal length s and goal consist of lowercase English letters
find the losers of the circular game There are n friends that are playing a game The friends are sitting in a circle and are numbered from to n in clockwise order More formally moving clockwise from the ith friend brings you to the i th friend for i n and moving clockwise from the nth friend brings you to the friend The rules of the game are as follows friend receives the ball After that friend passes it to the friend who is k steps away from them in the clockwise direction After that the friend who receives the ball should pass it to the friend who is k steps away from them in the clockwise direction After that the friend who receives the ball should pass it to the friend who is k steps away from them in the clockwise direction and so on and so forth In other words on the ith turn the friend holding the ball should pass it to the friend who is i k steps away from them in the clockwise direction The game is finished when some friend receives the ball for the second time The losers of the game are friends who did not receive the ball in the entire game Given the number of friends n and an integer k return the array answer which contains the losers of the game in the ascending order Example Input n k Output Explanation The game goes as follows Start at friend and pass the ball to the friend who is steps away from them friend friend passes the ball to the friend who is steps away from them friend friend passes the ball to the friend who is steps away from them friend The game ends as friend receives the ball for the second time Example Input n k Output Explanation The game goes as follows Start at the friend and pass the ball to the friend who is steps away from them friend The game ends as friend receives the ball for the second time Constraints k n
3sum Given an integer array nums return all the triplets nums i nums j nums k such that i j i k and j k and nums i nums j nums k Notice that the solution set must not contain duplicate triplets Example Input nums Output Explanation nums nums nums nums nums nums nums nums nums The distinct triplets are and Notice that the order of the output and the order of the triplets does not matter Example Input nums Output Explanation The only possible triplet does not sum up to Example Input nums Output Explanation The only possible triplet sums up to Constraints nums length nums i
longest subarray of 1's after deleting one element Given a binary array nums you should delete one element from it Return the size of the longest non empty subarray containing only s in the resulting array Return if there is no such subarray Example Input nums Output Explanation After deleting the number in position contains numbers with value of s Example Input nums Output Explanation After deleting the number in position longest subarray with value of s is Example Input nums Output Explanation You must delete one element Constraints nums length nums i is either or
rearrange characters to make target string You are given two indexed strings s and target You can take some letters from s and rearrange them to form new strings Return the maximum number of copies of target that can be formed by taking letters from s and rearranging them Example Input s ilovecodingonleetcode target code Output Explanation For the first copy of code take the letters at indices and For the second copy of code take the letters at indices and The strings that are formed are ecod and code which can both be rearranged into code We can make at most two copies of code so we return Example Input s abcba target abc Output Explanation We can make one copy of abc by taking the letters at indices and We can make at most one copy of abc so we return Note that while there is an extra a and b at indices and we cannot reuse the letter c at index so we cannot make a second copy of abc Example Input s abbaccaddaeea target aaaaa Output Explanation We can make one copy of aaaaa by taking the letters at indices and We can make at most one copy of aaaaa so we return Constraints s length target length s and target consist of lowercase English letters
minimum time to type word using special typewriter There is a special typewriter with lowercase English letters a to z arranged in a circle with a pointer A character can only be typed if the pointer is pointing to that character The pointer is initially pointing to the character a Each second you may perform one of the following operations Move the pointer one character counterclockwise or clockwise Type the character the pointer is currently on Given a string word return the minimum number of seconds to type out the characters in word Example Input word abc Output Explanation The characters are printed as follows Type the character a in second since the pointer is initially on a Move the pointer clockwise to b in second Type the character b in second Move the pointer clockwise to c in second Type the character c in second Example Input word bza Output Explanation The characters are printed as follows Move the pointer clockwise to b in second Type the character b in second Move the pointer counterclockwise to z in seconds Type the character z in second Move the pointer clockwise to a in second Type the character a in second Example Input word zjpc Output Explanation The characters are printed as follows Move the pointer counterclockwise to z in second Type the character z in second Move the pointer clockwise to j in seconds Type the character j in second Move the pointer clockwise to p in seconds Type the character p in second Move the pointer counterclockwise to c in seconds Type the character c in second Constraints word length word consists of lowercase English letters
incremental memory leak You are given two integers and representing the available memory in bits on two memory sticks There is currently a faulty program running that consumes an increasing amount of memory every second At the ith second starting from i bits of memory are allocated to the stick with more available memory or from the first memory stick if both have the same available memory If neither stick has at least i bits of available memory the program crashes Return an array containing crashTime where crashTime is the time in seconds when the program crashed and and are the available bits of memory in the first and second sticks respectively Example Input Output Explanation The memory is allocated as follows At the second bit of memory is allocated to stick The first stick now has bit of available memory At the second bits of memory are allocated to stick The second stick now has bits of available memory At the second the program crashes The sticks have and bits available respectively Example Input Output Explanation The memory is allocated as follows At the second bit of memory is allocated to stick The second stick now has bit of available memory At the second bits of memory are allocated to stick The second stick now has bits of available memory At the second bits of memory are allocated to stick The first stick now has bits of available memory At the second bits of memory are allocated to stick The second stick now has bits of available memory At the second bits of memory are allocated to stick The first stick now has bits of available memory At the second the program crashes The sticks have and bits available respectively Constraints
minimum interval to include each query You are given a integer array intervals where intervals i lefti righti describes the ith interval starting at lefti and ending at righti inclusive The size of an interval is defined as the number of integers it contains or more formally righti lefti You are also given an integer array queries The answer to the jth query is the size of the smallest interval i such that lefti queries j righti If no such interval exists the answer is Return an array containing the answers to the queries Example Input intervals queries Output Explanation The queries are processed as follows Query The interval is the smallest interval containing The answer is Query The interval is the smallest interval containing The answer is Query The interval is the smallest interval containing The answer is Query The interval is the smallest interval containing The answer is Example Input intervals queries Output Explanation The queries are processed as follows Query The interval is the smallest interval containing The answer is Query None of the intervals contain The answer is Query The interval is the smallest interval containing The answer is Query The interval is the smallest interval containing The answer is Constraints intervals length queries length intervals i length lefti righti queries j
make two arrays equal by reversing subarrays You are given two integer arrays of equal length target and arr In one step you can select any non empty subarray of arr and reverse it You are allowed to make any number of steps Return true if you can make arr equal to target or false otherwise Example Input target arr Output true Explanation You can follow the next steps to convert arr to target Reverse subarray arr becomes Reverse subarray arr becomes Reverse subarray arr becomes There are multiple ways to convert arr to target this is not the only way to do so Example Input target arr Output true Explanation arr is equal to target without any reverses Example Input target arr Output false Explanation arr does not have value and it can never be converted to target Constraints target length arr length target length target i arr i
minimum score triangulation of polygon You have a convex n sided polygon where each vertex has an integer value You are given an integer array values where values i is the value of the ith vertex i e clockwise order You will triangulate the polygon into n triangles For each triangle the value of that triangle is the product of the values of its vertices and the total score of the triangulation is the sum of these values over all n triangles in the triangulation Return the smallest possible total score that you can achieve with some triangulation of the polygon Example Input values Output Explanation The polygon is already triangulated and the score of the only triangle is Example Input values Output Explanation There are two triangulations with possible scores or The minimum score is Example Input values Output Explanation The minimum score triangulation has score Constraints n values length n values i
minimum swaps to make sequences increasing You are given two integer arrays of the same length and In one operation you are allowed to swap i with i For example if and you can swap the element at i to obtain and Return the minimum number of needed operations to make and strictly increasing The test cases are generated so that the given input always makes it possible An array arr is strictly increasing if and only if arr arr arr arr arr length Example Input Output Explanation Swap and Then the sequences are and which are both strictly increasing Example Input Output Constraints length length length i i
sort characters by frequency Given a string s sort it in decreasing order based on the frequency of the characters The frequency of a character is the number of times it appears in the string Return the sorted string If there are multiple answers return any of them Example Input s tree Output eert Explanation e appears twice while r and t both appear once So e must appear before both r and t Therefore eetr is also a valid answer Example Input s cccaaa Output aaaccc Explanation Both c and a appear three times so both cccaaa and aaaccc are valid answers Note that cacaca is incorrect as the same characters must be together Example Input s Aabb Output bbAa Explanation bbaA is also a valid answer but Aabb is incorrect Note that A and a are treated as two different characters Constraints s length s consists of uppercase and lowercase English letters and digits
maximum nesting depth of two valid parentheses strings A string is a valid parentheses string denoted VPS if and only if it consists of and characters only and It is the empty string or It can be written as AB A concatenated with B where A and B are VPS s or It can be written as A where A is a VPS We can similarly define the nesting depth depth S of any VPS S as follows depth depth A B max depth A depth B where A and B are VPS s depth A depth A where A is a VPS For example and are VPS s with nesting depths and and and are not VPS s Given a VPS seq split it into two disjoint subsequences A and B such that A and B are VPS s and A length B length seq length Now choose any such A and B such that max depth A depth B is the minimum possible value Return an answer array of length seq length that encodes such a choice of A and B answer i if seq i is part of A else answer i Note that even though multiple answers may exist you may return any of them Example Input seq Output Example Input seq Output Constraints seq size
rearrange spaces between words You are given a string text of words that are placed among some number of spaces Each word consists of one or more lowercase English letters and are separated by at least one space It s guaranteed that text contains at least one word Rearrange the spaces so that there is an equal number of spaces between every pair of adjacent words and that number is maximized If you cannot redistribute all the spaces equally place the extra spaces at the end meaning the returned string should be the same length as text Return the string after rearranging the spaces Example Input text this is a sentence Output this is a sentence Explanation There are a total of spaces and words We can evenly divide the spaces between the words spaces Example Input text practice makes perfect Output practice makes perfect Explanation There are a total of spaces and words spaces plus extra space We place this extra space at the end of the string Constraints text length text consists of lowercase English letters and text contains at least one word
longest common subpath There is a country of n cities numbered from to n In this country there is a road connecting every pair of cities There are m friends numbered from to m who are traveling through the country Each one of them will take a path consisting of some cities Each path is represented by an integer array that contains the visited cities in order The path may contain a city more than once but the same city will not be listed consecutively Given an integer n and a integer array paths where paths i is an integer array representing the path of the ith friend return the length of the longest common subpath that is shared by every friend s path or if there is no common subpath at all A subpath of a path is a contiguous sequence of cities within that path Example Input n paths Output Explanation The longest common subpath is Example Input n paths Output Explanation There is no common subpath shared by the three paths Example Input n paths Output Explanation The possible longest common subpaths are and All have a length of Constraints n m paths length m sum paths i length paths i j n The same city is not listed multiple times consecutively in paths i
number of 1 bits Write a function that takes the binary representation of an unsigned integer and returns the number of bits it has also known as the Hamming weight Note Note that in some languages such as Java there is no unsigned integer type In this case the input will be given as a signed integer type It should not affect your implementation as the integer s internal binary representation is the same whether it is signed or unsigned In Java the compiler represents the signed integers using s complement notation Therefore in Example the input represents the signed integer Example Input n Output Explanation The input binary string has a total of three bits Example Input n Output Explanation The input binary string has a total of one bit Example Input n Output Explanation The input binary string has a total of thirty one bits Constraints The input must be a binary string of length Follow up If this function is called many times how would you optimize it
divide nodes into the maximum number of groups You are given a positive integer n representing the number of nodes in an undirected graph The nodes are labeled from to n You are also given a integer array edges where edges i ai bi indicates that there is a bidirectional edge between nodes ai and bi Notice that the given graph may be disconnected Divide the nodes of the graph into m groups indexed such that Each node in the graph belongs to exactly one group For every pair of nodes in the graph that are connected by an edge ai bi if ai belongs to the group with index x and bi belongs to the group with index y then y x Return the maximum number of groups i e maximum m into which you can divide the nodes Return if it is impossible to group the nodes with the given conditions Example Input n edges Output Explanation As shown in the image we Add node to the first group Add node to the second group Add nodes and to the third group Add nodes and to the fourth group We can see that every edge is satisfied It can be shown that that if we create a fifth group and move any node from the third or fourth group to it at least on of the edges will not be satisfied Example Input n edges Output Explanation If we add node to the first group node to the second group and node to the third group to satisfy the first two edges we can see that the third edge will not be satisfied It can be shown that no grouping is possible Constraints n edges length edges i length ai bi n ai bi There is at most one edge between any pair of vertices
reachable nodes in subdivided graph You are given an undirected graph the original graph with n nodes labeled from to n You decide to subdivide each edge in the graph into a chain of nodes with the number of new nodes varying between each edge The graph is given as a array of edges where edges i ui vi cnti indicates that there is an edge between nodes ui and vi in the original graph and cnti is the total number of new nodes that you will subdivide the edge into Note that cnti means you will not subdivide the edge To subdivide the edge ui vi replace it with cnti new edges and cnti new nodes The new nodes are xcnti and the new edges are ui xcnti xcnti xcnti vi In this new graph you want to know how many nodes are reachable from the node where a node is reachable if the distance is maxMoves or less Given the original graph and maxMoves return the number of nodes that are reachable from node in the new graph Example Input edges maxMoves n Output Explanation The edge subdivisions are shown in the image above The nodes that are reachable are highlighted in yellow Example Input edges maxMoves n Output Example Input edges maxMoves n Output Explanation Node is disconnected from the rest of the graph so only node is reachable Constraints edges length min n n edges i length ui vi n There are no multiple edges in the graph cnti maxMoves n
delete duplicate emails SQL Schema Table Person Column Name Type id int email varchar id is the primary key column for this table Each row of this table contains an email The emails will not contain uppercase letters Write an SQL query to delete all the duplicate emails keeping only one unique email with the smallest id Note that you are supposed to write a DELETE statement and not a SELECT one After running your script the answer shown is the Person table The driver will first compile and run your piece of code and then show the Person table The final order of the Person table does not matter The query result format is in the following example Example Input Person table id email john example com bob example com john example com Output id email john example com bob example com Explanation john example com is repeated two times We keep the row with the smallest Id
get watched videos by your friends There are n people each person has a unique id between and n Given the arrays watchedVideos and friends where watchedVideos i and friends i contain the list of watched videos and the list of friends respectively for the person with id i Level of videos are all watched videos by your friends level of videos are all watched videos by the friends of your friends and so on In general the level k of videos are all watched videos by people with the shortest path exactly equal to k with you Given your id and the level of videos return the list of videos ordered by their frequencies increasing For videos with the same frequency order them alphabetically from least to greatest Example Input watchedVideos A B C B C D friends id level Output B C Explanation You have id green color in the figure and your friends are yellow color in the figure Person with id watchedVideos C Person with id watchedVideos B C The frequencies of watchedVideos by your friends are B C Example Input watchedVideos A B C B C D friends id level Output D Explanation You have id green color in the figure and the only friend of your friends is the person with id yellow color in the figure Constraints n watchedVideos length friends length n watchedVideos i length watchedVideos i j length friends i length n friends i j n id n level n if friends i contains j then friends j contains i
mean of array after removing some elements Given an integer array arr return the mean of the remaining integers after removing the smallest and the largest of the elements Answers within of the actual answer will be considered accepted Example Input arr Output Explanation After erasing the minimum and the maximum values of this array all elements are equal to so the mean is Example Input arr Output Example Input arr Output Constraints arr length arr length is a multiple of arr i
count total number of colored cells There exists an infinitely large two dimensional grid of uncolored unit cells You are given a positive integer n indicating that you must do the following routine for n minutes At the first minute color any arbitrary unit cell blue Every minute thereafter color blue every uncolored cell that touches a blue cell Below is a pictorial representation of the state of the grid after minutes and Return the number of colored cells at the end of n minutes Example Input n Output Explanation After minute there is only blue cell so we return Example Input n Output Explanation After minutes there are colored cells on the boundary and in the center so we return Constraints n
curry Given a function fn return a curried version of that function A curried function is a function that accepts fewer or an equal number of parameters as the original function and returns either another curried function or the same value the original function would have returned In practical terms if you called the original function like sum you would call the curried version like csum csum csum or csum All these methods of calling the curried function should return the same value as the original Example Input fn function sum a b c return a b c inputs Output Explanation The code being executed is const curriedSum curry fn curriedSum curriedSum should return the same value as sum Example Input fn function sum a b c return a b c inputs Output Explanation curriedSum should return the same value as sum Example Input fn function sum a b c return a b c inputs Output Explanation You should be able to pass the parameters in any way including all at once or none at all curriedSum should return the same value as sum Example Input fn function life return inputs Output Explanation currying a function that accepts zero parameters should effectively do nothing curriedLife Constraints inputs length inputs i j fn length inputs flat length fn length function parameters explicitly defined
best time to buy and sell stock ii You are given an integer array prices where prices i is the price of a given stock on the ith day On each day you may decide to buy and or sell the stock You can only hold at most one share of the stock at any time However you can buy it then immediately sell it on the same day Find and return the maximum profit you can achieve Example Input prices Output Explanation Buy on day price and sell on day price profit Then buy on day price and sell on day price profit Total profit is Example Input prices Output Explanation Buy on day price and sell on day price profit Total profit is Example Input prices Output Explanation There is no way to make a positive profit so we never buy the stock to achieve the maximum profit of Constraints prices length prices i
shortest completing word Given a string licensePlate and an array of strings words find the shortest completing word in words A completing word is a word that contains all the letters in licensePlate Ignore numbers and spaces in licensePlate and treat letters as case insensitive If a letter appears more than once in licensePlate then it must appear in the word the same number of times or more For example if licensePlate aBc then it contains letters a b ignoring case and c twice Possible completing words are abccdef caaacab and cbca Return the shortest completing word in words It is guaranteed an answer exists If there are multiple shortest completing words return the first one that occurs in words Example Input licensePlate PSt words step steps stripe stepple Output steps Explanation licensePlate contains letters s p s ignoring case and t step contains t and p but only contains s steps contains t p and both s characters stripe is missing an s stepple is missing an s Since steps is the only word containing all the letters that is the answer Example Input licensePlate words looks pest stew show Output pest Explanation licensePlate only contains the letter s All the words contain s but among these pest stew and show are shortest The answer is pest because it is the word that appears earliest of the Constraints licensePlate length licensePlate contains digits letters uppercase or lowercase or space words length words i length words i consists of lower case English letters
determine if string halves are alike You are given a string s of even length Split this string into two halves of equal lengths and let a be the first half and b be the second half Two strings are alike if they have the same number of vowels a e i o u A E I O U Notice that s contains uppercase and lowercase letters Return true if a and b are alike Otherwise return false Example Input s book Output true Explanation a bo and b ok a has vowel and b has vowel Therefore they are alike Example Input s textbook Output false Explanation a text and b book a has vowel whereas b has Therefore they are not alike Notice that the vowel o is counted twice Constraints s length s length is even s consists of uppercase and lowercase letters
minimum degree of a connected trio in a graph You are given an undirected graph You are given an integer n which is the number of nodes in the graph and an array edges where each edges i ui vi indicates that there is an undirected edge between ui and vi A connected trio is a set of three nodes where there is an edge between every pair of them The degree of a connected trio is the number of edges where one endpoint is in the trio and the other is not Return the minimum degree of a connected trio in the graph or if the graph has no connected trios Example Input n edges Output Explanation There is exactly one trio which is The edges that form its degree are bolded in the figure above Example Input n edges Output Explanation There are exactly three trios with degree with degree with degree Constraints n edges i length edges length n n ui vi n ui vi There are no repeated edges
remove duplicates from sorted array ii Given an integer array nums sorted in non decreasing order remove some duplicates in place such that each unique element appears at most twice The relative order of the elements should be kept the same Since it is impossible to change the length of the array in some languages you must instead have the result be placed in the first part of the array nums More formally if there are k elements after removing the duplicates then the first k elements of nums should hold the final result It does not matter what you leave beyond the first k elements Return k after placing the final result in the first k slots of nums Do not allocate extra space for another array You must do this by modifying the input array in place with O extra memory Custom Judge The judge will test your solution with the following code int nums Input array int expectedNums The expected answer with correct length int k removeDuplicates nums Calls your implementation assert k expectedNums length for int i i k i assert nums i expectedNums i If all assertions pass then your solution will be accepted Example Input nums Output nums Explanation Your function should return k with the first five elements of nums being and respectively It does not matter what you leave beyond the returned k hence they are underscores Example Input nums Output nums Explanation Your function should return k with the first seven elements of nums being and respectively It does not matter what you leave beyond the returned k hence they are underscores Constraints nums length nums i nums is sorted in non decreasing order
factorial trailing zeroes Given an integer n return the number of trailing zeroes in n Note that n n n n Example Input n Output Explanation no trailing zero Example Input n Output Explanation one trailing zero Example Input n Output Constraints n Follow up Could you write a solution that works in logarithmic time complexity
maximal square Given an m x n binary matrix filled with s and s find the largest square containing only s and return its area Example Input matrix Output Example Input matrix Output Example Input matrix Output Constraints m matrix length n matrix i length m n matrix i j is or
product of the last k numbers Design an algorithm that accepts a stream of integers and retrieves the product of the last k integers of the stream Implement the ProductOfNumbers class ProductOfNumbers Initializes the object with an empty stream void add int num Appends the integer num to the stream int getProduct int k Returns the product of the last k numbers in the current list You can assume that always the current list has at least k numbers The test cases are generated so that at any time the product of any contiguous sequence of numbers will fit into a single bit integer without overflowing Example Input ProductOfNumbers add add add add add getProduct getProduct getProduct add getProduct Output null null null null null null null Explanation ProductOfNumbers productOfNumbers new ProductOfNumbers productOfNumbers add productOfNumbers add productOfNumbers add productOfNumbers add productOfNumbers add productOfNumbers getProduct return The product of the last numbers is productOfNumbers getProduct return The product of the last numbers is productOfNumbers getProduct return The product of the last numbers is productOfNumbers add productOfNumbers getProduct return The product of the last numbers is Constraints num k At most calls will be made to add and getProduct The product of the stream at any point in time will fit in a bit integer
concatenated words Given an array of strings words without duplicates return all the concatenated words in the given list of words A concatenated word is defined as a string that is comprised entirely of at least two shorter words not necesssarily distinct in the given array Example Input words cat cats catsdogcats dog dogcatsdog hippopotamuses rat ratcatdogcat Output catsdogcats dogcatsdog ratcatdogcat Explanation catsdogcats can be concatenated by cats dog and cats dogcatsdog can be concatenated by dog cats and dog ratcatdogcat can be concatenated by rat cat dog and cat Example Input words cat dog catdog Output catdog Constraints words length words i length words i consists of only lowercase English letters All the strings of words are unique sum words i length
regions cut by slashes An n x n grid is composed of x squares where each x square consists of a or blank space These characters divide the square into contiguous regions Given the grid grid represented as a string array return the number of regions Note that backslash characters are escaped so a is represented as Example Input grid Output Example Input grid Output Example Input grid Output Explanation Recall that because characters are escaped refers to and refers to Constraints n grid length grid i length n grid i j is either or
make sum divisible by p Given an array of positive integers nums remove the smallest subarray possibly empty such that the sum of the remaining elements is divisible by p It is not allowed to remove the whole array Return the length of the smallest subarray that you need to remove or if it s impossible A subarray is defined as a contiguous block of elements in the array Example Input nums p Output Explanation The sum of the elements in nums is which is not divisible by We can remove the subarray and the sum of the remaining elements is which is divisible by Example Input nums p Output Explanation We cannot remove a single element to get a sum divisible by The best way is to remove the subarray leaving us with with sum Example Input nums p Output Explanation Here the sum is which is already divisible by Thus we do not need to remove anything Constraints nums length nums i p
minimum adjacent swaps to reach the kth smallest number You are given a string num representing a large integer and an integer k We call some integer wonderful if it is a permutation of the digits in num and is greater in value than num There can be many wonderful integers However we only care about the smallest valued ones For example when num The smallest wonderful integer is The smallest wonderful integer is The smallest wonderful integer is The smallest wonderful integer is Return the minimum number of adjacent digit swaps that needs to be applied to num to reach the kth smallest wonderful integer The tests are generated in such a way that kth smallest wonderful integer exists Example Input num k Output Explanation The smallest wonderful number is To get this number Swap index with index Swap index with index Example Input num k Output Explanation The smallest wonderful number is To get this number Swap index with index Swap index with index Swap index with index Swap index with index Example Input num k Output Explanation The smallest wonderful number is To get this number Swap index with index Constraints num length k num only consists of digits
number of great partitions You are given an array nums consisting of positive integers and an integer k Partition the array into two ordered groups such that each element is in exactly one group A partition is called great if the sum of elements of each group is greater than or equal to k Return the number of distinct great partitions Since the answer may be too large return it modulo Two partitions are considered distinct if some element nums i is in different groups in the two partitions Example Input nums k Output Explanation The great partitions are and Example Input nums k Output Explanation There are no great partitions for this array Example Input nums k Output Explanation We can either put nums in the first partition or in the second partition The great partitions will be and Constraints nums length k nums i
balanced binary tree Given a binary tree determine if it is height balanced Example Input root null null Output true Example Input root null null Output false Example Input root Output true Constraints The number of nodes in the tree is in the range Node val
maximum xor of two numbers in an array Given an integer array nums return the maximum result of nums i XOR nums j where i j n Example Input nums Output Explanation The maximum result is XOR Example Input nums Output Constraints nums length nums i
minimum height trees A tree is an undirected graph in which any two vertices are connected by exactly one path In other words any connected graph without simple cycles is a tree Given a tree of n nodes labelled from to n and an array of n edges where edges i ai bi indicates that there is an undirected edge between the two nodes ai and bi in the tree you can choose any node of the tree as the root When you select a node x as the root the result tree has height h Among all possible rooted trees those with minimum height i e min h are called minimum height trees MHTs Return a list of all MHTs root labels You can return the answer in any order The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf Example Input n edges Output Explanation As shown the height of the tree is when the root is the node with label which is the only MHT Example Input n edges Output Constraints n edges length n ai bi n ai bi All the pairs ai bi are distinct The given input is guaranteed to be a tree and there will be no repeated edges
apply transform over each element in array Given an integer array arr and a mapping function fn return a new array with a transformation applied to each element The returned array should be created such that returnedArray i fn arr i i Please solve it without the built in Array map method Example Input arr fn function plusone n return n Output Explanation const newArray map arr plusone The function increases each value in the array by one Example Input arr fn function plusI n i return n i Output Explanation The function increases each value by the index it resides in Example Input arr fn function constant return Output Explanation The function always returns Constraints arr length arr i fn returns a number
bricks falling when hit You are given an m x n binary grid where each represents a brick and represents an empty space A brick is stable if It is directly connected to the top of the grid or At least one other brick in its four adjacent cells is stable You are also given an array hits which is a sequence of erasures we want to apply Each time we want to erase the brick at the location hits i rowi coli The brick on that location if it exists will disappear Some other bricks may no longer be stable because of that erasure and will fall Once a brick falls it is immediately erased from the grid i e it does not land on other stable bricks Return an array result where each result i is the number of bricks that will fall after the ith erasure is applied Note that an erasure may refer to a location with no brick and if it does no bricks drop Example Input grid hits Output Explanation Starting with the grid We erase the underlined brick at resulting in the grid The two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick so they will fall The resulting grid is Hence the result is Example Input grid hits Output Explanation Starting with the grid We erase the underlined brick at resulting in the grid All remaining bricks are still stable so no bricks fall The grid remains the same Next we erase the underlined brick at resulting in the grid Once again all remaining bricks are still stable so no bricks fall Hence the result is Constraints m grid length n grid i length m n grid i j is or hits length hits i length xi m yi n All xi yi are unique
add one row to tree Given the root of a binary tree and two integers val and depth add a row of nodes with value val at the given depth depth Note that the root node is at depth The adding rule is Given the integer depth for each not null tree node cur at the depth depth create two tree nodes with value val as cur s left subtree root and right subtree root cur s original left subtree should be the left subtree of the new left subtree root cur s original right subtree should be the right subtree of the new right subtree root If depth that means there is no depth depth at all then create a tree node with value val as the new root of the whole original tree and the original tree is the new root s left subtree Example Input root val depth Output null null Example Input root null val depth Output null null null Constraints The number of nodes in the tree is in the range The depth of the tree is in the range Node val val depth the depth of tree
generate a string with characters that have odd counts Given an integer n return a string with n characters such that each character in such string occurs an odd number of times The returned string must contain only lowercase English letters If there are multiples valid strings return any of them Example Input n Output pppz Explanation pppz is a valid string since the character p occurs three times and the character z occurs once Note that there are many other valid strings such as ohhh and love Example Input n Output xy Explanation xy is a valid string since the characters x and y occur once Note that there are many other valid strings such as ag and ur Example Input n Output holasss Constraints n
number of ways of cutting a pizza Given a rectangular pizza represented as a rows x cols matrix containing the following characters A an apple and empty cell and given the integer k You have to cut the pizza into k pieces using k cuts For each cut you choose the direction vertical or horizontal then you choose a cut position at the cell boundary and cut the pizza into two pieces If you cut the pizza vertically give the left part of the pizza to a person If you cut the pizza horizontally give the upper part of the pizza to a person Give the last piece of pizza to the last person Return the number of ways of cutting the pizza such that each piece contains at least one apple Since the answer can be a huge number return this modulo Example Input pizza A AAA k Output Explanation The figure above shows the three ways to cut the pizza Note that pieces must contain at least one apple Example Input pizza A AA k Output Example Input pizza A A k Output Constraints rows cols rows pizza length cols pizza i length k pizza consists of characters A and only
merge two 2d arrays by summing values You are given two integer arrays and i idi vali indicate that the number with the id idi has a value equal to vali i idi vali indicate that the number with the id idi has a value equal to vali Each array contains unique ids and is sorted in ascending order by id Merge the two arrays into one array that is sorted in ascending order by id respecting the following conditions Only ids that appear in at least one of the two arrays should be included in the resulting array Each id should be included only once and its value should be the sum of the values of this id in the two arrays If the id does not exist in one of the two arrays then its value in that array is considered to be Return the resulting array The returned array must be sorted in ascending order by id Example Input Output Explanation The resulting array contains the following id the value of this id is id the value of this id is id the value of this id is id the value of this id is Example Input Output Explanation There are no common ids so we just include each id with its value in the resulting list Constraints length length i length j length idi vali Both arrays contain unique ids Both arrays are in strictly ascending order by id
beautiful arrangement Suppose you have n integers labeled through n A permutation of those n integers perm indexed is considered a beautiful arrangement if for every i i n either of the following is true perm i is divisible by i i is divisible by perm i Given an integer n return the number of the beautiful arrangements that you can construct Example Input n Output Explanation The first beautiful arrangement is perm is divisible by i perm is divisible by i The second beautiful arrangement is perm is divisible by i i is divisible by perm Example Input n Output Constraints n
maximum number of occurrences of a substring Given a string s return the maximum number of occurrences of any substring under the following rules The number of unique characters in the substring must be less than or equal to maxLetters The substring size must be between minSize and maxSize inclusive Example Input s aababcaab maxLetters minSize maxSize Output Explanation Substring aab has occurrences in the original string It satisfies the conditions unique letters and size between minSize and maxSize Example Input s aaaa maxLetters minSize maxSize Output Explanation Substring aaa occur times in the string It can overlap Constraints s length maxLetters minSize maxSize min s length s consists of only lowercase English letters
convert the temperature You are given a non negative floating point number rounded to two decimal places celsius that denotes the temperature in Celsius You should convert Celsius into Kelvin and Fahrenheit and return it as an array ans kelvin fahrenheit Return the array ans Answers within of the actual answer will be accepted Note that Kelvin Celsius Fahrenheit Celsius Example Input celsius Output Explanation Temperature at Celsius converted in Kelvin is and converted in Fahrenheit is Example Input celsius Output Explanation Temperature at Celsius converted in Kelvin is and converted in Fahrenheit is Constraints celsius
guess number higher or lower ii We are playing the Guessing Game The game will work as follows I pick a number between and n You guess a number If you guess the right number you win the game If you guess the wrong number then I will tell you whether the number I picked is higher or lower and you will continue guessing Every time you guess a wrong number x you will pay x dollars If you run out of money you lose the game Given a particular n return the minimum amount of money you need to guarantee a win regardless of what number I pick Example Input n Output Explanation The winning strategy is as follows The range is Guess If this is my number your total is Otherwise you pay If my number is higher the range is Guess If this is my number your total is Otherwise you pay If my number is higher it must be Guess Your total is If my number is lower it must be Guess Your total is If my number is lower the range is Guess If this is my number your total is Otherwise you pay If my number is higher the range is Guess If this is my number your total is Otherwise you pay If my number is higher it must be Guess Your total is If my number is lower it must be Guess Your total is If my number is lower the range is Guess If this is my number your total is Otherwise you pay If my number is higher it must be Guess Your total is The worst case in all these scenarios is that you pay Hence you only need to guarantee a win Example Input n Output Explanation There is only one possible number so you can guess and not have to pay anything Example Input n Output Explanation There are two possible numbers and Guess If this is my number your total is Otherwise you pay If my number is higher it must be Guess Your total is The worst case is that you pay Constraints n
divide players into teams of equal skill You are given a positive integer array skill of even length n where skill i denotes the skill of the ith player Divide the players into n teams of size such that the total skill of each team is equal The chemistry of a team is equal to the product of the skills of the players on that team Return the sum of the chemistry of all the teams or return if there is no way to divide the players into teams such that the total skill of each team is equal Example Input skill Output Explanation Divide the players into the following teams where each team has a total skill of The sum of the chemistry of all the teams is Example Input skill Output Explanation The two players form a team with a total skill of The chemistry of the team is Example Input skill Output Explanation There is no way to divide the players into teams such that the total skill of each team is equal Constraints skill length skill length is even skill i
sum root to leaf numbers You are given the root of a binary tree containing digits from to only Each root to leaf path in the tree represents a number For example the root to leaf path represents the number Return the total sum of all root to leaf numbers Test cases are generated so that the answer will fit in a bit integer A leaf node is a node with no children Example Input root Output Explanation The root to leaf path represents the number The root to leaf path represents the number Therefore sum Example Input root Output Explanation The root to leaf path represents the number The root to leaf path represents the number The root to leaf path represents the number Therefore sum Constraints The number of nodes in the tree is in the range Node val The depth of the tree will not exceed
maximize distance to closest person You are given an array representing a row of seats where seats i represents a person sitting in the ith seat and seats i represents that the ith seat is empty indexed There is at least one empty seat and at least one person sitting Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized Return that maximum distance to the closest person Example Input seats Output Explanation If Alex sits in the second open seat i e seats then the closest person has distance If Alex sits in any other open seat the closest person has distance Thus the maximum distance to the closest person is Example Input seats Output Explanation If Alex sits in the last seat i e seats the closest person is seats away This is the maximum distance possible so the answer is Example Input seats Output Constraints seats length seats i is or At least one seat is empty At least one seat is occupied
strange printer There is a strange printer with the following two special properties The printer can only print a sequence of the same character each time At each turn the printer can print new characters starting from and ending at any place and will cover the original existing characters Given a string s return the minimum number of turns the printer needed to print it Example Input s aaabbb Output Explanation Print aaa first and then print bbb Example Input s aba Output Explanation Print aaa first and then print b from the second place of the string which will cover the existing character a Constraints s length s consists of lowercase English letters
longest path with different adjacent characters You are given a tree i e a connected undirected graph that has no cycles rooted at node consisting of n nodes numbered from to n The tree is represented by a indexed array parent of size n where parent i is the parent of node i Since node is the root parent You are also given a string s of length n where s i is the character assigned to node i Return the length of the longest path in the tree such that no pair of adjacent nodes on the path have the same character assigned to them Example Input parent s abacbe Output Explanation The longest path where each two adjacent nodes have different characters in the tree is the path The length of this path is so is returned It can be proven that there is no longer path that satisfies the conditions Example Input parent s aabc Output Explanation The longest path where each two adjacent nodes have different characters is the path The length of this path is so is returned Constraints n parent length s length n parent i n for all i parent parent represents a valid tree s consists of only lowercase English letters
minimum weighted subgraph with the required paths You are given an integer n denoting the number of nodes of a weighted directed graph The nodes are numbered from to n You are also given a integer array edges where edges i fromi toi weighti denotes that there exists a directed edge from fromi to toi with weight weighti Lastly you are given three distinct integers and dest denoting three distinct nodes of the graph Return the minimum weight of a subgraph of the graph such that it is possible to reach dest from both and via a set of edges of this subgraph In case such a subgraph does not exist return A subgraph is a graph whose vertices and edges are subsets of the original graph The weight of a subgraph is the sum of weights of its constituent edges Example Input n edges dest Output Explanation The above figure represents the input graph The blue edges represent one of the subgraphs that yield the optimal answer Note that the subgraph also yields the optimal answer It is not possible to get a subgraph with less weight satisfying all the constraints Example Input n edges dest Output Explanation The above figure represents the input graph It can be seen that there does not exist any path from node to node hence there are no subgraphs satisfying all the constraints Constraints n edges length edges i length fromi toi dest n fromi toi and dest are pairwise distinct weight i
remove duplicates from sorted array Given an integer array nums sorted in non decreasing order remove the duplicates in place such that each unique element appears only once The relative order of the elements should be kept the same Then return the number of unique elements in nums Consider the number of unique elements of nums to be k to get accepted you need to do the following things Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially The remaining elements of nums are not important as well as the size of nums Return k Custom Judge The judge will test your solution with the following code int nums Input array int expectedNums The expected answer with correct length int k removeDuplicates nums Calls your implementation assert k expectedNums length for int i i k i assert nums i expectedNums i If all assertions pass then your solution will be accepted Example Input nums Output nums Explanation Your function should return k with the first two elements of nums being and respectively It does not matter what you leave beyond the returned k hence they are underscores Example Input nums Output nums Explanation Your function should return k with the first five elements of nums being and respectively It does not matter what you leave beyond the returned k hence they are underscores Constraints nums length nums i nums is sorted in non decreasing order
trips and users SQL Schema Table Trips Column Name Type id int int int int status enum date id is the primary key for this table The table holds all taxi trips Each trip has a unique id while and are foreign keys to the at the Users table Status is an ENUM type of completed Table Users Column Name Type int banned enum role enum is the primary key for this table The table holds all users Each user has a unique and role is an ENUM type of client driver partner banned is an ENUM type of Yes No The cancellation rate is computed by dividing the number of canceled by client or driver requests with unbanned users by the total number of requests with unbanned users on that day Write a SQL query to find the cancellation rate of requests with unbanned users both client and driver must not be banned each day between and Round Cancellation Rate to two decimal points Return the result table in any order The query result format is in the following example Example Input Trips table id status completed completed completed completed completed completed completed Users table banned role No client Yes client No client No client No driver No driver No driver No driver Output Day Cancellation Rate Explanation On There were requests in total of which were canceled However the request with Id was made by a banned client so it is ignored in the calculation Hence there are unbanned requests in total of which was canceled The Cancellation Rate is On There were requests in total of which were canceled The request with Id was made by a banned client so it is ignored Hence there are unbanned requests in total of which were canceled The Cancellation Rate is On There were requests in total of which was canceled The request with Id was made by a banned client so it is ignored Hence there are unbanned request in total of which were canceled The Cancellation Rate is
find in mountain array This problem is an interactive problem You may recall that an array arr is a mountain array if and only if arr length There exists some i with i arr length such that arr arr arr i arr i arr i arr i arr arr length Given a mountain array mountainArr return the minimum index such that mountainArr get index target If such an index does not exist return You cannot access the mountain array directly You may only access the array using a MountainArray interface MountainArray get k returns the element of the array at index k indexed MountainArray length returns the length of the array Submissions making more than calls to MountainArray get will be judged Wrong Answer Also any solutions that attempt to circumvent the judge will result in disqualification Example Input array target Output Explanation exists in the array at index and index Return the minimum index which is Example Input array target Output Explanation does not exist in the array so we return Constraints length target get index
largest odd number in string You are given a string num representing a large integer Return the largest valued odd integer as a string that is a non empty substring of num or an empty string if no odd integer exists A substring is a contiguous sequence of characters within a string Example Input num Output Explanation The only non empty substrings are and is the only odd number Example Input num Output Explanation There are no odd numbers in Example Input num Output Explanation is already an odd number Constraints num length num only consists of digits and does not contain any leading zeros
find a peak element ii A peak element in a grid is an element that is strictly greater than all of its adjacent neighbors to the left right top and bottom Given a indexed m x n matrix mat where no two adjacent cells are equal find any peak element mat i j and return the length array i j You may assume that the entire matrix is surrounded by an outer perimeter with the value in each cell You must write an algorithm that runs in O m log n or O n log m time Example Input mat Output Explanation Both and are peak elements so and are both acceptable answers Example Input mat Output Explanation Both and are peak elements so and are both acceptable answers Constraints m mat length n mat i length m n mat i j No two adjacent cells are equal
count integers in intervals Given an empty set of intervals implement a data structure that can Add an interval to the set of intervals Count the number of integers that are present in at least one interval Implement the CountIntervals class CountIntervals Initializes the object with an empty set of intervals void add int left int right Adds the interval left right to the set of intervals int count Returns the number of integers that are present in at least one interval Note that an interval left right denotes all the integers x where left x right Example Input CountIntervals add add count add count Output null null null null Explanation CountIntervals countIntervals new CountIntervals initialize the object with an empty set of intervals countIntervals add add to the set of intervals countIntervals add add to the set of intervals countIntervals count return the integers and are present in the interval the integers and are present in the interval countIntervals add add to the set of intervals countIntervals count return the integers and are present in the interval the integers and are present in the interval the integers and are present in the intervals and the integers and are present in the interval Constraints left right At most calls in total will be made to add and count At least one call will be made to count
maximum performance of a team You are given two integers n and k and two integer arrays speed and efficiency both of length n There are n engineers numbered from to n speed i and efficiency i represent the speed and efficiency of the ith engineer respectively Choose at most k different engineers out of the n engineers to form a team with the maximum performance The performance of a team is the sum of their engineers speeds multiplied by the minimum efficiency among their engineers Return the maximum performance of this team Since the answer can be a huge number return it modulo Example Input n speed efficiency k Output Explanation We have the maximum performance of the team by selecting engineer with speed and efficiency and engineer with speed and efficiency That is performance min Example Input n speed efficiency k Output Explanation This is the same example as the first but k We can select engineer engineer and engineer to get the maximum performance of the team That is performance min Example Input n speed efficiency k Output Constraints k n speed length n efficiency length n speed i efficiency i
kth largest element in a stream Design a class to find the kth largest element in a stream Note that it is the kth largest element in the sorted order not the kth distinct element Implement KthLargest class KthLargest int k int nums Initializes the object with the integer k and the stream of integers nums int add int val Appends the integer val to the stream and returns the element representing the kth largest element in the stream Example Input KthLargest add add add add add Output null Explanation KthLargest kthLargest new KthLargest kthLargest add return kthLargest add return kthLargest add return kthLargest add return kthLargest add return Constraints k nums length nums i val At most calls will be made to add It is guaranteed that there will be at least k elements in the array when you search for the kth element
two sum Given an array of integers nums and an integer target return indices of the two numbers such that they add up to target You may assume that each input would have exactly one solution and you may not use the same element twice You can return the answer in any order Example Input nums target Output Explanation Because nums nums we return Example Input nums target Output Example Input nums target Output Constraints nums length nums i target Only one valid answer exists Follow up Can you come up with an algorithm that is less than O time complexity
shortest path with alternating colors You are given an integer n the number of nodes in a directed graph where the nodes are labeled from to n Each edge is red or blue in this graph and there could be self edges and parallel edges You are given two arrays redEdges and blueEdges where redEdges i ai bi indicates that there is a directed red edge from node ai to node bi in the graph and blueEdges j uj vj indicates that there is a directed blue edge from node uj to node vj in the graph Return an array answer of length n where each answer x is the length of the shortest path from node to node x such that the edge colors alternate along the path or if such a path does not exist Example Input n redEdges blueEdges Output Example Input n redEdges blueEdges Output Constraints n redEdges length blueEdges length redEdges i length blueEdges j length ai bi uj vj n
the number of good subsets You are given an integer array nums We call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers For example if nums and are good subsets with products and respectively and are not good subsets with products and respectively Return the number of different good subsets in nums modulo A subset of nums is any array that can be obtained by deleting some possibly none or all elements from nums Two subsets are different if and only if the chosen indices to delete are different Example Input nums Output Explanation The good subsets are product is which is the product of distinct prime product is which is the product of distinct primes and product is which is the product of distinct prime product is which is the product of distinct prime product is which is the product of distinct primes and product is which is the product of distinct prime Example Input nums Output Explanation The good subsets are product is which is the product of distinct prime product is which is the product of distinct primes and product is which is the product of distinct primes and product is which is the product of distinct prime product is which is the product of distinct primes and Constraints nums length nums i
number of zero-filled subarrays Given an integer array nums return the number of subarrays filled with A subarray is a contiguous non empty sequence of elements within an array Example Input nums Output Explanation There are occurrences of as a subarray There are occurrences of as a subarray There is no occurrence of a subarray with a size more than filled with Therefore we return Example Input nums Output Explanation There are occurrences of as a subarray There are occurrences of as a subarray There is occurrence of as a subarray There is no occurrence of a subarray with a size more than filled with Therefore we return Example Input nums Output Explanation There is no subarray filled with Therefore we return Constraints nums length nums i
sort items by groups respecting dependencies There are n items each belonging to zero or one of m groups where group i is the group that the i th item belongs to and it s equal to if the i th item belongs to no group The items and the groups are zero indexed A group can have no item belonging to it Return a sorted list of the items such that The items that belong to the same group are next to each other in the sorted list There are some relations between these items where beforeItems i is a list containing all the items that should come before the i th item in the sorted array to the left of the i th item Return any solution if there is more than one solution and return an empty list if there is no solution Example Input n m group beforeItems Output Example Input n m group beforeItems Output Explanation This is the same as example except that needs to be before in the sorted list Constraints m n group length beforeItems length n group i m beforeItems i length n beforeItems i j n i beforeItems i j beforeItems i does not contain duplicates elements
smallest string starting from leaf You are given the root of a binary tree where each node has a value in the range representing the letters a to z Return the lexicographically smallest string that starts at a leaf of this tree and ends at the root As a reminder any shorter prefix of a string is lexicographically smaller For example ab is lexicographically smaller than aba A leaf of a node is a node that has no children Example Input root Output dba Example Input root Output adz Example Input root null null Output abc Constraints The number of nodes in the tree is in the range Node val
race car Your car starts at position and speed on an infinite number line Your car can go into negative positions Your car drives automatically according to a sequence of instructions A accelerate and R reverse When you get an instruction A your car does the following position speed speed When you get an instruction R your car does the following If your speed is positive then speed otherwise speed Your position stays the same For example after commands AAR your car goes to positions and your speed goes to Given a target position target return the length of the shortest sequence of instructions to get there Example Input target Output Explanation The shortest instruction sequence is AA Your position goes from Example Input target Output Explanation The shortest instruction sequence is AAARA Your position goes from Constraints target
replace elements in an array You are given a indexed array nums that consists of n distinct positive integers Apply m operations to this array where in the ith operation you replace the number operations i with operations i It is guaranteed that in the ith operation operations i exists in nums operations i does not exist in nums Return the array obtained after applying all the operations Example Input nums operations Output Explanation We perform the following operations on nums Replace the number with nums becomes Replace the number with nums becomes Replace the number with nums becomes We return the final array Example Input nums operations Output Explanation We perform the following operations to nums Replace the number with nums becomes Replace the number with nums becomes Replace the number with nums becomes We return the array Constraints n nums length m operations length n m All the values of nums are distinct operations i length nums i operations i operations i operations i will exist in nums when applying the ith operation operations i will not exist in nums when applying the ith operation
maximum binary tree ii A maximum tree is a tree where every node has a value greater than any other value in its subtree You are given the root of a maximum binary tree and an integer val Just as in the previous problem the given tree was constructed from a list a root Construct a recursively with the following Construct a routine If a is empty return null Otherwise let a i be the largest element of a Create a root node with the value a i The left child of root will be Construct a a a i The right child of root will be Construct a i a i a a length Return root Note that we were not given a directly only a root node root Construct a Suppose b is a copy of a with the value val appended to it It is guaranteed that b has unique values Return Construct b Example Input root null null val Output null null null Explanation a b Example Input root null val Output null null Explanation a b Example Input root null val Output null Explanation a b Constraints The number of nodes in the tree is in the range Node val All the values of the tree are unique val
remove comments Given a C program remove comments from it The program source is an array of strings source where source i is the ith line of the source code This represents the result of splitting the original source code string by the newline character n In C there are two types of comments line comments and block comments The string denotes a line comment which represents that it and the rest of the characters to the right of it in the same line should be ignored The string denotes a block comment which represents that all characters until the next non overlapping occurrence of should be ignored Here occurrences happen in reading order line by line from left to right To be clear the string does not yet end the block comment as the ending would be overlapping the beginning The first effective comment takes precedence over others For example if the string occurs in a block comment it is ignored Similarly if the string occurs in a line or block comment it is also ignored If a certain line of code is empty after removing comments you must not output that line each string in the answer list will be non empty There will be no control characters single quote or double quote characters For example source string s Not a comment will not be a test case Also nothing else such as defines or macros will interfere with the comments It is guaranteed that every open block comment will eventually be closed so outside of a line or block comment always starts a new comment Finally implicit newline characters can be deleted by block comments Please see the examples below for details After removing the comments from the source code return the source code in the same format Example Input source Test program int main variable declaration int a b c This is a test multiline comment for testing a b c Output int main int a b c a b c Explanation The line by line code is visualized as below Test program int main variable declaration int a b c This is a test multiline comment for testing a b c The string denotes a block comment including line and lines The string denotes line as comments The line by line output code is visualized as below int main int a b c a b c Example Input source a comment line b Output ab Explanation The original source string is a comment nline b where we have bolded the newline characters After deletion the implicit newline characters are deleted leaving the string ab which when delimited by newline characters becomes ab Constraints source length source i length source i consists of printable ASCII characters Every open block comment is eventually closed There are no single quote or double quote in the input
lexicographically smallest beautiful string A string is beautiful if It consists of the first k letters of the English lowercase alphabet It does not contain any substring of length or more which is a palindrome You are given a beautiful string s of length n and a positive integer k Return the lexicographically smallest string of length n which is larger than s and is beautiful If there is no such string return an empty string A string a is lexicographically larger than a string b of the same length if in the first position where a and b differ a has a character strictly larger than the corresponding character in b For example abcd is lexicographically larger than abcc because the first position they differ is at the fourth character and d is greater than c Example Input s abcz k Output abda Explanation The string abda is beautiful and lexicographically larger than the string abcz It can be proven that there is no string that is lexicographically larger than the string abcz beautiful and lexicographically smaller than the string abda Example Input s dc k Output Explanation It can be proven that there is no string that is lexicographically larger than the string dc and is beautiful Constraints n s length k s is a beautiful string
number of different subsequences gcds You are given an array nums that consists of positive integers The GCD of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly For example the GCD of the sequence is A subsequence of an array is a sequence that can be formed by removing some elements possibly none of the array For example is a subsequence of Return the number of different GCDs among all non empty subsequences of nums Example Input nums Output Explanation The figure shows all the non empty subsequences and their GCDs The different GCDs are and Example Input nums Output Constraints nums length nums i
minimum xor sum of two arrays You are given two integer arrays and of length n The XOR sum of the two integer arrays is XOR XOR n XOR n indexed For example the XOR sum of and is equal to XOR XOR XOR Rearrange the elements of such that the resulting XOR sum is minimized Return the XOR sum after the rearrangement Example Input Output Explanation Rearrange so that it becomes The XOR sum is XOR XOR Example Input Output Explanation Rearrange so that it becomes The XOR sum is XOR XOR XOR Constraints n length n length n i i
most profit assigning work You have n jobs and m workers You are given three arrays difficulty profit and worker where difficulty i and profit i are the difficulty and the profit of the ith job and worker j is the ability of jth worker i e the jth worker can only complete a job with difficulty at most worker j Every worker can be assigned at most one job but one job can be completed multiple times For example if three workers attempt the same job that pays then the total profit will be If a worker cannot complete any job their profit is Return the maximum profit we can achieve after assigning the workers to the jobs Example Input difficulty profit worker Output Explanation Workers are assigned jobs of difficulty and they get a profit of separately Example Input difficulty profit worker Output Constraints n difficulty length n profit length m worker length n m difficulty i profit i worker i
maximum or You are given a indexed integer array nums of length n and an integer k In an operation you can choose an element and multiply it by Return the maximum possible value of nums nums nums n that can be obtained after applying the operation on nums at most k times Note that a b denotes the bitwise or between two integers a and b Example Input nums k Output Explanation If we apply the operation to index our new array nums will be equal to Thus we return the bitwise or of and which is Example Input nums k Output Explanation If we apply the operation twice on index we yield a new array of Thus we return Constraints nums length nums i k
convert sorted array to binary search tree Given an integer array nums where the elements are sorted in ascending order convert it to a height balanced binary search tree Example Input nums Output null Explanation null null is also accepted Example Input nums Output Explanation null and are both height balanced BSTs Constraints nums length nums i nums is sorted in a strictly increasing order
range addition ii You are given an m x n matrix M initialized with all s and an array of operations ops where ops i ai bi means M x y should be incremented by one for all x ai and y bi Count and return the number of maximum integers in the matrix after performing all the operations Example Input m n ops Output Explanation The maximum integer in M is and there are four of it in M So return Example Input m n ops Output Example Input m n ops Output Constraints m n ops length ops i length ai m bi n
flatten nested list iterator You are given a nested list of integers nestedList Each element is either an integer or a list whose elements may also be integers or other lists Implement an iterator to flatten it Implement the NestedIterator class NestedIterator List NestedInteger nestedList Initializes the iterator with the nested list nestedList int next Returns the next integer in the nested list boolean hasNext Returns true if there are still some integers in the nested list and false otherwise Your code will be tested with the following pseudocode initialize iterator with nestedList res while iterator hasNext append iterator next to the end of res return res If res matches the expected flattened list then your code will be judged as correct Example Input nestedList Output Explanation By calling next repeatedly until hasNext returns false the order of elements returned by next should be Example Input nestedList Output Explanation By calling next repeatedly until hasNext returns false the order of elements returned by next should be Constraints nestedList length The values of the integers in the nested list is in the range
greatest sum divisible by three Given an integer array nums return the maximum possible sum of elements of the array such that it is divisible by three Example Input nums Output Explanation Pick numbers and their sum is maximum sum divisible by Example Input nums Output Explanation Since is not divisible by do not pick any number Example Input nums Output Explanation Pick numbers and their sum is maximum sum divisible by Constraints nums length nums i
count common words with one occurrence Given two string arrays and return the number of strings that appear exactly once in each of the two arrays Example Input leetcode is amazing as is amazing leetcode is Output Explanation leetcode appears exactly once in each of the two arrays We count this string amazing appears exactly once in each of the two arrays We count this string is appears in each of the two arrays but there are occurrences of it in We do not count this string as appears once in but does not appear in We do not count this string Thus there are strings that appear exactly once in each of the two arrays Example Input b bb bbb a aa aaa Output Explanation There are no strings that appear in each of the two arrays Example Input a ab a a a ab Output Explanation The only string that appears exactly once in each of the two arrays is ab Constraints length length i length j length i and j consists only of lowercase English letters
positions of large groups In a string s of lowercase letters these letters form consecutive groups of the same character For example a string like s abbxxxxzyy has the groups a bb xxxx z and yy A group is identified by an interval start end where start and end denote the start and end indices inclusive of the group In the above example xxxx has the interval A group is considered large if it has or more characters Return the intervals of every large group sorted in increasing order by start index Example Input s abbxxxxzzy Output Explanation xxxx is the only large group with start index and end index Example Input s abc Output Explanation We have groups a b and c none of which are large groups Example Input s abcdddeeeeaabbbcd Output Explanation The large groups are ddd eeee and bbb Constraints s length s contains lowercase English letters only
find triangular sum of an array You are given a indexed integer array nums where nums i is a digit between and inclusive The triangular sum of nums is the value of the only element present in nums after the following process terminates Let nums comprise of n elements If n end the process Otherwise create a new indexed integer array newNums of length n For each index i where i n assign the value of newNums i as nums i nums i where denotes modulo operator Replace the array nums with newNums Repeat the entire process starting from step Return the triangular sum of nums Example Input nums Output Explanation The above diagram depicts the process from which we obtain the triangular sum of the array Example Input nums Output Explanation Since there is only one element in nums the triangular sum is the value of that element itself Constraints nums length nums i
largest multiple of three Given an array of digits digits return the largest multiple of three that can be formed by concatenating some of the given digits in any order If there is no answer return an empty string Since the answer may not fit in an integer data type return the answer as a string Note that the returning answer must not contain unnecessary leading zeros Example Input digits Output Example Input digits Output Example Input digits Output Constraints digits length digits i
ransom note Given two strings ransomNote and magazine return true if ransomNote can be constructed by using the letters from magazine and false otherwise Each letter in magazine can only be used once in ransomNote Example Input ransomNote a magazine b Output false Example Input ransomNote aa magazine ab Output false Example Input ransomNote aa magazine aab Output true Constraints ransomNote length magazine length ransomNote and magazine consist of lowercase English letters
subsequence with the minimum score You are given two strings s and t You are allowed to remove any number of characters from the string t The score of the string is if no characters are removed from the string t otherwise Let left be the minimum index among all removed characters Let right be the maximum index among all removed characters Then the score of the string is right left Return the minimum possible score to make t a subsequence of s A subsequence of a string is a new string that is formed from the original string by deleting some can be none of the characters without disturbing the relative positions of the remaining characters i e ace is a subsequence of abcde while aec is not Example Input s abacaba t bzaa Output Explanation In this example we remove the character z at index indexed The string t becomes baa which is a subsequence of the string abacaba and the score is It can be proven that is the minimum score that we can achieve Example Input s cde t xyz Output Explanation In this example we remove characters x y and z at indices and indexed The string t becomes which is a subsequence of the string cde and the score is It can be proven that is the minimum score that we can achieve Constraints s length t length s and t consist of only lowercase English letters
sum of numbers with units digit k Given two integers num and k consider a set of positive integers with the following properties The units digit of each integer is k The sum of the integers is num Return the minimum possible size of such a set or if no such set exists Note The set can contain multiple instances of the same integer and the sum of an empty set is considered The units digit of a number is the rightmost digit of the number Example Input num k Output Explanation One valid set is as the sum is and each integer has a units digit of Another valid set is It can be shown that is the minimum possible size of a valid set Example Input num k Output Explanation It is not possible to obtain a sum of using only integers that have a units digit of Example Input num k Output Explanation The sum of an empty set is considered Constraints num k
strictly palindromic number An integer n is strictly palindromic if for every base b between and n inclusive the string representation of the integer n in base b is palindromic Given an integer n return true if n is strictly palindromic and false otherwise A string is palindromic if it reads the same forward and backward Example Input n Output false Explanation In base base which is palindromic In base base which is not palindromic Therefore is not strictly palindromic so we return false Note that in bases and n is also not palindromic Example Input n Output false Explanation We only consider base base which is not palindromic Therefore we return false Constraints n
maximum 69 number You are given a positive integer num consisting only of digits and Return the maximum number you can get by changing at most one digit becomes and becomes Example Input num Output Explanation Changing the first digit results in Changing the second digit results in Changing the third digit results in Changing the fourth digit results in The maximum number is Example Input num Output Explanation Changing the last digit to results in the maximum number Example Input num Output Explanation It is better not to apply any change Constraints num num consists of only and digits
student attendance record ii An attendance record for a student can be represented as a string where each character signifies whether the student was absent late or present on that day The record only contains the following three characters A Absent L Late P Present Any student is eligible for an attendance award if they meet both of the following criteria The student was absent A for strictly fewer than days total The student was never late L for or more consecutive days Given an integer n return the number of possible attendance records of length n that make a student eligible for an attendance award The answer may be very large so return it modulo Example Input n Output Explanation There are records with length that are eligible for an award PP AP PA LP PL AL LA LL Only AA is not eligible because there are absences there need to be fewer than Example Input n Output Example Input n Output Constraints n
same tree Given the roots of two binary trees p and q write a function to check if they are the same or not Two binary trees are considered the same if they are structurally identical and the nodes have the same value Example Input p q Output true Example Input p q null Output false Example Input p q Output false Constraints The number of nodes in both trees is in the range Node val
minimum cost to merge stones There are n piles of stones arranged in a row The ith pile has stones i stones A move consists of merging exactly k consecutive piles into one pile and the cost of this move is equal to the total number of stones in these k piles Return the minimum cost to merge all piles of stones into one pile If it is impossible return Example Input stones k Output Explanation We start with We merge for a cost of and we are left with We merge for a cost of and we are left with We merge for a cost of and we are left with The total cost was and this is the minimum possible Example Input stones k Output Explanation After any merge operation there are piles left and we can t merge anymore So the task is impossible Example Input stones k Output Explanation We start with We merge for a cost of and we are left with We merge for a cost of and we are left with The total cost was and this is the minimum possible Constraints n stones length n stones i k
sliding window median The median is the middle value in an ordered integer list If the size of the list is even there is no middle value So the median is the mean of the two middle values For examples if arr the median is For examples if arr the median is You are given an integer array nums and an integer k There is a sliding window of size k which is moving from the very left of the array to the very right You can only see the k numbers in the window Each time the sliding window moves right by one position Return the median array for each window in the original array Answers within of the actual value will be accepted Example Input nums k Output Explanation Window position Median Example Input nums k Output Constraints k nums length nums i
check if there is a valid path in a grid You are given an m x n grid Each cell of grid represents a street The street of grid i j can be which means a street connecting the left cell and the right cell which means a street connecting the upper cell and the lower cell which means a street connecting the left cell and the lower cell which means a street connecting the right cell and the lower cell which means a street connecting the left cell and the upper cell which means a street connecting the right cell and the upper cell You will initially start at the street of the upper left cell A valid path in the grid is a path that starts from the upper left cell and ends at the bottom right cell m n The path should only follow the streets Notice that you are not allowed to change any street Return true if there is a valid path in the grid or false otherwise Example Input grid Output true Explanation As shown you can start at cell and visit all the cells of the grid to reach m n Example Input grid Output false Explanation As shown you the street at cell is not connected with any street of any other cell and you will get stuck at cell Example Input grid Output false Explanation You will get stuck at cell and you cannot reach cell Constraints m grid length n grid i length m n grid i j
assign cookies Assume you are an awesome parent and want to give your children some cookies But you should give each child at most one cookie Each child i has a greed factor g i which is the minimum size of a cookie that the child will be content with and each cookie j has a size s j If s j g i we can assign the cookie j to the child i and the child i will be content Your goal is to maximize the number of your content children and output the maximum number Example Input g s Output Explanation You have children and cookies The greed factors of children are And even though you have cookies since their size is both you could only make the child whose greed factor is content You need to output Example Input g s Output Explanation You have children and cookies The greed factors of children are You have cookies and their sizes are big enough to gratify all of the children You need to output Constraints g length s length g i s j
remove sub-folders from the filesystem Given a list of folders folder return the folders after removing all sub folders in those folders You may return the answer in any order If a folder i is located within another folder j it is called a sub folder of it The format of a path is one or more concatenated strings of the form followed by one or more lowercase English letters For example leetcode and leetcode problems are valid paths while an empty string and are not Example Input folder a a b c d c d e c f Output a c d c f Explanation Folders a b is a subfolder of a and c d e is inside of folder c d in our filesystem Example Input folder a a b c a b d Output a Explanation Folders a b c and a b d will be removed because they are subfolders of a Example Input folder a b c a b ca a b d Output a b c a b ca a b d Constraints folder length folder i length folder i contains only lowercase letters and folder i always starts with the character Each folder name is unique
maximum element after decreasing and rearranging You are given an array of positive integers arr Perform some operations possibly none on arr so that it satisfies these conditions The value of the first element in arr must be The absolute difference between any adjacent elements must be less than or equal to In other words abs arr i arr i for each i where i arr length indexed abs x is the absolute value of x There are types of operations that you can perform any number of times Decrease the value of any element of arr to a smaller positive integer Rearrange the elements of arr to be in any order Return the maximum possible value of an element in arr after performing the operations to satisfy the conditions Example Input arr Output Explanation We can satisfy the conditions by rearranging arr so it becomes The largest element in arr is Example Input arr Output Explanation One possible way to satisfy the conditions is by doing the following Rearrange arr so it becomes Decrease the value of the second element to Decrease the value of the third element to Now arr which satisfies the conditions The largest element in arr is Example Input arr Output Explanation The array already satisfies the conditions and the largest element is Constraints arr length arr i
partition list Given the head of a linked list and a value x partition it such that all nodes less than x come before nodes greater than or equal to x You should preserve the original relative order of the nodes in each of the two partitions Example Input head x Output Example Input head x Output Constraints The number of nodes in the list is in the range Node val x
task scheduler Given a characters array tasks representing the tasks a CPU needs to do where each letter represents a different task Tasks could be done in any order Each task is done in one unit of time For each unit of time the CPU could complete either one task or just be idle However there is a non negative integer n that represents the cooldown period between two same tasks the same letter in the array that is that there must be at least n units of time between any two same tasks Return the least number of units of times that the CPU will take to finish all the given tasks Example Input tasks A A A B B B n Output Explanation A B idle A B idle A B There is at least units of time between any two same tasks Example Input tasks A A A B B B n Output Explanation On this case any permutation of size would work since n A A A B B B A B A B A B B B B A A A And so on Example Input tasks A A A A A A B C D E F G n Output Explanation One possible solution is A B C A D E A F G A idle idle A idle idle A Constraints task length tasks i is upper case English letter The integer n is in the range
k radius subarray averages You are given a indexed array nums of n integers and an integer k The k radius average for a subarray of nums centered at some index i with the radius k is the average of all elements in nums between the indices i k and i k inclusive If there are less than k elements before or after the index i then the k radius average is Build and return an array avgs of length n where avgs i is the k radius average for the subarray centered at index i The average of x elements is the sum of the x elements divided by x using integer division The integer division truncates toward zero which means losing its fractional part For example the average of four elements and is which truncates to Example Input nums k Output Explanation avg avg and avg are because there are less than k elements before each index The sum of the subarray centered at index with radius is Using integer division avg For the subarray centered at index avg For the subarray centered at index avg avg avg and avg are because there are less than k elements after each index Example Input nums k Output Explanation The sum of the subarray centered at index with radius is avg Example Input nums k Output Explanation avg is because there are less than k elements before and after index Constraints n nums length n nums i k
make array zero by subtracting equal amounts You are given a non negative integer array nums In one operation you must Choose a positive integer x such that x is less than or equal to the smallest non zero element in nums Subtract x from every positive element in nums Return the minimum number of operations to make every element in nums equal to Example Input nums Output Explanation In the first operation choose x Now nums In the second operation choose x Now nums In the third operation choose x Now nums Example Input nums Output Explanation Each element in nums is already so no operations are needed Constraints nums length nums i
detect capital We define the usage of capitals in a word to be right when one of the following cases holds All letters in this word are capitals like USA All letters in this word are not capitals like leetcode Only the first letter in this word is capital like Google Given a string word return true if the usage of capitals in it is right Example Input word USA Output true Example Input word FlaG Output false Constraints word length word consists of lowercase and uppercase English letters
critical connections in a network There are n servers numbered from to n connected by undirected server to server connections forming a network where connections i ai bi represents a connection between servers ai and bi Any server can reach other servers directly or indirectly through the network A critical connection is a connection that if removed will make some servers unable to reach some other server Return all critical connections in the network in any order Example Input n connections Output Explanation is also accepted Example Input n connections Output Constraints n n connections length ai bi n ai bi There are no repeated connections
cheapest flights within k stops There are n cities connected by some number of flights You are given an array flights where flights i fromi toi pricei indicates that there is a flight from city fromi to city toi with cost pricei You are also given three integers src dst and k return the cheapest price from src to dst with at most k stops If there is no such route return Example Input n flights src dst k Output Explanation The graph is shown above The optimal path with at most stop from city to is marked in red and has cost Note that the path through cities is cheaper but is invalid because it uses stops Example Input n flights src dst k Output Explanation The graph is shown above The optimal path with at most stop from city to is marked in red and has cost Example Input n flights src dst k Output Explanation The graph is shown above The optimal path with no stops from city to is marked in red and has cost Constraints n flights length n n flights i length fromi toi n fromi toi pricei There will not be any multiple flights between two cities src dst k n src dst
minimum number of frogs croaking You are given the string croakOfFrogs which represents a combination of the string croak from different frogs that is multiple frogs can croak at the same time so multiple croak are mixed Return the minimum number of different frogs to finish all the croaks in the given string A valid croak means a frog is printing five letters c r o a and k sequentially The frogs have to print all five letters to finish a croak If the given string is not a combination of a valid croak return Example Input croakOfFrogs croakcroak Output Explanation One frog yelling croak twice Example Input croakOfFrogs crcoakroak Output Explanation The minimum number of frogs is two The first frog could yell crcoakroak The second frog could yell later crcoakroak Example Input croakOfFrogs croakcrook Output Explanation The given string is an invalid combination of croak from different frogs Constraints croakOfFrogs length croakOfFrogs is either c r o a or k
longest continuous increasing subsequence Given an unsorted array of integers nums return the length of the longest continuous increasing subsequence i e subarray The subsequence must be strictly increasing A continuous increasing subsequence is defined by two indices l and r l r such that it is nums l nums l nums r nums r and for each l i r nums i nums i Example Input nums Output Explanation The longest continuous increasing subsequence is with length Even though is an increasing subsequence it is not continuous as elements and are separated by element Example Input nums Output Explanation The longest continuous increasing subsequence is with length Note that it must be strictly increasing Constraints nums length nums i
flatten a multilevel doubly linked list You are given a doubly linked list which contains nodes that have a next pointer a previous pointer and an additional child pointer This child pointer may or may not point to a separate doubly linked list also containing these special nodes These child lists may have one or more children of their own and so on to produce a multilevel data structure as shown in the example below Given the head of the first level of the list flatten the list so that all the nodes appear in a single level doubly linked list Let curr be a node with a child list The nodes in the child list should appear after curr and before curr next in the flattened list Return the head of the flattened list The nodes in the list must have all of their child pointers set to null Example Input head null null null null null Output Explanation The multilevel linked list in the input is shown After flattening the multilevel linked list it becomes Example Input head null Output Explanation The multilevel linked list in the input is shown After flattening the multilevel linked list it becomes Example Input head Output Explanation There could be empty list in the input Constraints The number of Nodes will not exceed Node val How the multilevel linked list is represented in test cases We use the multilevel linked list from Example above NULL NULL NULL The serialization of each level is as follows null null null To serialize all levels together we will add nulls in each level to signify no node connects to the upper node of the previous level The serialization becomes null null null null null null Merging the serialization of each level and removing trailing nulls we obtain null null null null null
powerful integers Given three integers x y and bound return a list of all the powerful integers that have a value less than or equal to bound An integer is powerful if it can be represented as xi yj for some integers i and j You may return the answer in any order In your answer each value should occur at most once Example Input x y bound Output Explanation Example Input x y bound Output Constraints x y bound
paths in matrix whose sum is divisible by k You are given a indexed m x n integer matrix grid and an integer k You are currently at position and you want to reach position m n moving only down or right Return the number of paths where the sum of the elements on the path is divisible by k Since the answer may be very large return it modulo Example Input grid k Output Explanation There are two paths where the sum of the elements on the path is divisible by k The first path highlighted in red has a sum of which is divisible by The second path highlighted in blue has a sum of which is divisible by Example Input grid k Output Explanation The path highlighted in red has a sum of which is divisible by Example Input grid k Output Explanation Every integer is divisible by so the sum of the elements on every possible path is divisible by k Constraints m grid length n grid i length m n m n grid i j k
magical string A magical string s consists of only and and obeys the following rules The string s is magical because concatenating the number of contiguous occurrences of characters and generates the string s itself The first few elements of s is s If we group the consecutive s and s in s it will be and the occurrences of s or s in each group are You can see that the occurrence sequence is s itself Given an integer n return the number of s in the first n number in the magical string s Example Input n Output Explanation The first elements of magical string s is and it contains three s so return Example Input n Output Constraints n
replace words In English we have a concept called root which can be followed by some other word to form another longer word let s call this word successor For example when the root an is followed by the successor word other we can form a new word another Given a dictionary consisting of many roots and a sentence consisting of words separated by spaces replace all the successors in the sentence with the root forming it If a successor can be replaced by more than one root replace it with the root that has the shortest length Return the sentence after the replacement Example Input dictionary cat bat rat sentence the cattle was rattled by the battery Output the cat was rat by the bat Example Input dictionary a b c sentence aadsfasf absbs bbab cadsfafs Output a a b c Constraints dictionary length dictionary i length dictionary i consists of only lower case letters sentence length sentence consists of only lower case letters and spaces The number of words in sentence is in the range The length of each word in sentence is in the range Every two consecutive words in sentence will be separated by exactly one space sentence does not have leading or trailing spaces
delete node in a bst Given a root node reference of a BST and a key delete the node with the given key in the BST Return the root node reference possibly updated of the BST Basically the deletion can be divided into two stages Search for a node to remove If the node is found delete the node Example Input root null key Output null null Explanation Given key to delete is So we find the node with value and delete it One valid answer is null null shown in the above BST Please notice that another valid answer is null null and it s also accepted Example Input root null key Output null Explanation The tree does not contain a node with value Example Input root key Output Constraints The number of nodes in the tree is in the range Node val Each node has a unique value root is a valid binary search tree key Follow up Could you solve it with time complexity O height of tree
abbreviating the product of a range You are given two positive integers left and right with left right Calculate the product of all integers in the inclusive range left right Since the product may be very large you will abbreviate it following these steps Count all trailing zeros in the product and remove them Let us denote this count as C For example there are trailing zeros in and there are trailing zeros in Denote the remaining number of digits in the product as d If d then express the product as pre suf where pre denotes the first digits of the product and suf denotes the last digits of the product after removing all trailing zeros If d we keep it unchanged For example we express as but is represented as Finally represent the product as a string pre suf eC For example will be represented as Return a string denoting the abbreviated product of all integers in the inclusive range left right Example Input left right Output Explanation The product is There are no trailing zeros so remains the same The abbreviation will end with Since the number of digits is which is less than we do not have to abbreviate it further Thus the final representation is Example Input left right Output Explanation The product is There are trailing zeros which we remove to get The abbreviation will end with The number of digits after removing the trailing zeros is so we do not abbreviate it further Hence the abbreviated product is Example Input left right Output Explanation The product is Constraints left right
check if a parentheses string can be valid A parentheses string is a non empty string consisting only of and It is valid if any of the following conditions is true It is It can be written as AB A concatenated with B where A and B are valid parentheses strings It can be written as A where A is a valid parentheses string You are given a parentheses string s and a string locked both of length n locked is a binary string consisting only of s and s For each index i of locked If locked i is you cannot change s i But if locked i is you can change s i to either or Return true if you can make s a valid parentheses string Otherwise return false Example Input s locked Output true Explanation locked and locked so we cannot change s or s We change s and s to while leaving s and s unchanged to make s valid Example Input s locked Output true Explanation We do not need to make any changes because s is already valid Example Input s locked Output false Explanation locked permits us to change s Changing s to either or will not make s valid Constraints n s length locked length n s i is either or locked i is either or
most frequent even element Given an integer array nums return the most frequent even element If there is a tie return the smallest one If there is no such element return Example Input nums Output Explanation The even elements are and Of these and appear the most We return the smallest one which is Example Input nums Output Explanation is the even element appears the most Example Input nums Output Explanation There is no even element Constraints nums length nums i
super egg drop You are given k identical eggs and you have access to a building with n floors labeled from to n You know that there exists a floor f where f n such that any egg dropped at a floor higher than f will break and any egg dropped at or below floor f will not break Each move you may take an unbroken egg and drop it from any floor x where x n If the egg breaks you can no longer use it However if the egg does not break you may reuse it in future moves Return the minimum number of moves that you need to determine with certainty what the value of f is Example Input k n Output Explanation Drop the egg from floor If it breaks we know that f Otherwise drop the egg from floor If it breaks we know that f If it does not break then we know f Hence we need at minimum moves to determine with certainty what the value of f is Example Input k n Output Example Input k n Output Constraints k n
shortest path visiting all nodes You have an undirected connected graph of n nodes labeled from to n You are given an array graph where graph i is a list of all the nodes connected with node i by an edge Return the length of the shortest path that visits every node You may start and stop at any node you may revisit nodes multiple times and you may reuse edges Example Input graph Output Explanation One possible path is Example Input graph Output Explanation One possible path is Constraints n graph length n graph i length n graph i does not contain i If graph a contains b then graph b contains a The input graph is always connected
number of good paths There is a tree i e a connected undirected graph with no cycles consisting of n nodes numbered from to n and exactly n edges You are given a indexed integer array vals of length n where vals i denotes the value of the ith node You are also given a integer array edges where edges i ai bi denotes that there exists an undirected edge connecting nodes ai and bi A good path is a simple path that satisfies the following conditions The starting node and the ending node have the same value All nodes between the starting node and the ending node have values less than or equal to the starting node i e the starting node s value should be the maximum value along the path Return the number of distinct good paths Note that a path and its reverse are counted as the same path For example is considered to be the same as A single node is also considered as a valid path Example Input vals edges Output Explanation There are good paths consisting of a single node There is additional good path The reverse path is treated as the same as Note that is not a good path because vals vals Example Input vals edges Output Explanation There are good paths consisting of a single node There are additional good paths and Example Input vals edges Output Explanation The tree consists of only one node so there is one good path Constraints n vals length n vals i edges length n edges i length ai bi n ai bi edges represents a valid tree
replace elements with greatest element on right side Given an array arr replace every element in that array with the greatest element among the elements to its right and replace the last element with After doing so return the array Example Input arr Output Explanation index the greatest element to the right of index is index index the greatest element to the right of index is index index the greatest element to the right of index is index index the greatest element to the right of index is index index the greatest element to the right of index is index index there are no elements to the right of index so we put Example Input arr Output Explanation There are no elements to the right of index Constraints arr length arr i
minimum operations to convert number You are given a indexed integer array nums containing distinct numbers an integer start and an integer goal There is an integer x that is initially set to start and you want to perform operations on x such that it is converted to goal You can perform the following operation repeatedly on the number x If x then for any index i in the array i nums length you can set x to any of the following x nums i x nums i x nums i bitwise XOR Note that you can use each nums i any number of times in any order Operations that set x to be out of the range x are valid but no more operations can be done afterward Return the minimum number of operations needed to convert x start into goal and if it is not possible Example Input nums start goal Output Explanation We can go from with the following operations Example Input nums start goal Output Explanation We can go from with the following operations Note that the last operation sets x out of the range x which is valid Example Input nums start goal Output Explanation There is no way to convert into Constraints nums length nums i goal start start goal All the integers in nums are distinct
maximum difference between node and ancestor Given the root of a binary tree find the maximum value v for which there exist different nodes a and b where v a val b val and a is an ancestor of b A node a is an ancestor of b if either any child of a is equal to b or any child of a is an ancestor of b Example Input root null null null Output Explanation We have various ancestor node differences some of which are given below Among all possible differences the maximum value of is obtained by Example Input root null null Output Constraints The number of nodes in the tree is in the range Node val
h-index Given an array of integers citations where citations i is the number of citations a researcher received for their ith paper return the researcher s h index According to the definition of h index on Wikipedia The h index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times Example Input citations Output Explanation means the researcher has papers in total and each of them had received citations respectively Since the researcher has papers with at least citations each and the remaining two with no more than citations each their h index is Example Input citations Output Constraints n citations length n citations i
second highest salary SQL Schema Table Employee Column Name Type id int salary int id is the primary key column for this table Each row of this table contains information about the salary of an employee Write an SQL query to report the second highest salary from the Employee table If there is no second highest salary the query should report null The query result format is in the following example Example Input Employee table id salary Output SecondHighestSalary Example Input Employee table id salary Output SecondHighestSalary null
game play analysis i SQL Schema Table Activity Column Name Type int int date int is the primary key of this table This table shows the activity of players of some games Each row is a record of a player who logged in and played a number of games possibly before logging out on someday using some device Write an SQL query to report the first login date for each player Return the result table in any order The query result format is in the following example Example Input Activity table Output
sum of left leaves Given the root of a binary tree return the sum of all left leaves A leaf is a node with no children A left leaf is a leaf that is the left child of another node Example Input root null null Output Explanation There are two left leaves in the binary tree with values and respectively Example Input root Output Constraints The number of nodes in the tree is in the range Node val
minimum cost tree from leaf values Given an array arr of positive integers consider all binary trees such that Each node has either or children The values of arr correspond to the values of each leaf in an in order traversal of the tree The value of each non leaf node is equal to the product of the largest leaf value in its left and right subtree respectively Among all possible binary trees considered return the smallest possible sum of the values of each non leaf node It is guaranteed this sum fits into a bit integer A node is a leaf if and only if it has zero children Example Input arr Output Explanation There are two possible trees shown The first has a non leaf node sum and the second has non leaf node sum Example Input arr Output Constraints arr length arr i It is guaranteed that the answer fits into a bit signed integer i e it is less than
average of levels in binary tree Given the root of a binary tree return the average value of the nodes on each level in the form of an array Answers within of the actual answer will be accepted Example Input root null null Output Explanation The average value of nodes on level is on level is and on level is Hence return Example Input root Output Constraints The number of nodes in the tree is in the range Node val
maximum compatibility score sum There is a survey that consists of n questions where each question s answer is either no or yes The survey was given to m students numbered from to m and m mentors numbered from to m The answers of the students are represented by a integer array students where students i is an integer array that contains the answers of the ith student indexed The answers of the mentors are represented by a integer array mentors where mentors j is an integer array that contains the answers of the jth mentor indexed Each student will be assigned to one mentor and each mentor will have one student assigned to them The compatibility score of a student mentor pair is the number of answers that are the same for both the student and the mentor For example if the student s answers were and the mentor s answers were then their compatibility score is because only the second and the third answers are the same You are tasked with finding the optimal student mentor pairings to maximize the sum of the compatibility scores Given students and mentors return the maximum compatibility score sum that can be achieved Example Input students mentors Output Explanation We assign students to mentors in the following way student to mentor with a compatibility score of student to mentor with a compatibility score of student to mentor with a compatibility score of The compatibility score sum is Example Input students mentors Output Explanation The compatibility score of any student mentor pair is Constraints m students length mentors length n students i length mentors j length m n students i k is either or mentors j k is either or
binary tree maximum path sum A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them A node can only appear in the sequence at most once Note that the path does not need to pass through the root The path sum of a path is the sum of the node s values in the path Given the root of a binary tree return the maximum path sum of any non empty path Example Input root Output Explanation The optimal path is with a path sum of Example Input root null null Output Explanation The optimal path is with a path sum of Constraints The number of nodes in the tree is in the range Node val
longest harmonious subsequence We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly Given an integer array nums return the length of its longest harmonious subsequence among all its possible subsequences A subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements Example Input nums Output Explanation The longest harmonious subsequence is Example Input nums Output Example Input nums Output Constraints nums length nums i
most popular video creator You are given two string arrays creators and ids and an integer array views all of length n The ith video on a platform was created by creator i has an id of ids i and has views i views The popularity of a creator is the sum of the number of views on all of the creator s videos Find the creator with the highest popularity and the id of their most viewed video If multiple creators have the highest popularity find all of them If multiple videos have the highest view count for a creator find the lexicographically smallest id Return a array of strings answer where answer i creatori idi means that creatori has the highest popularity and idi is the id of their most popular video The answer can be returned in any order Example Input creators alice bob alice chris ids one two three four views Output alice one bob two Explanation The popularity of alice is The popularity of bob is The popularity of chris is alice and bob are the most popular creators For bob the video with the highest view count is two For alice the videos with the highest view count are one and three Since one is lexicographically smaller than three it is included in the answer Example Input creators alice alice alice ids a b c views Output alice b Explanation The videos with id b and c have the highest view count Since b is lexicographically smaller than c it is included in the answer Constraints n creators length ids length views length n creators i length ids i length creators i and ids i consist only of lowercase English letters views i
simple bank system You have been tasked with writing a program for a popular bank that will automate all its incoming transactions transfer deposit and withdraw The bank has n accounts numbered from to n The initial balance of each account is stored in a indexed integer array balance with the i th account having an initial balance of balance i Execute all the valid transactions A transaction is valid if The given account number s are between and n and The amount of money withdrawn or transferred from is less than or equal to the balance of the account Implement the Bank class Bank long balance Initializes the object with the indexed integer array balance boolean transfer int int long money Transfers money dollars from the account numbered to the account numbered Return true if the transaction was successful false otherwise boolean deposit int account long money Deposit money dollars into the account numbered account Return true if the transaction was successful false otherwise boolean withdraw int account long money Withdraw money dollars from the account numbered account Return true if the transaction was successful false otherwise Example Input Bank withdraw transfer deposit transfer withdraw Output null true true true false false Explanation Bank bank new Bank bank withdraw return true account has a balance of so it is valid to withdraw Account has bank transfer return true account has a balance of so it is valid to transfer Account has and account has bank deposit return true it is valid to deposit to account Account has bank transfer return false the current balance of account is so it is invalid to transfer from it bank withdraw return false it is invalid because account does not exist Constraints n balance length n account balance i money At most calls will be made to each function transfer deposit withdraw
complex number multiplication A complex number can be represented as a string on the form real imaginaryi where real is the real part and is an integer in the range imaginary is the imaginary part and is an integer in the range Given two complex numbers and as strings return a string of the complex number that represents their multiplications Example Input Output Explanation i i i and you need convert it to the form of Example Input Output Explanation i i i and you need convert it to the form of Constraints and are valid complex numbers
add binary Given two binary strings a and b return their sum as a binary string Example Input a b Output Example Input a b Output Constraints a length b length a and b consist only of or characters Each string does not contain leading zeros except for the zero itself
delete and earn You are given an integer array nums You want to maximize the number of points you get by performing the following operation any number of times Pick any nums i and delete it to earn nums i points Afterwards you must delete every element equal to nums i and every element equal to nums i Return the maximum number of points you can earn by applying the above operation some number of times Example Input nums Output Explanation You can perform the following operations Delete to earn points Consequently is also deleted nums Delete to earn points nums You earn a total of points Example Input nums Output Explanation You can perform the following operations Delete a to earn points All s and s are also deleted nums Delete a again to earn points nums Delete a once more to earn points nums You earn a total of points Constraints nums length nums i
range module A Range Module is a module that tracks ranges of numbers Design a data structure to track the ranges represented as half open intervals and query about them A half open interval left right denotes all the real numbers x where left x right Implement the RangeModule class RangeModule Initializes the object of the data structure void addRange int left int right Adds the half open interval left right tracking every real number in that interval Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval left right that are not already tracked boolean queryRange int left int right Returns true if every real number in the interval left right is currently being tracked and false otherwise void removeRange int left int right Stops tracking every real number currently being tracked in the half open interval left right Example Input RangeModule addRange removeRange queryRange queryRange queryRange Output null null null true false true Explanation RangeModule rangeModule new RangeModule rangeModule addRange rangeModule removeRange rangeModule queryRange return True Every number in is being tracked rangeModule queryRange return False Numbers like in are not being tracked rangeModule queryRange return True The number in is still being tracked despite the remove operation Constraints left right At most calls will be made to addRange queryRange and removeRange
article views i SQL Schema Table Views Column Name Type int int int date There is no primary key for this table it may have duplicate rows Each row of this table indicates that some viewer viewed an article written by some author on some date Note that equal and indicate the same person Write an SQL query to find all the authors that viewed at least one of their own articles Return the result table sorted by id in ascending order The query result format is in the following example Example Input Views table Output id
flip columns for maximum number of equal rows You are given an m x n binary matrix matrix You can choose any number of columns in the matrix and flip every cell in that column i e Change the value of the cell from to or vice versa Return the maximum number of rows that have all values equal after some number of flips Example Input matrix Output Explanation After flipping no values row has all values equal Example Input matrix Output Explanation After flipping values in the first column both rows have equal values Example Input matrix Output Explanation After flipping values in the first two columns the last two rows have equal values Constraints m matrix length n matrix i length m n matrix i j is either or
maximum profit of operating a centennial wheel You are the operator of a Centennial Wheel that has four gondolas and each gondola has room for up to four people You have the ability to rotate the gondolas counterclockwise which costs you runningCost dollars You are given an array customers of length n where customers i is the number of new customers arriving just before the ith rotation indexed This means you must rotate the wheel i times before the customers i customers arrive You cannot make customers wait if there is room in the gondola Each customer pays boardingCost dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again You can stop the wheel at any time including before serving all customers If you decide to stop serving customers all subsequent rotations are free in order to get all the customers down safely Note that if there are currently more than four customers waiting at the wheel only four will board the gondola and the rest will wait for the next rotation Return the minimum number of rotations you need to perform to maximize your profit If there is no scenario where the profit is positive return Example Input customers boardingCost runningCost Output Explanation The numbers written on the gondolas are the number of people currently there customers arrive board and wait for the next gondola the wheel rotates Current profit is customers arrive the waiting board the wheel and the other wait the wheel rotates Current profit is The final customers board the gondola the wheel rotates Current profit is The highest profit was after rotating the wheel times Example Input customers boardingCost runningCost Output Explanation customers arrive board and wait for the next gondola the wheel rotates Current profit is customers arrive board and wait originally waiting newly waiting the wheel rotates Current profit is The final customers arrive board and wait the wheel rotates Current profit is board and wait the wheel rotates Current profit is board and wait the wheel rotates Current profit is board and waits the wheel rotates Current profit is boards the wheel rotates Current profit is The highest profit was after rotating the wheel times Example Input customers boardingCost runningCost Output Explanation customers arrive board and wait the wheel rotates Current profit is customers arrive board and wait the wheel rotates Current profit is customers arrive board and wait the wheel rotates Current profit is customers arrive board and waits the wheel rotates Current profit is customer arrives board and wait the wheel rotates Current profit is The profit was never positive so return Constraints n customers length n customers i boardingCost runningCost
maximum genetic difference query There is a rooted tree consisting of n nodes numbered to n Each node s number denotes its unique genetic value i e the genetic value of node x is x The genetic difference between two genetic values is defined as the bitwise XOR of their values You are given the integer array parents where parents i is the parent for node i If node x is the root of the tree then parents x You are also given the array queries where queries i nodei vali For each query i find the maximum genetic difference between vali and pi where pi is the genetic value of any node that is on the path between nodei and the root including nodei and the root More formally you want to maximize vali XOR pi Return an array ans where ans i is the answer to the ith query Example Input parents queries Output Explanation The queries are processed as follows The node with the maximum genetic difference is with a difference of XOR The node with the maximum genetic difference is with a difference of XOR The node with the maximum genetic difference is with a difference of XOR Example Input parents queries Output Explanation The queries are processed as follows The node with the maximum genetic difference is with a difference of XOR The node with the maximum genetic difference is with a difference of XOR The node with the maximum genetic difference is with a difference of XOR Constraints parents length parents i parents length for every node i that is not the root parents root queries length nodei parents length vali
grid game You are given a indexed array grid of size x n where grid r c represents the number of points at position r c on the matrix Two robots are playing a game on this matrix Both robots initially start at and want to reach n Each robot may only move to the right r c to r c or down r c to r c At the start of the game the first robot moves from to n collecting all the points from the cells on its path For all cells r c traversed on the path grid r c is set to Then the second robot moves from to n collecting the points on its path Note that their paths may intersect with one another The first robot wants to minimize the number of points collected by the second robot In contrast the second robot wants to maximize the number of points it collects If both robots play optimally return the number of points collected by the second robot Example Input grid Output Explanation The optimal path taken by the first robot is shown in red and the optimal path taken by the second robot is shown in blue The cells visited by the first robot are set to The second robot will collect points Example Input grid Output Explanation The optimal path taken by the first robot is shown in red and the optimal path taken by the second robot is shown in blue The cells visited by the first robot are set to The second robot will collect points Example Input grid Output Explanation The optimal path taken by the first robot is shown in red and the optimal path taken by the second robot is shown in blue The cells visited by the first robot are set to The second robot will collect points Constraints grid length n grid r length n grid r c
count asterisks You are given a string s where every two consecutive vertical bars are grouped into a pair In other words the and make a pair the and make a pair and so forth Return the number of in s excluding the between each pair of Note that each will belong to exactly one pair Example Input s l e et c o de Output Explanation The considered characters are underlined l e et c o de The characters between the first and second are excluded from the answer Also the characters between the third and fourth are excluded from the answer There are asterisks considered Therefore we return Example Input s iamprogrammer Output Explanation In this example there are no asterisks in s Therefore we return Example Input s yo uar e b e au tifu l Output Explanation The considered characters are underlined yo uar e b e au tifu l There are asterisks considered Therefore we return Constraints s length s consists of lowercase English letters vertical bars and asterisks s contains an even number of vertical bars
longest word in dictionary through deleting Given a string s and a string array dictionary return the longest string in the dictionary that can be formed by deleting some of the given string characters If there is more than one possible result return the longest word with the smallest lexicographical order If there is no possible result return the empty string Example Input s abpcplea dictionary ale apple monkey plea Output apple Example Input s abpcplea dictionary a b c Output a Constraints s length dictionary length dictionary i length s and dictionary i consist of lowercase English letters
binary string with substrings representing 1 to n Given a binary string s and a positive integer n return true if the binary representation of all the integers in the range n are substrings of s or false otherwise A substring is a contiguous sequence of characters within a string Example Input s n Output true Example Input s n Output false Constraints s length s i is either or n
check if word is valid after substitutions Given a string s determine if it is valid A string s is valid if starting with an empty string t you can transform t into s after performing the following operation any number of times Insert string abc into any position in t More formally t becomes tleft abc tright where t tleft tright Note that tleft and tright may be empty Return true if s is a valid string otherwise return false Example Input s aabcbc Output true Explanation abc aabcbc Thus aabcbc is valid Example Input s abcabcababcc Output true Explanation abc abcabc abcabcabc abcabcababcc Thus abcabcababcc is valid Example Input s abccba Output false Explanation It is impossible to get abccba using the operation Constraints s length s consists of letters a b and c
average waiting time There is a restaurant with a single chef You are given an array customers where customers i arrivali timei arrivali is the arrival time of the ith customer The arrival times are sorted in non decreasing order timei is the time needed to prepare the order of the ith customer When a customer arrives he gives the chef his order and the chef starts preparing it once he is idle The customer waits till the chef finishes preparing his order The chef does not prepare food for more than one customer at a time The chef prepares food for customers in the order they were given in the input Return the average waiting time of all customers Solutions within from the actual answer are considered accepted Example Input customers Output Explanation The first customer arrives at time the chef takes his order and starts preparing it immediately at time and finishes at time so the waiting time of the first customer is The second customer arrives at time the chef takes his order and starts preparing it at time and finishes at time so the waiting time of the second customer is The third customer arrives at time the chef takes his order and starts preparing it at time and finishes at time so the waiting time of the third customer is So the average waiting time Example Input customers Output Explanation The first customer arrives at time the chef takes his order and starts preparing it immediately at time and finishes at time so the waiting time of the first customer is The second customer arrives at time the chef takes his order and starts preparing it at time and finishes at time so the waiting time of the second customer is The third customer arrives at time the chef takes his order and starts preparing it at time and finishes at time so the waiting time of the third customer is The fourth customer arrives at time the chef takes his order and starts preparing it immediately at time and finishes at time so the waiting time of the fourth customer is So the average waiting time Constraints customers length arrivali timei arrivali arrivali
push dominoes There are n dominoes in a line and we place each domino vertically upright In the beginning we simultaneously push some of the dominoes either to the left or to the right After each second each domino that is falling to the left pushes the adjacent domino on the left Similarly the dominoes falling to the right push their adjacent dominoes standing on the right When a vertical domino has dominoes falling on it from both sides it stays still due to the balance of the forces For the purposes of this question we will consider that a falling domino expends no additional force to a falling or already fallen domino You are given a string dominoes representing the initial state where dominoes i L if the ith domino has been pushed to the left dominoes i R if the ith domino has been pushed to the right and dominoes i if the ith domino has not been pushed Return a string representing the final state Example Input dominoes RR L Output RR L Explanation The first domino expends no additional force on the second domino Example Input dominoes L R LR L Output LL RR LLRRLL Constraints n dominoes length n dominoes i is either L R or
shortest distance to target string in a circular array You are given a indexed circular string array words and a string target A circular array means that the array s end connects to the array s beginning Formally the next element of words i is words i n and the previous element of words i is words i n n where n is the length of words Starting from startIndex you can move to either the next word or the previous word with step at a time Return the shortest distance needed to reach the string target If the string target does not exist in words return Example Input words hello i am leetcode hello target hello startIndex Output Explanation We start from index and can reach hello by moving units to the right to reach index moving units to the left to reach index moving units to the right to reach index moving unit to the left to reach index The shortest distance to reach hello is Example Input words a b leetcode target leetcode startIndex Output Explanation We start from index and can reach leetcode by moving units to the right to reach index moving unit to the left to reach index The shortest distance to reach leetcode is Example Input words i eat leetcode target ate startIndex Output Explanation Since ate does not exist in words we return Constraints words length words i length words i and target consist of only lowercase English letters startIndex words length
unique length-3 palindromic subsequences Given a string s return the number of unique palindromes of length three that are a subsequence of s Note that even if there are multiple ways to obtain the same subsequence it is still only counted once A palindrome is a string that reads the same forwards and backwards A subsequence of a string is a new string generated from the original string with some characters can be none deleted without changing the relative order of the remaining characters For example ace is a subsequence of abcde Example Input s aabca Output Explanation The palindromic subsequences of length are aba subsequence of aabca aaa subsequence of aabca aca subsequence of aabca Example Input s adc Output Explanation There are no palindromic subsequences of length in adc Example Input s bbcbaba Output Explanation The palindromic subsequences of length are bbb subsequence of bbcbaba bcb subsequence of bbcbaba bab subsequence of bbcbaba aba subsequence of bbcbaba Constraints s length s consists of only lowercase English letters
find k closest elements Given a sorted integer array arr two integers k and x return the k closest integers to x in the array The result should also be sorted in ascending order An integer a is closer to x than an integer b if a x b x or a x b x and a b Example Input arr k x Output Example Input arr k x Output Constraints k arr length arr length arr is sorted in ascending order arr i x
last substring in lexicographical order Given a string s return the last substring of s in lexicographical order Example Input s abab Output bab Explanation The substrings are a ab aba abab b ba bab The lexicographically maximum substring is bab Example Input s leetcode Output tcode Constraints s length s contains only lowercase English letters
sort integers by the power value The power of an integer x is defined as the number of steps needed to transform x into using the following steps if x is even then x x if x is odd then x x For example the power of x is because needs steps to become Given three integers lo hi and k The task is to sort all integers in the interval lo hi by the power value in ascending order if two or more integers have the same power value sort them by ascending order Return the kth integer in the range lo hi sorted by the power value Notice that for any integer x lo x hi it is guaranteed that x will transform into using these steps and that the power of x is will fit in a bit signed integer Example Input lo hi k Output Explanation The power of is The power of is The power of is The power of is The interval sorted by the power value For k answer is the second element which is Notice that and have the same power value and we sorted them in ascending order Same for and Example Input lo hi k Output Explanation The power array corresponding to the interval is The interval sorted by power is The fourth number in the sorted array is Constraints lo hi k hi lo
basic calculator ii Given a string s which represents an expression evaluate this expression and return its value The integer division should truncate toward zero You may assume that the given expression is always valid All intermediate results will be in the range of Note You are not allowed to use any built in function which evaluates strings as mathematical expressions such as eval Example Input s Output Example Input s Output Example Input s Output Constraints s length s consists of integers and operators separated by some number of spaces s represents a valid expression All the integers in the expression are non negative integers in the range The answer is guaranteed to fit in a bit integer
minimum numbers of function calls to make target array You are given an integer array nums You have an integer array arr of the same length with all values set to initially You also have the following modify function You want to use the modify function to convert arr to nums using the minimum number of calls Return the minimum number of function calls to make nums from arr The test cases are generated so that the answer fits in a bit signed integer Example Input nums Output Explanation Increment by second element to get operation Double all the elements operations Increment by both elements operations Total of operations Example Input nums Output Explanation Increment by both elements operations Double all the elements operation Total of operations Example Input nums Output Explanation initial nums Constraints nums length nums i
calculate special bonus SQL Schema Table Employees Column Name Type int name varchar salary int is the primary key for this table Each row of this table indicates the employee ID employee name and salary Write an SQL query to calculate the bonus of each employee The bonus of an employee is of their salary if the ID of the employee is an odd number and the employee name does not start with the character M The bonus of an employee is otherwise Return the result table ordered by The query result format is in the following example Example Input Employees table name salary Meir Michael Addilyn Juan Kannon Output bonus Explanation The employees with IDs and get bonus because they have an even The employee with ID gets bonus because their name starts with M The rest of the employees get a bonus
count elements with strictly smaller and greater elements Given an integer array nums return the number of elements that have both a strictly smaller and a strictly greater element appear in nums Example Input nums Output Explanation The element has the element strictly smaller than it and the element strictly greater than it Element has element strictly smaller than it and element strictly greater than it In total there are elements having both a strictly smaller and a strictly greater element appear in nums Example Input nums Output Explanation The element has the element strictly smaller than it and the element strictly greater than it Since there are two elements with the value in total there are elements having both a strictly smaller and a strictly greater element appear in nums Constraints nums length nums i
valid perfect square Given a positive integer num return true if num is a perfect square or false otherwise A perfect square is an integer that is the square of an integer In other words it is the product of some integer with itself You must not use any built in library function such as sqrt Example Input num Output true Explanation We return true because and is an integer Example Input num Output false Explanation We return false because and is not an integer Constraints num
nth highest salary SQL Schema Table Employee Column Name Type id int salary int id is the primary key column for this table Each row of this table contains information about the salary of an employee Write an SQL query to report the nth highest salary from the Employee table If there is no nth highest salary the query should report null The query result format is in the following example Example Input Employee table id salary n Output getNthHighestSalary Example Input Employee table id salary n Output getNthHighestSalary null
snail traversal Write code that enhances all arrays such that you can call the snail rowsCount colsCount method that transforms the array into a array organised in the pattern known as snail traversal order Invalid input values should output an empty array If rowsCount colsCount nums length the input is considered invalid Snail traversal order starts at the top left cell with the first value of the current array It then moves through the entire first column from top to bottom followed by moving to the next column on the right and traversing it from bottom to top This pattern continues alternating the direction of traversal with each column until the entire current array is covered For example when given the input array with rowsCount and colsCount the desired output matrix is shown below Note that iterating the matrix following the arrows corresponds to the order of numbers in the original array Example Input nums rowsCount colsCount Output Example Input nums rowsCount colsCount Output Example Input nums rowsCount colsCount Output Explanation multiplied by is and the original array has a length of therefore the input is invalid Constraints nums length nums i rowsCount colsCount
count number of homogenous substrings Given a string s return the number of homogenous substrings of s Since the answer may be too large return it modulo A string is homogenous if all the characters of the string are the same A substring is a contiguous sequence of characters within a string Example Input s abbcccaa Output Explanation The homogenous substrings are listed as below a appears times aa appears time b appears times bb appears time c appears times cc appears times ccc appears time Example Input s xy Output Explanation The homogenous substrings are x and y Example Input s zzzzz Output Constraints s length s consists of lowercase letters
binary prefix divisible by 5 You are given a binary array nums indexed We define xi as the number whose binary representation is the subarray nums i from most significant bit to least significant bit For example if nums then and Return an array of booleans answer where answer i is true if xi is divisible by Example Input nums Output true false false Explanation The input numbers in binary are which are and in base Only the first number is divisible by so answer is true Example Input nums Output false false false Constraints nums length nums i is either or
the k-th lexicographical string of all happy strings of length n A happy string is a string that consists only of letters of the set a b c s i s i for all values of i from to s length string is indexed For example strings abc ac b and abcbabcbcb are all happy strings and strings aa baa and ababbc are not happy strings Given two integers n and k consider a list of all happy strings of length n sorted in lexicographical order Return the kth string of this list or return an empty string if there are less than k happy strings of length n Example Input n k Output c Explanation The list a b c contains all happy strings of length The third string is c Example Input n k Output Explanation There are only happy strings of length Example Input n k Output cab Explanation There are different happy string of length aba abc aca acb bab bac bca bcb cab cac cba cbc You will find the string cab Constraints n k
4sum ii Given four integer arrays and all of length n return the number of tuples i j k l such that i j k l n i j k l Example Input Output Explanation The two tuples are Example Input Output Constraints n length n length n length n length n i i i i
minimum number of flips to convert binary matrix to zero matrix Given a m x n binary matrix mat In one step you can choose one cell and flip it and all the four neighbors of it if they exist Flip is changing to and to A pair of cells are called neighbors if they share one edge Return the minimum number of steps required to convert mat to a zero matrix or if you cannot A binary matrix is a matrix with all cells equal to or only A zero matrix is a matrix with all cells equal to Example Input mat Output Explanation One possible solution is to flip then and finally as shown Example Input mat Output Explanation Given matrix is a zero matrix We do not need to change it Example Input mat Output Explanation Given matrix cannot be a zero matrix Constraints m mat length n mat i length m n mat i j is either or
design parking system Design a parking system for a parking lot The parking lot has three kinds of parking spaces big medium and small with a fixed number of slots for each size Implement the ParkingSystem class ParkingSystem int big int medium int small Initializes object of the ParkingSystem class The number of slots for each parking space are given as part of the constructor bool addCar int carType Checks whether there is a parking space of carType for the car that wants to get into the parking lot carType can be of three kinds big medium or small which are represented by and respectively A car can only park in a parking space of its carType If there is no space available return false else park the car in that size space and return true Example Input ParkingSystem addCar addCar addCar addCar Output null true true false false Explanation ParkingSystem parkingSystem new ParkingSystem parkingSystem addCar return true because there is available slot for a big car parkingSystem addCar return true because there is available slot for a medium car parkingSystem addCar return false because there is no available slot for a small car parkingSystem addCar return false because there is no available slot for a big car It is already occupied Constraints big medium small carType is or At most calls will be made to addCar
parallel courses iii You are given an integer n which indicates that there are n courses labeled from to n You are also given a integer array relations where relations j prevCoursej nextCoursej denotes that course prevCoursej has to be completed before course nextCoursej prerequisite relationship Furthermore you are given a indexed integer array time where time i denotes how many months it takes to complete the i th course You must find the minimum number of months needed to complete all the courses following these rules You may start taking a course at any time if the prerequisites are met Any number of courses can be taken at the same time Return the minimum number of months needed to complete all the courses Note The test cases are generated such that it is possible to complete every course i e the graph is a directed acyclic graph Example Input n relations time Output Explanation The figure above represents the given graph and the time required to complete each course We start course and course simultaneously at month Course takes months and course takes months to complete respectively Thus the earliest time we can start course is at month and the total time required is months Example Input n relations time Output Explanation The figure above represents the given graph and the time required to complete each course You can start courses and at month You can complete them after and months respectively Course can be taken only after course is completed i e after months It is completed after months Course can be taken only after courses and have been completed i e after max months Thus the minimum time needed to complete all the courses is months Constraints n relations length min n n relations j length prevCoursej nextCoursej n prevCoursej nextCoursej All the pairs prevCoursej nextCoursej are unique time length n time i The given graph is a directed acyclic graph
minimum number of days to disconnect island You are given an m x n binary grid grid where represents land and represents water An island is a maximal directionally horizontal or vertical connected group of s The grid is said to be connected if we have exactly one island otherwise is said disconnected In one day we are allowed to change any single land cell into a water cell Return the minimum number of days to disconnect the grid Example Input grid Output Explanation We need at least days to get a disconnected grid Change land grid and grid to water and get disconnected island Example Input grid Output Explanation Grid of full water is also disconnected islands Constraints m grid length n grid i length m n grid i j is either or
delete the middle node of a linked list You are given the head of a linked list Delete the middle node and return the head of the modified linked list The middle node of a linked list of size n is the n th node from the start using based indexing where x denotes the largest integer less than or equal to x For n and the middle nodes are and respectively Example Input head Output Explanation The above figure represents the given linked list The indices of the nodes are written below Since n node with value is the middle node which is marked in red We return the new list after removing this node Example Input head Output Explanation The above figure represents the given linked list For n node with value is the middle node which is marked in red Example Input head Output Explanation The above figure represents the given linked list For n node with value is the middle node which is marked in red Node with value is the only node remaining after removing node Constraints The number of nodes in the list is in the range Node val
decode ways ii A message containing letters from A Z can be encoded into numbers using the following mapping A B Z To decode an encoded message all the digits must be grouped then mapped back into letters using the reverse of the mapping above there may be multiple ways For example can be mapped into AAJF with the grouping KJF with the grouping Note that the grouping is invalid because cannot be mapped into F since is different from In addition to the mapping above an encoded message may contain the character which can represent any digit from to is excluded For example the encoded message may represent any of the encoded messages or Decoding is equivalent to decoding any of the encoded messages it can represent Given a string s consisting of digits and characters return the number of ways to decode it Since the answer may be very large return it modulo Example Input s Output Explanation The encoded message can represent any of the encoded messages or Each of these can be decoded to the strings A B C D E F G H and I respectively Hence there are a total of ways to decode Example Input s Output Explanation The encoded message can represent any of the encoded messages or Each of these encoded messages have ways to be decoded e g can be decoded to AA or K Hence there are a total of ways to decode Example Input s Output Explanation The encoded message can represent any of the encoded messages or and have ways of being decoded but and only have way Hence there are a total of ways to decode Constraints s length s i is a digit or
reverse pairs Given an integer array nums return the number of reverse pairs in the array A reverse pair is a pair i j where i j nums length and nums i nums j Example Input nums Output Explanation The reverse pairs are nums nums nums nums Example Input nums Output Explanation The reverse pairs are nums nums nums nums nums nums Constraints nums length nums i
count ways to group overlapping ranges You are given a integer array ranges where ranges i starti endi denotes that all integers between starti and endi both inclusive are contained in the ith range You are to split ranges into two possibly empty groups such that Each range belongs to exactly one group Any two overlapping ranges must belong to the same group Two ranges are said to be overlapping if there exists at least one integer that is present in both ranges For example and are overlapping because and occur in both ranges Return the total number of ways to split ranges into two groups Since the answer may be very large return it modulo Example Input ranges Output Explanation The two ranges are overlapping so they must be in the same group Thus there are two possible ways Put both the ranges together in group Put both the ranges together in group Example Input ranges Output Explanation Ranges and are overlapping So they must be in the same group Again ranges and are also overlapping So they must also be in the same group Thus there are four possible ways to group them All the ranges in group All the ranges in group Ranges and in group and in group Ranges and in group and in group Constraints ranges length ranges i length starti endi
count the number of fair pairs Given a indexed integer array nums of size n and two integers lower and upper return the number of fair pairs A pair i j is fair if i j n and lower nums i nums j upper Example Input nums lower upper Output Explanation There are fair pairs and Example Input nums lower upper Output Explanation There is a single fair pair Constraints nums length nums length n nums i lower upper
maximum matching of players with trainers You are given a indexed integer array players where players i represents the ability of the ith player You are also given a indexed integer array trainers where trainers j represents the training capacity of the jth trainer The ith player can match with the jth trainer if the player s ability is less than or equal to the trainer s training capacity Additionally the ith player can be matched with at most one trainer and the jth trainer can be matched with at most one player Return the maximum number of matchings between players and trainers that satisfy these conditions Example Input players trainers Output Explanation One of the ways we can form two matchings is as follows players can be matched with trainers since players can be matched with trainers since It can be proven that is the maximum number of matchings that can be formed Example Input players trainers Output Explanation The trainer can be matched with any of the players Each player can only be matched with one trainer so the maximum answer is Constraints players length trainers length players i trainers j
add edges to make degrees of all nodes even There is an undirected graph consisting of n nodes numbered from to n You are given the integer n and a array edges where edges i ai bi indicates that there is an edge between nodes ai and bi The graph can be disconnected You can add at most two additional edges possibly none to this graph so that there are no repeated edges and no self loops Return true if it is possible to make the degree of each node in the graph even otherwise return false The degree of a node is the number of edges connected to it Example Input n edges Output true Explanation The above diagram shows a valid way of adding an edge Every node in the resulting graph is connected to an even number of edges Example Input n edges Output true Explanation The above diagram shows a valid way of adding two edges Example Input n edges Output false Explanation It is not possible to obtain a valid graph with adding at most edges Constraints n edges length edges i length ai bi n ai bi There are no repeated edges
wiggle subsequence A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative The first difference if one exists may be either positive or negative A sequence with one element and a sequence with two non equal elements are trivially wiggle sequences For example is a wiggle sequence because the differences alternate between positive and negative In contrast and are not wiggle sequences The first is not because its first two differences are positive and the second is not because its last difference is zero A subsequence is obtained by deleting some elements possibly zero from the original sequence leaving the remaining elements in their original order Given an integer array nums return the length of the longest wiggle subsequence of nums Example Input nums Output Explanation The entire sequence is a wiggle sequence with differences Example Input nums Output Explanation There are several subsequences that achieve this length One is with differences Example Input nums Output Constraints nums length nums i Follow up Could you solve this in O n time
break a palindrome Given a palindromic string of lowercase English letters palindrome replace exactly one character with any lowercase English letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible Return the resulting string If there is no way to replace a character to make it not a palindrome return an empty string A string a is lexicographically smaller than a string b of the same length if in the first position where a and b differ a has a character strictly smaller than the corresponding character in b For example abcc is lexicographically smaller than abcd because the first position they differ is at the fourth character and c is smaller than d Example Input palindrome abccba Output aaccba Explanation There are many ways to make abccba not a palindrome such as zbccba aaccba and abacba Of all the ways aaccba is the lexicographically smallest Example Input palindrome a Output Explanation There is no way to replace a single character to make a not a palindrome so return an empty string Constraints palindrome length palindrome consists of only lowercase English letters
largest triangle area Given an array of points on the X Y plane points where points i xi yi return the area of the largest triangle that can be formed by any three different points Answers within of the actual answer will be accepted Example Input points Output Explanation The five points are shown in the above figure The red triangle is the largest Example Input points Output Constraints points length xi yi All the given points are unique
strong password checker A password is considered strong if the below conditions are all met It has at least characters and at most characters It contains at least one lowercase letter at least one uppercase letter and at least one digit It does not contain three repeating characters in a row i e is weak but is strong Given a string password return the minimum number of steps required to make password strong if password is already strong return In one step you can Insert one character to password Delete one character from password or Replace one character of password with another character Example Input password a Output Example Input password Output Example Input password Output Constraints password length password consists of letters digits dot or exclamation mark
count unreachable pairs of nodes in an undirected graph You are given an integer n There is an undirected graph with n nodes numbered from to n You are given a integer array edges where edges i ai bi denotes that there exists an undirected edge connecting nodes ai and bi Return the number of pairs of different nodes that are unreachable from each other Example Input n edges Output Explanation There are no pairs of nodes that are unreachable from each other Therefore we return Example Input n edges Output Explanation There are pairs of nodes that are unreachable from each other Therefore we return Constraints n edges length edges i length ai bi n ai bi There are no repeated edges
fizz buzz Given an integer n return a string array answer indexed where answer i FizzBuzz if i is divisible by and answer i Fizz if i is divisible by answer i Buzz if i is divisible by answer i i as a string if none of the above conditions are true Example Input n Output Fizz Example Input n Output Fizz Buzz Example Input n Output Fizz Buzz Fizz Fizz Buzz Fizz FizzBuzz Constraints n
prime number of set bits in binary representation Given two integers left and right return the count of numbers in the inclusive range left right having a prime number of set bits in their binary representation Recall that the number of set bits an integer has is the number of s present when written in binary For example written in binary is which has set bits Example Input left right Output Explanation set bits is prime set bits is prime set bit is not prime set bits is prime set bits is prime numbers have a prime number of set bits Example Input left right Output Explanation set bits is prime set bits is prime set bits is prime set bits is prime set bits is prime set bits is not prime numbers have a prime number of set bits Constraints left right right left
diagonal traverse ii Given a integer array nums return all elements of nums in diagonal order as shown in the below images Example Input nums Output Example Input nums Output Constraints nums length nums i length sum nums i length nums i j
evaluate division You are given an array of variable pairs equations and an array of real numbers values where equations i Ai Bi and values i represent the equation Ai Bi values i Each Ai or Bi is a string that represents a single variable You are also given some queries where queries j Cj Dj represents the jth query where you must find the answer for Cj Dj Return the answers to all queries If a single answer cannot be determined return Note The input is always valid You may assume that evaluating the queries will not result in division by zero and that there is no contradiction Example Input equations a b b c values queries a c b a a e a a x x Output Explanation Given a b b c queries are a c b a a e a a x x return Example Input equations a b b c bc cd values queries a c c b bc cd cd bc Output Example Input equations a b values queries a b b a a c x y Output Constraints equations length equations i length Ai length Bi length values length equations length values i queries length queries i length Cj length Dj length Ai Bi Cj Dj consist of lower case English letters and digits
maximum difference by remapping a digit You are given an integer num You know that Danny Mittal will sneakily remap one of the possible digits to to another digit Return the difference between the maximum and minimum values Danny can make by remapping exactly one digit in num Notes When Danny remaps a digit to another digit Danny replaces all occurrences of in num with Danny can remap a digit to itself in which case num does not change Danny can remap different digits for obtaining minimum and maximum values respectively The resulting number after remapping can contain leading zeroes We mentioned Danny Mittal to congratulate him on being in the top in Weekly Contest Example Input num Output Explanation To achieve the maximum value Danny can remap the digit to the digit to yield To achieve the minimum value Danny can remap the digit to the digit yielding The difference between these two numbers is Example Input num Output Explanation The maximum value that can be returned by the function is if is replaced by and the minimum value that can be returned by the function is if is replaced by Thus we return Constraints num
sum of distances You are given a indexed integer array nums There exists an array arr of length nums length where arr i is the sum of i j over all j such that nums j nums i and j i If there is no such j set arr i to be Return the array arr Example Input nums Output Explanation When i nums nums and nums nums Therefore arr When i arr because there is no other index with value When i nums nums and nums nums Therefore arr When i nums nums and nums nums Therefore arr When i arr because there is no other index with value Example Input nums Output Explanation Since each element in nums is distinct arr i for all i Constraints nums length nums i
maximal network rank There is an infrastructure of n cities with some number of roads connecting these cities Each roads i ai bi indicates that there is a bidirectional road between cities ai and bi The network rank of two different cities is defined as the total number of directly connected roads to either city If a road is directly connected to both cities it is only counted once The maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities Given the integer n and the array roads return the maximal network rank of the entire infrastructure Example Input n roads Output Explanation The network rank of cities and is as there are roads that are connected to either or The road between and is only counted once Example Input n roads Output Explanation There are roads that are connected to cities or Example Input n roads Output Explanation The network rank of and is Notice that all the cities do not have to be connected Constraints n roads length n n roads i length ai bi n ai bi Each pair of cities has at most one road connecting them
minimum moves to move a box to their target location A storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations The game is represented by an m x n grid of characters grid where each element is a wall floor or box Your task is to move the box B to the target position T under the following rules The character S represents the player The player can move up down left right in grid if it is a floor empty cell The character represents the floor which means a free cell to walk The character represents the wall which means an obstacle impossible to walk there There is only one box B and one target cell T in the grid The box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box This is a push The player cannot walk through the box Return the minimum number of pushes to move the box to the target If there is no way to reach the target return Example Input grid T B S Output Explanation We return only the number of times the box is pushed Example Input grid T B S Output Example Input grid T B S Output Explanation push the box down left left up and up Constraints m grid length n grid i length m n grid contains only characters S T or B There is only one character S B and T in the grid
find the distance value between two arrays Given two integer arrays and and the integer d return the distance value between the two arrays The distance value is defined as the number of elements i such that there is not any element j where i j d Example Input d Output Explanation For we have d d d d For we have d d d d For we have d d d d Example Input d Output Example Input d Output Constraints length length i j d
maximum alternating subsequence sum The alternating sum of a indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices For example the alternating sum of is Given an array nums return the maximum alternating sum of any subsequence of nums after reindexing the elements of the subsequence A subsequence of an array is a new array generated from the original array by deleting some elements possibly none without changing the remaining elements relative order For example is a subsequence of the underlined elements while is not Example Input nums Output Explanation It is optimal to choose the subsequence with alternating sum Example Input nums Output Explanation It is optimal to choose the subsequence with alternating sum Example Input nums Output Explanation It is optimal to choose the subsequence with alternating sum Constraints nums length nums i
sum of root to leaf binary numbers You are given the root of a binary tree where each node has a value or Each root to leaf path represents a binary number starting with the most significant bit For example if the path is then this could represent in binary which is For all leaves in the tree consider the numbers represented by the path from the root to that leaf Return the sum of these numbers The test cases are generated so that the answer fits in a bits integer Example Input root Output Explanation Example Input root Output Constraints The number of nodes in the tree is in the range Node val is or
largest values from labels There is a set of n items You are given two integer arrays values and labels where the value and the label of the ith element are values i and labels i respectively You are also given two integers numWanted and useLimit Choose a subset s of the n elements such that The size of the subset s is less than or equal to numWanted There are at most useLimit items with the same label in s The score of a subset is the sum of the values in the subset Return the maximum score of a subset s Example Input values labels numWanted useLimit Output Explanation The subset chosen is the first third and fifth items Example Input values labels numWanted useLimit Output Explanation The subset chosen is the first second and third items Example Input values labels numWanted useLimit Output Explanation The subset chosen is the first and fourth items Constraints n values length labels length n values i labels i numWanted useLimit n
the latest login in 2020 SQL Schema Table Logins Column Name Type int datetime is the primary key for this table Each row contains information about the login time for the user with ID Write an SQL query to report the latest login for all users in the year Do not include the users who did not login in Return the result table in any order The query result format is in the following example Example Input Logins table Output Explanation User logged into their account times but only once in so we include this login in the result table User logged into their account times in once in February and once in December We include only the latest one December in the result table User logged into their account times but only once in so we include this login in the result table User did not login in so we do not include them in the result table
minimum white tiles after covering with carpets You are given a indexed binary string floor which represents the colors of tiles on a floor floor i denotes that the ith tile of the floor is colored black On the other hand floor i denotes that the ith tile of the floor is colored white You are also given numCarpets and carpetLen You have numCarpets black carpets each of length carpetLen tiles Cover the tiles with the given carpets such that the number of white tiles still visible is minimum Carpets may overlap one another Return the minimum number of white tiles still visible Example Input floor numCarpets carpetLen Output Explanation The figure above shows one way of covering the tiles with the carpets such that only white tiles are visible No other way of covering the tiles with the carpets can leave less than white tiles visible Example Input floor numCarpets carpetLen Output Explanation The figure above shows one way of covering the tiles with the carpets such that no white tiles are visible Note that the carpets are able to overlap one another Constraints carpetLen floor length floor i is either or numCarpets
tweet counts per frequency A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time These periods can be partitioned into smaller time chunks based on a certain frequency every minute hour or day For example the period in seconds would be partitioned into the following time chunks with these frequencies Every minute second chunks Every hour second chunks Every day second chunks Notice that the last chunk may be shorter than the specified frequency s chunk size and will always end with the end time of the period in the above example Design and implement an API to help the company with their analysis Implement the TweetCounts class TweetCounts Initializes the TweetCounts object void recordTweet String tweetName int time Stores the tweetName at the recorded time in seconds List Integer getTweetCountsPerFrequency String freq String tweetName int startTime int endTime Returns a list of integers representing the number of tweets with tweetName in each time chunk for the given period of time startTime endTime in seconds and frequency freq freq is one of minute hour or day representing a frequency of every minute hour or day respectively Example Input TweetCounts recordTweet recordTweet recordTweet getTweetCountsPerFrequency getTweetCountsPerFrequency recordTweet getTweetCountsPerFrequency minute minute hour Output null null null null null Explanation TweetCounts tweetCounts new TweetCounts tweetCounts recordTweet New tweet at time tweetCounts recordTweet New tweet at time tweetCounts recordTweet New tweet at time tweetCounts getTweetCountsPerFrequency minute return chunk had tweets tweetCounts getTweetCountsPerFrequency minute return chunk had tweets chunk had tweet tweetCounts recordTweet New tweet at time tweetCounts getTweetCountsPerFrequency hour return chunk had tweets Constraints time startTime endTime endTime startTime There will be at most calls in total to recordTweet and getTweetCountsPerFrequency
minimize result by adding parentheses to expression You are given a indexed string expression of the form where and represent positive integers Add a pair of parentheses to expression such that after the addition of parentheses expression is a valid mathematical expression and evaluates to the smallest possible value The left parenthesis must be added to the left of and the right parenthesis must be added to the right of Return expression after adding a pair of parentheses such that expression evaluates to the smallest possible value If there are multiple answers that yield the same result return any of them The input has been generated such that the original value of expression and the value of expression after adding any pair of parentheses that meets the requirements fits within a signed bit integer Example Input expression Output Explanation The expression evaluates to Note that is invalid because the right parenthesis must be to the right of the It can be shown that is the smallest possible value Example Input expression Output Explanation The expression evaluates to Example Input expression Output Explanation The expression evaluates to Constraints expression length expression consists of digits from to and expression starts and ends with digits expression contains exactly one The original value of expression and the value of expression after adding any pair of parentheses that meets the requirements fits within a signed bit integer
check if there is a valid partition for the array You are given a indexed integer array nums You have to partition the array into one or more contiguous subarrays We call a partition of the array valid if each of the obtained subarrays satisfies one of the following conditions The subarray consists of exactly equal elements For example the subarray is good The subarray consists of exactly equal elements For example the subarray is good The subarray consists of exactly consecutive increasing elements that is the difference between adjacent elements is For example the subarray is good but the subarray is not Return true if the array has at least one valid partition Otherwise return false Example Input nums Output true Explanation The array can be partitioned into the subarrays and This partition is valid so we return true Example Input nums Output false Explanation There is no valid partition for this array Constraints nums length nums i
path in zigzag labelled binary tree In an infinite binary tree where every node has two children the nodes are labelled in row order In the odd numbered rows ie the first third fifth the labelling is left to right while in the even numbered rows second fourth sixth the labelling is right to left Given the label of a node in this tree return the labels in the path from the root of the tree to the node with that label Example Input label Output Example Input label Output Constraints label
process restricted friend requests You are given an integer n indicating the number of people in a network Each person is labeled from to n You are also given a indexed integer array restrictions where restrictions i xi yi means that person xi and person yi cannot become friends either directly or indirectly through other people Initially no one is friends with each other You are given a list of friend requests as a indexed integer array requests where requests j uj vj is a friend request between person uj and person vj A friend request is successful if uj and vj can be friends Each friend request is processed in the given order i e requests j occurs before requests j and upon a successful request uj and vj become direct friends for all future friend requests Return a boolean array result where each result j is true if the jth friend request is successful or false if it is not Note If uj and vj are already direct friends the request is still successful Example Input n restrictions requests Output true false Explanation Request Person and person can be friends so they become direct friends Request Person and person cannot be friends since person and person would be indirect friends Example Input n restrictions requests Output true false Explanation Request Person and person can be friends so they become direct friends Request Person and person cannot be friends since person and person would be indirect friends Example Input n restrictions requests Output true false true false Explanation Request Person and person can be friends so they become direct friends Request Person and person cannot be friends since they are directly restricted Request Person and person can be friends so they become direct friends Request Person and person cannot be friends since person and person would be indirect friends Constraints n restrictions length restrictions i length xi yi n xi yi requests length requests j length uj vj n uj vj
profitable schemes There is a group of n members and a list of various crimes they could commit The ith crime generates a profit i and requires group i members to participate in it If a member participates in one crime that member can t participate in another crime Let s call a profitable scheme any subset of these crimes that generates at least minProfit profit and the total number of members participating in that subset of crimes is at most n Return the number of schemes that can be chosen Since the answer may be very large return it modulo Example Input n minProfit group profit Output Explanation To make a profit of at least the group could either commit crimes and or just crime In total there are schemes Example Input n minProfit group profit Output Explanation To make a profit of at least the group could commit any crimes as long as they commit one There are possible schemes and Constraints n minProfit group length group i profit length group length profit i
rabbits in forest There is a forest with an unknown number of rabbits We asked n rabbits How many rabbits have the same color as you and collected the answers in an integer array answers where answers i is the answer of the ith rabbit Given the array answers return the minimum number of rabbits that could be in the forest Example Input answers Output Explanation The two rabbits that answered could both be the same color say red The rabbit that answered can t be red or the answers would be inconsistent Say the rabbit that answered was blue Then there should be other blue rabbits in the forest that didn t answer into the array The smallest possible number of rabbits in the forest is therefore that answered plus that didn t Example Input answers Output Constraints answers length answers i
arranging coins You have n coins and you want to build a staircase with these coins The staircase consists of k rows where the ith row has exactly i coins The last row of the staircase may be incomplete Given the integer n return the number of complete rows of the staircase you will build Example Input n Output Explanation Because the row is incomplete we return Example Input n Output Explanation Because the row is incomplete we return Constraints n
tallest billboard You are installing a billboard and want it to have the largest height The billboard will have two steel supports one on each side Each steel support must be an equal height You are given a collection of rods that can be welded together For example if you have rods of lengths and you can weld them together to make a support of length Return the largest possible height of your billboard installation If you cannot support the billboard return Example Input rods Output Explanation We have two disjoint subsets and which have the same sum Example Input rods Output Explanation We have two disjoint subsets and which have the same sum Example Input rods Output Explanation The billboard cannot be supported so we return Constraints rods length rods i sum rods i
find minimum in rotated sorted array Suppose an array of length n sorted in ascending order is rotated between and n times For example the array nums might become if it was rotated times if it was rotated times Notice that rotating an array a a a a n time results in the array a n a a a a n Given the sorted rotated array nums of unique elements return the minimum element of this array You must write an algorithm that runs in O log n time Example Input nums Output Explanation The original array was rotated times Example Input nums Output Explanation The original array was and it was rotated times Example Input nums Output Explanation The original array was and it was rotated times Constraints n nums length n nums i All the integers of nums are unique nums is sorted and rotated between and n times
decode xored permutation There is an integer array perm that is a permutation of the first n positive integers where n is always odd It was encoded into another integer array encoded of length n such that encoded i perm i XOR perm i For example if perm then encoded Given the encoded array return the original array perm It is guaranteed that the answer exists and is unique Example Input encoded Output Explanation If perm then encoded XOR XOR Example Input encoded Output Constraints n n is odd encoded length n
image smoother An image smoother is a filter of the size x that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells i e the average of the nine cells in the blue smoother If one or more of the surrounding cells of a cell is not present we do not consider it in the average i e the average of the four cells in the red smoother Given an m x n integer matrix img representing the grayscale of an image return the image after applying the smoother on each cell of it Example Input img Output Explanation For the points floor floor For the points floor floor For the point floor floor Example Input img Output Explanation For the points floor floor For the points floor floor For the point floor floor Constraints m img length n img i length m n img i j
burst balloons You are given n balloons indexed from to n Each balloon is painted with a number on it represented by an array nums You are asked to burst all the balloons If you burst the ith balloon you will get nums i nums i nums i coins If i or i goes out of bounds of the array then treat it as if there is a balloon with a painted on it Return the maximum coins you can collect by bursting the balloons wisely Example Input nums Output Explanation nums coins Example Input nums Output Constraints n nums length n nums i
minimum impossible or You are given a indexed integer array nums We say that an integer x is expressible from nums if there exist some integers indexk nums length for which nums nums nums indexk x In other words an integer is expressible if it can be written as the bitwise OR of some subsequence of nums Return the minimum positive non zero integer that is not expressible from nums Example Input nums Output Explanation and are already present in the array We know that is expressible since nums nums Since is not expressible we return Example Input nums Output Explanation We can show that is the smallest number that is not expressible Constraints nums length nums i
greatest english letter in upper and lower case Given a string of English letters s return the greatest English letter which occurs as both a lowercase and uppercase letter in s The returned letter should be in uppercase If no such letter exists return an empty string An English letter b is greater than another letter a if b appears after a in the English alphabet Example Input s lEeTcOdE Output E Explanation The letter E is the only letter to appear in both lower and upper case Example Input s arRAzFif Output R Explanation The letter R is the greatest letter to appear in both lower and upper case Note that A and F also appear in both lower and upper case but R is greater than F or A Example Input s AbCdEfGhIjK Output Explanation There is no letter that appears in both lower and upper case Constraints s length s consists of lowercase and uppercase English letters
replace all ?'s to avoid consecutive repeating characters Given a string s containing only lowercase English letters and the character convert all the characters into lowercase letters such that the final string does not contain any consecutive repeating characters You cannot modify the non characters It is guaranteed that there are no consecutive repeating characters in the given string except for Return the final string after all the conversions possibly zero have been made If there is more than one solution return any of them It can be shown that an answer is always possible with the given constraints Example Input s zs Output azs Explanation There are solutions for this problem From azs to yzs all are valid Only z is an invalid modification as the string will consist of consecutive repeating characters in zzs Example Input s ubv w Output ubvaw Explanation There are solutions for this problem Only v and w are invalid modifications as the strings will consist of consecutive repeating characters in ubvvw and ubvww Constraints s length s consist of lowercase English letters and
number of wonderful substrings A wonderful string is a string where at most one letter appears an odd number of times For example ccjjc and abab are wonderful but ab is not Given a string word that consists of the first ten lowercase English letters a through j return the number of wonderful non empty substrings in word If the same substring appears multiple times in word then count each occurrence separately A substring is a contiguous sequence of characters in a string Example Input word aba Output Explanation The four wonderful substrings are underlined below aba a aba b aba a aba aba Example Input word aabb Output Explanation The nine wonderful substrings are underlined below aabb a aabb aa aabb aab aabb aabb aabb a aabb abb aabb b aabb bb aabb b Example Input word he Output Explanation The two wonderful substrings are underlined below he h he e Constraints word length word consists of lowercase English letters from a to j
cache with time limit Write a class that allows getting and setting key value pairs however a time until expiration is associated with each key The class has three public methods set key value duration accepts an integer key an integer value and a duration in milliseconds Once the duration has elapsed the key should be inaccessible The method should return true if the same un expired key already exists and false otherwise Both the value and duration should be overwritten if the key already exists get key if an un expired key exists it should return the associated value Otherwise it should return count returns the count of un expired keys Example Input TimeLimitedCache set get count get Output null false Explanation At t the cache is constructed At t a key value pair is added with a time limit of The value doesn t exist so false is returned At t key is requested and the value of is returned At t count is called and there is one active key in the cache At t key expires At t get is called but is returned because the cache is empty Example Input TimeLimitedCache set set get get get count Output null false true Explanation At t the cache is constructed At t a key value pair is added with a time limit of The value doesn t exist so false is returned At t a key value pair is added with a time limit of A non expired value already existed so true is returned and the old value was overwritten At t get is called which returned At t get is called which returned At t key expires At t get is called but the cache is empty so is returned At t count returns because the cache is empty Constraints key value duration total method calls will not exceed
cousins in binary tree Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y return true if the nodes corresponding to the values x and y in the tree are cousins or false otherwise Two nodes of a binary tree are cousins if they have the same depth with different parents Note that in a binary tree the root node is at the depth and children of each depth k node are at the depth k Example Input root x y Output false Example Input root null null x y Output true Example Input root null x y Output false Constraints The number of nodes in the tree is in the range Node val Each node has a unique value x y x and y are exist in the tree
average selling price SQL Schema Table Prices Column Name Type int date date price int is the primary key for this table Each row of this table indicates the price of the in the period from to For each there will be no two overlapping periods That means there will be no two intersecting periods for the same Table UnitsSold Column Name Type int date units int There is no primary key for this table it may contain duplicates Each row of this table indicates the date units and of each product sold Write an SQL query to find the average selling price for each product should be rounded to decimal places Return the result table in any order The query result format is in the following example Example Input Prices table price UnitsSold table units Output Explanation Average selling price Total Price of Product Number of products sold Average selling price for product Average selling price for product
closest subsequence sum You are given an integer array nums and an integer goal You want to choose a subsequence of nums such that the sum of its elements is the closest possible to goal That is if the sum of the subsequence s elements is sum then you want to minimize the absolute difference abs sum goal Return the minimum possible value of abs sum goal Note that a subsequence of an array is an array formed by removing some elements possibly all or none of the original array Example Input nums goal Output Explanation Choose the whole array as a subsequence with a sum of This is equal to the goal so the absolute difference is Example Input nums goal Output Explanation Choose the subsequence with a sum of The absolute difference is abs abs which is the minimum Example Input nums goal Output Constraints nums length nums i goal
design circular deque Design your implementation of the circular double ended queue deque Implement the MyCircularDeque class MyCircularDeque int k Initializes the deque with a maximum size of k boolean insertFront Adds an item at the front of Deque Returns true if the operation is successful or false otherwise boolean insertLast Adds an item at the rear of Deque Returns true if the operation is successful or false otherwise boolean deleteFront Deletes an item from the front of Deque Returns true if the operation is successful or false otherwise boolean deleteLast Deletes an item from the rear of Deque Returns true if the operation is successful or false otherwise int getFront Returns the front item from the Deque Returns if the deque is empty int getRear Returns the last item from Deque Returns if the deque is empty boolean isEmpty Returns true if the deque is empty or false otherwise boolean isFull Returns true if the deque is full or false otherwise Example Input MyCircularDeque insertLast insertLast insertFront insertFront getRear isFull deleteLast insertFront getFront Output null true true true false true true true Explanation MyCircularDeque myCircularDeque new MyCircularDeque myCircularDeque insertLast return True myCircularDeque insertLast return True myCircularDeque insertFront return True myCircularDeque insertFront return False the queue is full myCircularDeque getRear return myCircularDeque isFull return True myCircularDeque deleteLast return True myCircularDeque insertFront return True myCircularDeque getFront return Constraints k value At most calls will be made to insertFront insertLast deleteFront deleteLast getFront getRear isEmpty isFull
html entity parser HTML entity parser is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself The special characters and their entities for HTML are Quotation Mark the entity is quot and symbol character is Single Quote Mark the entity is apos and symbol character is Ampersand the entity is amp and symbol character is Greater Than Sign the entity is gt and symbol character is Less Than Sign the entity is lt and symbol character is Slash the entity is frasl and symbol character is Given the input text string to the HTML parser you have to implement the entity parser Return the text after replacing the entities by the special characters Example Input text amp is an HTML entity but ambassador is not Output is an HTML entity but ambassador is not Explanation The parser will replace the amp entity by Example Input text and I quote quot quot Output and I quote Constraints text length The string may contain any possible characters out of all the ASCII characters
maximum binary string after change You are given a binary string binary consisting of only s or s You can apply each of the following operations any number of times Operation If the number contains the substring you can replace it with For example Operation If the number contains the substring you can replace it with For example Return the maximum binary string you can obtain after any number of operations Binary string x is greater than binary string y if x s decimal representation is greater than y s decimal representation Example Input binary Output Explanation A valid transformation sequence can be Example Input binary Output Explanation cannot be transformed any further Constraints binary length binary consist of and
maximum value of a string in an array The value of an alphanumeric string can be defined as The numeric representation of the string in base if it comprises of digits only The length of the string otherwise Given an array strs of alphanumeric strings return the maximum value of any string in strs Example Input strs bob Output Explanation consists of both letters and digits so its value is its length i e bob consists only of letters so its value is also its length i e consists only of digits so its value is its numeric equivalent i e also consists only of digits so its value is consists only of digits so its value is Hence the maximum value is of Example Input strs Output Explanation Each string in the array has value Hence we return Constraints strs length strs i length strs i consists of only lowercase English letters and digits
smallest even multiple Given a positive integer n return the smallest positive integer that is a multiple of both and n Example Input n Output Explanation The smallest multiple of both and is Example Input n Output Explanation The smallest multiple of both and is Note that a number is a multiple of itself Constraints n
range product queries of powers Given a positive integer n there exists a indexed array called powers composed of the minimum number of powers of that sum to n The array is sorted in non decreasing order and there is only one way to form the array You are also given a indexed integer array queries where queries i lefti righti Each queries i represents a query where you have to find the product of all powers j with lefti j righti Return an array answers equal in length to queries where answers i is the answer to the ith query Since the answer to the ith query may be too large each answers i should be returned modulo Example Input n queries Output Explanation For n powers It can be shown that powers cannot be a smaller size Answer to query powers powers Answer to query powers Answer to query powers powers powers powers Each answer modulo yields the same answer so is returned Example Input n queries Output Explanation For n powers The answer to the only query is powers The answer modulo is the same so is returned Constraints n queries length starti endi powers length
sum of square numbers Given a non negative integer c decide whether there re two integers a and b such that c Example Input c Output true Explanation Example Input c Output false Constraints c
remove k digits Given string num representing a non negative integer num and an integer k return the smallest possible integer after removing k digits from num Example Input num k Output Explanation Remove the three digits and to form the new number which is the smallest Example Input num k Output Explanation Remove the leading and the number is Note that the output must not contain leading zeroes Example Input num k Output Explanation Remove all the digits from the number and it is left with nothing which is Constraints k num length num consists of only digits num does not have any leading zeros except for the zero itself
non-negative integers without consecutive ones Given a positive integer n return the number of the integers in the range n whose binary representations do not contain consecutive ones Example Input n Output Explanation Here are the non negative integers with their corresponding binary representations Among them only integer disobeys the rule two consecutive ones and the other satisfy the rule Example Input n Output Example Input n Output Constraints n
day of the year Given a string date representing a Gregorian calendar date formatted as YYYY MM DD return the day number of the year Example Input date Output Explanation Given date is the day of the year in Example Input date Output Constraints date length date date and all other date i s are digits date represents a calendar date between Jan and Dec
minimum score by changing two elements You are given a indexed integer array nums The low score of nums is the minimum value of nums i nums j over all i j nums length The high score of nums is the maximum value of nums i nums j over all i j nums length The score of nums is the sum of the high and low scores of nums To minimize the score of nums we can change the value of at most two elements of nums Return the minimum possible score after changing the value of at most two elements of nums Note that x denotes the absolute value of x Example Input nums Output Explanation Change value of nums and nums to so that nums becomes Now the value of nums i nums j is always equal to so we return Example Input nums Output Explanation Change nums and nums to be Now nums becomes Our low score is achieved when i and j in which case nums i nums j Our high score is achieved when i and j in which case nums i nums j The sum of our high and low score is which we can prove to be minimal Constraints nums length nums i
smallest integer divisible by k Given a positive integer k you need to find the length of the smallest positive integer n such that n is divisible by k and n only contains the digit Return the length of n If there is no such n return Note n may not fit in a bit signed integer Example Input k Output Explanation The smallest answer is n which has length Example Input k Output Explanation There is no such positive integer n divisible by Example Input k Output Explanation The smallest answer is n which has length Constraints k
number of laser beams in a bank Anti theft security devices are activated inside a bank You are given a indexed binary string array bank representing the floor plan of the bank which is an m x n matrix bank i represents the ith row consisting of s and s means the cell is empty while means the cell has a security device There is one laser beam between any two security devices if both conditions are met The two devices are located on two different rows and where For each row i where i there are no security devices in the ith row Laser beams are independent i e one beam does not interfere nor join with another Return the total number of laser beams in the bank Example Input bank Output Explanation Between each of the following device pairs there is one beam In total there are beams bank bank bank bank bank bank bank bank bank bank bank bank bank bank bank bank Note that there is no beam between any device on the row with any on the row This is because the row contains security devices which breaks the second condition Example Input bank Output Explanation There does not exist two devices located on two different rows Constraints m bank length n bank i length m n bank i j is either or
smallest missing non-negative integer after operations You are given a indexed integer array nums and an integer value In one operation you can add or subtract value from any element of nums For example if nums and value you can choose to subtract value from nums to make nums The MEX minimum excluded of an array is the smallest missing non negative integer in it For example the MEX of is while the MEX of is Return the maximum MEX of nums after applying the mentioned operation any number of times Example Input nums value Output Explanation One can achieve this result by applying the following operations Add value to nums twice to make nums Subtract value from nums once to make nums Subtract value from nums twice to make nums The MEX of nums is It can be shown that is the maximum MEX we can achieve Example Input nums value Output Explanation One can achieve this result by applying the following operation subtract value from nums once to make nums The MEX of nums is It can be shown that is the maximum MEX we can achieve Constraints nums length value nums i
number of longest increasing subsequence Given an integer array nums return the number of longest increasing subsequences Notice that the sequence has to be strictly increasing Example Input nums Output Explanation The two longest increasing subsequences are and Example Input nums Output Explanation The length of the longest increasing subsequence is and there are increasing subsequences of length so output Constraints nums length nums i
goat latin You are given a string sentence that consist of words separated by spaces Each word consists of lowercase and uppercase letters only We would like to convert the sentence to Goat Latin a made up language similar to Pig Latin The rules of Goat Latin are as follows If a word begins with a vowel a e i o or u append ma to the end of the word For example the word apple becomes applema If a word begins with a consonant i e not a vowel remove the first letter and append it to the end then add ma For example the word goat becomes oatgma Add one letter a to the end of each word per its word index in the sentence starting with For example the first word gets a added to the end the second word gets aa added to the end and so on Return the final sentence representing the conversion from sentence to Goat Latin Example Input sentence I speak Goat Latin Output Imaa peaksmaaa oatGmaaaa atinLmaaaaa Example Input sentence The quick brown fox jumped over the lazy dog Output heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa Constraints sentence length sentence consists of English letters and spaces sentence has no leading or trailing spaces All the words in sentence are separated by a single space
height of binary tree after subtree removal queries You are given the root of a binary tree with n nodes Each node is assigned a unique value from to n You are also given an array queries of size m You have to perform m independent queries on the tree where in the ith query you do the following Remove the subtree rooted at the node with the value queries i from the tree It is guaranteed that queries i will not be equal to the value of the root Return an array answer of size m where answer i is the height of the tree after performing the ith query Note The queries are independent so the tree returns to its initial state after each query The height of a tree is the number of edges in the longest simple path from the root to some node in the tree Example Input root null null null null null null queries Output Explanation The diagram above shows the tree after removing the subtree rooted at node with value The height of the tree is The path Example Input root queries Output Explanation We have the following queries Removing the subtree rooted at node with value The height of the tree becomes The path Removing the subtree rooted at node with value The height of the tree becomes The path Removing the subtree rooted at node with value The height of the tree becomes The path Removing the subtree rooted at node with value The height of the tree becomes The path Constraints The number of nodes in the tree is n n Node val n All the values in the tree are unique m queries length m min n queries i n queries i root val
generate fibonacci sequence Write a generator function that returns a generator object which yields the fibonacci sequence The fibonacci sequence is defined by the relation Xn Xn Xn The first few numbers of the series are Example Input callCount Output Explanation const gen fibGenerator gen next value gen next value gen next value gen next value gen next value Example Input callCount Output Explanation gen next is never called so nothing is outputted Constraints callCount
replace the substring for balanced string You are given a string s of length n containing only four kinds of characters Q W E and R A string is said to be balanced if each of its characters appears n times where n is the length of the string Return the minimum length of the substring that can be replaced with any other string of the same length to make s balanced If s is already balanced return Example Input s QWER Output Explanation s is already balanced Example Input s QQWE Output Explanation We need to replace a Q to R so that RQWE or QRWE is balanced Example Input s QQQW Output Explanation We can replace the first QQ to ER Constraints n s length n n is a multiple of s contains only Q W E and R
rank transform of a matrix Given an m x n matrix return a new matrix answer where answer row col is the rank of matrix row col The rank is an integer that represents how large an element is compared to other elements It is calculated using the following rules The rank is an integer starting from If two elements p and q are in the same row or column then If p q then rank p rank q If p q then rank p rank q If p q then rank p rank q The rank should be as small as possible The test cases are generated so that answer is unique under the given rules Example Input matrix Output Explanation The rank of matrix is because it is the smallest integer in its row and column The rank of matrix is because matrix matrix and matrix is rank The rank of matrix is because matrix matrix and matrix is rank The rank of matrix is because matrix matrix matrix matrix and both matrix and matrix are rank Example Input matrix Output Example Input matrix Output Constraints m matrix length n matrix i length m n matrix row col
describe the painting There is a long and thin painting that can be represented by a number line The painting was painted with multiple overlapping segments where each segment was painted with a unique color You are given a integer array segments where segments i starti endi colori represents the half closed segment starti endi with colori as the color The colors in the overlapping segments of the painting were mixed when it was painted When two or more colors mix they form a new color that can be represented as a set of mixed colors For example if colors and are mixed then the resulting mixed color is For the sake of simplicity you should only output the sum of the elements in the set rather than the full set You want to describe the painting with the minimum number of non overlapping half closed segments of these mixed colors These segments can be represented by the array painting where painting j leftj rightj mixj describes a half closed segment leftj rightj with the mixed color sum of mixj For example the painting created with segments can be described by painting because is colored with a sum of from both the first and second segments is colored from only the second segment Return the array painting describing the finished painting excluding any parts that are not painted You may return the segments in any order A half closed segment a b is the section of the number line between points a and b including point a and not including point b Example Input segments Output Explanation The painting can be described as follows is colored with a sum of from the first and third segments is colored with a sum of from the second and third segments Example Input segments Output Explanation The painting can be described as follows is colored from the first segment is colored with a sum of from the first and second segments is colored from the second segment is colored from the third segment Example Input segments Output Explanation The painting can be described as follows is colored with a sum of from the first and second segments is colored with a sum of from the third and fourth segments Note that returning a single segment is incorrect because the mixed color sets are different Constraints segments length segments i length starti endi colori Each colori is distinct
minimum non-zero product of the array elements You are given a positive integer p Consider an array nums indexed that consists of the integers in the inclusive range in their binary representations You are allowed to do the following operation any number of times Choose two elements x and y from nums Choose a bit in x and swap it with its corresponding bit in y Corresponding bit refers to the bit that is in the same position in the other integer For example if x and y after swapping the bit from the right we have x and y Find the minimum non zero product of nums after performing the above operation any number of times Return this product modulo Note The answer should be the minimum product before the modulo operation is done Example Input p Output Explanation nums There is only one element so the product equals that element Example Input p Output Explanation nums Any swap would either make the product or stay the same Thus the array product of is already minimized Example Input p Output Explanation nums In the first operation we can swap the leftmost bit of the second and fifth elements The resulting array is In the second operation we can swap the middle bit of the third and fourth elements The resulting array is The array product is which is the minimum possible product Constraints p
number of pairs of strings with concatenation equal to target Given an array of digit strings nums and a digit string target return the number of pairs of indices i j where i j such that the concatenation of nums i nums j equals target Example Input nums target Output Explanation Valid pairs are Example Input nums target Output Explanation Valid pairs are Example Input nums target Output Explanation Valid pairs are Constraints nums length nums i length target length nums i and target consist of digits nums i and target do not have leading zeros
minimum absolute difference Given an array of distinct integers arr find all pairs of elements with the minimum absolute difference of any two elements Return a list of pairs in ascending order with respect to pairs each pair a b follows a b are from arr a b b a equals to the minimum absolute difference of any two elements in arr Example Input arr Output Explanation The minimum absolute difference is List all pairs with difference equal to in ascending order Example Input arr Output Example Input arr Output Constraints arr length arr i
best time to buy and sell stock You are given an array prices where prices i is the price of a given stock on the ith day You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock Return the maximum profit you can achieve from this transaction If you cannot achieve any profit return Example Input prices Output Explanation Buy on day price and sell on day price profit Note that buying on day and selling on day is not allowed because you must buy before you sell Example Input prices Output Explanation In this case no transactions are done and the max profit Constraints prices length prices i
domino and tromino tiling You have two types of tiles a x domino shape and a tromino shape You may rotate these shapes Given an integer n return the number of ways to tile an x n board Since the answer may be very large return it modulo In a tiling every square must be covered by a tile Two tilings are different if and only if there are two directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile Example Input n Output Explanation The five different ways are show above Example Input n Output Constraints n
path with maximum gold In a gold mine grid of size m x n each cell in this mine has an integer representing the amount of gold in that cell if it is empty Return the maximum amount of gold you can collect under the conditions Every time you are located in a cell you will collect all the gold in that cell From your position you can walk one step to the left right up or down You can t visit the same cell more than once Never visit a cell with gold You can start and stop collecting gold from any position in the grid that has some gold Example Input grid Output Explanation Path to get the maximum gold Example Input grid Output Explanation Path to get the maximum gold Constraints m grid length n grid i length m n grid i j There are at most cells containing gold
maximum units on a truck You are assigned to put some amount of boxes onto one truck You are given a array boxTypes where boxTypes i numberOfBoxesi numberOfUnitsPerBoxi numberOfBoxesi is the number of boxes of type i numberOfUnitsPerBoxi is the number of units in each box of the type i You are also given an integer truckSize which is the maximum number of boxes that can be put on the truck You can choose any boxes to put on the truck as long as the number of boxes does not exceed truckSize Return the maximum total number of units that can be put on the truck Example Input boxTypes truckSize Output Explanation There are box of the first type that contains units boxes of the second type that contain units each boxes of the third type that contain unit each You can take all the boxes of the first and second types and one box of the third type The total number of units will be Example Input boxTypes truckSize Output Constraints boxTypes length numberOfBoxesi numberOfUnitsPerBoxi truckSize
find followers count SQL Schema Table Followers Column Name Type int int is the primary key for this table This table contains the IDs of a user and a follower in a social media app where the follower follows the user Write an SQL query that will for each user return the number of followers Return the result table ordered by in ascending order The query result format is in the following example Example Input Followers table Output Explanation The followers of are The followers of are The followers of are
longest increasing subsequence ii You are given an integer array nums and an integer k Find the longest subsequence of nums that meets the following requirements The subsequence is strictly increasing and The difference between adjacent elements in the subsequence is at most k Return the length of the longest subsequence that meets the requirements A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements Example Input nums k Output Explanation The longest subsequence that meets the requirements is The subsequence has a length of so we return Note that the subsequence does not meet the requirements because is larger than Example Input nums k Output Explanation The longest subsequence that meets the requirements is The subsequence has a length of so we return Example Input nums k Output Explanation The longest subsequence that meets the requirements is The subsequence has a length of so we return Constraints nums length nums i k
minimize the maximum of two arrays We have two arrays and which are initially empty You need to add positive integers to them such that they satisfy all the following conditions contains distinct positive integers each of which is not divisible by contains distinct positive integers each of which is not divisible by No integer is present in both and Given and return the minimum possible maximum integer that can be present in either array Example Input Output Explanation We can distribute the first natural numbers into and and We can see that both arrays satisfy all the conditions Since the maximum value is we return it Example Input Output Explanation Here and satisfy all conditions Since the maximum value is we return it Example Input Output Explanation Here the final possible arrays can be and It can be shown that it is not possible to obtain a lower maximum satisfying all conditions Constraints
minimized maximum of products distributed to any store You are given an integer n indicating there are n specialty retail stores There are m product types of varying amounts which are given as a indexed integer array quantities where quantities i represents the number of products of the ith product type You need to distribute all products to the retail stores following these rules A store can only be given at most one product type but can be given any amount of it After distribution each store will have been given some number of products possibly Let x represent the maximum number of products given to any store You want x to be as small as possible i e you want to minimize the maximum number of products that are given to any store Return the minimum possible x Example Input n quantities Output Explanation One optimal way is The products of type are distributed to the first four stores in these amounts The products of type are distributed to the other two stores in these amounts The maximum number of products given to any store is max Example Input n quantities Output Explanation One optimal way is The products of type are distributed to the first three stores in these amounts The products of type are distributed to the next two stores in these amounts The products of type are distributed to the last two stores in these amounts The maximum number of products given to any store is max Example Input n quantities Output Explanation The only optimal way is The products of type are distributed to the only store The maximum number of products given to any store is max Constraints m quantities length m n quantities i
max sum of a pair with equal sum of digits You are given a indexed array nums consisting of positive integers You can choose two indices i and j such that i j and the sum of digits of the number nums i is equal to that of nums j Return the maximum value of nums i nums j that you can obtain over all possible indices i and j that satisfy the conditions Example Input nums Output Explanation The pairs i j that satisfy the conditions are both numbers have a sum of digits equal to and their sum is both numbers have a sum of digits equal to and their sum is So the maximum sum that we can obtain is Example Input nums Output Explanation There are no two numbers that satisfy the conditions so we return Constraints nums length nums i
the number of beautiful subsets You are given an array nums of positive integers and a positive integer k A subset of nums is beautiful if it does not contain two integers with an absolute difference equal to k Return the number of non empty beautiful subsets of the array nums A subset of nums is an array that can be obtained by deleting some possibly none elements from nums Two subsets are different if and only if the chosen indices to delete are different Example Input nums k Output Explanation The beautiful subsets of the array nums are It can be proved that there are only beautiful subsets in the array Example Input nums k Output Explanation The beautiful subset of the array nums is It can be proved that there is only beautiful subset in the array Constraints nums length nums i k
word search Given an m x n grid of characters board and a string word return true if word exists in the grid The word can be constructed from letters of sequentially adjacent cells where adjacent cells are horizontally or vertically neighboring The same letter cell may not be used more than once Example Input board A B C E S F C S A D E E word ABCCED Output true Example Input board A B C E S F C S A D E E word SEE Output true Example Input board A B C E S F C S A D E E word ABCB Output false Constraints m board length n board i length m n word length board and word consists of only lowercase and uppercase English letters Follow up Could you use search pruning to make your solution faster with a larger board
all elements in two binary search trees Given two binary search trees and return a list containing all the integers from both trees sorted in ascending order Example Input Output Example Input null Output Constraints The number of nodes in each tree is in the range Node val
count the number of good subarrays Given an integer array nums and an integer k return the number of good subarrays of nums A subarray arr is good if it there are at least k pairs of indices i j such that i j and arr i arr j A subarray is a contiguous non empty sequence of elements within an array Example Input nums k Output Explanation The only good subarray is the array nums itself Example Input nums k Output Explanation There are different good subarrays that has pairs that has pairs that has pairs that has pairs Constraints nums length nums i k
best time to buy and sell stock iii You are given an array prices where prices i is the price of a given stock on the ith day Find the maximum profit you can achieve You may complete at most two transactions Note You may not engage in multiple transactions simultaneously i e you must sell the stock before you buy again Example Input prices Output Explanation Buy on day price and sell on day price profit Then buy on day price and sell on day price profit Example Input prices Output Explanation Buy on day price and sell on day price profit Note that you cannot buy on day buy on day and sell them later as you are engaging multiple transactions at the same time You must sell before buying again Example Input prices Output Explanation In this case no transaction is done i e max profit Constraints prices length prices i
minimum number of refueling stops A car travels from a starting position to a destination which is target miles east of the starting position There are gas stations along the way The gas stations are represented as an array stations where stations i positioni fueli indicates that the ith gas station is positioni miles east of the starting position and has fueli liters of gas The car starts with an infinite tank of gas which initially has startFuel liters of fuel in it It uses one liter of gas per one mile that it drives When the car reaches a gas station it may stop and refuel transferring all the gas from the station into the car Return the minimum number of refueling stops the car must make in order to reach its destination If it cannot reach the destination return Note that if the car reaches a gas station with fuel left the car can still refuel there If the car reaches the destination with fuel left it is still considered to have arrived Example Input target startFuel stations Output Explanation We can reach the target without refueling Example Input target startFuel stations Output Explanation We can not reach the target or even the first gas station Example Input target startFuel stations Output Explanation We start with liters of fuel We drive to position expending liters of fuel We refuel from liters to liters of gas Then we drive from position to position expending liters of fuel and refuel from liters to liters of gas We then drive to and reach the target We made refueling stops along the way so we return Constraints target startFuel stations length positioni positioni target fueli
find the divisibility array of a string You are given a indexed string word of length n consisting of digits and a positive integer m The divisibility array div of word is an integer array of length n such that div i if the numeric value of word i is divisible by m or div i otherwise Return the divisibility array of word Example Input word m Output Explanation There are only prefixes that are divisible by and Example Input word m Output Explanation There are only prefixes that are divisible by and Constraints n word length n word consists of digits from to m
course schedule There are a total of numCourses courses you have to take labeled from to numCourses You are given an array prerequisites where prerequisites i ai bi indicates that you must take course bi first if you want to take course ai For example the pair indicates that to take course you have to first take course Return true if you can finish all courses Otherwise return false Example Input numCourses prerequisites Output true Explanation There are a total of courses to take To take course you should have finished course So it is possible Example Input numCourses prerequisites Output false Explanation There are a total of courses to take To take course you should have finished course and to take course you should also have finished course So it is impossible Constraints numCourses prerequisites length prerequisites i length ai bi numCourses All the pairs prerequisites i are unique
decode xored array There is a hidden integer array arr that consists of n non negative integers It was encoded into another integer array encoded of length n such that encoded i arr i XOR arr i For example if arr then encoded You are given the encoded array You are also given an integer first that is the first element of arr i e arr Return the original array arr It can be proved that the answer exists and is unique Example Input encoded first Output Explanation If arr then first and encoded XOR XOR XOR Example Input encoded first Output Constraints n encoded length n encoded i first
valid palindrome ii Given a string s return true if the s can be palindrome after deleting at most one character from it Example Input s aba Output true Example Input s abca Output true Explanation You could delete the character c Example Input s abc Output false Constraints s length s consists of lowercase English letters
reverse linked list ii Given the head of a singly linked list and two integers left and right where left right reverse the nodes of the list from position left to position right and return the reversed list Example Input head left right Output Example Input head left right Output Constraints The number of nodes in the list is n n Node val left right n Follow up Could you do it in one pass
4sum Given an array nums of n integers return an array of all the unique quadruplets nums a nums b nums c nums d such that a b c d n a b c and d are distinct nums a nums b nums c nums d target You may return the answer in any order Example Input nums target Output Example Input nums target Output Constraints nums length nums i target
squares of a sorted array Given an integer array nums sorted in non decreasing order return an array of the squares of each number sorted in non decreasing order Example Input nums Output Explanation After squaring the array becomes After sorting it becomes Example Input nums Output Constraints nums length nums i nums is sorted in non decreasing order Follow up Squaring each element and sorting the new array is very trivial could you find an O n solution using a different approach
number of ways to reorder array to get same bst Given an array nums that represents a permutation of integers from to n We are going to construct a binary search tree BST by inserting the elements of nums in order into an initially empty BST Find the number of different ways to reorder nums so that the constructed BST is identical to that formed from the original array nums For example given nums we will have as the root as a left child and as a right child The array also yields the same BST but yields a different BST Return the number of ways to reorder nums such that the BST formed is identical to the original BST formed from nums Since the answer may be very large return it modulo Example Input nums Output Explanation We can reorder nums to be which will yield the same BST There are no other ways to reorder nums which will yield the same BST Example Input nums Output Explanation The following arrays will yield the same BST Example Input nums Output Explanation There are no other orderings of nums that will yield the same BST Constraints nums length nums i nums length All integers in nums are distinct
word pattern Given a pattern and a string s find if s follows the same pattern Here follow means a full match such that there is a bijection between a letter in pattern and a non empty word in s Example Input pattern abba s dog cat cat dog Output true Example Input pattern abba s dog cat cat fish Output false Example Input pattern aaaa s dog cat cat dog Output false Constraints pattern length pattern contains only lower case English letters s length s contains only lowercase English letters and spaces s does not contain any leading or trailing spaces All the words in s are separated by a single space
return length of arguments passed Write a function argumentsLength that returns the count of arguments passed to it Example Input argsArr Output Explanation argumentsLength One value was passed to the function so it should return Example Input argsArr null Output Explanation argumentsLength null Three values were passed to the function so it should return Constraints argsArr is a valid JSON array argsArr length
lexicographically smallest string after applying operations You are given a string s of even length consisting of digits from to and two integers a and b You can apply either of the following two operations any number of times and in any order on s Add a to all odd indices of s indexed Digits post are cycled back to For example if s and a s becomes Rotate s to the right by b positions For example if s and b s becomes Return the lexicographically smallest string you can obtain by applying the above operations any number of times on s A string a is lexicographically smaller than a string b of the same length if in the first position where a and b differ string a has a letter that appears earlier in the alphabet than the corresponding letter in b For example is lexicographically smaller than because the first position they differ is at the third letter and comes before Example Input s a b Output Explanation We can apply the following operations Start Rotate Add Add Rotate Add Add Rotate Add There is no way to obtain a string that is lexicographically smaller then Example Input s a b Output Explanation We can apply the following operations Start Rotate Add Rotate There is no way to obtain a string that is lexicographically smaller then Example Input s a b Output Explanation There are no sequence of operations that will give us a lexicographically smaller string than Constraints s length s length is even s consists of digits from to only a b s length
number of pairs of interchangeable rectangles You are given n rectangles represented by a indexed integer array rectangles where rectangles i widthi heighti denotes the width and height of the ith rectangle Two rectangles i and j i j are considered interchangeable if they have the same width to height ratio More formally two rectangles are interchangeable if widthi heighti widthj heightj using decimal division not integer division Return the number of pairs of interchangeable rectangles in rectangles Example Input rectangles Output Explanation The following are the interchangeable pairs of rectangles by index indexed Rectangle with rectangle Rectangle with rectangle Rectangle with rectangle Rectangle with rectangle Rectangle with rectangle Rectangle with rectangle Example Input rectangles Output Explanation There are no interchangeable pairs of rectangles Constraints n rectangles length n rectangles i length widthi heighti
find closest node to given two nodes You are given a directed graph of n nodes numbered from to n where each node has at most one outgoing edge The graph is represented with a given indexed array edges of size n indicating that there is a directed edge from node i to node edges i If there is no outgoing edge from i then edges i You are also given two integers and Return the index of the node that can be reached from both and such that the maximum between the distance from to that node and from to that node is minimized If there are multiple answers return the node with the smallest index and if no possible answer exists return Note that edges may contain cycles Example Input edges Output Explanation The distance from node to node is and the distance from node to node is The maximum of those two distances is It can be proven that we cannot get a node with a smaller maximum distance than so we return node Example Input edges Output Explanation The distance from node to node is and the distance from node to itself is The maximum of those two distances is It can be proven that we cannot get a node with a smaller maximum distance than so we return node Constraints n edges length n edges i n edges i i n
palindrome partitioning ii Given a string s partition s such that every substring of the partition is a palindrome Return the minimum cuts needed for a palindrome partitioning of s Example Input s aab Output Explanation The palindrome partitioning aa b could be produced using cut Example Input s a Output Example Input s ab Output Constraints s length s consists of lowercase English letters only
maximum number of visible points You are given an array points an integer angle and your location where location posx posy and points i xi yi both denote integral coordinates on the X Y plane Initially you are facing directly east from your position You cannot move from your position but you can rotate In other words posx and posy cannot be changed Your field of view in degrees is represented by angle determining how wide you can see from any given view direction Let d be the amount in degrees that you rotate counterclockwise Then your field of view is the inclusive range of angles d angle d angle Your browser does not support the video tag or this video format You can see some set of points if for each point the angle formed by the point your position and the immediate east direction from your position is in your field of view There can be multiple points at one coordinate There may be points at your location and you can always see these points regardless of your rotation Points do not obstruct your vision to other points Return the maximum number of points you can see Example Input points angle location Output Explanation The shaded region represents your field of view All points can be made visible in your field of view including even though is in front and in the same line of sight Example Input points angle location Output Explanation All points can be made visible in your field of view including the one at your location Example Input points angle location Output Explanation You can only see one of the two points as shown above Constraints points length points i length location length angle posx posy xi yi
maximum number of vowels in a substring of given length Given a string s and an integer k return the maximum number of vowel letters in any substring of s with length k Vowel letters in English are a e i o and u Example Input s abciiidef k Output Explanation The substring iii contains vowel letters Example Input s aeiou k Output Explanation Any substring of length contains vowels Example Input s leetcode k Output Explanation lee eet and ode contain vowels Constraints s length s consists of lowercase English letters k s length
find array given subset sums You are given an integer n representing the length of an unknown array that you are trying to recover You are also given an array sums containing the values of all subset sums of the unknown array in no particular order Return the array ans of length n representing the unknown array If multiple answers exist return any of them An array sub is a subset of an array arr if sub can be obtained from arr by deleting some possibly zero or all elements of arr The sum of the elements in sub is one possible subset sum of arr The sum of an empty array is considered to be Note Test cases are generated such that there will always be at least one correct answer Example Input n sums Output Explanation is able to achieve the given subset sums sum is sum is sum is sum is sum is sum is sum is sum is Note that any permutation of and also any permutation of will also be accepted Example Input n sums Output Explanation The only correct answer is Example Input n sums Output Explanation is able to achieve the given subset sums Constraints n sums length sums i
display table of food orders in a restaurant Given the array orders which represents the orders that customers have done in a restaurant More specifically orders i customerNamei tableNumberi foodItemi where customerNamei is the name of the customer tableNumberi is the table customer sit at and foodItemi is the item customer orders Return the restaurant s display table The display table is a table whose row entries denote how many of each food item each table ordered The first column is the table number and the remaining columns correspond to each food item in alphabetical order The first row should be a header whose first column is Table followed by the names of the food items Note that the customer names are not part of the table Additionally the rows should be sorted in numerically increasing order Example Input orders David Ceviche Corina Beef Burrito David Fried Chicken Carla Water Carla Ceviche Rous Ceviche Output Table Beef Burrito Ceviche Fried Chicken Water Explanation The displaying table looks like Table Beef Burrito Ceviche Fried Chicken Water For the table David orders Ceviche and Fried Chicken and Rous orders Ceviche For the table Carla orders Water and Ceviche For the table Corina orders Beef Burrito Example Input orders James Fried Chicken Ratesh Fried Chicken Amadeus Fried Chicken Adam Canadian Waffles Brianna Canadian Waffles Output Table Canadian Waffles Fried Chicken Explanation For the table Adam and Brianna order Canadian Waffles For the table James Ratesh and Amadeus order Fried Chicken Example Input orders Laura Bean Burrito Jhon Beef Burrito Melissa Soda Output Table Bean Burrito Beef Burrito Soda Constraints orders length orders i length customerNamei length foodItemi length customerNamei and foodItemi consist of lowercase and uppercase English letters and the space character tableNumberi is a valid integer between and
combination sum ii Given a collection of candidate numbers candidates and a target number target find all unique combinations in candidates where the candidate numbers sum to target Each number in candidates may only be used once in the combination Note The solution set must not contain duplicate combinations Example Input candidates target Output Example Input candidates target Output Constraints candidates length candidates i target
the number of the smallest unoccupied chair There is a party where n friends numbered from to n are attending There is an infinite number of chairs in this party that are numbered from to infinity When a friend arrives at the party they sit on the unoccupied chair with the smallest number For example if chairs and are occupied when a friend comes they will sit on chair number When a friend leaves the party their chair becomes unoccupied at the moment they leave If another friend arrives at that same moment they can sit in that chair You are given a indexed integer array times where times i arrivali leavingi indicating the arrival and leaving times of the ith friend respectively and an integer targetFriend All arrival times are distinct Return the chair number that the friend numbered targetFriend will sit on Example Input times targetFriend Output Explanation Friend arrives at time and sits on chair Friend arrives at time and sits on chair Friend leaves at time and chair becomes empty Friend leaves at time and chair becomes empty Friend arrives at time and sits on chair Since friend sat on chair we return Example Input times targetFriend Output Explanation Friend arrives at time and sits on chair Friend arrives at time and sits on chair Friend arrives at time and sits on chair Friend leaves at time and chair becomes empty Friend leaves at time and chair becomes empty Friend leaves at time and chair becomes empty Since friend sat on chair we return Constraints n times length n times i length arrivali leavingi targetFriend n Each arrivali time is distinct
subarray sum equals k Given an array of integers nums and an integer k return the total number of subarrays whose sum equals to k A subarray is a contiguous non empty sequence of elements within an array Example Input nums k Output Example Input nums k Output Constraints nums length nums i k
length of longest fibonacci subsequence A sequence xn is Fibonacci like if n xi xi xi for all i n Given a strictly increasing array arr of positive integers forming a sequence return the length of the longest Fibonacci like subsequence of arr If one does not exist return A subsequence is derived from another sequence arr by deleting any number of elements including none from arr without changing the order of the remaining elements For example is a subsequence of Example Input arr Output Explanation The longest subsequence that is fibonacci like Example Input arr Output Explanation The longest subsequence that is fibonacci like or Constraints arr length arr i arr i
reformat the string You are given an alphanumeric string s Alphanumeric string is a string consisting of lowercase English letters and digits You have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit That is no two adjacent characters have the same type Return the reformatted string or return an empty string if it is impossible to reformat the string Example Input s Output Explanation No two adjacent characters have the same type in are also valid permutations Example Input s leetcode Output Explanation leetcode has only characters so we cannot separate them by digits Example Input s Output Explanation has only digits so we cannot separate them by characters Constraints s length s consists of only lowercase English letters and or digits
count the number of complete components You are given an integer n There is an undirected graph with n vertices numbered from to n You are given a integer array edges where edges i ai bi denotes that there exists an undirected edge connecting vertices ai and bi Return the number of complete connected components of the graph A connected component is a subgraph of a graph in which there exists a path between any two vertices and no vertex of the subgraph shares an edge with a vertex outside of the subgraph A connected component is said to be complete if there exists an edge between every pair of its vertices Example Input n edges Output Explanation From the picture above one can see that all of the components of this graph are complete Example Input n edges Output Explanation The component containing vertices and is complete since there is an edge between every pair of two vertices On the other hand the component containing vertices and is not complete since there is no edge between vertices and Thus the number of complete components in this graph is Constraints n edges length n n edges i length ai bi n ai bi There are no repeated edges
scramble string We can scramble a string s to get a string t using the following algorithm If the length of the string is stop If the length of the string is do the following Split the string into two non empty substrings at a random index i e if the string is s divide it to x and y where s x y Randomly decide to swap the two substrings or to keep them in the same order i e after this step s may become s x y or s y x Apply step recursively on each of the two substrings x and y Given two strings and of the same length return true if is a scrambled string of otherwise return false Example Input great rgeat Output true Explanation One possible scenario applied on is great gr eat divide at random index gr eat gr eat random decision is not to swap the two substrings and keep them in order gr eat g r e at apply the same algorithm recursively on both substrings divide at random index each of them g r e at r g e at random decision was to swap the first substring and to keep the second substring in the same order r g e at r g e a t again apply the algorithm recursively divide at to a t r g e a t r g e a t random decision is to keep both substrings in the same order The algorithm stops now and the result string is rgeat which is As one possible scenario led to be scrambled to we return true Example Input abcde caebd Output false Example Input a a Output true Constraints length length length and consist of lowercase English letters
sliding subarray beauty Given an integer array nums containing n integers find the beauty of each subarray of size k The beauty of a subarray is the xth smallest integer in the subarray if it is negative or if there are fewer than x negative integers Return an integer array containing n k integers which denote the beauty of the subarrays in order from the first index in the array A subarray is a contiguous non empty sequence of elements within an array Example Input nums k x Output Explanation There are subarrays with size k The first subarray is and the smallest negative integer is The second subarray is and the smallest negative integer is The third subarray is and the smallest negative integer is Example Input nums k x Output Explanation There are subarrays with size k For the smallest negative integer is For the smallest negative integer is For the smallest negative integer is For the smallest negative integer is Example Input nums k x Output Explanation There are subarrays with size k For the smallest negative integer is For there is no negative integer so the beauty is For the smallest negative integer is For the smallest negative integer is For the smallest negative integer is Constraints n nums length n k n x k nums i
maximum xor after operations You are given a indexed integer array nums In one operation select any non negative integer x and an index i then update nums i to be equal to nums i AND nums i XOR x Note that AND is the bitwise AND operation and XOR is the bitwise XOR operation Return the maximum possible bitwise XOR of all elements of nums after applying the operation any number of times Example Input nums Output Explanation Apply the operation with x and i num AND XOR AND Now nums and the bitwise XOR of all the elements XOR XOR XOR It can be shown that is the maximum possible bitwise XOR Note that other operations may be used to achieve a bitwise XOR of Example Input nums Output Explanation Apply the operation zero times The bitwise XOR of all the elements XOR XOR XOR XOR It can be shown that is the maximum possible bitwise XOR Constraints nums length nums i
top travellers SQL Schema Table Users Column Name Type id int name varchar id is the primary key for this table name is the name of the user Table Rides Column Name Type id int int distance int id is the primary key for this table is the id of the user who traveled the distance distance Write an SQL query to report the distance traveled by each user Return the result table ordered by in descending order if two or more users traveled the same distance order them by their name in ascending order The query result format is in the following example Example Input Users table id name Alice Bob Alex Donald Lee Jonathan Elvis Rides table id distance Output name Elvis Lee Bob Jonathan Alex Alice Donald Explanation Elvis and Lee traveled miles Elvis is the top traveler as his name is alphabetically smaller than Lee Bob Jonathan Alex and Alice have only one ride and we just order them by the total distances of the ride Donald did not have any rides the distance traveled by him is
binary tree right side view Given the root of a binary tree imagine yourself standing on the right side of it return the values of the nodes you can see ordered from top to bottom Example Input root null null Output Example Input root null Output Example Input root Output Constraints The number of nodes in the tree is in the range Node val
find duplicate subtrees Given the root of a binary tree return all duplicate subtrees For each kind of duplicate subtrees you only need to return the root node of any one of them Two trees are duplicate if they have the same structure with the same node values Example Input root null null null Output Example Input root Output Example Input root null null Output Constraints The number of the nodes in the tree will be in the range Node val
words within two edits of dictionary You are given two string arrays queries and dictionary All words in each array comprise of lowercase English letters and have the same length In one edit you can take a word from queries and change any letter in it to any other letter Find all words from queries that after a maximum of two edits equal some word from dictionary Return a list of all words from queries that match with some word from dictionary after a maximum of two edits Return the words in the same order they appear in queries Example Input queries word note ants wood dictionary wood joke moat Output word note wood Explanation Changing the r in word to o allows it to equal the dictionary word wood Changing the n to j and the t to k in note changes it to joke It would take more than edits for ants to equal a dictionary word wood can remain unchanged edits and match the corresponding dictionary word Thus we return word note wood Example Input queries yes dictionary not Output Explanation Applying any two edits to yes cannot make it equal to not Thus we return an empty array Constraints queries length dictionary length n queries i length dictionary j length n All queries i and dictionary j are composed of lowercase English letters
n-queens ii The n queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other Given an integer n return the number of distinct solutions to the n queens puzzle Example Input n Output Explanation There are two distinct solutions to the queens puzzle as shown Example Input n Output Constraints n
longest chunked palindrome decomposition You are given a string text You should split it to k substrings subtextk such that subtexti is a non empty string The concatenation of all the substrings is equal to text i e subtextk text subtexti subtextk i for all valid values of i i e i k Return the largest possible value of k Example Input text ghiabcdefhelloadamhelloabcdefghi Output Explanation We can split the string on ghi abcdef hello adam hello abcdef ghi Example Input text merchant Output Explanation We can split the string on merchant Example Input text antaprezatepzapreanta Output Explanation We can split the string on a nt a pre za tep za pre a nt a Constraints text length text consists only of lowercase English characters
number of sets of k non-overlapping line segments Given n points on a D plane where the ith point from to n is at x i find the number of ways we can draw exactly k non overlapping line segments such that each segment covers two or more points The endpoints of each segment must have integral coordinates The k line segments do not have to cover all n points and they are allowed to share endpoints Return the number of ways we can draw k non overlapping line segments Since this number can be huge return it modulo Example Input n k Output Explanation The two line segments are shown in red and blue The image above shows the different ways Example Input n k Output Explanation The ways are Example Input n k Output Explanation The total number of possible ways to draw line segments is Taking this number modulo gives us Constraints n k n
palindromic substrings Given a string s return the number of palindromic substrings in it A string is a palindrome when it reads the same backward as forward A substring is a contiguous sequence of characters within the string Example Input s abc Output Explanation Three palindromic strings a b c Example Input s aaa Output Explanation Six palindromic strings a a a aa aa aaa Constraints s length s consists of lowercase English letters
word break Given a string s and a dictionary of strings wordDict return true if s can be segmented into a space separated sequence of one or more dictionary words Note that the same word in the dictionary may be reused multiple times in the segmentation Example Input s leetcode wordDict leet code Output true Explanation Return true because leetcode can be segmented as leet code Example Input s applepenapple wordDict apple pen Output true Explanation Return true because applepenapple can be segmented as apple pen apple Note that you are allowed to reuse a dictionary word Example Input s catsandog wordDict cats dog sand and cat Output false Constraints s length wordDict length wordDict i length s and wordDict i consist of only lowercase English letters All the strings of wordDict are unique
maximum sum of 3 non-overlapping subarrays Given an integer array nums and an integer k find three non overlapping subarrays of length k with maximum sum and return them Return the result as a list of indices representing the starting position of each interval indexed If there are multiple answers return the lexicographically smallest one Example Input nums k Output Explanation Subarrays correspond to the starting indices We could have also taken but an answer of would be lexicographically larger Example Input nums k Output Constraints nums length nums i k floor nums length
find critical and pseudo-critical edges in minimum spanning tree Given a weighted undirected connected graph with n vertices numbered from to n and an array edges where edges i ai bi weighti represents a bidirectional and weighted edge between nodes ai and bi A minimum spanning tree MST is a subset of the graph s edges that connects all vertices without cycles and with the minimum possible total edge weight Find all the critical and pseudo critical edges in the given graph s minimum spanning tree MST An MST edge whose deletion from the graph would cause the MST weight to increase is called a critical edge On the other hand a pseudo critical edge is that which can appear in some MSTs but not all Note that you can return the indices of the edges in any order Example Input n edges Output Explanation The figure above describes the graph The following figure shows all the possible MSTs Notice that the two edges and appear in all MSTs therefore they are critical edges so we return them in the first list of the output The edges and are only part of some MSTs therefore they are considered pseudo critical edges We add them to the second list of the output Example Input n edges Output Explanation We can observe that since all edges have equal weight choosing any edges from the given will yield an MST Therefore all edges are pseudo critical Constraints n edges length min n n edges i length ai bi n weighti All pairs ai bi are distinct
minimum number of swaps to make the string balanced You are given a indexed string s of even length n The string consists of exactly n opening brackets and n closing brackets A string is called balanced if and only if It is the empty string or It can be written as AB where both A and B are balanced strings or It can be written as C where C is a balanced string You may swap the brackets at any two indices any number of times Return the minimum number of swaps to make s balanced Example Input s Output Explanation You can make the string balanced by swapping index with index The resulting string is Example Input s Output Explanation You can do the following to make the string balanced Swap index with index s Swap index with index s The resulting string is Example Input s Output Explanation The string is already balanced Constraints n s length n n is even s i is either or The number of opening brackets equals n and the number of closing brackets equals n
get the maximum score You are given two sorted arrays of distinct integers and A valid path is defined as follows Choose array or to traverse from index Traverse the current array from left to right If you are reading any value that is present in and you are allowed to change your path to the other array Only one repeated value is considered in the valid path The score is defined as the sum of uniques values in a valid path Return the maximum score you can obtain of all possible valid paths Since the answer may be too large return it modulo Example Input Output Explanation Valid paths starting from starting from The maximum is obtained with the path in green Example Input Output Explanation Maximum sum is obtained with the path Example Input Output Explanation There are no common elements between and Maximum sum is obtained with the path Constraints length length i i and are strictly increasing
removing minimum and maximum from array You are given a indexed array of distinct integers nums There is an element in nums that has the lowest value and an element that has the highest value We call them the minimum and maximum respectively Your goal is to remove both these elements from the array A deletion is defined as either removing an element from the front of the array or removing an element from the back of the array Return the minimum number of deletions it would take to remove both the minimum and maximum element from the array Example Input nums Output Explanation The minimum element in the array is nums which is The maximum element in the array is nums which is We can remove both the minimum and maximum by removing elements from the front and elements from the back This results in deletions which is the minimum number possible Example Input nums Output Explanation The minimum element in the array is nums which is The maximum element in the array is nums which is We can remove both the minimum and maximum by removing elements from the front This results in only deletions which is the minimum number possible Example Input nums Output Explanation There is only one element in the array which makes it both the minimum and maximum element We can remove it with deletion Constraints nums length nums i The integers in nums are distinct
trapping rain water Given n non negative integers representing an elevation map where the width of each bar is compute how much water it can trap after raining Example Input height Output Explanation The above elevation map black section is represented by array In this case units of rain water blue section are being trapped Example Input height Output Constraints n height length n height i
minimum obstacle removal to reach corner You are given a indexed integer array grid of size m x n Each cell has one of two values represents an empty cell represents an obstacle that may be removed You can move up down left or right from and to an empty cell Return the minimum number of obstacles to remove so you can move from the upper left corner to the lower right corner m n Example Input grid Output Explanation We can remove the obstacles at and to create a path from to It can be shown that we need to remove at least obstacles so we return Note that there may be other ways to remove obstacles to create a path Example Input grid Output Explanation We can move from to without removing any obstacles so we return Constraints m grid length n grid i length m n m n grid i j is either or grid grid m n
reduce array size to the half You are given an integer array arr You can choose a set of integers and remove all the occurrences of these integers in the array Return the minimum size of the set so that at least half of the integers of the array are removed Example Input arr Output Explanation Choosing will make the new array which has size i e equal to half of the size of the old array Possible sets of size are Choosing set is not possible as it will make the new array which has a size greater than half of the size of the old array Example Input arr Output Explanation The only possible set you can choose is This will make the new array empty Constraints arr length arr length is even arr i
group sold products by the date SQL Schema Table Activities Column Name Type date product varchar There is no primary key for this table it may contain duplicates Each row of this table contains the product name and the date it was sold in a market Write an SQL query to find for each date the number of different products sold and their names The sold products names for each date should be sorted lexicographically Return the result table ordered by The query result format is in the following example Example Input Activities table product Headphone Pencil Mask Basketball Bible Mask T Shirt Output products Basketball Headphone T shirt Bible Pencil Mask Explanation For Sold items were Headphone Basketball T shirt we sort them lexicographically and separate them by a comma For Sold items were Pencil Bible we sort them lexicographically and separate them by a comma For the Sold item is Mask we just return it
longest increasing subsequence Given an integer array nums return the length of the longest strictly increasing subsequence Example Input nums Output Explanation The longest increasing subsequence is therefore the length is Example Input nums Output Example Input nums Output Constraints nums length nums i Follow up Can you come up with an algorithm that runs in O n log n time complexity
total hamming distance The Hamming distance between two integers is the number of positions at which the corresponding bits are different Given an integer array nums return the sum of Hamming distances between all the pairs of the integers in nums Example Input nums Output Explanation In binary representation the is is and is just showing the four bits relevant in this case The answer will be HammingDistance HammingDistance HammingDistance Example Input nums Output Constraints nums length nums i The answer for the given input will fit in a bit integer
alternating digit sum You are given a positive integer n Each digit of n has a sign according to the following rules The most significant digit is assigned a positive sign Each other digit has an opposite sign to its adjacent digits Return the sum of all digits with their corresponding sign Example Input n Output Explanation Example Input n Output Explanation Example Input n Output Explanation Constraints n
frog jump ii You are given a indexed integer array stones sorted in strictly increasing order representing the positions of stones in a river A frog initially on the first stone wants to travel to the last stone and then return to the first stone However it can jump to any stone at most once The length of a jump is the absolute difference between the position of the stone the frog is currently on and the position of the stone to which the frog jumps More formally if the frog is at stones i and is jumping to stones j the length of the jump is stones i stones j The cost of a path is the maximum length of a jump among all jumps in the path Return the minimum cost of a path for the frog Example Input stones Output Explanation The above figure represents one of the optimal paths the frog can take The cost of this path is which is the maximum length of a jump Since it is not possible to achieve a cost of less than we return it Example Input stones Output Explanation The frog can jump directly to the last stone and come back to the first stone In this case the length of each jump will be The cost for the path will be max It can be shown that this is the minimum achievable cost Constraints stones length stones i stones stones is sorted in a strictly increasing order
take k of each character from left and right You are given a string s consisting of the characters a b and c and a non negative integer k Each minute you may take either the leftmost character of s or the rightmost character of s Return the minimum number of minutes needed for you to take at least k of each character or return if it is not possible to take k of each character Example Input s aabaaaacaabc k Output Explanation Take three characters from the left of s You now have two a characters and one b character Take five characters from the right of s You now have four a characters two b characters and two c characters A total of minutes is needed It can be proven that is the minimum number of minutes needed Example Input s a k Output Explanation It is not possible to take one b or c so return Constraints s length s consists of only the letters a b and c k s length
fraction addition and subtraction Given a string expression representing an expression of fraction addition and subtraction return the calculation result in string format The final result should be an irreducible fraction If your final result is an integer change it to the format of a fraction that has a denominator So in this case should be converted to Example Input expression Output Example Input expression Output Example Input expression Output Constraints The input string only contains to and So does the output Each fraction input and output has the format numerator denominator If the first input fraction or the output is positive then will be omitted The input only contains valid irreducible fractions where the numerator and denominator of each fraction will always be in the range If the denominator is it means this fraction is actually an integer in a fraction format defined above The number of given fractions will be in the range The numerator and denominator of the final result are guaranteed to be valid and in the range of bit int
solve the equation Solve a given equation and return the value of x in the form of a string x value The equation contains only operation the variable x and its coefficient You should return No solution if there is no solution for the equation or Infinite solutions if there are infinite solutions for the equation If there is exactly one solution for the equation we ensure that the value of x is an integer Example Input equation x x x Output x Example Input equation x x Output Infinite solutions Example Input equation x Output x Constraints equation length equation has exactly one equation consists of integers with an absolute value in the range without any leading zeros and the variable x
queens that can attack the king On a indexed x chessboard there can be multiple black queens ad one white king You are given a integer array queens where queens i xQueeni yQueeni represents the position of the ith black queen on the chessboard You are also given an integer array king of length where king xKing yKing represents the position of the white king Return the coordinates of the black queens that can directly attack the king You may return the answer in any order Example Input queens king Output Explanation The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king i e marked with red dashes Example Input queens king Output Explanation The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king i e marked with red dashes Constraints queens length queens i length king length xQueeni yQueeni xKing yKing All the given positions are unique
remove palindromic subsequences You are given a string s consisting only of letters a and b In a single step you can remove one palindromic subsequence from s Return the minimum number of steps to make the given string empty A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order Note that a subsequence does not necessarily need to be contiguous A string is called palindrome if is one that reads the same backward as well as forward Example Input s ababa Output Explanation s is already a palindrome so its entirety can be removed in a single step Example Input s abb Output Explanation abb bb Remove palindromic subsequence a then bb Example Input s baabb Output Explanation baabb b Remove palindromic subsequence baab then b Constraints s length s i is either a or b
check if string is a prefix of array Given a string s and an array of strings words determine whether s is a prefix string of words A string s is a prefix string of words if s can be made by concatenating the first k strings in words for some positive k no larger than words length Return true if s is a prefix string of words or false otherwise Example Input s iloveleetcode words i love leetcode apples Output true Explanation s can be made by concatenating i love and leetcode together Example Input s iloveleetcode words apples i love leetcode Output false Explanation It is impossible to make s using a prefix of arr Constraints words length words i length s length words i and s consist of only lowercase English letters
maximum xor with an element from array You are given an array nums consisting of non negative integers You are also given a queries array where queries i xi mi The answer to the ith query is the maximum bitwise XOR value of xi and any element of nums that does not exceed mi In other words the answer is max nums j XOR xi for all j such that nums j mi If all elements in nums are larger than mi then the answer is Return an integer array answer where answer length queries length and answer i is the answer to the ith query Example Input nums queries Output Explanation and are the only two integers not greater than XOR and XOR The larger of the two is XOR XOR Example Input nums queries Output Constraints nums length queries length queries i length nums j xi mi
sum of mutated array closest to target Given an integer array arr and a target value target return the integer value such that when we change all the integers larger than value in the given array to be equal to value the sum of the array gets as close as possible in absolute difference to target In case of a tie return the minimum such integer Notice that the answer is not neccesarilly a number from arr Example Input arr target Output Explanation When using arr converts to which sums and that s the optimal answer Example Input arr target Output Example Input arr target Output Constraints arr length arr i target
shortest impossible sequence of rolls You are given an integer array rolls of length n and an integer k You roll a k sided dice numbered from to k n times where the result of the ith roll is rolls i Return the length of the shortest sequence of rolls that cannot be taken from rolls A sequence of rolls of length len is the result of rolling a k sided dice len times Note that the sequence taken does not have to be consecutive as long as it is in order Example Input rolls k Output Explanation Every sequence of rolls of length can be taken from rolls Every sequence of rolls of length can be taken from rolls The sequence cannot be taken from rolls so we return Note that there are other sequences that cannot be taken from rolls Example Input rolls k Output Explanation Every sequence of rolls of length can be taken from rolls The sequence cannot be taken from rolls so we return Note that there are other sequences that cannot be taken from rolls but is the shortest Example Input rolls k Output Explanation The sequence cannot be taken from rolls so we return Note that there are other sequences that cannot be taken from rolls but is the shortest Constraints n rolls length n rolls i k
bank account summary ii SQL Schema Table Users Column Name Type account int name varchar account is the primary key for this table Each row of this table contains the account number of each user in the bank There will be no two users having the same name in the table Table Transactions Column Name Type int account int amount int date is the primary key for this table Each row of this table contains all changes made to all accounts amount is positive if the user received money and negative if they transferred money All accounts start with a balance of Write an SQL query to report the name and balance of users with a balance higher than The balance of an account is equal to the sum of the amounts of all transactions involving that account Return the result table in any order The query result format is in the following example Example Input Users table account name Alice Bob Charlie Transactions table account amount Output name balance Alice Explanation Alice s balance is Bob s balance is Charlie s balance is
maximize number of subsequences in a string You are given a indexed string text and another indexed string pattern of length both of which consist of only lowercase English letters You can add either pattern or pattern anywhere in text exactly once Note that the character can be added even at the beginning or at the end of text Return the maximum number of times pattern can occur as a subsequence of the modified text A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters Example Input text abdcdbc pattern ac Output Explanation If we add pattern a in between text and text we get abadcdbc Now the number of times ac occurs as a subsequence is Some other strings which have subsequences ac after adding a character to text are aabdcdbc and abdacdbc However strings such as abdcadbc abdccdbc and abdcdbcc although obtainable have only subsequences ac and are thus suboptimal It can be shown that it is not possible to get more than subsequences ac by adding only one character Example Input text aabb pattern ab Output Explanation Some of the strings which can be obtained from text and have subsequences ab are aaabb aaabb and aabbb Constraints text length pattern length text and pattern consist only of lowercase English letters
reverse integer Given a signed bit integer x return x with its digits reversed If reversing x causes the value to go outside the signed bit integer range then return Assume the environment does not allow you to store bit integers signed or unsigned Example Input x Output Example Input x Output Example Input x Output Constraints x
maximum running time of n computers You have n computers You are given the integer n and a indexed integer array batteries where the ith battery can run a computer for batteries i minutes You are interested in running all n computers simultaneously using the given batteries Initially you can insert at most one battery into each computer After that and at any integer time moment you can remove a battery from a computer and insert another battery any number of times The inserted battery can be a totally new battery or a battery from another computer You may assume that the removing and inserting processes take no time Note that the batteries cannot be recharged Return the maximum number of minutes you can run all the n computers simultaneously Example Input n batteries Output Explanation Initially insert battery into the first computer and battery into the second computer After two minutes remove battery from the second computer and insert battery instead Note that battery can still run for one minute At the end of the third minute battery is drained and you need to remove it from the first computer and insert battery instead By the end of the fourth minute battery is also drained and the first computer is no longer running We can run the two computers simultaneously for at most minutes so we return Example Input n batteries Output Explanation Initially insert battery into the first computer and battery into the second computer After one minute battery and battery are drained so you need to remove them and insert battery into the first computer and battery into the second computer After another minute battery and battery are also drained so the first and second computers are no longer running We can run the two computers simultaneously for at most minutes so we return Constraints n batteries length batteries i
minimum time to complete all tasks There is a computer that can run an unlimited number of tasks at the same time You are given a integer array tasks where tasks i starti endi durationi indicates that the ith task should run for a total of durationi seconds not necessarily continuous within the inclusive time range starti endi You may turn on the computer only when it needs to run a task You can also turn it off if it is idle Return the minimum time during which the computer should be turned on to complete all tasks Example Input tasks Output Explanation The first task can be run in the inclusive time range The second task can be run in the inclusive time range The third task can be run in the two inclusive time ranges and The computer will be on for a total of seconds Example Input tasks Output Explanation The first task can be run in the inclusive time range The second task can be run in the inclusive time ranges and The third task can be run in the two inclusive time range The computer will be on for a total of seconds Constraints tasks length tasks i length starti endi durationi endi starti
group by Write code that enhances all arrays such that you can call the array groupBy fn method on any array and it will return a grouped version of the array A grouped array is an object where each key is the output of fn arr i and each value is an array containing all items in the original array with that key The provided callback fn will accept an item in the array and return a string key The order of each value list should be the order the items appear in the array Any order of keys is acceptable Please solve it without lodash s groupBy function Example Input array id id id fn function item return item id Output id id id Explanation Output is from array groupBy fn The selector function gets the id out of each item in the array There are two objects with an id of Both of those objects are put in the first array There is one object with an id of That object is put in the second array Example Input array fn function list return String list Output Explanation The array can be of any type In this case the selector function defines the key as being the first element in the array All the arrays have as their first element so they are grouped together Example Input array fn function n return String n Output true false Explanation The selector function splits the array by whether each number is greater than Constraints array length fn returns a string
shuffle an array Given an integer array nums design an algorithm to randomly shuffle the array All permutations of the array should be equally likely as a result of the shuffling Implement the Solution class Solution int nums Initializes the object with the integer array nums int reset Resets the array to its original configuration and returns it int shuffle Returns a random shuffling of the array Example Input Solution shuffle reset shuffle Output null Explanation Solution solution new Solution solution shuffle Shuffle the array and return its result Any permutation of must be equally likely to be returned Example return solution reset Resets the array back to its original configuration Return solution shuffle Returns the random shuffling of array Example return Constraints nums length nums i All the elements of nums are unique At most calls in total will be made to reset and shuffle
sort the matrix diagonally A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom right direction until reaching the matrix s end For example the matrix diagonal starting from mat where mat is a x matrix includes cells mat mat and mat Given an m x n matrix mat of integers sort each matrix diagonal in ascending order and return the resulting matrix Example Input mat Output Example Input mat Output Constraints m mat length n mat i length m n mat i j
maximum number of achievable transfer requests We have n buildings numbered from to n Each building has a number of employees It s transfer season and some employees want to change the building they reside in You are given an array requests where requests i fromi toi represents an employee s request to transfer from building fromi to building toi All buildings are full so a list of requests is achievable only if for each building the net change in employee transfers is zero This means the number of employees leaving is equal to the number of employees moving in For example if n and two employees are leaving building one is leaving building and one is leaving building there should be two employees moving to building one employee moving to building and one employee moving to building Return the maximum number of achievable requests Example Input n requests Output Explantion Let s see the requests From building we have employees x and y and both want to move to building From building we have employees a and b and they want to move to buildings and respectively From building we have employee z and they want to move to building From building we have employee c and they want to move to building From building we don t have any requests We can achieve the requests of users x and b by swapping their places We can achieve the requests of users y a and z by swapping the places in the buildings Example Input n requests Output Explantion Let s see the requests From building we have employee x and they want to stay in the same building From building we have employee y and they want to move to building From building we have employee z and they want to move to building We can achieve all the requests Example Input n requests Output Constraints n requests length requests i length fromi toi n
check whether two strings are almost equivalent Two strings and are considered almost equivalent if the differences between the frequencies of each letter from a to z between and is at most Given two strings and each of length n return true if and are almost equivalent or false otherwise The frequency of a letter x is the number of times it occurs in the string Example Input aaaa bccb Output false Explanation There are a s in aaaa but a s in bccb The difference is which is more than the allowed Example Input abcdeef abaaacc Output true Explanation The differences between the frequencies of each letter in and are at most a appears time in and times in The difference is b appears time in and time in The difference is c appears time in and times in The difference is d appears time in and times in The difference is e appears times in and times in The difference is f appears time in and times in The difference is Example Input cccddabba babababab Output true Explanation The differences between the frequencies of each letter in and are at most a appears times in and times in The difference is b appears times in and times in The difference is c appears times in and times in The difference is d appears times in and times in The difference is Constraints n length length n and consist only of lowercase English letters
sequential digits An integer has sequential digits if and only if each digit in the number is one more than the previous digit Return a sorted list of all the integers in the range low high inclusive that have sequential digits Example Input low high Output Example Input low high Output Constraints low high
first unique character in a string Given a string s find the first non repeating character in it and return its index If it does not exist return Example Input s leetcode Output Example Input s loveleetcode Output Example Input s aabb Output Constraints s length s consists of only lowercase English letters
count pairs of similar strings You are given a indexed string array words Two strings are similar if they consist of the same characters For example abca and cba are similar since both consist of characters a b and c However abacba and bcfd are not similar since they do not consist of the same characters Return the number of pairs i j such that i j word length and the two strings words i and words j are similar Example Input words aba aabb abcd bac aabc Output Explanation There are pairs that satisfy the conditions i and j both words and words only consist of characters a and b i and j both words and words only consist of characters a b and c Example Input words aabb ab ba Output Explanation There are pairs that satisfy the conditions i and j both words and words only consist of characters a and b i and j both words and words only consist of characters a and b i and j both words and words only consist of characters a and b Example Input words nba cba dba Output Explanation Since there does not exist any pair that satisfies the conditions we return Constraints words length words i length words i consist of only lowercase English letters
market analysis i SQL Schema Table Users Column Name Type int date varchar is the primary key of this table This table has the info of the users of an online shopping website where users can sell and buy items Table Orders Column Name Type int date int int int is the primary key of this table is a foreign key to the Items table and are foreign keys to the Users table Table Items Column Name Type int varchar is the primary key of this table Write an SQL query to find for each user the join date and the number of orders they made as a buyer in Return the result table in any order The query result format is in the following example Example Input Users table Lenovo Samsung LG HP Orders table Items table Samsung Lenovo LG HP Output
number of ways to split a string Given a binary string s you can split s into non empty strings and where s Return the number of ways s can be split such that the number of ones is the same in and Since the answer may be too large return it modulo Example Input s Output Explanation There are four ways to split s in parts where each part contain the same number of letters Example Input s Output Example Input s Output Explanation There are three ways to split s in parts Constraints s length s i is either or
minimum absolute sum difference You are given two positive integer arrays and both of length n The absolute sum difference of arrays and is defined as the sum of i i for each i n indexed You can replace at most one element of with any other element in to minimize the absolute sum difference Return the minimum absolute sum difference after replacing at most one element in the array Since the answer may be large return it modulo x is defined as x if x or x if x Example Input Output Explanation There are two possible optimal solutions Replace the second element with the first or Replace the second element with the third Both will yield an absolute sum difference of or Example Input Output Explanation is equal to so no replacement is needed This will result in an absolute sum difference of Example Input Output Explanation Replace the first element with the second This yields an absolute sum difference of Constraints n length n length n i i
h-index ii Given an array of integers citations where citations i is the number of citations a researcher received for their ith paper and citations is sorted in ascending order return the researcher s h index According to the definition of h index on Wikipedia The h index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times You must write an algorithm that runs in logarithmic time Example Input citations Output Explanation means the researcher has papers in total and each of them had received citations respectively Since the researcher has papers with at least citations each and the remaining two with no more than citations each their h index is Example Input citations Output Constraints n citations length n citations i citations is sorted in ascending order
palindrome linked list Given the head of a singly linked list return true if it is a palindrome or false otherwise Example Input head Output true Example Input head Output false Constraints The number of nodes in the list is in the range Node val Follow up Could you do it in O n time and O space
find peak element A peak element is an element that is strictly greater than its neighbors Given a indexed integer array nums find a peak element and return its index If the array contains multiple peaks return the index to any of the peaks You may imagine that nums nums n In other words an element is always considered to be strictly greater than a neighbor that is outside the array You must write an algorithm that runs in O log n time Example Input nums Output Explanation is a peak element and your function should return the index number Example Input nums Output Explanation Your function can return either index number where the peak element is or index number where the peak element is Constraints nums length nums i nums i nums i for all valid i
invalid transactions A transaction is possibly invalid if the amount exceeds or if it occurs within and including minutes of another transaction with the same name in a different city You are given an array of strings transaction where transactions i consists of comma separated values representing the name time in minutes amount and city of the transaction Return a list of transactions that are possibly invalid You may return the answer in any order Example Input transactions alice mtv alice beijing Output alice mtv alice beijing Explanation The first transaction is invalid because the second transaction occurs within a difference of minutes have the same name and is in a different city Similarly the second one is invalid too Example Input transactions alice mtv alice mtv Output alice mtv Example Input transactions alice mtv bob mtv Output bob mtv Constraints transactions length Each transactions i takes the form name time amount city Each name and city consist of lowercase English letters and have lengths between and Each time consist of digits and represent an integer between and Each amount consist of digits and represent an integer between and
compare strings by frequency of the smallest character Let the function f s be the frequency of the lexicographically smallest character in a non empty string s For example if s dcce then f s because the lexicographically smallest character is c which has a frequency of You are given an array of strings words and another array of query strings queries For each query queries i count the number of words in words such that f queries i f W for each W in words Return an integer array answer where each answer i is the answer to the ith query Example Input queries cbd words zaaaz Output Explanation On the first query we have f cbd f zaaaz so f cbd f zaaaz Example Input queries bbb cc words a aa aaa aaaa Output Explanation On the first query only f bbb f aaaa On the second query both f aaa and f aaaa are both f cc Constraints queries length words length queries i length words i length queries i j words i j consist of lowercase English letters
customers who bought all products SQL Schema Table Customer Column Name Type int int There is no primary key for this table It may contain duplicates is not NULL is a foreign key to Product table Table Product Column Name Type int is the primary key column for this table Write an SQL query to report the customer ids from the Customer table that bought all the products in the Product table Return the result table in any order The query result format is in the following example Example Input Customer table Product table Output Explanation The customers who bought all the products and are customers with IDs and
maximum students taking exam Given a m n matrix seats that represent seats distributions in a classroom If a seat is broken it is denoted by character otherwise it is denoted by a character Students can see the answers of those sitting next to the left right upper left and upper right but he cannot see the answers of the student sitting directly in front or behind him Return the maximum number of students that can take the exam together without any cheating being possible Students must be placed in seats in good condition Example Input seats Output Explanation Teacher can place students in available seats so they don t cheat on the exam Example Input seats Output Explanation Place all students in available seats Example Input seats Output Explanation Place students in available seats in column and Constraints seats contains only characters and m seats length n seats i length m n
partition string into substrings with values at most k You are given a string s consisting of digits from to and an integer k A partition of a string s is called good if Each digit of s is part of exactly one substring The value of each substring is less than or equal to k Return the minimum number of substrings in a good partition of s If no good partition of s exists return Note that The value of a string is its result when interpreted as an integer For example the value of is and the value of is A substring is a contiguous sequence of characters within a string Example Input s k Output Explanation We can partition the string into substrings and Each substring has a value less than or equal to k It can be shown that we cannot partition the string into less than substrings Example Input s k Output Explanation There is no good partition for this string Constraints s length s i is a digit from to k
count number of special subsequences A sequence is special if it consists of a positive number of followed by a positive number of then a positive number of For example and are special In contrast and are not special Given an array nums consisting of only integers and return the number of different subsequences that are special Since the answer may be very large return it modulo A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements Two subsequences are different if the set of indices chosen are different Example Input nums Output Explanation The special subsequences are bolded and Example Input nums Output Explanation There are no special subsequences in Example Input nums Output Explanation The special subsequences are bolded Constraints nums length nums i
as far from land as possible Given an n x n grid containing only values and where represents water and represents land find a water cell such that its distance to the nearest land cell is maximized and return the distance If no land or water exists in the grid return The distance used in this problem is the Manhattan distance the distance between two cells and is Example Input grid Output Explanation The cell is as far as possible from all the land with distance Example Input grid Output Explanation The cell is as far as possible from all the land with distance Constraints n grid length n grid i length n grid i j is or
the number of weak characters in the game You are playing a game that contains multiple characters and each of the characters has two main properties attack and defense You are given a integer array properties where properties i attacki defensei represents the properties of the ith character in the game A character is said to be weak if any other character has both attack and defense levels strictly greater than this character s attack and defense levels More formally a character i is said to be weak if there exists another character j where attackj attacki and defensej defensei Return the number of weak characters Example Input properties Output Explanation No character has strictly greater attack and defense than the other Example Input properties Output Explanation The first character is weak because the second character has a strictly greater attack and defense Example Input properties Output Explanation The third character is weak because the second character has a strictly greater attack and defense Constraints properties length properties i length attacki defensei
substrings of size three with distinct characters A string is good if there are no repeated characters Given a string s return the number of good substrings of length three in s Note that if there are multiple occurrences of the same substring every occurrence should be counted A substring is a contiguous sequence of characters in a string Example Input s xyzzaz Output Explanation There are substrings of size xyz yzz zza and zaz The only good substring of length is xyz Example Input s aababcabc Output Explanation There are substrings of size aab aba bab abc bca cab and abc The good substrings are abc bca cab and abc Constraints s length s consists of lowercase English letters
percentage of users attended a contest SQL Schema Table Users Column Name Type int varchar is the primary key for this table Each row of this table contains the name and the id of a user Table Register Column Name Type int int is the primary key for this table Each row of this table contains the id of a user and the contest they registered into Write an SQL query to find the percentage of the users registered in each contest rounded to two decimals Return the result table ordered by percentage in descending order In case of a tie order it by in ascending order The query result format is in the following example Example Input Users table Alice Bob Alex Register table Output percentage Explanation All the users registered in contests and The percentage is and we sort them in the answer table by in ascending order Alice and Alex registered in contest and the percentage is Bob registered in contest and the percentage is
constrained subsequence sum Given an integer array nums and an integer k return the maximum sum of a non empty subsequence of that array such that for every two consecutive integers in the subsequence nums i and nums j where i j the condition j i k is satisfied A subsequence of an array is obtained by deleting some number of elements can be zero from the array leaving the remaining elements in their original order Example Input nums k Output Explanation The subsequence is Example Input nums k Output Explanation The subsequence must be non empty so we choose the largest number Example Input nums k Output Explanation The subsequence is Constraints k nums length nums i
maximum star sum of a graph There is an undirected graph consisting of n nodes numbered from to n You are given a indexed integer array vals of length n where vals i denotes the value of the ith node You are also given a integer array edges where edges i ai bi denotes that there exists an undirected edge connecting nodes ai and bi A star graph is a subgraph of the given graph having a center node containing or more neighbors In other words it is a subset of edges of the given graph such that there exists a common node for all edges The image below shows star graphs with and neighbors respectively centered at the blue node The star sum is the sum of the values of all the nodes present in the star graph Given an integer k return the maximum star sum of a star graph containing at most k edges Example Input vals edges k Output Explanation The above diagram represents the input graph The star graph with the maximum star sum is denoted by blue It is centered at and includes its neighbors and It can be shown it is not possible to get a star graph with a sum greater than Example Input vals edges k Output Explanation There is only one possible star graph which is node itself Hence we return Constraints n vals length n vals i edges length min n n edges i length ai bi n ai bi k n
combinations Given two integers n and k return all possible combinations of k numbers chosen from the range n You may return the answer in any order Example Input n k Output Explanation There are choose total combinations Note that combinations are unordered i e and are considered to be the same combination Example Input n k Output Explanation There is choose total combination Constraints n k n
minimum fuel cost to report to the capital There is a tree i e a connected undirected graph with no cycles structure country network consisting of n cities numbered from to n and exactly n roads The capital city is city You are given a integer array roads where roads i ai bi denotes that there exists a bidirectional road connecting cities ai and bi There is a meeting for the representatives of each city The meeting is in the capital city There is a car in each city You are given an integer seats that indicates the number of seats in each car A representative can use the car in their city to travel or change the car and ride with another representative The cost of traveling between two cities is one liter of fuel Return the minimum number of liters of fuel to reach the capital city Example Input roads seats Output Explanation goes directly to the capital with liter of fuel goes directly to the capital with liter of fuel goes directly to the capital with liter of fuel It costs liters of fuel at minimum It can be proven that is the minimum number of liters of fuel needed Example Input roads seats Output Explanation goes directly to city with liter of fuel and go together to city with liter of fuel and go together to the capital with liter of fuel goes directly to the capital with liter of fuel goes directly to the capital with liter of fuel goes directly to city with liter of fuel and go together to the capital with liter of fuel It costs liters of fuel at minimum It can be proven that is the minimum number of liters of fuel needed Example Input roads seats Output Explanation No representatives need to travel to the capital city Constraints n roads length n roads i length ai bi n ai bi roads represents a valid tree seats
string compression Given an array of characters chars compress it using the following algorithm Begin with an empty string s For each group of consecutive repeating characters in chars If the group s length is append the character to s Otherwise append the character followed by the group s length The compressed string s should not be returned separately but instead be stored in the input character array chars Note that group lengths that are or longer will be split into multiple characters in chars After you are done modifying the input array return the new length of the array You must write an algorithm that uses only constant extra space Example Input chars a a b b c c c Output Return and the first characters of the input array should be a b c Explanation The groups are aa bb and ccc This compresses to Example Input chars a Output Return and the first character of the input array should be a Explanation The only group is a which remains uncompressed since it s a single character Example Input chars a b b b b b b b b b b b b Output Return and the first characters of the input array should be a b Explanation The groups are a and bbbbbbbbbbbb This compresses to Constraints chars length chars i is a lowercase English letter uppercase English letter digit or symbol
remove all adjacent duplicates in string ii You are given a string s and an integer k a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them causing the left and the right side of the deleted substring to concatenate together We repeatedly make k duplicate removals on s until we no longer can Return the final string after all such duplicate removals have been made It is guaranteed that the answer is unique Example Input s abcd k Output abcd Explanation There s nothing to delete Example Input s deeedbbcccbdaa k Output aa Explanation First delete eee and ccc get ddbbbdaa Then delete bbb get dddaa Finally delete ddd get aa Example Input s pbbcggttciiippooaais k Output ps Constraints s length k s only contains lowercase English letters
insert into a binary search tree You are given the root node of a binary search tree BST and a value to insert into the tree Return the root node of the BST after the insertion It is guaranteed that the new value does not exist in the original BST Notice that there may exist multiple valid ways for the insertion as long as the tree remains a BST after insertion You can return any of them Example Input root val Output Explanation Another accepted tree is Example Input root val Output null null Example Input root null null null null null null val Output Constraints The number of nodes in the tree will be in the range Node val All the values Node val are unique val It s guaranteed that val does not exist in the original BST
number of times binary string is prefix-aligned You have a indexed binary string of length n where all the bits are initially We will flip all the bits of this binary string i e change them from to one by one You are given a indexed integer array flips where flips i indicates that the bit at index i will be flipped in the ith step A binary string is prefix aligned if after the ith step all the bits in the inclusive range i are ones and all the other bits are zeros Return the number of times the binary string is prefix aligned during the flipping process Example Input flips Output Explanation The binary string is initially After applying step The string becomes which is not prefix aligned After applying step The string becomes which is not prefix aligned After applying step The string becomes which is not prefix aligned After applying step The string becomes which is prefix aligned After applying step The string becomes which is prefix aligned We can see that the string was prefix aligned times so we return Example Input flips Output Explanation The binary string is initially After applying step The string becomes which is not prefix aligned After applying step The string becomes which is not prefix aligned After applying step The string becomes which is not prefix aligned After applying step The string becomes which is prefix aligned We can see that the string was prefix aligned time so we return Constraints n flips length n flips is a permutation of the integers in the range n
maximum deletions on a string You are given a string s consisting of only lowercase English letters In one operation you can Delete the entire string s or Delete the first i letters of s if the first i letters of s are equal to the following i letters in s for any i in the range i s length For example if s ababc then in one operation you could delete the first two letters of s to get abc since the first two letters of s and the following two letters of s are both equal to ab Return the maximum number of operations needed to delete all of s Example Input s abcabcdabc Output Explanation Delete the first letters abc since the next letters are equal Now s abcdabc Delete all the letters We used operations so return It can be proven that is the maximum number of operations needed Note that in the second operation we cannot delete abc again because the next occurrence of abc does not happen in the next letters Example Input s aaabaab Output Explanation Delete the first letter a since the next letter is equal Now s aabaab Delete the first letters aab since the next letters are equal Now s aab Delete the first letter a since the next letter is equal Now s ab Delete all the letters We used operations so return It can be proven that is the maximum number of operations needed Example Input s aaaaa Output Explanation In each operation we can delete the first letter of s Constraints s length s consists only of lowercase English letters
can you eat your favorite candy on your favorite day? You are given a indexed array of positive integers candiesCount where candiesCount i represents the number of candies of the ith type you have You are also given a array queries where queries i favoriteTypei favoriteDayi dailyCapi You play a game with the following rules You start eating candies on day You cannot eat any candy of type i unless you have eaten all candies of type i You must eat at least one candy per day until you have eaten all the candies Construct a boolean array answer such that answer length queries length and answer i is true if you can eat a candy of type favoriteTypei on day favoriteDayi without eating more than dailyCapi candies on any day and false otherwise Note that you can eat different types of candy on the same day provided that you follow rule Return the constructed array answer Example Input candiesCount queries Output true false true Explanation If you eat candies type on day and candies type on day you will eat a candy of type on day You can eat at most candies each day If you eat candies every day you will eat candies type on day and candies type and type on day On day you can only eat candies type and type so you cannot eat a candy of type on day If you eat candy each day you will eat a candy of type on day Example Input candiesCount queries Output false true true false false Constraints candiesCount length candiesCount i queries length queries i length favoriteTypei candiesCount length favoriteDayi dailyCapi
smallest k-length subsequence with occurrences of a letter You are given a string s an integer k a letter letter and an integer repetition Return the lexicographically smallest subsequence of s of length k that has the letter letter appear at least repetition times The test cases are generated so that the letter appears in s at least repetition times A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters A string a is lexicographically smaller than a string b if in the first position where a and b differ string a has a letter that appears earlier in the alphabet than the corresponding letter in b Example Input s leet k letter e repetition Output eet Explanation There are four subsequences of length that have the letter e appear at least time lee from leet let from leet let from leet eet from leet The lexicographically smallest subsequence among them is eet Example Input s leetcode k letter e repetition Output ecde Explanation ecde is the lexicographically smallest subsequence of length that has the letter e appear at least times Example Input s bb k letter b repetition Output bb Explanation bb is the only subsequence of length that has the letter b appear at least times Constraints repetition k s length s consists of lowercase English letters letter is a lowercase English letter and appears in s at least repetition times
number of flowers in full bloom You are given a indexed integer array flowers where flowers i starti endi means the ith flower will be in full bloom from starti to endi inclusive You are also given a indexed integer array people of size n where poeple i is the time that the ith person will arrive to see the flowers Return an integer array answer of size n where answer i is the number of flowers that are in full bloom when the ith person arrives Example Input flowers poeple Output Explanation The figure above shows the times when the flowers are in full bloom and when the people arrive For each person we return the number of flowers in full bloom during their arrival Example Input flowers poeple Output Explanation The figure above shows the times when the flowers are in full bloom and when the people arrive For each person we return the number of flowers in full bloom during their arrival Constraints flowers length flowers i length starti endi people length people i
add two integers Given two integers and return the sum of the two integers Example Input Output Explanation is is and their sum is so is returned Example Input Output Explanation so is returned Constraints
longest duplicate substring Given a string s consider all duplicated substrings contiguous substrings of s that occur or more times The occurrences may overlap Return any duplicated substring that has the longest possible length If s does not have a duplicated substring the answer is Example Input s banana Output ana Example Input s abcd Output Constraints s length s consists of lowercase English letters
number of operations to make network connected There are n computers numbered from to n connected by ethernet cables connections forming a network where connections i ai bi represents a connection between computers ai and bi Any computer can reach any other computer directly or indirectly through the network You are given an initial computer network connections You can extract certain cables between two directly connected computers and place them between any pair of disconnected computers to make them directly connected Return the minimum number of times you need to do this in order to make all the computers connected If it is not possible return Example Input n connections Output Explanation Remove cable between computer and and place between computers and Example Input n connections Output Example Input n connections Output Explanation There are not enough cables Constraints n connections length min n n connections i length ai bi n ai bi There are no repeated connections No two computers are connected by more than one cable
count different palindromic subsequences Given a string s return the number of different non empty palindromic subsequences in s Since the answer may be very large return it modulo A subsequence of a string is obtained by deleting zero or more characters from the string A sequence is palindromic if it is equal to the sequence reversed Two sequences and are different if there is some i for which ai bi Example Input s bccb Output Explanation The different non empty palindromic subsequences are b c bb cc bcb bccb Note that bcb is counted only once even though it occurs twice Example Input s abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba Output Explanation There are different non empty palindromic subsequences which is modulo Constraints s length s i is either a b c or d
verify preorder serialization of a binary tree One way to serialize a binary tree is to use preorder traversal When we encounter a non null node we record the node s value If it is a null node we record using a sentinel value such as For example the above binary tree can be serialized to the string where represents a null node Given a string of comma separated values preorder return true if it is a correct preorder traversal serialization of a binary tree It is guaranteed that each comma separated value in the string must be either an integer or a character representing null pointer You may assume that the input format is always valid For example it could never contain two consecutive commas such as Note You are not allowed to reconstruct the tree Example Input preorder Output true Example Input preorder Output false Example Input preorder Output false Constraints preorder length preorder consist of integers in the range and separated by commas
sales analysis iii SQL Schema Table Product Column Name Type int varchar int is the primary key of this table Each row of this table indicates the name and the price of each product Table Sales Column Name Type int int int date quantity int price int This table has no primary key it can have repeated rows is a foreign key to the Product table Each row of this table contains some information about one sale Write an SQL query that reports the products that were only sold in the first quarter of That is between and inclusive Return the result table in any order The query result format is in the following example Example Input Product table iPhone Sales table quantity price Output Explanation The product with id was only sold in the spring of The product with id was sold in the spring of but was also sold after the spring of The product with id was sold after spring We return only product as it is the product that was only sold in the spring of
first completely painted row or column You are given a indexed integer array arr and an m x n integer matrix mat arr and mat both contain all the integers in the range m n Go through each index i in arr starting from index and paint the cell in mat containing the integer arr i Return the smallest index i at which either a row or a column will be completely painted in mat Example Input arr mat Output Explanation The moves are shown in order and both the first row and second column of the matrix become fully painted at arr Example Input arr mat Output Explanation The second column becomes fully painted at arr Constraints m mat length n mat i length arr length m n m n m n arr i mat r c m n All the integers of arr are unique All the integers of mat are unique
print words vertically Given a string s Return all the words vertically in the same order in which they appear in s Words are returned as a list of strings complete with spaces when is necessary Trailing spaces are not allowed Each word would be put on only one column and that in one column there will be only one word Example Input s HOW ARE YOU Output HAY ORO WEU Explanation Each word is printed vertically HAY ORO WEU Example Input s TO BE OR NOT TO BE Output TBONTB OEROOE T Explanation Trailing spaces is not allowed TBONTB OEROOE T Example Input s CONTEST IS COMING Output CIC OSO N M T I E N S G T Constraints s length s contains only upper case English letters It s guaranteed that there is only one space between words
maximum twin sum of a linked list In a linked list of size n where n is even the ith node indexed of the linked list is known as the twin of the n i th node if i n For example if n then node is the twin of node and node is the twin of node These are the only nodes with twins for n The twin sum is defined as the sum of a node and its twin Given the head of a linked list with even length return the maximum twin sum of the linked list Example Input head Output Explanation Nodes and are the twins of nodes and respectively All have twin sum There are no other nodes with twins in the linked list Thus the maximum twin sum of the linked list is Example Input head Output Explanation The nodes with twins present in this linked list are Node is the twin of node having a twin sum of Node is the twin of node having a twin sum of Thus the maximum twin sum of the linked list is max Example Input head Output Explanation There is only one node with a twin in the linked list having twin sum of Constraints The number of nodes in the list is an even integer in the range Node val
design memory allocator You are given an integer n representing the size of a indexed memory array All memory units are initially free You have a memory allocator with the following functionalities Allocate a block of size consecutive free memory units and assign it the id mID Free all memory units with the given id mID Note that Multiple blocks can be allocated to the same mID You should free all the memory units with mID even if they were allocated in different blocks Implement the Allocator class Allocator int n Initializes an Allocator object with a memory array of size n int allocate int size int mID Find the leftmost block of size consecutive free memory units and allocate it with the id mID Return the block s first index If such a block does not exist return int free int mID Free all memory units with the id mID Return the number of memory units you have freed Example Input Allocator allocate allocate allocate free allocate allocate allocate free allocate free Output null Explanation Allocator loc new Allocator Initialize a memory array of size All memory units are initially free loc allocate The leftmost block s first index is The memory array becomes We return loc allocate The leftmost block s first index is The memory array becomes We return loc allocate The leftmost block s first index is The memory array becomes We return loc free Free all memory units with mID The memory array becomes We return since there is only unit with mID loc allocate The leftmost block s first index is The memory array becomes We return loc allocate The leftmost block s first index is The memory array becomes We return loc allocate The leftmost block s first index is The memory array becomes We return loc free Free all memory units with mID The memory array becomes We return since there are units with mID loc allocate We can not find any free block with consecutive free memory units so we return loc free Free all memory units with mID The memory array remains the same since there is no memory unit with mID We return Constraints n size mID At most calls will be made to allocate and free
maximum candies allocated to k children You are given a indexed integer array candies Each element in the array denotes a pile of candies of size candies i You can divide each pile into any number of sub piles but you cannot merge two piles together You are also given an integer k You should allocate piles of candies to k children such that each child gets the same number of candies Each child can take at most one pile of candies and some piles of candies may go unused Return the maximum number of candies each child can get Example Input candies k Output Explanation We can divide candies into piles of size and and candies into piles of size and We now have five piles of candies of sizes and We can allocate the piles of size to children It can be proven that each child cannot receive more than candies Example Input candies k Output Explanation There are children but only candies in total so it is impossible to ensure each child receives at least one candy Thus each child gets no candy and the answer is Constraints candies length candies i k
number of unique subjects taught by each teacher SQL Schema Table Teacher Column Name Type int int int is the primary key for this table Each row in this table indicates that the teacher with teaches the subject in the department Write an SQL query to report the number of unique subjects each teacher teaches in the university Return the result table in any order The query result format is shown in the following example Example Input Teacher table Output cnt Explanation Teacher They teach subject in departments and They teach subject in department Teacher They teach subject in department They teach subject in department They teach subject in department They teach subject in department
count the number of ideal arrays You are given two integers n and maxValue which are used to describe an ideal array A indexed integer array arr of length n is considered ideal if the following conditions hold Every arr i is a value from to maxValue for i n Every arr i is divisible by arr i for i n Return the number of distinct ideal arrays of length n Since the answer may be very large return it modulo Example Input n maxValue Output Explanation The following are the possible ideal arrays Arrays starting with the value arrays Arrays starting with the value arrays Arrays starting with the value array Arrays starting with the value array Arrays starting with the value array There are a total of distinct ideal arrays Example Input n maxValue Output Explanation The following are the possible ideal arrays Arrays starting with the value arrays With no other distinct values array With distinct value arrays With distinct value arrays Arrays starting with the value array Arrays starting with the value array There are a total of distinct ideal arrays Constraints n maxValue
to be or not to be Write a function expect that helps developers test their code It should take in any value val and return an object with the following two functions toBe val accepts another value and returns true if the two values each other If they are not equal it should throw an error Not Equal notToBe val accepts another value and returns true if the two values each other If they are equal it should throw an error Equal Example Input func expect toBe Output value true Explanation so this expression returns true Example Input func expect toBe null Output error Not Equal Explanation null so this expression throw the error Not Equal Example Input func expect notToBe null Output value true Explanation null so this expression returns true
product sales analysis i SQL Schema Table Sales Column Name Type int int year int quantity int price int year is the primary key of this table is a foreign key to Product table Each row of this table shows a sale on the product in a certain year Note that the price is per unit Table Product Column Name Type int varchar is the primary key of this table Each row of this table indicates the product name of each product Write an SQL query that reports the year and price for each in the Sales table Return the resulting table in any order The query result format is in the following example Example Input Sales table year quantity price Product table Nokia Apple Samsung Output year price Nokia Nokia Apple Explanation From we can conclude that Nokia was sold for in the year From we can conclude that Nokia was sold for in the year From we can conclude that Apple was sold for in the year
check if there is a valid parentheses string path A parentheses string is a non empty string consisting only of and It is valid if any of the following conditions is true It is It can be written as AB A concatenated with B where A and B are valid parentheses strings It can be written as A where A is a valid parentheses string You are given an m x n matrix of parentheses grid A valid parentheses string path in the grid is a path satisfying all of the following conditions The path starts from the upper left cell The path ends at the bottom right cell m n The path only ever moves down or right The resulting parentheses string formed by the path is valid Return true if there exists a valid parentheses string path in the grid Otherwise return false Example Input grid Output true Explanation The above diagram shows two possible paths that form valid parentheses strings The first path shown results in the valid parentheses string The second path shown results in the valid parentheses string Note that there may be other valid parentheses string paths Example Input grid Output false Explanation The two possible paths form the parentheses strings and Since neither of them are valid parentheses strings we return false Constraints m grid length n grid i length m n grid i j is either or
maximum number of fish in a grid You are given a indexed matrix grid of size m x n where r c represents A land cell if grid r c or A water cell containing grid r c fish if grid r c A fisher can start at any water cell r c and can do the following operations any number of times Catch all the fish at cell r c or Move to any adjacent water cell Return the maximum number of fish the fisher can catch if he chooses his starting cell optimally or if no water cell exists An adjacent cell of the cell r c is one of the cells r c r c r c or r c if it exists Example Input grid Output Explanation The fisher can start at cell and collect fish then move to cell and collect fish Example Input grid Output Explanation The fisher can start at cells or and collect a single fish Constraints m grid length n grid i length m n grid i j
largest palindrome product Given an integer n return the largest palindromic integer that can be represented as the product of two n digits integers Since the answer can be very large return it modulo Example Input n Output Explanation x Example Input n Output Constraints n
count unique characters of all substrings of a given string Let s define a function countUniqueChars s that returns the number of unique characters on s For example calling countUniqueChars s if s LEETCODE then L T C O D are the unique characters since they appear only once in s therefore countUniqueChars s Given a string s return the sum of countUniqueChars t where t is a substring of s The test cases are generated such that the answer fits in a bit integer Notice that some substrings can be repeated so in this case you have to count the repeated ones too Example Input s ABC Output Explanation All possible substrings are A B C AB BC and ABC Every substring is composed with only unique letters Sum of lengths of all substring is Example Input s ABA Output Explanation The same as example except countUniqueChars ABA Example Input s LEETCODE Output Constraints s length s consists of uppercase English letters only
finding 3-digit even numbers You are given an integer array digits where each element is a digit The array may contain duplicates You need to find all the unique integers that follow the given requirements The integer consists of the concatenation of three elements from digits in any arbitrary order The integer does not have leading zeros The integer is even For example if the given digits were integers and follow the requirements Return a sorted array of the unique integers Example Input digits Output Explanation All the possible integers that follow the requirements are in the output array Notice that there are no odd integers or integers with leading zeros Example Input digits Output Explanation The same digit can be used as many times as it appears in digits In this example the digit is used twice each time in and Example Input digits Output Explanation No even integers can be formed using the given digits Constraints digits length digits i
longest substring of one repeating character You are given a indexed string s You are also given a indexed string queryCharacters of length k and a indexed array of integer indices queryIndices of length k both of which are used to describe k queries The ith query updates the character in s at index queryIndices i to the character queryCharacters i Return an array lengths of length k where lengths i is the length of the longest substring of s consisting of only one repeating character after the ith query is performed Example Input s babacc queryCharacters bcb queryIndices Output Explanation query updates s bbbacc The longest substring consisting of one repeating character is bbb with length query updates s bbbccc The longest substring consisting of one repeating character can be bbb or ccc with length query updates s bbbbcc The longest substring consisting of one repeating character is bbbb with length Thus we return Example Input s abyzz queryCharacters aa queryIndices Output Explanation query updates s abazz The longest substring consisting of one repeating character is zz with length query updates s aaazz The longest substring consisting of one repeating character is aaa with length Thus we return Constraints s length s consists of lowercase English letters k queryCharacters length queryIndices length k queryCharacters consists of lowercase English letters queryIndices i s length
find servers that handled most number of requests You have k servers numbered from to k that are being used to handle multiple requests simultaneously Each server has infinite computational capacity but cannot handle more than one request at a time The requests are assigned to servers according to a specific algorithm The ith indexed request arrives If all servers are busy the request is dropped not handled at all If the i k th server is available assign the request to that server Otherwise assign the request to the next available server wrapping around the list of servers and starting from if necessary For example if the ith server is busy try to assign the request to the i th server then the i th server and so on You are given a strictly increasing array arrival of positive integers where arrival i represents the arrival time of the ith request and another array load where load i represents the load of the ith request the time it takes to complete Your goal is to find the busiest server s A server is considered busiest if it handled the most number of requests successfully among all the servers Return a list containing the IDs indexed of the busiest server s You may return the IDs in any order Example Input k arrival load Output Explanation All of the servers start out available The first requests are handled by the first servers in order Request comes in Server is busy so it s assigned to the next available server which is Request comes in It cannot be handled since all servers are busy so it is dropped Servers and handled one request each while server handled two requests Hence server is the busiest server Example Input k arrival load Output Explanation The first requests are handled by first servers Request comes in It is handled by server since the server is available Server handled two requests while servers and handled one request each Hence server is the busiest server Example Input k arrival load Output Explanation Each server handles a single request so they are all considered the busiest Constraints k arrival length load length arrival length load length arrival i load i arrival is strictly increasing
find a corresponding node of a binary tree in a clone of that tree Given two binary trees original and cloned and given a reference to a node target in the original tree The cloned tree is a copy of the original tree Return a reference to the same node in the cloned tree Note that you are not allowed to change any of the two trees or the target node and the answer must be a reference to a node in the cloned tree Example Input tree null null target Output Explanation In all examples the original and cloned trees are shown The target node is a green node from the original tree The answer is the yellow node from the cloned tree Example Input tree target Output Example Input tree null null null null null null target Output Constraints The number of nodes in the tree is in the range The values of the nodes of the tree are unique target node is a node from the original tree and is not null Follow up Could you solve the problem if repeated values on the tree are allowed
minimum score of a path between two cities You are given a positive integer n representing n cities numbered from to n You are also given a array roads where roads i ai bi distancei indicates that there is a bidirectional road between cities ai and bi with a distance equal to distancei The cities graph is not necessarily connected The score of a path between two cities is defined as the minimum distance of a road in this path Return the minimum possible score of a path between cities and n Note A path is a sequence of roads between two cities It is allowed for a path to contain the same road multiple times and you can visit cities and n multiple times along the path The test cases are generated such that there is at least one path between and n Example Input n roads Output Explanation The path from city to with the minimum score is The score of this path is min It can be shown that no other path has less score Example Input n roads Output Explanation The path from city to with the minimum score is The score of this path is min Constraints n roads length roads i length ai bi n ai bi distancei There are no repeated edges There is at least one path between and n
number of subarrays with gcd equal to k Given an integer array nums and an integer k return the number of subarrays of nums where the greatest common divisor of the subarray s elements is k A subarray is a contiguous non empty sequence of elements within an array The greatest common divisor of an array is the largest integer that evenly divides all the array elements Example Input nums k Output Explanation The subarrays of nums where is the greatest common divisor of all the subarray s elements are Example Input nums k Output Explanation There are no subarrays of nums where is the greatest common divisor of all the subarray s elements Constraints nums length nums i k
partition array into two arrays to minimize sum difference You are given an integer array nums of n integers You need to partition nums into two arrays of length n to minimize the absolute difference of the sums of the arrays To partition nums put each element of nums into one of the two arrays Return the minimum possible absolute difference Example Input nums Output Explanation One optimal partition is and The absolute difference between the sums of the arrays is abs Example Input nums Output Explanation One optimal partition is and The absolute difference between the sums of the arrays is abs Example Input nums Output Explanation One optimal partition is and The absolute difference between the sums of the arrays is abs Constraints n nums length n nums i
count number of maximum bitwise-or subsets Given an integer array nums find the maximum possible bitwise OR of a subset of nums and return the number of different non empty subsets with the maximum bitwise OR An array a is a subset of an array b if a can be obtained from b by deleting some possibly zero elements of b Two subsets are considered different if the indices of the elements chosen are different The bitwise OR of an array a is equal to a OR a OR OR a a length indexed Example Input nums Output Explanation The maximum possible bitwise OR of a subset is There are subsets with a bitwise OR of Example Input nums Output Explanation All non empty subsets of have a bitwise OR of There are total subsets Example Input nums Output Explanation The maximum possible bitwise OR of a subset is There are subsets with a bitwise OR of Constraints nums length nums i
find customer referee SQL Schema Table Customer Column Name Type id int name varchar int id is the primary key column for this table Each row of this table indicates the id of a customer their name and the id of the customer who referred them Write an SQL query to report the names of the customer that are not referred by the customer with id Return the result table in any order The query result format is in the following example Example Input Customer table id name Will null Jane null Alex Bill null Zack Mark Output name Will Jane Bill Zack
redistribute characters to make all strings equal You are given an array of strings words indexed In one operation pick two distinct indices i and j where words i is a non empty string and move any character from words i to any position in words j Return true if you can make every string in words equal using any number of operations and false otherwise Example Input words abc aabc bc Output true Explanation Move the first a in words to the front of words to make words abc and words abc All the strings are now equal to abc so return true Example Input words ab a Output false Explanation It is impossible to make all the strings equal using the operation Constraints words length words i length words i consists of lowercase English letters
decode ways A message containing letters from A Z can be encoded into numbers using the following mapping A B Z To decode an encoded message all the digits must be grouped then mapped back into letters using the reverse of the mapping above there may be multiple ways For example can be mapped into AAJF with the grouping KJF with the grouping Note that the grouping is invalid because cannot be mapped into F since is different from Given a string s containing only digits return the number of ways to decode it The test cases are generated so that the answer fits in a bit integer Example Input s Output Explanation could be decoded as AB or L Example Input s Output Explanation could be decoded as BZ VF or BBF Example Input s Output Explanation cannot be mapped to F because of the leading zero is different from Constraints s length s contains only digits and may contain leading zero s
find the width of columns of a grid You are given a indexed m x n integer matrix grid The width of a column is the maximum length of its integers For example if grid the width of the only column is since is of length Return an integer array ans of size n where ans i is the width of the ith column The length of an integer x with len digits is equal to len if x is non negative and len otherwise Example Input grid Output Explanation In the column is of length Example Input grid Output Explanation In the column only is of length In the column all integers are of length In the column both and are of length Constraints m grid length n grid i length m n grid r c
distribute candies to people We distribute some number of candies to a row of n people in the following way We then give candy to the first person candies to the second person and so on until we give n candies to the last person Then we go back to the start of the row giving n candies to the first person n candies to the second person and so on until we give n candies to the last person This process repeats with us giving one more candy each time and moving to the start of the row after we reach the end until we run out of candies The last person will receive all of our remaining candies not necessarily one more than the previous gift Return an array of length and sum candies that represents the final distribution of candies Example Input candies Output Explanation On the first turn ans and the array is On the second turn ans and the array is On the third turn ans and the array is On the fourth turn ans because there is only one candy left and the final array is Example Input candies Output Explanation On the first turn ans and the array is On the second turn ans and the array is On the third turn ans and the array is On the fourth turn ans and the final array is Constraints candies
find the kth smallest sum of a matrix with sorted rows You are given an m x n matrix mat that has its rows sorted in non decreasing order and an integer k You are allowed to choose exactly one element from each row to form an array Return the kth smallest array sum among all possible arrays Example Input mat k Output Explanation Choosing one element from each row the first k smallest sum are Where the sum is Example Input mat k Output Example Input mat k Output Explanation Choosing one element from each row the first k smallest sum are Where the sum is Constraints m mat length n mat length i m n mat i j k min nm mat i is a non decreasing array
sum of digits of string after convert You are given a string s consisting of lowercase English letters and an integer k First convert s into an integer by replacing each letter with its position in the alphabet i e replace a with b with z with Then transform the integer by replacing it with the sum of its digits Repeat the transform operation k times in total For example if s zbax and k then the resulting integer would be by the following operations Convert zbax Transform Transform Return the resulting integer after performing the operations described above Example Input s iiii k Output Explanation The operations are as follows Convert iiii Transform Thus the resulting integer is Example Input s leetcode k Output Explanation The operations are as follows Convert leetcode Transform Transform Thus the resulting integer is Example Input s zbax k Output Constraints s length k s consists of lowercase English letters
find players with zero or one losses You are given an integer array matches where matches i winneri loseri indicates that the player winneri defeated player loseri in a match Return a list answer of size where answer is a list of all players that have not lost any matches answer is a list of all players that have lost exactly one match The values in the two lists should be returned in increasing order Note You should only consider the players that have played at least one match The testcases will be generated such that no two matches will have the same outcome Example Input matches Output Explanation Players and have not lost any matches Players and each have lost one match Players and each have lost two matches Thus answer and answer Example Input matches Output Explanation Players and have not lost any matches Players and each have lost two matches Thus answer and answer Constraints matches length matches i length winneri loseri winneri loseri All matches i are unique
range sum query 2d - immutable Given a matrix matrix handle multiple queries of the following type Calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner and lower right corner Implement the NumMatrix class NumMatrix int matrix Initializes the object with the integer matrix matrix int sumRegion int int int int Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner and lower right corner You must design an algorithm where sumRegion works on O time complexity Example Input NumMatrix sumRegion sumRegion sumRegion Output null Explanation NumMatrix numMatrix new NumMatrix numMatrix sumRegion return i e sum of the red rectangle numMatrix sumRegion return i e sum of the green rectangle numMatrix sumRegion return i e sum of the blue rectangle Constraints m matrix length n matrix i length m n matrix i j m n At most calls will be made to sumRegion
number of strings that appear as substrings in word Given an array of strings patterns and a string word return the number of strings in patterns that exist as a substring in word A substring is a contiguous sequence of characters within a string Example Input patterns a abc bc d word abc Output Explanation a appears as a substring in abc abc appears as a substring in abc bc appears as a substring in abc d does not appear as a substring in abc of the strings in patterns appear as a substring in word Example Input patterns a b c word aaaaabbbbb Output Explanation a appears as a substring in aaaaabbbbb b appears as a substring in aaaaabbbbb c does not appear as a substring in aaaaabbbbb of the strings in patterns appear as a substring in word Example Input patterns a a a word ab Output Explanation Each of the patterns appears as a substring in word ab Constraints patterns length patterns i length word length patterns i and word consist of lowercase English letters
circular sentence A sentence is a list of words that are separated by a single space with no leading or trailing spaces For example Hello World HELLO hello world hello world are all sentences Words consist of only uppercase and lowercase English letters Uppercase and lowercase English letters are considered different A sentence is circular if The last character of a word is equal to the first character of the next word The last character of the last word is equal to the first character of the first word For example leetcode exercises sound delightful eetcode leetcode eats soul are all circular sentences However Leetcode is cool happy Leetcode Leetcode and I like Leetcode are not circular sentences Given a string sentence return true if it is circular Otherwise return false Example Input sentence leetcode exercises sound delightful Output true Explanation The words in sentence are leetcode exercises sound delightful leetcode s last character is equal to exercises s first character exercises s last character is equal to sound s first character sound s last character is equal to delightful s first character delightful s last character is equal to leetcode s first character The sentence is circular Example Input sentence eetcode Output true Explanation The words in sentence are eetcode eetcode s last character is equal to eetcode s first character The sentence is circular Example Input sentence Leetcode is cool Output false Explanation The words in sentence are Leetcode is cool Leetcode s last character is not equal to is s first character The sentence is not circular Constraints sentence length sentence consist of only lowercase and uppercase English letters and spaces The words in sentence are separated by a single space There are no leading or trailing spaces
minimum number of moves to seat everyone There are n seats and n students in a room You are given an array seats of length n where seats i is the position of the ith seat You are also given the array students of length n where students j is the position of the jth student You may perform the following move any number of times Increase or decrease the position of the ith student by i e moving the ith student from position x to x or x Return the minimum number of moves required to move each student to a seat such that no two students are in the same seat Note that there may be multiple seats or students in the same position at the beginning Example Input seats students Output Explanation The students are moved as follows The first student is moved from from position to position using move The second student is moved from from position to position using moves The third student is moved from from position to position using move In total moves were used Example Input seats students Output Explanation The students are moved as follows The first student is not moved The second student is moved from from position to position using move The third student is moved from from position to position using moves The fourth student is moved from from position to position using moves In total moves were used Example Input seats students Output Explanation Note that there are two seats at position and two seats at position The students are moved as follows The first student is moved from from position to position using move The second student is moved from from position to position using moves The third student is not moved The fourth student is not moved In total moves were used Constraints n seats length students length n seats i students j
two best non-overlapping events You are given a indexed integer array of events where events i startTimei endTimei valuei The ith event starts at startTimei and ends at endTimei and if you attend this event you will receive a value of valuei You can choose at most two non overlapping events to attend such that the sum of their values is maximized Return this maximum sum Note that the start time and end time is inclusive that is you cannot attend two events where one of them starts and the other ends at the same time More specifically if you attend an event with end time t the next event must start at or after t Example Input events Output Explanation Choose the green events and for a sum of Example Input events Output Explanation Choose event for a sum of Example Input events Output Explanation Choose events and for a sum of Constraints events length events i length startTimei endTimei valuei
escape the ghosts You are playing a simplified PAC MAN game on an infinite D grid You start at the point and you are given a destination point target xtarget ytarget that you are trying to get to There are several ghosts on the map with their starting positions given as a array ghosts where ghosts i xi yi represents the starting position of the ith ghost All inputs are integral coordinates Each turn you and all the ghosts may independently choose to either move unit in any of the four cardinal directions north east south or west or stay still All actions happen simultaneously You escape if and only if you can reach the target before any ghost reaches you If you reach any square including the target at the same time as a ghost it does not count as an escape Return true if it is possible to escape regardless of how the ghosts move otherwise return false Example Input ghosts target Output true Explanation You can reach the destination after turn while the ghosts located at and cannot catch up with you Example Input ghosts target Output false Explanation You need to reach the destination but the ghost at lies between you and the destination Example Input ghosts target Output false Explanation The ghost can reach the target at the same time as you Constraints ghosts length ghosts i length xi yi There can be multiple ghosts in the same location target length xtarget ytarget
filling bookcase shelves You are given an array books where books i thicknessi heighti indicates the thickness and height of the ith book You are also given an integer shelfWidth We want to place these books in order onto bookcase shelves that have a total width shelfWidth We choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to shelfWidth then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down We repeat this process until there are no more books to place Note that at each step of the above process the order of the books we place is the same order as the given sequence of books For example if we have an ordered list of books we might place the first and second book onto the first shelf the third book on the second shelf and the fourth and fifth book on the last shelf Return the minimum possible height that the total bookshelf can be after placing shelves in this manner Example Input books shelfWidth Output Explanation The sum of the heights of the shelves is Notice that book number does not have to be on the first shelf Example Input books shelfWidth Output Constraints books length thicknessi shelfWidth heighti
increment submatrices by one You are given a positive integer n indicating that we initially have an n x n indexed integer matrix mat filled with zeroes You are also given a integer array query For each query i you should do the following operation Add to every element in the submatrix with the top left corner and the bottom right corner That is add to mat x y for all x and y Return the matrix mat after performing every query Example Input n queries Output Explanation The diagram above shows the initial matrix the matrix after the first query and the matrix after the second query In the first query we add to every element in the submatrix with the top left corner and bottom right corner In the second query we add to every element in the submatrix with the top left corner and bottom right corner Example Input n queries Output Explanation The diagram above shows the initial matrix and the matrix after the first query In the first query we add to every element in the matrix Constraints n queries length n n
erect the fence You are given an array trees where trees i xi yi represents the location of a tree in the garden Fence the entire garden using the minimum length of rope as it is expensive The garden is well fenced only if all the trees are enclosed Return the coordinates of trees that are exactly located on the fence perimeter You may return the answer in any order Example Input trees Output Explanation All the trees will be on the perimeter of the fence except the tree at which will be inside the fence Example Input trees Output Explanation The fence forms a line that passes through all the trees Constraints trees length trees i length xi yi All the given positions are unique
optimal partition of string Given a string s partition the string into one or more substrings such that the characters in each substring are unique That is no letter appears in a single substring more than once Return the minimum number of substrings in such a partition Note that each character should belong to exactly one substring in a partition Example Input s abacaba Output Explanation Two possible partitions are a ba cab a and ab a ca ba It can be shown that is the minimum number of substrings needed Example Input s ssssss Output Explanation The only valid partition is s s s s s s Constraints s length s consists of only English lowercase letters
maximum sum with exactly k elements You are given a indexed integer array nums and an integer k Your task is to perform the following operation exactly k times in order to maximize your score Select an element m from nums Remove the selected element m from the array Add a new element with a value of m to the array Increase your score by m Return the maximum score you can achieve after performing the operation exactly k times Example Input nums k Output Explanation We need to choose exactly elements from nums to maximize the sum For the first iteration we choose Then sum is and nums For the second iteration we choose Then sum is and nums For the third iteration we choose Then sum is and nums So we will return It can be proven that is the maximum answer that we can achieve Example Input nums k Output Explanation We need to choose exactly elements from nums to maximize the sum For the first iteration we choose Then sum is and nums For the second iteration we choose Then sum is and nums So we will return It can be proven that is the maximum answer that we can achieve Constraints nums length nums i k
prime arrangements Return the number of permutations of to n so that prime numbers are at prime indices indexed Recall that an integer is prime if and only if it is greater than and cannot be written as a product of two positive integers both smaller than it Since the answer may be large return the answer modulo Example Input n Output Explanation For example is a valid permutation but is not because the prime number is at index Example Input n Output Constraints n
minimum number of operations to convert time You are given two strings current and correct representing two hour times hour times are formatted as HH MM where HH is between and and MM is between and The earliest hour time is and the latest is In one operation you can increase the time current by or minutes You can perform this operation any number of times Return the minimum number of operations needed to convert current to correct Example Input current correct Output Explanation We can convert current to correct in operations as follows Add minutes to current current becomes Add minutes to current current becomes Add minutes to current current becomes It can be proven that it is not possible to convert current to correct in fewer than operations Example Input current correct Output Explanation We only have to add one minute to current so the minimum number of operations needed is Constraints current and correct are in the format HH MM current correct
occurrences after bigram Given two strings first and second consider occurrences in some text of the form first second third where second comes immediately after first and third comes immediately after second Return an array of all the words third for each occurrence of first second third Example Input text alice is a good girl she is a good student first a second good Output girl student Example Input text we will we will rock you first we second will Output we rock Constraints text length text consists of lowercase English letters and spaces All the words in text a separated by a single space first length second length first and second consist of lowercase English letters
longest happy string A string s is called happy if it satisfies the following conditions s only contains the letters a b and c s does not contain any of aaa bbb or ccc as a substring s contains at most a occurrences of the letter a s contains at most b occurrences of the letter b s contains at most c occurrences of the letter c Given three integers a b and c return the longest possible happy string If there are multiple longest happy strings return any of them If there is no such string return the empty string A substring is a contiguous sequence of characters within a string Example Input a b c Output ccaccbcc Explanation ccbccacc would also be a correct answer Example Input a b c Output aabaa Explanation It is the only correct answer in this case Constraints a b c a b c
promise time limit Given an asyncronous function fn and a time t in milliseconds return a new time limited version of the input function A time limited function is a function that is identical to the original unless it takes longer than t milliseconds to fullfill In that case it will reject with Time Limit Exceeded Note that it should reject with a string not an Error Example Input fn async n await new Promise res setTimeout res return n n inputs t Output rejected Time Limit Exceeded time Explanation The provided function is set to resolve after However the time limit is set to It rejects at t because the time limit was reached Example Input fn async n await new Promise res setTimeout res return n n inputs t Output resolved time Explanation The function resolved at t The time limit is never reached Example Input fn async a b await new Promise res setTimeout res return a b inputs t Output resolved time Explanation The function resolved at t The time limit is never reached Example Input fn async throw Error inputs t Output rejected Error time Explanation The function immediately throws an error Constraints inputs length t fn returns a promise
numbers with repeated digits Given an integer n return the number of positive integers in the range n that have at least one repeated digit Example Input n Output Explanation The only positive number with at least repeated digit is Example Input n Output Explanation The positive numbers with atleast repeated digit are and Example Input n Output Constraints n
minimum operations to make a uni-value grid You are given a integer grid of size m x n and an integer x In one operation you can add x to or subtract x from any element in the grid A uni value grid is a grid where all the elements of it are equal Return the minimum number of operations to make the grid uni value If it is not possible return Example Input grid x Output Explanation We can make every element equal to by doing the following Add x to once Subtract x from once Subtract x from twice A total of operations were used Example Input grid x Output Explanation We can make every element equal to Example Input grid x Output Explanation It is impossible to make every element equal Constraints m grid length n grid i length m n m n x grid i j
the skyline problem A city s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance Given the locations and heights of all the buildings return the skyline formed by these buildings collectively The geometric information of each building is given in the array buildings where buildings i lefti righti heighti lefti is the x coordinate of the left edge of the ith building righti is the x coordinate of the right edge of the ith building heighti is the height of the ith building You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height The skyline should be represented as a list of key points sorted by their x coordinate in the form Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list which always has a y coordinate and is used to mark the skyline s termination where the rightmost building ends Any ground between the leftmost and rightmost buildings should be part of the skyline s contour Note There must be no consecutive horizontal lines of equal height in the output skyline For instance is not acceptable the three lines of height should be merged into one in the final output as such Example Input buildings Output Explanation Figure A shows the buildings of the input Figure B shows the skyline formed by those buildings The red points in figure B represent the key points in the output list Example Input buildings Output Constraints buildings length lefti righti heighti buildings is sorted by lefti in non decreasing order
number of boomerangs You are given n points in the plane that are all distinct where points i xi yi A boomerang is a tuple of points i j k such that the distance between i and j equals the distance between i and k the order of the tuple matters Return the number of boomerangs Example Input points Output Explanation The two boomerangs are and Example Input points Output Example Input points Output Constraints n points length n points i length xi yi All the points are unique
asteroid collision We are given an array asteroids of integers representing asteroids in a row For each asteroid the absolute value represents its size and the sign represents its direction positive meaning right negative meaning left Each asteroid moves at the same speed Find out the state of the asteroids after all collisions If two asteroids meet the smaller one will explode If both are the same size both will explode Two asteroids moving in the same direction will never meet Example Input asteroids Output Explanation The and collide resulting in The and never collide Example Input asteroids Output Explanation The and collide exploding each other Example Input asteroids Output Explanation The and collide resulting in The and collide resulting in Constraints asteroids length asteroids i asteroids i
equal sum arrays with minimum number of operations You are given two arrays of integers and possibly of different lengths The values in the arrays are between and inclusive In one operation you can change any integer s value in any of the arrays to any value between and inclusive Return the minimum number of operations required to make the sum of values in equal to the sum of values in Return if it is not possible to make the sum of the two arrays equal Example Input Output Explanation You can make the sums of and equal with operations All indices are indexed Change to Change to Change to Example Input Output Explanation There is no way to decrease the sum of or to increase the sum of to make them equal Example Input Output Explanation You can make the sums of and equal with operations All indices are indexed Change to Change to Change to Constraints length length i i
minimum skips to arrive at meeting on time You are given an integer hoursBefore the number of hours you have to travel to your meeting To arrive at your meeting you have to travel through n roads The road lengths are given as an integer array dist of length n where dist i describes the length of the ith road in kilometers In addition you are given an integer speed which is the speed in km h you will travel at After you travel road i you must rest and wait for the next integer hour before you can begin traveling on the next road Note that you do not have to rest after traveling the last road because you are already at the meeting For example if traveling a road takes hours you must wait until the hour mark before traveling the next road If traveling a road takes exactly hours you do not need to wait However you are allowed to skip some rests to be able to arrive on time meaning you do not need to wait for the next integer hour Note that this means you may finish traveling future roads at different hour marks For example suppose traveling the first road takes hours and traveling the second road takes hours Skipping the rest after the first road will mean you finish traveling the second road right at the hour mark letting you start traveling the third road immediately Return the minimum number of skips required to arrive at the meeting on time or if it is impossible Example Input dist speed hoursBefore Output Explanation Without skipping any rests you will arrive in hours You can skip the first rest to arrive in hours Note that the second rest is shortened because you finish traveling the second road at an integer hour due to skipping the first rest Example Input dist speed hoursBefore Output Explanation Without skipping any rests you will arrive in hours You can skip the first and third rest to arrive in hours Example Input dist speed hoursBefore Output Explanation It is impossible to arrive at the meeting on time even if you skip all the rests Constraints n dist length n dist i speed hoursBefore
reorder list You are given the head of a singly linked list The list can be represented as Ln Ln Reorder the list to be on the following form Ln Ln Ln You may not modify the values in the list s nodes Only nodes themselves may be changed Example Input head Output Example Input head Output Constraints The number of nodes in the list is in the range Node val
reverse bits Reverse bits of a given bits unsigned integer Note Note that in some languages such as Java there is no unsigned integer type In this case both input and output will be given as a signed integer type They should not affect your implementation as the integer s internal binary representation is the same whether it is signed or unsigned In Java the compiler represents the signed integers using s complement notation Therefore in Example above the input represents the signed integer and the output represents the signed integer Example Input n Output Explanation The input binary string represents the unsigned integer so return which its binary representation is Example Input n Output Explanation The input binary string represents the unsigned integer so return which its binary representation is Constraints The input must be a binary string of length Follow up If this function is called many times how would you optimize it
remove nth node from end of list Given the head of a linked list remove the nth node from the end of the list and return its head Example Input head n Output Example Input head n Output Example Input head n Output Constraints The number of nodes in the list is sz sz Node val n sz Follow up Could you do this in one pass
minimum time visiting all points On a plane there are n points with integer coordinates points i xi yi Return the minimum time in seconds to visit all the points in the order given by points You can move according to these rules In second you can either move vertically by one unit move horizontally by one unit or move diagonally sqrt units in other words move one unit vertically then one unit horizontally in second You have to visit the points in the same order as they appear in the array You are allowed to pass through points that appear later in the order but these do not count as visits Example Input points Output Explanation One optimal path is Time from to seconds Time from to seconds Total time seconds Example Input points Output Constraints points length n n points i length points i points i
corporate flight bookings There are n flights that are labeled from to n You are given an array of flight bookings bookings where bookings i firsti lasti seatsi represents a booking for flights firsti through lasti inclusive with seatsi seats reserved for each flight in the range Return an array answer of length n where answer i is the total number of seats reserved for flight i Example Input bookings n Output Explanation Flight labels Booking reserved Booking reserved Booking reserved Total seats Hence answer Example Input bookings n Output Explanation Flight labels Booking reserved Booking reserved Total seats Hence answer Constraints n bookings length bookings i length firsti lasti n seatsi
time to cross a bridge There are k workers who want to move n boxes from an old warehouse to a new one You are given the two integers n and k and a integer array time of size k x where time i leftToRighti pickOldi rightToLefti putNewi The warehouses are separated by a river and connected by a bridge The old warehouse is on the right bank of the river and the new warehouse is on the left bank of the river Initially all k workers are waiting on the left side of the bridge To move the boxes the ith worker indexed can Cross the bridge from the left bank new warehouse to the right bank old warehouse in leftToRighti minutes Pick a box from the old warehouse and return to the bridge in pickOldi minutes Different workers can pick up their boxes simultaneously Cross the bridge from the right bank old warehouse to the left bank new warehouse in rightToLefti minutes Put the box in the new warehouse and return to the bridge in putNewi minutes Different workers can put their boxes simultaneously A worker i is less efficient than a worker j if either condition is met leftToRighti rightToLefti leftToRightj rightToLeftj leftToRighti rightToLefti leftToRightj rightToLeftj and i j The following rules regulate the movement of the workers through the bridge If a worker x reaches the bridge while another worker y is crossing the bridge x waits at their side of the bridge If the bridge is free the worker waiting on the right side of the bridge gets to cross the bridge If more than one worker is waiting on the right side the one with the lowest efficiency crosses first If the bridge is free and no worker is waiting on the right side and at least one box remains at the old warehouse the worker on the left side of the river gets to cross the bridge If more than one worker is waiting on the left side the one with the lowest efficiency crosses first Return the instance of time at which the last worker reaches the left bank of the river after all n boxes have been put in the new warehouse Example Input n k time Output Explanation From to worker crosses the bridge from the left bank to the right bank From to worker picks up a box from the old warehouse From to worker crosses the bridge from the right bank to the left bank From to worker puts a box at the new warehouse The whole process ends after minutes We return because the problem asks for the instance of time at which the last worker reaches the left bank Example Input n k time Output Explanation From to worker crosses the bridge from the left bank to the right bank From to worker picks up a box from the old warehouse From to worker crosses the bridge from the left bank to the right bank From to worker picks up a box from the old warehouse From to worker crosses the bridge from the right bank to the left bank From to worker puts a box at the new warehouse From to worker crosses the bridge from the right bank to the left bank From to worker puts a box at the new warehouse From to worker crosses the bridge from the left bank to the right bank From to worker picks up a box from the old warehouse From to worker crosses the bridge from the right bank to the left bank From to worker puts a box at the new warehouse The whole process ends after minutes We return because the problem asks for the instance of time at which the last worker reaches the left bank Constraints n k time length k time i length leftToRighti pickOldi rightToLefti putNewi
next greater element iii Given a positive integer n find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n If no such positive integer exists return Note that the returned integer should fit in bit integer if there is a valid answer but it does not fit in bit integer return Example Input n Output Example Input n Output Constraints n
out of boundary paths There is an m x n grid with a ball The ball is initially at the position startRow startColumn You are allowed to move the ball to one of the four adjacent cells in the grid possibly out of the grid crossing the grid boundary You can apply at most maxMove moves to the ball Given the five integers m n maxMove startRow startColumn return the number of paths to move the ball out of the grid boundary Since the answer can be very large return it modulo Example Input m n maxMove startRow startColumn Output Example Input m n maxMove startRow startColumn Output Constraints m n maxMove startRow m startColumn n
destination city You are given the array paths where paths i cityAi cityBi means there exists a direct path going from cityAi to cityBi Return the destination city that is the city without any path outgoing to another city It is guaranteed that the graph of paths forms a line without any loop therefore there will be exactly one destination city Example Input paths London New York New York Lima Lima Sao Paulo Output Sao Paulo Explanation Starting at London city you will reach Sao Paulo city which is the destination city Your trip consist of London New York Lima Sao Paulo Example Input paths B C D B C A Output A Explanation All possible trips are D B C A B C A C A A Clearly the destination city is A Example Input paths A Z Output Z Constraints paths length paths i length cityAi length cityBi length cityAi cityBi All strings consist of lowercase and uppercase English letters and the space character
stone game v There are several stones arranged in a row and each stone has an associated value which is an integer given in the array stoneValue In each round of the game Alice divides the row into two non empty rows i e left row and right row then Bob calculates the value of each row which is the sum of the values of all the stones in this row Bob throws away the row which has the maximum value and Alice s score increases by the value of the remaining row If the value of the two rows are equal Bob lets Alice decide which row will be thrown away The next round starts with the remaining row The game ends when there is only one stone remaining Alice s is initially zero Return the maximum score that Alice can obtain Example Input stoneValue Output Explanation In the first round Alice divides the row to The left row has the value and the right row has value Bob throws away the right row and Alice s score is now In the second round Alice divides the row to This time Bob throws away the left row and Alice s score becomes The last round Alice has only one choice to divide the row which is Bob throws away the right row and Alice s score is now The game ends because only one stone is remaining in the row Example Input stoneValue Output Example Input stoneValue Output Constraints stoneValue length stoneValue i
count special quadruplets Given a indexed integer array nums return the number of distinct quadruplets a b c d such that nums a nums b nums c nums d and a b c d Example Input nums Output Explanation The only quadruplet that satisfies the requirement is because Example Input nums Output Explanation There are no such quadruplets in Example Input nums Output Explanation The quadruplets that satisfy the requirement are Constraints nums length nums i
maximize the topmost element after k moves You are given a indexed integer array nums representing the contents of a pile where nums is the topmost element of the pile In one move you can perform either of the following If the pile is not empty remove the topmost element of the pile If there are one or more removed elements add any one of them back onto the pile This element becomes the new topmost element You are also given an integer k which denotes the total number of moves to be made Return the maximum value of the topmost element of the pile possible after exactly k moves In case it is not possible to obtain a non empty pile after k moves return Example Input nums k Output Explanation One of the ways we can end with at the top of the pile after moves is as follows Step Remove the topmost element The pile becomes Step Remove the topmost element The pile becomes Step Remove the topmost element The pile becomes Step Add back onto the pile The pile becomes Note that this is not the only way to end with at the top of the pile It can be shown that is the largest answer possible after moves Example Input nums k Output Explanation In the first move our only option is to pop the topmost element of the pile Since it is not possible to obtain a non empty pile after one move we return Constraints nums length nums i k
longest repeating character replacement You are given a string s and an integer k You can choose any character of the string and change it to any other uppercase English character You can perform this operation at most k times Return the length of the longest substring containing the same letter you can get after performing the above operations Example Input s ABAB k Output Explanation Replace the two A s with two B s or vice versa Example Input s AABABBA k Output Explanation Replace the one A in the middle with B and form AABBBBA The substring BBBB has the longest repeating letters which is There may exists other ways to achive this answer too Constraints s length s consists of only uppercase English letters k s length
max area of island You are given an m x n binary matrix grid An island is a group of s representing land connected directionally horizontal or vertical You may assume all four edges of the grid are surrounded by water The area of an island is the number of cells with a value in the island Return the maximum area of an island in grid If there is no island return Example Input grid Output Explanation The answer is not because the island must be connected directionally Example Input grid Output Constraints m grid length n grid i length m n grid i j is either or
maximum count of positive integer and negative integer Given an array nums sorted in non decreasing order return the maximum between the number of positive integers and the number of negative integers In other words if the number of positive integers in nums is pos and the number of negative integers is neg then return the maximum of pos and neg Note that is neither positive nor negative Example Input nums Output Explanation There are positive integers and negative integers The maximum count among them is Example Input nums Output Explanation There are positive integers and negative integers The maximum count among them is Example Input nums Output Explanation There are positive integers and negative integers The maximum count among them is Constraints nums length nums i nums is sorted in a non decreasing order Follow up Can you solve the problem in O log n time complexity
remove duplicates from sorted list Given the head of a sorted linked list delete all duplicates such that each element appears only once Return the linked list sorted as well Example Input head Output Example Input head Output Constraints The number of nodes in the list is in the range Node val The list is guaranteed to be sorted in ascending order
minimum average difference You are given a indexed integer array nums of length n The average difference of the index i is the absolute difference between the average of the first i elements of nums and the average of the last n i elements Both averages should be rounded down to the nearest integer Return the index with the minimum average difference If there are multiple such indices return the smallest one Note The absolute difference of two numbers is the absolute value of their difference The average of n elements is the sum of the n elements divided integer division by n The average of elements is considered to be Example Input nums Output Explanation The average difference of index is The average difference of index is The average difference of index is The average difference of index is The average difference of index is The average difference of index is The average difference of index is the minimum average difference so return Example Input nums Output Explanation The only index is so return The average difference of index is Constraints nums length nums i
tenth line Given a text file file txt print just the line of the file Example Assume that file txt has the following content Line Line Line Line Line Line Line Line Line Line Your script should output the tenth line which is Line Note If the file contains less than lines what should you output There s at least three different solutions Try to explore all possibilities
broken calculator There is a broken calculator that has the integer startValue on its display initially In one operation you can multiply the number on display by or subtract from the number on display Given two integers startValue and target return the minimum number of operations needed to display target on the calculator Example Input startValue target Output Explanation Use double operation and then decrement operation Example Input startValue target Output Explanation Use decrement and then double Example Input startValue target Output Explanation Use double decrement and double Constraints startValue target
maximize score after n operations You are given nums an array of positive integers of size n You must perform n operations on this array In the ith operation indexed you will Choose two elements x and y Receive a score of i gcd x y Remove x and y from nums Return the maximum score you can receive after performing n operations The function gcd x y is the greatest common divisor of x and y Example Input nums Output Explanation The optimal choice of operations is gcd Example Input nums Output Explanation The optimal choice of operations is gcd gcd Example Input nums Output Explanation The optimal choice of operations is gcd gcd gcd Constraints n nums length n nums i
house robber ii You are a professional robber planning to rob houses along a street Each house has a certain amount of money stashed All houses at this place are arranged in a circle That means the first house is the neighbor of the last one Meanwhile adjacent houses have a security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night Given an integer array nums representing the amount of money of each house return the maximum amount of money you can rob tonight without alerting the police Example Input nums Output Explanation You cannot rob house money and then rob house money because they are adjacent houses Example Input nums Output Explanation Rob house money and then rob house money Total amount you can rob Example Input nums Output Constraints nums length nums i
kth distinct string in an array A distinct string is a string that is present only once in an array Given an array of strings arr and an integer k return the kth distinct string present in arr If there are fewer than k distinct strings return an empty string Note that the strings are considered in the order in which they appear in the array Example Input arr d b c b c a k Output a Explanation The only distinct strings in arr are d and a d appears so it is the distinct string a appears so it is the distinct string Since k a is returned Example Input arr aaa aa a k Output aaa Explanation All strings in arr are distinct so the string aaa is returned Example Input arr a b a k Output Explanation The only distinct string is b Since there are fewer than distinct strings we return an empty string Constraints k arr length arr i length arr i consists of lowercase English letters
longest uncommon subsequence ii Given an array of strings strs return the length of the longest uncommon subsequence between them If the longest uncommon subsequence does not exist return An uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others A subsequence of a string s is a string that can be obtained after deleting any number of characters from s For example abc is a subsequence of aebdc because you can delete the underlined characters in aebdc to get abc Other subsequences of aebdc include aebdc aeb and empty string Example Input strs aba cdc eae Output Example Input strs aaa aaa aa Output Constraints strs length strs i length strs i consists of lowercase English letters
minimum number of work sessions to finish the tasks There are n tasks assigned to you The task times are represented as an integer array tasks of length n where the ith task takes tasks i hours to finish A work session is when you work for at most sessionTime consecutive hours and then take a break You should finish the given tasks in a way that satisfies the following conditions If you start a task in a work session you must complete it in the same work session You can start a new task immediately after finishing the previous one You may complete the tasks in any order Given tasks and sessionTime return the minimum number of work sessions needed to finish all the tasks following the conditions above The tests are generated such that sessionTime is greater than or equal to the maximum element in tasks i Example Input tasks sessionTime Output Explanation You can finish the tasks in two work sessions First work session finish the first and the second tasks in hours Second work session finish the third task in hours Example Input tasks sessionTime Output Explanation You can finish the tasks in two work sessions First work session finish all the tasks except the last one in hours Second work session finish the last task in hour Example Input tasks sessionTime Output Explanation You can finish all the tasks in one work session Constraints n tasks length n tasks i max tasks i sessionTime
recover binary search tree You are given the root of a binary search tree BST where the values of exactly two nodes of the tree were swapped by mistake Recover the tree without changing its structure Example Input root null null Output null null Explanation cannot be a left child of because Swapping and makes the BST valid Example Input root null null Output null null Explanation cannot be in the right subtree of because Swapping and makes the BST valid Constraints The number of nodes in the tree is in the range Node val Follow up A solution using O n space is pretty straight forward Could you devise a constant O space solution
actors and directors who cooperated at least three times SQL Schema Table ActorDirector Column Name Type int int timestamp int timestamp is the primary key column for this table Write a SQL query for a report that provides the pairs where the actor has cooperated with the director at least three times Return the result table in any order The query result format is in the following example Example Input ActorDirector table timestamp Output Explanation The only pair is where they cooperated exactly times
separate the digits in an array Given an array of positive integers nums return an array answer that consists of the digits of each integer in nums after separating them in the same order they appear in nums To separate the digits of an integer is to get all the digits it has in the same order For example for the integer the separation of its digits is Example Input nums Output Explanation The separation of is The separation of is The separation of is The separation of is answer Note that answer contains the separations in the same order Example Input nums Output Explanation The separation of each integer in nums is itself answer Constraints nums length nums i
maximum score words formed by letters Given a list of words list of single letters might be repeating and score of every character Return the maximum score of any valid set of words formed by using the given letters words i cannot be used two or more times It is not necessary to use all characters in letters and each letter can only be used once Score of letters a b c z is given by score score score respectively Example Input words dog cat dad good letters a a c d d d g o o score Output Explanation Score a c d g o Given letters we can form the words dad and good with a score of Words dad and dog only get a score of Example Input words xxxz ax bx cx letters z a b c x x x score Output Explanation Score a b c x z Given letters we can form the words ax bx and cx with a score of Word xxxz only get a score of Example Input words leetcode letters l e t c o d score Output Explanation Letter e can only be used once Constraints words length words i length letters length letters i length score length score i words i letters i contains only lower case English letters
two furthest houses with different colors There are n houses evenly lined up on the street and each house is beautifully painted You are given a indexed integer array colors of length n where colors i represents the color of the ith house Return the maximum distance between two houses with different colors The distance between the ith and jth houses is abs i j where abs x is the absolute value of x Example Input colors Output Explanation In the above image color is blue and color is red The furthest two houses with different colors are house and house House has color and house has color The distance between them is abs Note that houses and can also produce the optimal answer Example Input colors Output Explanation In the above image color is blue color is yellow and color is green The furthest two houses with different colors are house and house House has color and house has color The distance between them is abs Example Input colors Output Explanation The furthest two houses with different colors are house and house House has color and house has color The distance between them is abs Constraints n colors length n colors i Test data are generated such that at least two houses have different colors
best position for a service centre A delivery company wants to build a new service center in a new city The company knows the positions of all the customers in this city on a Map and wants to build the new center in a position such that the sum of the euclidean distances to all customers is minimum Given an array positions where positions i xi yi is the position of the ith customer on the map return the minimum sum of the euclidean distances to all customers In other words you need to choose the position of the service center xcentre ycentre such that the following formula is minimized Answers within of the actual value will be accepted Example Input positions Output Explanation As shown you can see that choosing xcentre ycentre will make the distance to each customer the sum of all distances is which is the minimum possible we can achieve Example Input positions Output Explanation The minimum possible sum of distances sqrt sqrt Constraints positions length positions i length xi yi
counting bits Given an integer n return an array ans of length n such that for each i i n ans i is the number of s in the binary representation of i Example Input n Output Explanation Example Input n Output Explanation Constraints n Follow up It is very easy to come up with a solution with a runtime of O n log n Can you do it in linear time O n and possibly in a single pass Can you do it without using any built in function i e like in C
multiply strings Given two non negative integers and represented as strings return the product of and also represented as a string Note You must not use any built in BigInteger library or convert the inputs to integer directly Example Input Output Example Input Output Constraints length length and consist of digits only Both and do not contain any leading zero except the number itself
valid tic-tac-toe state Given a Tic Tac Toe board as a string array board return true if and only if it is possible to reach this board position during the course of a valid tic tac toe game The board is a x array that consists of characters X and O The character represents an empty square Here are the rules of Tic Tac Toe Players take turns placing characters into empty squares The first player always places X characters while the second player always places O characters X and O characters are always placed into empty squares never filled ones The game ends when there are three of the same non empty character filling any row column or diagonal The game also ends if all squares are non empty No more moves can be played if the game is over Example Input board O Output false Explanation The first player always plays X Example Input board XOX X Output false Explanation Players take turns making moves Example Input board XOX O O XOX Output true Constraints board length board i length board i j is either X O or
sum of nodes with even-valued grandparent Given the root of a binary tree return the sum of values of nodes with an even valued grandparent If there are no nodes with an even valued grandparent return A grandparent of a node is the parent of its parent if it exists Example Input root null null null null Output Explanation The red nodes are the nodes with even value grandparent while the blue nodes are the even value grandparents Example Input root Output Constraints The number of nodes in the tree is in the range Node val
number of subsequences that satisfy the given sum condition You are given an array of integers nums and an integer target Return the number of non empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal to target Since the answer may be too large return it modulo Example Input nums target Output Explanation There are subsequences that satisfy the condition Min value max value target Example Input nums target Output Explanation There are subsequences that satisfy the condition nums can have repeated numbers Example Input nums target Output Explanation There are non empty subsequences two of them do not satisfy the condition Number of valid subsequences Constraints nums length nums i target
swapping nodes in a linked list You are given the head of a linked list and an integer k Return the head of the linked list after swapping the values of the kth node from the beginning and the kth node from the end the list is indexed Example Input head k Output Example Input head k Output Constraints The number of nodes in the list is n k n Node val
advantage shuffle You are given two integer arrays and both of the same length The advantage of with respect to is the number of indices i for which i i Return any permutation of that maximizes its advantage with respect to Example Input Output Example Input Output Constraints length length length i i
friend requests ii: who has the most friends SQL Schema Table RequestAccepted Column Name Type int int date is the primary key for this table This table contains the ID of the user who sent the request the ID of the user who received the request and the date when the request was accepted Write an SQL query to find the people who have the most friends and the most friends number The test cases are generated so that only one person has the most friends The query result format is in the following example Example Input RequestAccepted table Output id num Explanation The person with id is a friend of people and so he has three friends in total which is the most number than any others Follow up In the real world multiple people could have the same most number of friends Could you find all these people in this case
maximum product of the length of two palindromic substrings You are given a indexed string s and are tasked with finding two non intersecting palindromic substrings of odd length such that the product of their lengths is maximized More formally you want to choose four integers i j k l such that i j k l s length and both the substrings s i j and s k l are palindromes and have odd lengths s i j denotes a substring from index i to index j inclusive Return the maximum possible product of the lengths of the two non intersecting palindromic substrings A palindrome is a string that is the same forward and backward A substring is a contiguous sequence of characters in a string Example Input s ababbb Output Explanation Substrings aba and bbb are palindromes with odd length product Example Input s zaaaxbbby Output Explanation Substrings aaa and bbb are palindromes with odd length product Constraints s length s consists of lowercase English letters
diagonal traverse Given an m x n matrix mat return an array of all the elements of the array in a diagonal order Example Input mat Output Example Input mat Output Constraints m mat length n mat i length m n m n mat i j
number of good leaf nodes pairs You are given the root of a binary tree and an integer distance A pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to distance Return the number of good leaf node pairs in the tree Example Input root null distance Output Explanation The leaf nodes of the tree are and and the length of the shortest path between them is This is the only good pair Example Input root distance Output Explanation The good pairs are and with shortest path The pair is not good because the length of ther shortest path between them is Example Input root null null null null null null distance Output Explanation The only good pair is Constraints The number of nodes in the tree is in the range Node val distance
count number of distinct integers after reverse operations You are given an array nums consisting of positive integers You have to take each integer in the array reverse its digits and add it to the end of the array You should apply this operation to the original integers in nums Return the number of distinct integers in the final array Example Input nums Output Explanation After including the reverse of each number the resulting array is The reversed integers that were added to the end of the array are underlined Note that for the integer after reversing it it becomes which is just The number of distinct integers in this array is The numbers and Example Input nums Output Explanation After including the reverse of each number the resulting array is The number of distinct integers in this array is The number Constraints nums length nums i
design authentication manager There is an authentication system that works with authentication tokens For each session the user will receive a new authentication token that will expire timeToLive seconds after the currentTime If the token is renewed the expiry time will be extended to expire timeToLive seconds after the potentially different currentTime Implement the AuthenticationManager class AuthenticationManager int timeToLive constructs the AuthenticationManager and sets the timeToLive generate string tokenId int currentTime generates a new token with the given tokenId at the given currentTime in seconds renew string tokenId int currentTime renews the unexpired token with the given tokenId at the given currentTime in seconds If there are no unexpired tokens with the given tokenId the request is ignored and nothing happens countUnexpiredTokens int currentTime returns the number of unexpired tokens at the given currentTime Note that if a token expires at time t and another action happens on time t renew or countUnexpiredTokens the expiration takes place before the other actions Example Input AuthenticationManager renew generate countUnexpiredTokens generate renew renew countUnexpiredTokens aaa aaa bbb aaa bbb Output null null null null null null Explanation AuthenticationManager authenticationManager new AuthenticationManager Constructs the AuthenticationManager with timeToLive seconds authenticationManager renew aaa No token exists with tokenId aaa at time so nothing happens authenticationManager generate aaa Generates a new token with tokenId aaa at time authenticationManager countUnexpiredTokens The token with tokenId aaa is the only unexpired one at time so return authenticationManager generate bbb Generates a new token with tokenId bbb at time authenticationManager renew aaa The token with tokenId aaa expired at time and so at time the renew request is ignored and nothing happens authenticationManager renew bbb The token with tokenId bbb is unexpired at time so the renew request is fulfilled and now the token will expire at time authenticationManager countUnexpiredTokens The token with tokenId bbb expires at time and the token with tokenId aaa expired at time so currently no token is unexpired so return Constraints timeToLive currentTime tokenId length tokenId consists only of lowercase letters All calls to generate will contain unique values of tokenId The values of currentTime across all the function calls will be strictly increasing At most calls will be made to all functions combined
binary tree postorder traversal Given the root of a binary tree return the postorder traversal of its nodes values Example Input root null Output Example Input root Output Example Input root Output Constraints The number of the nodes in the tree is in the range Node val Follow up Recursive solution is trivial could you do it iteratively
count odd numbers in an interval range Given two non negative integers low and high Return the count of odd numbers between low and high inclusive Example Input low high Output Explanation The odd numbers between and are Example Input low high Output Explanation The odd numbers between and are Constraints low high
leaf-similar trees Consider all the leaves of a binary tree from left to right order the values of those leaves form a leaf value sequence For example in the given tree above the leaf value sequence is Two binary trees are considered leaf similar if their leaf value sequence is the same Return true if and only if the two given trees with head nodes and are leaf similar Example Input null null null null null null null null Output true Example Input Output false Constraints The number of nodes in each tree will be in the range Both of the given trees will have values in the range
even odd tree A binary tree is named Even Odd if it meets the following conditions The root of the binary tree is at level index its children are at level index their children are at level index etc For every even indexed level all nodes at the level have odd integer values in strictly increasing order from left to right For every odd indexed level all nodes at the level have even integer values in strictly decreasing order from left to right Given the root of a binary tree return true if the binary tree is Even Odd otherwise return false Example Input root null null null Output true Explanation The node values on each level are Level Level Level Level Since levels and are all odd and increasing and levels and are all even and decreasing the tree is Even Odd Example Input root Output false Explanation The node values on each level are Level Level Level Node values in level must be in strictly increasing order so the tree is not Even Odd Example Input root Output false Explanation Node values in the level should be even integers Constraints The number of nodes in the tree is in the range Node val
add minimum number of rungs You are given a strictly increasing integer array rungs that represents the height of rungs on a ladder You are currently on the floor at height and you want to reach the last rung You are also given an integer dist You can only climb to the next highest rung if the distance between where you are currently at the floor or on a rung and the next rung is at most dist You are able to insert rungs at any positive integer height if a rung is not already there Return the minimum number of rungs that must be added to the ladder in order for you to climb to the last rung Example Input rungs dist Output Explanation You currently cannot reach the last rung Add rungs at heights and to climb this ladder The ladder will now have rungs at Example Input rungs dist Output Explanation This ladder can be climbed without adding additional rungs Example Input rungs dist Output Explanation You currently cannot reach the first rung from the ground Add a rung at height to climb this ladder The ladder will now have rungs at Constraints rungs length rungs i dist rungs is strictly increasing
count the repetitions We define str s n as the string str which consists of the string s concatenated n times For example str abc abcabcabc We define that string can be obtained from string if we can remove some characters from such that it becomes For example abc can be obtained from abdbec based on our definition by removing the bolded underlined characters You are given two strings and and two integers and You have the two strings and Return the maximum integer m such that str m can be obtained from Example Input acb ab Output Example Input acb acb Output Constraints length length and consist of lowercase English letters
minimum insertions to balance a parentheses string Given a parentheses string s containing only the characters and A parentheses string is balanced if Any left parenthesis must have a corresponding two consecutive right parenthesis Left parenthesis must go before the corresponding two consecutive right parenthesis In other words we treat as an opening parenthesis and as a closing parenthesis For example and are balanced and are not balanced You can insert the characters and at any position of the string to balance it if needed Return the minimum number of insertions needed to make s balanced Example Input s Output Explanation The second has two matching but the first has only matching We need to add one more at the end of the string to be which is balanced Example Input s Output Explanation The string is already balanced Example Input s Output Explanation Add to match the first Add to match the last Constraints s length s consists of and only
excel sheet column number Given a string columnTitle that represents the column title as appears in an Excel sheet return its corresponding column number For example A B C Z AA AB Example Input columnTitle A Output Example Input columnTitle AB Output Example Input columnTitle ZY Output Constraints columnTitle length columnTitle consists only of uppercase English letters columnTitle is in the range A FXSHRXW
count number of nice subarrays Given an array of integers nums and an integer k A continuous subarray is called nice if there are k odd numbers on it Return the number of nice sub arrays Example Input nums k Output Explanation The only sub arrays with odd numbers are and Example Input nums k Output Explanation There is no odd numbers in the array Example Input nums k Output Constraints nums length nums i k nums length
count substrings that differ by one character Given two strings s and t find the number of ways you can choose a non empty substring of s and replace a single character by a different character such that the resulting substring is a substring of t In other words find the number of substrings in s that differ from some substring in t by exactly one character For example the underlined substrings in computer and computation only differ by the e a so this is a valid way Return the number of substrings that satisfy the condition above A substring is a contiguous sequence of characters within a string Example Input s aba t baba Output Explanation The following are the pairs of substrings from s and t that differ by exactly character aba baba aba baba aba baba aba baba aba baba aba baba The underlined portions are the substrings that are chosen from s and t Example Input s ab t bb Output Explanation The following are the pairs of substrings from s and t that differ by character ab bb ab bb ab bb The underlined portions are the substrings that are chosen from s and t Constraints s length t length s and t consist of lowercase English letters only
total cost to hire k workers You are given a indexed integer array costs where costs i is the cost of hiring the ith worker You are also given two integers k and candidates We want to hire exactly k workers according to the following rules You will run k sessions and hire exactly one worker in each session In each hiring session choose the worker with the lowest cost from either the first candidates workers or the last candidates workers Break the tie by the smallest index For example if costs and candidates then in the first hiring session we will choose the worker because they have the lowest cost In the second hiring session we will choose worker because they have the same lowest cost as worker but they have the smallest index Please note that the indexing may be changed in the process If there are fewer than candidates workers remaining choose the worker with the lowest cost among them Break the tie by the smallest index A worker can only be chosen once Return the total cost to hire exactly k workers Example Input costs k candidates Output Explanation We hire workers in total The total cost is initially In the first hiring round we choose the worker from The lowest cost is and we break the tie by the smallest index which is The total cost In the second hiring round we choose the worker from The lowest cost is index The total cost In the third hiring round we choose the worker from The lowest cost is index The total cost Notice that the worker with index was common in the first and last four workers The total hiring cost is Example Input costs k candidates Output Explanation We hire workers in total The total cost is initially In the first hiring round we choose the worker from The lowest cost is and we break the tie by the smallest index which is The total cost Notice that workers with index and are common in the first and last workers In the second hiring round we choose the worker from The lowest cost is index The total cost In the third hiring round there are less than three candidates We choose the worker from the remaining workers The lowest cost is index The total cost The total hiring cost is Constraints costs length costs i k candidates costs length
managers with at least 5 direct reports SQL Schema Table Employee Column Name Type id int name varchar department varchar managerId int id is the primary key column for this table Each row of this table indicates the name of an employee their department and the id of their manager If managerId is null then the employee does not have a manager No employee will be the manager of themself Write an SQL query to report the managers with at least five direct reports Return the result table in any order The query result format is in the following example Example Input Employee table id name department managerId John A None Dan A James A Amy A Anne A Ron B Output name John
substring xor queries You are given a binary string s and a integer array queries where queries i firsti secondi For the ith query find the shortest substring of s whose decimal value val yields secondi when bitwise XORed with firsti In other words val firsti secondi The answer to the ith query is the endpoints indexed of the substring lefti righti or if no such substring exists If there are multiple answers choose the one with the minimum lefti Return an array ans where ans i lefti righti is the answer to the ith query A substring is a contiguous non empty sequence of characters within a string Example Input s queries Output Explanation For the first query the substring in range is which has a decimal value of and hence the answer to the first query is In the second query the substring in range is and has a decimal value of and So is returned for the second query Example Input s queries Output Explanation In this example there is no substring that answers the query hence is returned Example Input s queries Output Explanation For this example the substring in range has a decimal value of and So the answer is Constraints s length s i is either or queries length firsti secondi
minimum falling path sum ii Given an n x n integer matrix grid return the minimum sum of a falling path with non zero shifts A falling path with non zero shifts is a choice of exactly one element from each row of grid such that no two elements chosen in adjacent rows are in the same column Example Input arr Output Explanation The possible falling paths are The falling path with the smallest sum is so the answer is Example Input grid Output Constraints n grid length grid i length n grid i j
rearrange array to maximize prefix score You are given a indexed integer array nums You can rearrange the elements of nums to any order including the given order Let prefix be the array containing the prefix sums of nums after rearranging it In other words prefix i is the sum of the elements from to i in nums after rearranging it The score of nums is the number of positive integers in the array prefix Return the maximum score you can achieve Example Input nums Output Explanation We can rearrange the array into nums prefix so the score is It can be shown that is the maximum score we can obtain Example Input nums Output Explanation Any rearrangement of the array will result in a score of Constraints nums length nums i
convert 1d array into 2d array You are given a indexed dimensional integer array original and two integers m and n You are tasked with creating a dimensional array with m rows and n columns using all the elements from original The elements from indices to n inclusive of original should form the first row of the constructed array the elements from indices n to n inclusive should form the second row of the constructed array and so on Return an m x n array constructed according to the above procedure or an empty array if it is impossible Example Input original m n Output Explanation The constructed array should contain rows and columns The first group of n elements in original becomes the first row in the constructed array The second group of n elements in original becomes the second row in the constructed array Example Input original m n Output Explanation The constructed array should contain row and columns Put all three elements in original into the first row of the constructed array Example Input original m n Output Explanation There are elements in original It is impossible to fit elements in a array so return an empty array Constraints original length original i m n
first bad version You are a product manager and currently leading a team to develop a new product Unfortunately the latest version of your product fails the quality check Since each version is developed based on the previous version all the versions after a bad version are also bad Suppose you have n versions n and you want to find out the first bad one which causes all the following ones to be bad You are given an API bool isBadVersion version which returns whether version is bad Implement a function to find the first bad version You should minimize the number of calls to the API Example Input n bad Output Explanation call isBadVersion false call isBadVersion true call isBadVersion true Then is the first bad version Example Input n bad Output Constraints bad n
single number ii Given an integer array nums where every element appears three times except for one which appears exactly once Find the single element and return it You must implement a solution with a linear runtime complexity and use only constant extra space Example Input nums Output Example Input nums Output Constraints nums length nums i Each element in nums appears exactly three times except for one element which appears once
binary tree preorder traversal Given the root of a binary tree return the preorder traversal of its nodes values Example Input root null Output Example Input root Output Example Input root Output Constraints The number of nodes in the tree is in the range Node val Follow up Recursive solution is trivial could you do it iteratively
check completeness of a binary tree Given the root of a binary tree determine if it is a complete binary tree In a complete binary tree every level except possibly the last is completely filled and all nodes in the last level are as far left as possible It can have between and nodes inclusive at the last level h Example Input root Output true Explanation Every level before the last is full ie levels with node values and and all nodes in the last level are as far left as possible Example Input root null Output false Explanation The node with value isn t as far left as possible Constraints The number of nodes in the tree is in the range Node val
triples with bitwise and equal to zero Given an integer array nums return the number of AND triples An AND triple is a triple of indices i j k such that i nums length j nums length k nums length nums i nums j nums k where represents the bitwise AND operator Example Input nums Output Explanation We could choose the following i j k triples i j k i j k i j k i j k i j k i j k i j k i j k i j k i j k i j k i j k Example Input nums Output Constraints nums length nums i
surface area of 3d shapes You are given an n x n grid where you have placed some x x cubes Each value v grid i j represents a tower of v cubes placed on top of cell i j After placing these cubes you have decided to glue any directly adjacent cubes to each other forming several irregular shapes Return the total surface area of the resulting shapes Note The bottom face of each shape counts toward its surface area Example Input grid Output Example Input grid Output Example Input grid Output Constraints n grid length grid i length n grid i j
continuous subarray sum Given an integer array nums and an integer k return true if nums has a good subarray or false otherwise A good subarray is a subarray where its length is at least two and the sum of the elements of the subarray is a multiple of k Note that A subarray is a contiguous part of the array An integer x is a multiple of k if there exists an integer n such that x n k is always a multiple of k Example Input nums k Output true Explanation is a continuous subarray of size whose elements sum up to Example Input nums k Output true Explanation is an continuous subarray of size whose elements sum up to is a multiple of because and is an integer Example Input nums k Output false Constraints nums length nums i sum nums i k
circular permutation in binary representation Given integers n and start Your task is return any permutation p of n such that p start p i and p i differ by only one bit in their binary representation p and p n must also differ by only one bit in their binary representation Example Input n start Output Explanation The binary representation of the permutation is All the adjacent element differ by one bit Another valid permutation is Example Input n start Output Explanation The binary representation of the permutation is Constraints n start n
find the maximum number of marked indices You are given a indexed integer array nums Initially all of the indices are unmarked You are allowed to make this operation any number of times Pick two different unmarked indices i and j such that nums i nums j then mark i and j Return the maximum possible number of marked indices in nums using the above operation any number of times Example Input nums Output Explanation In the first operation pick i and j the operation is allowed because nums nums Then mark index and It can be shown that there s no other valid operation so the answer is Example Input nums Output Explanation In the first operation pick i and j the operation is allowed because nums nums Then mark index and In the second operation pick i and j the operation is allowed because nums nums Then mark index and Since there is no other operation the answer is Example Input nums Output Explanation There is no valid operation to do so the answer is Constraints nums length nums i
time based key-value store Design a time based key value data structure that can store multiple values for the same key at different time stamps and retrieve the key s value at a certain timestamp Implement the TimeMap class TimeMap Initializes the object of the data structure void set String key String value int timestamp Stores the key key with the value value at the given time timestamp String get String key int timestamp Returns a value such that set was called previously with timestamp If there are multiple such values it returns the value associated with the largest If there are no values it returns Example Input TimeMap set get get set get get foo bar foo foo foo foo foo Output null null bar bar null Explanation TimeMap timeMap new TimeMap timeMap set foo bar store the key foo and value bar along with timestamp timeMap get foo return bar timeMap get foo return bar since there is no value corresponding to foo at timestamp and timestamp then the only value is at timestamp is bar timeMap set foo store the key foo and value along with timestamp timeMap get foo return timeMap get foo return Constraints key length value length key and value consist of lowercase English letters and digits timestamp All the timestamps timestamp of set are strictly increasing At most calls will be made to set and get
employee bonus SQL Schema Table Employee Column Name Type empId int name varchar supervisor int salary int empId is the primary key column for this table Each row of this table indicates the name and the ID of an employee in addition to their salary and the id of their manager Table Bonus Column Name Type empId int bonus int empId is the primary key column for this table empId is a foreign key to empId from the Employee table Each row of this table contains the id of an employee and their respective bonus Write an SQL query to report the name and bonus amount of each employee with a bonus less than Return the result table in any order The query result format is in the following example Example Input Employee table empId name supervisor salary Brad null John Dan Thomas Bonus table empId bonus Output name bonus Brad null John null Dan
design browser history You have a browser of one tab where you start on the homepage and you can visit another url get back in the history number of steps or move forward in the history number of steps Implement the BrowserHistory class BrowserHistory string homepage Initializes the object with the homepage of the browser void visit string url Visits url from the current page It clears up all the forward history string back int steps Move steps back in history If you can only return x steps in the history and steps x you will return only x steps Return the current url after moving back in history at most steps string forward int steps Move steps forward in history If you can only forward x steps in the history and steps x you will forward only x steps Return the current url after forwarding in history at most steps Example Input BrowserHistory visit visit visit back back forward visit forward back back leetcode com google com facebook com youtube com linkedin com Output null null null null facebook com google com facebook com null linkedin com google com leetcode com Explanation BrowserHistory browserHistory new BrowserHistory leetcode com browserHistory visit google com You are in leetcode com Visit google com browserHistory visit facebook com You are in google com Visit facebook com browserHistory visit youtube com You are in facebook com Visit youtube com browserHistory back You are in youtube com move back to facebook com return facebook com browserHistory back You are in facebook com move back to google com return google com browserHistory forward You are in google com move forward to facebook com return facebook com browserHistory visit linkedin com You are in facebook com Visit linkedin com browserHistory forward You are in linkedin com you cannot move forward any steps browserHistory back You are in linkedin com move back two steps to facebook com then to google com return google com browserHistory back You are in google com you can move back only one step to leetcode com return leetcode com Constraints homepage length url length steps homepage and url consist of or lower case English letters At most calls will be made to visit back and forward
call function with custom context Enhance all functions to have the callPolyfill method The method accepts an object obj as it s first parameter and any number of additional arguments The obj becomes the this context for the function The additional arguments are passed to the function that the callPolyfill method belongs on For example if you had the function function tax price taxRate const totalCost price taxRate console log The cost of this item is totalCost Calling this function like tax will log The cost of undefined is This is because the this context was not defined However calling the function like tax callPolyfill item salad will log The cost of salad is The this context was appropriately set and the function logged an appropriate output Please solve this without using the built in Function call method Example Input fn function add b return this a b args a Output Explanation fn callPolyfill a callPolyfill sets the this context to a is passed as an argument Example Input fn function tax price taxRate return The cost of the this item is price taxRate args item burger Output The cost of the burger is Explanation callPolyfill sets the this context to item burger and are passed as additional arguments Constraints typeof args object and args null args length JSON stringify args length
sum of total strength of wizards As the ruler of a kingdom you have an army of wizards at your command You are given a indexed integer array strength where strength i denotes the strength of the ith wizard For a contiguous group of wizards i e the wizards strengths form a subarray of strength the total strength is defined as the product of the following two values The strength of the weakest wizard in the group The total of all the individual strengths of the wizards in the group Return the sum of the total strengths of all contiguous groups of wizards Since the answer may be very large return it modulo A subarray is a contiguous non empty sequence of elements within an array Example Input strength Output Explanation The following are all the contiguous groups of wizards from has a total strength of min sum from has a total strength of min sum from has a total strength of min sum from has a total strength of min sum from has a total strength of min sum from has a total strength of min sum from has a total strength of min sum from has a total strength of min sum from has a total strength of min sum from has a total strength of min sum The sum of all the total strengths is Example Input strength Output Explanation The following are all the contiguous groups of wizards from has a total strength of min sum from has a total strength of min sum from has a total strength of min sum from has a total strength of min sum from has a total strength of min sum from has a total strength of min sum The sum of all the total strengths is Constraints strength length strength i
groups of special-equivalent strings You are given an array of strings of the same length words In one move you can swap any two even indexed characters or any two odd indexed characters of a string words i Two strings words i and words j are special equivalent if after any number of moves words i words j For example words i zzxy and words j xyzz are special equivalent because we may make the moves zzxy xzzy xyzz A group of special equivalent strings from words is a non empty subset of words such that Every pair of strings in the group are special equivalent and The group is the largest size possible i e there is not a string words i not in the group such that words i is special equivalent to every string in the group Return the number of groups of special equivalent strings from words Example Input words abcd cdab cbad xyzz zzxy zzyx Output Explanation One group is abcd cdab cbad since they are all pairwise special equivalent and none of the other strings is all pairwise special equivalent to these The other two groups are xyzz zzxy and zzyx Note that in particular zzxy is not special equivalent to zzyx Example Input words abc acb bac bca cab cba Output Constraints words length words i length words i consist of lowercase English letters All the strings are of the same length
make the xor of all segments equal to zero You are given an array nums and an integer k The XOR of a segment left right where left right is the XOR of all the elements with indices between left and right inclusive nums left XOR nums left XOR XOR nums right Return the minimum number of elements to change in the array such that the XOR of all segments of size k is equal to zero Example Input nums k Output Explanation Modify the array from to from Example Input nums k Output Explanation Modify the array from to Example Input nums k Output Explanation Modify the array from to Constraints k nums length nums i
number of matching subsequences Given a string s and an array of strings words return the number of words i that is a subsequence of s A subsequence of a string is a new string generated from the original string with some characters can be none deleted without changing the relative order of the remaining characters For example ace is a subsequence of abcde Example Input s abcde words a bb acd ace Output Explanation There are three strings in words that are a subsequence of s a acd ace Example Input s dsahjpjauf words ahjpjau ja ahbwzgqnuk tnmlanowax Output Constraints s length words length words i length s and words i consist of only lowercase English letters
check if it is a straight line You are given an array coordinates coordinates i x y where x y represents the coordinate of a point Check if these points make a straight line in the XY plane Example Input coordinates Output true Example Input coordinates Output false Constraints coordinates length coordinates i length coordinates i coordinates i coordinates contains no duplicate point
license key formatting You are given a license key represented as a string s that consists of only alphanumeric characters and dashes The string is separated into n groups by n dashes You are also given an integer k We want to reformat the string s such that each group contains exactly k characters except for the first group which could be shorter than k but still must contain at least one character Furthermore there must be a dash inserted between two groups and you should convert all lowercase letters to uppercase Return the reformatted license key Example Input s w k Output Explanation The string s has been split into two parts each part has characters Note that the two extra dashes are not needed and can be removed Example Input s J k Output Explanation The string s has been split into three parts each part has characters except the first part as it could be shorter as mentioned above Constraints s length s consists of English letters digits and dashes k
most beautiful item for each query You are given a integer array items where items i pricei beautyi denotes the price and beauty of an item respectively You are also given a indexed integer array queries For each queries j you want to determine the maximum beauty of an item whose price is less than or equal to queries j If no such item exists then the answer to this query is Return an array answer of the same length as queries where answer j is the answer to the jth query Example Input items queries Output Explanation For queries is the only item which has price Hence the answer for this query is For queries the items which can be considered are and The maximum beauty among them is For queries and queries the items which can be considered are and The maximum beauty among them is For queries and queries all items can be considered Hence the answer for them is the maximum beauty of all items i e Example Input items queries Output Explanation The price of every item is equal to so we choose the item with the maximum beauty Note that multiple items can have the same price and or beauty Example Input items queries Output Explanation No item has a price less than or equal to so no item can be chosen Hence the answer to the query is Constraints items length queries length items i length pricei beautyi queries j
maximum number of balloons Given a string text you want to use the characters of text to form as many instances of the word balloon as possible You can use each character in text at most once Return the maximum number of instances that can be formed Example Input text nlaebolko Output Example Input text loonbalxballpoon Output Example Input text leetcode Output Constraints text length text consists of lower case English letters only
sign of the product of an array There is a function signFunc x that returns if x is positive if x is negative if x is equal to You are given an integer array nums Let product be the product of all values in the array nums Return signFunc product Example Input nums Output Explanation The product of all values in the array is and signFunc Example Input nums Output Explanation The product of all values in the array is and signFunc Example Input nums Output Explanation The product of all values in the array is and signFunc Constraints nums length nums i
dungeon game The demons had captured the princess and imprisoned her in the bottom right corner of a dungeon The dungeon consists of m x n rooms laid out in a grid Our valiant knight was initially positioned in the top left room and must fight his way through dungeon to rescue the princess The knight has an initial health point represented by a positive integer If at any point his health point drops to or below he dies immediately Some of the rooms are guarded by demons represented by negative integers so the knight loses health upon entering these rooms other rooms are either empty represented as or contain magic orbs that increase the knight s health represented by positive integers To reach the princess as quickly as possible the knight decides to move only rightward or downward in each step Return the knight s minimum initial health so that he can rescue the princess Note that any room can contain threats or power ups even the first room the knight enters and the bottom right room where the princess is imprisoned Example Input dungeon Output Explanation The initial health of the knight must be at least if he follows the optimal path RIGHT RIGHT DOWN DOWN Example Input dungeon Output Constraints m dungeon length n dungeon i length m n dungeon i j
find users with valid e-mails SQL Schema Table Users Column Name Type int name varchar mail varchar is the primary key for this table This table contains information of the users signed up in a website Some e mails are invalid Write an SQL query to find the users who have valid emails A valid e mail has a prefix name and a domain where The prefix name is a string that may contain letters upper or lower case digits underscore period and or dash The prefix name must start with a letter The domain is leetcode com Return the result table in any order The query result format is in the following example Example Input Users table name mail Winston winston leetcode com Jonathan jonathanisgreat Annabelle bella leetcode com Sally sally come leetcode com Marwan quarz leetcode com David gmail com Shapiro shapo leetcode com Output name mail Winston winston leetcode com Annabelle bella leetcode com Sally sally come leetcode com Explanation The mail of user does not have a domain The mail of user has the sign which is not allowed The mail of user does not have the leetcode domain The mail of user starts with a period
count artifacts that can be extracted There is an n x n indexed grid with some artifacts buried in it You are given the integer n and a indexed integer array artifacts describing the positions of the rectangular artifacts where artifacts i denotes that the ith artifact is buried in the subgrid where is the coordinate of the top left cell of the ith artifact and is the coordinate of the bottom right cell of the ith artifact You will excavate some cells of the grid and remove all the mud from them If the cell has a part of an artifact buried underneath it will be uncovered If all the parts of an artifact are uncovered you can extract it Given a indexed integer array dig where dig i ri ci indicates that you will excavate the cell ri ci return the number of artifacts that you can extract The test cases are generated such that No two artifacts overlap Each artifact only covers at most cells The entries of dig are unique Example Input n artifacts dig Output Explanation The different colors represent different artifacts Excavated cells are labeled with a D in the grid There is artifact that can be extracted namely the red artifact The blue artifact has one part in cell which remains uncovered so we cannot extract it Thus we return Example Input n artifacts dig Output Explanation Both the red and blue artifacts have all parts uncovered labeled with a D and can be extracted so we return Constraints n artifacts length dig length min artifacts i length dig i length ri ci n No two artifacts will overlap The number of cells covered by an artifact is at most The entries of dig are unique
pancake sorting Given an array of integers arr sort the array by performing a series of pancake flips In one pancake flip we do the following steps Choose an integer k where k arr length Reverse the sub array arr k indexed For example if arr and we performed a pancake flip choosing k we reverse the sub array so arr after the pancake flip at k Return an array of the k values corresponding to a sequence of pancake flips that sort arr Any valid answer that sorts the array within arr length flips will be judged as correct Example Input arr Output Explanation We perform pancake flips with k values and Starting state arr After flip k arr After flip k arr After flip k arr After flip k arr which is sorted Example Input arr Output Explanation The input is already sorted so there is no need to flip anything Note that other answers such as would also be accepted Constraints arr length arr i arr length All integers in arr are unique i e arr is a permutation of the integers from to arr length
number of valid move combinations on chessboard There is an x chessboard containing n pieces rooks queens or bishops You are given a string array pieces of length n where pieces i describes the type rook queen or bishop of the ith piece In addition you are given a integer array positions also of length n where positions i ri ci indicates that the ith piece is currently at the based coordinate ri ci on the chessboard When making a move for a piece you choose a destination square that the piece will travel toward and stop on A rook can only travel horizontally or vertically from r c to the direction of r c r c r c or r c A queen can only travel horizontally vertically or diagonally from r c to the direction of r c r c r c r c r c r c r c r c A bishop can only travel diagonally from r c to the direction of r c r c r c r c You must make a move for every piece on the board simultaneously A move combination consists of all the moves performed on all the given pieces Every second each piece will instantaneously travel one square towards their destination if they are not already at it All pieces start traveling at the second A move combination is invalid if at a given time two or more pieces occupy the same square Return the number of valid move combinations Notes No two pieces will start in the same square You may choose the square a piece is already on as its destination If two pieces are directly adjacent to each other it is valid for them to move past each other and swap positions in one second Example Input pieces rook positions Output Explanation The image above shows the possible squares the piece can move to Example Input pieces queen positions Output Explanation The image above shows the possible squares the piece can move to Example Input pieces bishop positions Output Explanation The image above shows the possible squares the piece can move to Constraints n pieces length n positions length n pieces only contains the strings rook queen and bishop There will be at most one queen on the chessboard xi yi Each positions i is distinct
add two numbers You are given two non empty linked lists representing two non negative integers The digits are stored in reverse order and each of their nodes contains a single digit Add the two numbers and return the sum as a linked list You may assume the two numbers do not contain any leading zero except the number itself Example Input Output Explanation Example Input Output Example Input Output Constraints The number of nodes in each linked list is in the range Node val It is guaranteed that the list represents a number that does not have leading zeros
the dining philosophers Five silent philosophers sit at a round table with bowls of spaghetti Forks are placed between each pair of adjacent philosophers Each philosopher must alternately think and eat However a philosopher can only eat spaghetti when they have both left and right forks Each fork can be held by only one philosopher and so a philosopher can use the fork only if it is not being used by another philosopher After an individual philosopher finishes eating they need to put down both forks so that the forks become available to others A philosopher can take the fork on their right or the one on their left as they become available but cannot start eating before getting both forks Eating is not limited by the remaining amounts of spaghetti or stomach space an infinite supply and an infinite demand are assumed Design a discipline of behaviour a concurrent algorithm such that no philosopher will starve i e each can forever continue to alternate between eating and thinking assuming that no philosopher can know when others may want to eat or think The problem statement and the image above are taken from wikipedia org The philosophers ids are numbered from to in a clockwise order Implement the function void wantsToEat philosopher pickLeftFork pickRightFork eat putLeftFork putRightFork where philosopher is the id of the philosopher who wants to eat pickLeftFork and pickRightFork are functions you can call to pick the corresponding forks of that philosopher eat is a function you can call to let the philosopher eat once he has picked both forks putLeftFork and putRightFork are functions you can call to put down the corresponding forks of that philosopher The philosophers are assumed to be thinking as long as they are not asking to eat the function is not being called with their number Five threads each representing a philosopher will simultaneously use one object of your class to simulate the process The function may be called for the same philosopher more than once even before the last call ends Example Input n Output Explanation n is the number of times each philosopher will call the function The output array describes the calls you made to the functions controlling the forks and the eat function its format is output i a b c three integers a is the id of a philosopher b specifies the fork left right c specifies the operation pick put eat Constraints n
sell diminishing-valued colored balls You have an inventory of different colored balls and there is a customer that wants orders balls of any color The customer weirdly values the colored balls Each colored ball s value is the number of balls of that color you currently have in your inventory For example if you own yellow balls the customer would pay for the first yellow ball After the transaction there are only yellow balls left so the next yellow ball is then valued at i e the value of the balls decreases as you sell more to the customer You are given an integer array inventory where inventory i represents the number of balls of the ith color that you initially own You are also given an integer orders which represents the total number of balls that the customer wants You can sell the balls in any order Return the maximum total value that you can attain after selling orders colored balls As the answer may be too large return it modulo Example Input inventory orders Output Explanation Sell the color time and the color times The maximum total value is Example Input inventory orders Output Explanation Sell the color times and the color times The maximum total value is Constraints inventory length inventory i orders min sum inventory i
add digits Given an integer num repeatedly add all its digits until the result has only one digit and return it Example Input num Output Explanation The process is Since has only one digit return it Example Input num Output Constraints num Follow up Could you do it without any loop recursion in O runtime
relative ranks You are given an integer array score of size n where score i is the score of the ith athlete in a competition All the scores are guaranteed to be unique The athletes are placed based on their scores where the place athlete has the highest score the place athlete has the highest score and so on The placement of each athlete determines their rank The place athlete s rank is Gold Medal The place athlete s rank is Silver Medal The place athlete s rank is Bronze Medal For the place to the nth place athlete their rank is their placement number i e the xth place athlete s rank is x Return an array answer of size n where answer i is the rank of the ith athlete Example Input score Output Gold Medal Silver Medal Bronze Medal Explanation The placements are Example Input score Output Gold Medal Bronze Medal Silver Medal Explanation The placements are Constraints n score length n score i All the values in score are unique
tiling a rectangle with the fewest squares Given a rectangle of size n x m return the minimum number of integer sided squares that tile the rectangle Example Input n m Output Explanation squares are necessary to cover the rectangle squares of square of Example Input n m Output Example Input n m Output Constraints n m
maximum depth of n-ary tree Given a n ary tree find its maximum depth The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node Nary Tree input serialization is represented in their level order traversal each group of children is separated by the null value See examples Example Input root null null Output Example Input root null null null null null null null null null null null Output Constraints The total number of nodes is in the range The depth of the n ary tree is less than or equal to
check if number is a sum of powers of three Given an integer n return true if it is possible to represent n as the sum of distinct powers of three Otherwise return false An integer y is a power of three if there exists an integer x such that y Example Input n Output true Explanation Example Input n Output true Explanation Example Input n Output false Constraints n
maximum product of splitted binary tree Given the root of a binary tree split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized Return the maximum product of the sums of the two subtrees Since the answer may be too large return it modulo Note that you need to maximize the answer before taking the mod and not after taking it Example Input root Output Explanation Remove the red edge and get binary trees with sum and Their product is Example Input root null null null Output Explanation Remove the red edge and get binary trees with sum and Their product is Constraints The number of nodes in the tree is in the range Node val
removing stars from a string You are given a string s which contains stars In one operation you can Choose a star in s Remove the closest non star character to its left as well as remove the star itself Return the string after all stars have been removed Note The input will be generated such that the operation is always possible It can be shown that the resulting string will always be unique Example Input s leet cod e Output lecoe Explanation Performing the removals from left to right The closest character to the star is t in leet cod e s becomes lee cod e The closest character to the star is e in lee cod e s becomes lecod e The closest character to the star is d in lecod e s becomes lecoe There are no more stars so we return lecoe Example Input s erase Output Explanation The entire string is removed so we return an empty string Constraints s length s consists of lowercase English letters and stars The operation above can be performed on s
minimum operations to make a subsequence You are given an array target that consists of distinct integers and another integer array arr that can have duplicates In one operation you can insert any integer at any position in arr For example if arr you can add in the middle and make it Note that you can insert the integer at the very beginning or end of the array Return the minimum number of operations needed to make target a subsequence of arr A subsequence of an array is a new array generated from the original array by deleting some elements possibly none without changing the remaining elements relative order For example is a subsequence of the underlined elements while is not Example Input target arr Output Explanation You can add and in such a way that makes arr then target will be a subsequence of arr Example Input target arr Output Constraints target length arr length target i arr i target contains no duplicates
shopping offers In LeetCode Store there are n items to sell Each item has a price However there are some special offers and a special offer consists of one or more different kinds of items with a sale price You are given an integer array price where price i is the price of the ith item and an integer array needs where needs i is the number of pieces of the ith item you want to buy You are also given an array special where special i is of size n where special i j is the number of pieces of the jth item in the ith offer and special i n i e the last integer in the array is the price of the ith offer Return the lowest price you have to pay for exactly certain items as given where you could make optimal use of the special offers You are not allowed to buy more items than you want even if that would lower the overall price You could use any of the special offers as many times as you want Example Input price special needs Output Explanation There are two kinds of items A and B Their prices are and respectively In special offer you can pay for and In special offer you can pay for and You need to buy and so you may pay for and special offer and for Example Input price special needs Output Explanation The price of A is and for B for C You may pay for and and for and You need to buy and so you may pay for and special offer and for for You cannot add more items though only for and Constraints n price length needs length n price i needs i special length special i length n special i j
maximum gap Given an integer array nums return the maximum difference between two successive elements in its sorted form If the array contains less than two elements return You must write an algorithm that runs in linear time and uses linear extra space Example Input nums Output Explanation The sorted form of the array is either or has the maximum difference Example Input nums Output Explanation The array contains less than elements therefore return Constraints nums length nums i
reach a number You are standing at position on an infinite number line There is a destination at position target You can make some number of moves numMoves so that On each move you can either go left or right During the ith move starting from i to i numMoves you take i steps in the chosen direction Given the integer target return the minimum number of moves required i e the minimum numMoves to reach the destination Example Input target Output Explanation On the move we step from to step On the move we step from to steps On the move we step from to steps Example Input target Output Explanation On the move we step from to step On the move we step from to steps Constraints target target
count subarrays with fixed bounds You are given an integer array nums and two integers minK and maxK A fixed bound subarray of nums is a subarray that satisfies the following conditions The minimum value in the subarray is equal to minK The maximum value in the subarray is equal to maxK Return the number of fixed bound subarrays A subarray is a contiguous part of an array Example Input nums minK maxK Output Explanation The fixed bound subarrays are and Example Input nums minK maxK Output Explanation Every subarray of nums is a fixed bound subarray There are possible subarrays Constraints nums length nums i minK maxK
binary search tree iterator Implement the BSTIterator class that represents an iterator over the in order traversal of a binary search tree BST BSTIterator TreeNode root Initializes an object of the BSTIterator class The root of the BST is given as part of the constructor The pointer should be initialized to a non existent number smaller than any element in the BST boolean hasNext Returns true if there exists a number in the traversal to the right of the pointer otherwise returns false int next Moves the pointer to the right then returns the number at the pointer Notice that by initializing the pointer to a non existent smallest number the first call to next will return the smallest element in the BST You may assume that next calls will always be valid That is there will be at least a next number in the in order traversal when next is called Example Input BSTIterator next next hasNext next hasNext next hasNext next hasNext null null Output null true true true false Explanation BSTIterator bSTIterator new BSTIterator null null bSTIterator next return bSTIterator next return bSTIterator hasNext return True bSTIterator next return bSTIterator hasNext return True bSTIterator next return bSTIterator hasNext return True bSTIterator next return bSTIterator hasNext return False Constraints The number of nodes in the tree is in the range Node val At most calls will be made to hasNext and next Follow up Could you implement next and hasNext to run in average O time and use O h memory where h is the height of the tree
find bottom left tree value Given the root of a binary tree return the leftmost value in the last row of the tree Example Input root Output Example Input root null null null Output Constraints The number of nodes in the tree is in the range Node val
pseudo-palindromic paths in a binary tree Given a binary tree where node values are digits from to A path in the binary tree is said to be pseudo palindromic if at least one permutation of the node values in the path is a palindrome Return the number of pseudo palindromic paths going from the root node to leaf nodes Example Input root null Output Explanation The figure above represents the given binary tree There are three paths going from the root node to leaf nodes the red path the green path and the path Among these paths only red path and green path are pseudo palindromic paths since the red path can be rearranged in palindrome and the green path can be rearranged in palindrome Example Input root null null null null null Output Explanation The figure above represents the given binary tree There are three paths going from the root node to leaf nodes the green path the path and the path Among these paths only the green path is pseudo palindromic since can be rearranged in palindrome Example Input root Output Constraints The number of nodes in the tree is in the range Node val
tree node SQL Schema Table Tree Column Name Type id int int id is the primary key column for this table Each row of this table contains information about the id of a node and the id of its parent node in a tree The given structure is always a valid tree Each node in the tree can be one of three types Leaf if the node is a leaf node Root if the node is the root of the tree Inner If the node is neither a leaf node nor a root node Write an SQL query to report the type of each node in the tree Return the result table in any order The query result format is in the following example Example Input Tree table id null Output id type Root Inner Leaf Leaf Leaf Explanation Node is the root node because its parent node is null and it has child nodes and Node is an inner node because it has parent node and child node and Nodes and are leaf nodes because they have parent nodes and they do not have child nodes Example Input Tree table id null Output id type Root Explanation If there is only one node on the tree you only need to output its root attributes
number of beautiful partitions You are given a string s that consists of the digits to and two integers k and minLength A partition of s is called beautiful if s is partitioned into k non intersecting substrings Each substring has a length of at least minLength Each substring starts with a prime digit and ends with a non prime digit Prime digits are and and the rest of the digits are non prime Return the number of beautiful partitions of s Since the answer may be very large return it modulo A substring is a contiguous sequence of characters within a string Example Input s k minLength Output Explanation There exists three ways to create a beautiful partition Example Input s k minLength Output Explanation There exists one way to create a beautiful partition Example Input s k minLength Output Explanation There exists one way to create a beautiful partition Constraints k minLength s length s consists of the digits to
binary tree cameras You are given the root of a binary tree We install cameras on the tree nodes where each camera at a node can monitor its parent itself and its immediate children Return the minimum number of cameras needed to monitor all nodes of the tree Example Input root null Output Explanation One camera is enough to monitor all nodes if placed as shown Example Input root null null null null Output Explanation At least two cameras are needed to monitor all nodes of the tree The above image shows one of the valid configurations of camera placement Constraints The number of nodes in the tree is in the range Node val
binary tree pruning Given the root of a binary tree return the same tree where every subtree of the given tree not containing a has been removed A subtree of a node node is node plus every node that is a descendant of node Example Input root null Output null null Explanation Only the red nodes satisfy the property every subtree not containing a The diagram on the right represents the answer Example Input root Output null null Example Input root Output null Constraints The number of nodes in the tree is in the range Node val is either or
prime subtraction operation You are given a indexed integer array nums of length n You can perform the following operation as many times as you want Pick an index i that you t picked before and pick a prime p strictly less than nums i then subtract p from nums i Return true if you can make nums a strictly increasing array using the above operation and false otherwise A strictly increasing array is an array whose each element is strictly greater than its preceding element Example Input nums Output true Explanation In the first operation Pick i and p and then subtract from nums so that nums becomes In the second operation i p subtract from nums so nums becomes equal to After the second operation nums is sorted in strictly increasing order so the answer is true Example Input nums Output true Explanation Initially nums is sorted in strictly increasing order so we don t need to make any operations Example Input nums Output false Explanation It can be proven that there is no way to perform operations to make nums sorted in strictly increasing order so the answer is false Constraints nums length nums i nums length n
sliding window maximum You are given an array of integers nums there is a sliding window of size k which is moving from the very left of the array to the very right You can only see the k numbers in the window Each time the sliding window moves right by one position Return the max sliding window Example Input nums k Output Explanation Window position Max Example Input nums k Output Constraints nums length nums i k nums length
flood fill An image is represented by an m x n integer grid image where image i j represents the pixel value of the image You are also given three integers sr sc and color You should perform a flood fill on the image starting from the pixel image sr sc To perform a flood fill consider the starting pixel plus any pixels connected directionally to the starting pixel of the same color as the starting pixel plus any pixels connected directionally to those pixels also with the same color and so on Replace the color of all of the aforementioned pixels with color Return the modified image after performing the flood fill Example Input image sr sc color Output Explanation From the center of the image with position sr sc i e the red pixel all pixels connected by a path of the same color as the starting pixel i e the blue pixels are colored with the new color Note the bottom corner is not colored because it is not directionally connected to the starting pixel Example Input image sr sc color Output Explanation The starting pixel is already colored so no changes are made to the image Constraints m image length n image i length m n image i j color sr m sc n
maximum number of non-overlapping palindrome substrings You are given a string s and a positive integer k Select a set of non overlapping substrings from the string s that satisfy the following conditions The length of each substring is at least k Each substring is a palindrome Return the maximum number of substrings in an optimal selection A substring is a contiguous sequence of characters within a string Example Input s abaccdbbd k Output Explanation We can select the substrings underlined in s abaccdbbd Both aba and dbbd are palindromes and have a length of at least k It can be shown that we cannot find a selection with more than two valid substrings Example Input s adbcda k Output Explanation There is no palindrome substring of length at least in the string Constraints k s length s consists of lowercase English letters
minimum reverse operations You are given an integer n and an integer p in the range n Representing a indexed array arr of length n where all positions are set to s except position p which is set to You are also given an integer array banned containing some positions from the array For the ith position in banned arr banned i and banned i p You can perform multiple operations on arr In an operation you can choose a subarray with size k and reverse the subarray However the in arr should never go to any of the positions in banned In other words after each operation arr banned i remains Return an array ans where for each i from n ans i is the minimum number of reverse operations needed to bring the to position i in arr or if it is impossible A subarray is a contiguous non empty sequence of elements within an array The values of ans i are independent for all i s The reverse of an array is an array containing the values in reverse order Example Input n p banned k Output Explanation In this case k so there is only one possible reverse operation we can perform which is reversing the whole array Initially is placed at position so the amount of operations we need for position is We can never place a on the banned positions so the answer for positions and is Finally with one reverse operation we can bring the to index so the answer for position is Example Input n p banned k Output Explanation In this case the is initially at position so the answer for that position is We can perform reverse operations of size The is currently located at position so we need to reverse the subarray for it to leave that position but reversing that subarray makes position have a which shouldn t happen So we can t move the from position making the result for all the other positions Example Input n p banned k Output Explanation In this case we can only perform reverse operations of size So the never changes its position Constraints n p n banned length n banned i n k n banned i p all values in banned are unique
two sum iv - input is a bst Given the root of a binary search tree and an integer k return true if there exist two elements in the BST such that their sum is equal to k or false otherwise Example Input root null k Output true Example Input root null k Output false Constraints The number of nodes in the tree is in the range Node val root is guaranteed to be a valid binary search tree k
user activity for the past 30 days i SQL Schema Table Activity Column Name Type int int date enum There is no primary key for this table it may have duplicate rows The column is an ENUM of type The table shows the user activities for a social media website Note that each session belongs to exactly one user Write an SQL query to find the daily active user count for a period of days ending inclusively A user was active on someday if they made at least one activity on that day Return the result table in any order The query result format is in the following example Example Input Activity table Output day Explanation Note that we do not care about days with zero active users
first missing positive Given an unsorted integer array nums return the smallest missing positive integer You must implement an algorithm that runs in O n time and uses constant extra space Example Input nums Output Explanation The numbers in the range are all in the array Example Input nums Output Explanation is in the array but is missing Example Input nums Output Explanation The smallest positive integer is missing Constraints nums length nums i
nearest exit from entrance in maze You are given an m x n matrix maze indexed with empty cells represented as and walls represented as You are also given the entrance of the maze where entrance entrancerow entrancecol denotes the row and column of the cell you are initially standing at In one step you can move one cell up down left or right You cannot step into a cell with a wall and you cannot step outside the maze Your goal is to find the nearest exit from the entrance An exit is defined as an empty cell that is at the border of the maze The entrance does not count as an exit Return the number of steps in the shortest path from the entrance to the nearest exit or if no such path exists Example Input maze entrance Output Explanation There are exits in this maze at and Initially you are at the entrance cell You can reach by moving steps left You can reach by moving step up It is impossible to reach from the entrance Thus the nearest exit is which is step away Example Input maze entrance Output Explanation There is exit in this maze at does not count as an exit since it is the entrance cell Initially you are at the entrance cell You can reach by moving steps right Thus the nearest exit is which is steps away Example Input maze entrance Output Explanation There are no exits in this maze Constraints maze length m maze i length n m n maze i j is either or entrance length entrancerow m entrancecol n entrance will always be an empty cell
palindrome partitioning Given a string s partition s such that every substring of the partition is a palindrome Return all possible palindrome partitioning of s Example Input s aab Output a a b aa b Example Input s a Output a Constraints s length s contains only lowercase English letters
split with minimum sum Given a positive integer num split it into two non negative integers and such that The concatenation of and is a permutation of num In other words the sum of the number of occurrences of each digit in and is equal to the number of occurrences of that digit in num and can contain leading zeros Return the minimum possible sum of and Notes It is guaranteed that num does not contain any leading zeros The order of occurrence of the digits in and may differ from the order of occurrence of num Example Input num Output Explanation We can split so that is and is giving a sum of We can prove that is indeed the minimal possible sum Example Input num Output Explanation We can split so that is and is which would give an optimal sum of Constraints num
construct binary tree from preorder and postorder traversal Given two integer arrays preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree reconstruct and return the binary tree If there exist multiple answers you can return any of them Example Input preorder postorder Output Example Input preorder postorder Output Constraints preorder length preorder i preorder length All the values of preorder are unique postorder length preorder length postorder i postorder length All the values of postorder are unique It is guaranteed that preorder and postorder are the preorder traversal and postorder traversal of the same binary tree
last stone weight You are given an array of integers stones where stones i is the weight of the ith stone We are playing a game with the stones On each turn we choose the heaviest two stones and smash them together Suppose the heaviest two stones have weights x and y with x y The result of this smash is If x y both stones are destroyed and If x y the stone of weight x is destroyed and the stone of weight y has new weight y x At the end of the game there is at most one stone left Return the weight of the last remaining stone If there are no stones left return Example Input stones Output Explanation We combine and to get so the array converts to then we combine and to get so the array converts to then we combine and to get so the array converts to then we combine and to get so the array converts to then that s the value of the last stone Example Input stones Output Constraints stones length stones i
get biggest three rhombus sums in a grid You are given an m x n integer matrix grid A rhombus sum is the sum of the elements that form the border of a regular rhombus shape in grid The rhombus must have the shape of a square rotated degrees with each of the corners centered in a grid cell Below is an image of four valid rhombus shapes with the corresponding colored cells that should be included in each rhombus sum Note that the rhombus can have an area of which is depicted by the purple rhombus in the bottom right corner Return the biggest three distinct rhombus sums in the grid in descending order If there are less than three distinct values return all of them Example Input grid Output Explanation The rhombus shapes for the three biggest distinct rhombus sums are depicted above Blue Red Green Example Input grid Output Explanation The rhombus shapes for the three biggest distinct rhombus sums are depicted above Blue Red area rhombus in the bottom right corner Green area rhombus in the bottom middle Example Input grid Output Explanation All three possible rhombus sums are the same so return Constraints m grid length n grid i length m n grid i j
minimum path cost in a grid You are given a indexed m x n integer matrix grid consisting of distinct integers from to m n You can move in this matrix from a cell to any other cell in the next row That is if you are in cell x y such that x m you can move to any of the cells x x x n Note that it is not possible to move from cells in the last row Each possible move has a cost given by a indexed array moveCost of size m n x n where moveCost i j is the cost of moving from a cell with value i to a cell in column j of the next row The cost of moving from cells in the last row of grid can be ignored The cost of a path in grid is the sum of all values of cells visited plus the sum of costs of all the moves made Return the minimum cost of a path that starts from any cell in the first row and ends at any cell in the last row Example Input grid moveCost Output Explanation The path with the minimum possible cost is the path The sum of the values of cells visited is The cost of moving from to is The cost of moving from to is So the total cost of the path is Example Input grid moveCost Output Explanation The path with the minimum possible cost is the path The sum of the values of cells visited is The cost of moving from to is So the total cost of this path is Constraints m grid length n grid i length m n grid consists of distinct integers from to m n moveCost length m n moveCost i length n moveCost i j
find median from data stream The median is the middle value in an ordered integer list If the size of the list is even there is no middle value and the median is the mean of the two middle values For example for arr the median is For example for arr the median is Implement the MedianFinder class MedianFinder initializes the MedianFinder object void addNum int num adds the integer num from the data stream to the data structure double findMedian returns the median of all elements so far Answers within of the actual answer will be accepted Example Input MedianFinder addNum addNum findMedian addNum findMedian Output null null null null Explanation MedianFinder medianFinder new MedianFinder medianFinder addNum arr medianFinder addNum arr medianFinder findMedian return i e medianFinder addNum arr medianFinder findMedian return Constraints num There will be at least one element in the data structure before calling findMedian At most calls will be made to addNum and findMedian Follow up If all integer numbers from the stream are in the range how would you optimize your solution If of all integer numbers from the stream are in the range how would you optimize your solution
available captures for rook On an x chessboard there is exactly one white rook R and some number of white bishops B black pawns p and empty squares When the rook moves it chooses one of four cardinal directions north east south or west then moves in that direction until it chooses to stop reaches the edge of the board captures a black pawn or is blocked by a white bishop A rook is considered attacking a pawn if the rook can capture the pawn on the rook s turn The number of available captures for the white rook is the number of pawns that the rook is attacking Return the number of available captures for the white rook Example Input board p R p p Output Explanation In this example the rook is attacking all the pawns Example Input board p p p p p p p B p p p B R B p p p B p p p p p p p Output Explanation The bishops are blocking the rook from attacking any of the pawns Example Input board p p p p R p B B p Output Explanation The rook is attacking the pawns at positions and Constraints board length board i length board i j is either R B or p There is exactly one cell with board i j R
sleep Given a positive integer millis write an asyncronous function that sleeps for millis milliseconds It can resolve any value Example Input millis Output Explanation It should return a promise that resolves after let t Date now sleep then console log Date now t Example Input millis Output Explanation It should return a promise that resolves after Constraints millis
tag validator Given a string representing a code snippet implement a tag validator to parse the code and return whether it is valid A code snippet is valid if all the following rules hold The code must be wrapped in a valid closed tag Otherwise the code is invalid A closed tag not necessarily valid has exactly the following format Among them is the start tag and is the end tag The in start and end tags should be the same A closed tag is valid if and only if the and are valid A valid only contain upper case letters and has length in range Otherwise the is invalid A valid may contain other valid closed tags cdata and any characters see EXCEPT unmatched unmatched start and end tag and unmatched or closed tags with invalid Otherwise the is invalid A start tag is unmatched if no end tag exists with the same and vice versa However you also need to consider the issue of unbalanced when tags are nested A is unmatched if you cannot find a subsequent And when you find a or all the subsequent characters until the next should be parsed as not necessarily valid The cdata has the following format CDATA The range of is defined as the characters between CDATA and the first subsequent may contain any characters The function of cdata is to forbid the validator to parse so even it has some characters that can be parsed as tag no matter valid or invalid you should treat it as regular characters Example Input code DIV This is the first line CDATA div DIV Output true Explanation The code is wrapped in a closed tag DIV and DIV The is valid the consists of some characters and cdata Although has an unmatched start tag with invalid it should be considered as plain text not parsed as a tag So is valid and then the code is valid Thus return true Example Input code DIV cdata CDATA div DIV Output true Explanation We first separate the code into DIV DIV could also be separated into cdata cdata cdata CDATA div where the is div The reason why is NOT DIV is because of the rule The reason why cdata is NOT CDATA div is because of the rule Example Input code A B A B Output false Explanation Unbalanced If A is closed then B must be unmatched and vice versa Constraints code length code consists of English letters digits and
next greater node in linked list You are given the head of a linked list with n nodes For each node in the list find the value of the next greater node That is for each node find the value of the first node that is next to it and has a strictly larger value than it Return an integer array answer where answer i is the value of the next greater node of the ith node indexed If the ith node does not have a next greater node set answer i Example Input head Output Example Input head Output Constraints The number of nodes in the list is n n Node val
special array with x elements greater than or equal x You are given an array nums of non negative integers nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x Notice that x does not have to be an element in nums Return x if the array is special otherwise return It can be proven that if nums is special the value for x is unique Example Input nums Output Explanation There are values and that are greater than or equal to Example Input nums Output Explanation No numbers fit the criteria for x If x there should be numbers x but there are If x there should be number x but there are If x there should be numbers x but there are x cannot be greater since there are only numbers in nums Example Input nums Output Explanation There are values that are greater than or equal to Constraints nums length nums i
path sum ii Given the root of a binary tree and an integer targetSum return all root to leaf paths where the sum of the node values in the path equals targetSum Each path should be returned as a list of the node values not node references A root to leaf path is a path starting from the root and ending at any leaf node A leaf is a node with no children Example Input root null null null targetSum Output Explanation There are two paths whose sum equals targetSum Example Input root targetSum Output Example Input root targetSum Output Constraints The number of nodes in the tree is in the range Node val targetSum
number of squareful arrays An array is squareful if the sum of every pair of adjacent elements is a perfect square Given an integer array nums return the number of permutations of nums that are squareful Two permutations and are different if there is some index i such that i i Example Input nums Output Explanation and are the valid permutations Example Input nums Output Constraints nums length nums i
palindrome partitioning iii You are given a string s containing lowercase letters and an integer k You need to First change some characters of s to other lowercase English letters Then divide s into k non empty disjoint substrings such that each substring is a palindrome Return the minimal number of characters that you need to change to divide the string Example Input s abc k Output Explanation You can split the string into ab and c and change character in ab to make it palindrome Example Input s aabbc k Output Explanation You can split the string into aa bb and c all of them are palindrome Example Input s leetcode k Output Constraints k s length s only contains lowercase English letters
minimum space wasted from packaging You have n packages that you are trying to place in boxes one package in each box There are m suppliers that each produce boxes of different sizes with infinite supply A package can be placed in a box if the size of the package is less than or equal to the size of the box The package sizes are given as an integer array packages where packages i is the size of the ith package The suppliers are given as a integer array boxes where boxes j is an array of box sizes that the jth supplier produces You want to choose a single supplier and use boxes from them such that the total wasted space is minimized For each package in a box we define the space wasted to be size of the box size of the package The total wasted space is the sum of the space wasted in all the boxes For example if you have to fit packages with sizes and the supplier offers boxes of sizes you can fit the packages of size and size into two boxes of size and the package with size into a box of size This would result in a waste of Return the minimum total wasted space by choosing the box supplier optimally or if it is impossible to fit all the packages inside boxes Since the answer may be large return it modulo Example Input packages boxes Output Explanation It is optimal to choose the first supplier using two size boxes and one size box The total waste is Example Input packages boxes Output Explanation There is no box that the package of size can fit in Example Input packages boxes Output Explanation It is optimal to choose the third supplier using two size boxes two size boxes and two size boxes The total waste is Constraints n packages length m boxes length n m packages i boxes j length boxes j k sum boxes j length The elements in boxes j are distinct
number of people aware of a secret On day one person discovers a secret You are given an integer delay which means that each person will share the secret with a new person every day starting from delay days after discovering the secret You are also given an integer forget which means that each person will forget the secret forget days after discovering it A person cannot share the secret on the same day they forgot it or on any day afterwards Given an integer n return the number of people who know the secret at the end of day n Since the answer may be very large return it modulo Example Input n delay forget Output Explanation Day Suppose the first person is named A person Day A is the only person who knows the secret person Day A shares the secret with a new person B people Day A shares the secret with a new person C people Day A forgets the secret and B shares the secret with a new person D people Day B shares the secret with E and C shares the secret with F people Example Input n delay forget Output Explanation Day The first person is named A person Day A shares the secret with B people Day A and B share the secret with new people C and D people Day A forgets the secret B C and D share the secret with new people people Constraints n delay forget n
delete columns to make sorted ii You are given an array of n strings strs all of the same length We may choose any deletion indices and we delete all the characters in those indices for each string For example if we have strs abcdef uvwxyz and deletion indices then the final array after deletions is bef vyz Suppose we chose a set of deletion indices answer such that after deletions the final array has its elements in lexicographic order i e strs strs strs strs n Return the minimum possible value of answer length Example Input strs ca bb ac Output Explanation After deleting the first column strs a b c Now strs is in lexicographic order ie strs strs strs We require at least deletion since initially strs was not in lexicographic order so the answer is Example Input strs xc yb za Output Explanation strs is already in lexicographic order so we do not need to delete anything Note that the rows of strs are not necessarily in lexicographic order i e it is NOT necessarily true that strs strs Example Input strs zyx wvu tsr Output Explanation We have to delete every column Constraints n strs length n strs i length strs i consists of lowercase English letters
minimum swaps to group all 1's together ii A swap is defined as taking two distinct positions in an array and swapping the values in them A circular array is defined as an array where we consider the first element and the last element to be adjacent Given a binary circular array nums return the minimum number of swaps required to group all s present in the array together at any location Example Input nums Output Explanation Here are a few of the ways to group all the s together using swap using swap using swaps using the circular property of the array There is no way to group all s together with swaps Thus the minimum number of swaps required is Example Input nums Output Explanation Here are a few of the ways to group all the s together using swaps using the circular property of the array using swaps There is no way to group all s together with or swaps Thus the minimum number of swaps required is Example Input nums Output Explanation All the s are already grouped together due to the circular property of the array Thus the minimum number of swaps required is Constraints nums length nums i is either or
count and say The count and say sequence is a sequence of digit strings defined by the recursive formula countAndSay countAndSay n is the way you would say the digit string from countAndSay n which is then converted into a different digit string To determine how you say a digit string split it into the minimal number of substrings such that each substring contains exactly one unique digit Then for each substring say the number of digits then say the digit Finally concatenate every said digit For example the saying and conversion for digit string Given a positive integer n return the nth term of the count and say sequence Example Input n Output Explanation This is the base case Example Input n Output Explanation countAndSay countAndSay say one countAndSay say two s countAndSay say one one Constraints n
maximum sum obtained of any permutation We have an array of integers nums and an array of requests where requests i starti endi The ith request asks for the sum of nums starti nums starti nums endi nums endi Both starti and endi are indexed Return the maximum total sum of all requests among all permutations of nums Since the answer may be too large return it modulo Example Input nums requests Output Explanation One permutation of nums is with the following result requests nums nums nums requests nums nums Total sum A permutation with a higher total sum is with the following result requests nums nums nums requests nums nums Total sum which is the best that you can do Example Input nums requests Output Explanation A permutation with the max total sum is with request sums Example Input nums requests Output Explanation A permutation with the max total sum is with request sums Constraints n nums length n nums i requests length requests i length starti endi n
minimum consecutive cards to pick up You are given an integer array cards where cards i represents the value of the ith card A pair of cards are matching if the cards have the same value Return the minimum number of consecutive cards you have to pick up to have a pair of matching cards among the picked cards If it is impossible to have matching cards return Example Input cards Output Explanation We can pick up the cards which contain a matching pair of cards with value Note that picking up the cards is also optimal Example Input cards Output Explanation There is no way to pick up a set of consecutive cards that contain a pair of matching cards Constraints cards length cards i
counter ii Write a function createCounter It should accept an initial integer init It should return an object with three functions The three functions are increment increases the current value by and then returns it decrement reduces the current value by and then returns it reset sets the current value to init and then returns it Example Input init calls increment reset decrement Output Explanation const counter createCounter counter increment counter reset counter decrement Example Input init calls increment increment decrement reset reset Output Explanation const counter createCounter counter increment counter increment counter decrement counter reset counter reset Constraints init total calls not to exceed
shuffle the array Given the array nums consisting of elements in the form xn yn Return the array in the form xn yn Example Input nums n Output Explanation Since then the answer is Example Input nums n Output Example Input nums n Output Constraints n nums length nums i
poor pigs There are buckets buckets of liquid where exactly one of the buckets is poisonous To figure out which one is poisonous you feed some number of poor pigs the liquid to see whether they will die or not Unfortunately you only have minutesToTest minutes to determine which bucket is poisonous You can feed the pigs according to these steps Choose some live pigs to feed For each pig choose which buckets to feed it The pig will consume all the chosen buckets simultaneously and will take no time Each pig can feed from any number of buckets and each bucket can be fed from by any number of pigs Wait for minutesToDie minutes You may not feed any other pigs during this time After minutesToDie minutes have passed any pigs that have been fed the poisonous bucket will die and all others will survive Repeat this process until you run out of time Given buckets minutesToDie and minutesToTest return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time Example Input buckets minutesToDie minutesToTest Output Explanation We can determine the poisonous bucket as follows At time feed the first pig buckets and and feed the second pig buckets and At time there are possible outcomes If only the first pig dies then bucket must be poisonous If only the second pig dies then bucket must be poisonous If both pigs die then bucket must be poisonous If neither pig dies then bucket must be poisonous Example Input buckets minutesToDie minutesToTest Output Explanation We can determine the poisonous bucket as follows At time feed the first pig bucket and feed the second pig bucket At time there are possible outcomes If either pig dies then the poisonous bucket is the one it was fed If neither pig dies then feed the first pig bucket and feed the second pig bucket At time one of the two pigs must die and the poisonous bucket is the one it was fed Constraints buckets minutesToDie minutesToTest
maximum value at a given index in a bounded array You are given three positive integers n index and maxSum You want to construct an array nums indexed that satisfies the following conditions nums length n nums i is a positive integer where i n abs nums i nums i where i n The sum of all the elements of nums does not exceed maxSum nums index is maximized Return nums index of the constructed array Note that abs x equals x if x and x otherwise Example Input n index maxSum Output Explanation nums is one array that satisfies all the conditions There are no arrays that satisfy all the conditions and have nums so is the maximum nums Example Input n index maxSum Output Constraints n maxSum index n
maximum number of coins you can get There are piles of coins of varying size you and your friends will take piles of coins as follows In each step you will choose any piles of coins not necessarily consecutive Of your choice Alice will pick the pile with the maximum number of coins You will pick the next pile with the maximum number of coins Your friend Bob will pick the last pile Repeat until there are no more piles of coins Given an array of integers piles where piles i is the number of coins in the ith pile Return the maximum number of coins that you can have Example Input piles Output Explanation Choose the triplet Alice Pick the pile with coins you the pile with coins and Bob the last one Choose the triplet Alice Pick the pile with coins you the pile with coins and Bob the last one The maximum number of coins which you can have are On the other hand if we choose this arrangement you only get coins which is not optimal Example Input piles Output Example Input piles Output Constraints piles length piles length piles i
summary ranges You are given a sorted unique integer array nums A range a b is the set of all integers from a to b inclusive Return the smallest sorted list of ranges that cover all the numbers in the array exactly That is each element of nums is covered by exactly one of the ranges and there is no integer x such that x is in one of the ranges but not in nums Each range a b in the list should be output as a b if a b a if a b Example Input nums Output Explanation The ranges are Example Input nums Output Explanation The ranges are Constraints nums length nums i All the values of nums are unique nums is sorted in ascending order
check if number has equal digit count and digit value You are given a indexed string num of length n consisting of digits Return true if for every index i in the range i n the digit i occurs num i times in num otherwise return false Example Input num Output true Explanation num The digit occurs once in num num The digit occurs twice in num num The digit occurs once in num num The digit occurs zero times in num The condition holds true for every index in so return true Example Input num Output false Explanation num The digit should occur zero times but actually occurs twice in num num The digit should occur three times but actually occurs zero times in num num The digit occurs zero times in num The indices and both violate the condition so return false Constraints n num length n num consists of digits
integer to english words Convert a non negative integer num to its English words representation Example Input num Output One Hundred Twenty Three Example Input num Output Twelve Thousand Three Hundred Forty Five Example Input num Output One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven Constraints num
loud and rich There is a group of n people labeled from to n where each person has a different amount of money and a different level of quietness You are given an array richer where richer i ai bi indicates that ai has more money than bi and an integer array quiet where quiet i is the quietness of the ith person All the given data in richer are logically correct i e the data will not lead you to a situation where x is richer than y and y is richer than x at the same time Return an integer array answer where answer x y if y is the least quiet person that is the person y with the smallest value of quiet y among all people who definitely have equal to or more money than the person x Example Input richer quiet Output Explanation answer Person has more money than which has more money than which has more money than The only person who is quieter has lower quiet x is person but it is not clear if they have more money than person answer Among all people that definitely have equal to or more money than person which could be persons or the person who is the quietest has lower quiet x is person The other answers can be filled out with similar reasoning Example Input richer quiet Output Constraints n quiet length n quiet i n All the values of quiet are unique richer length n n ai bi n ai bi All the pairs of richer are unique The observations in richer are all logically consistent
combination sum iv Given an array of distinct integers nums and a target integer target return the number of possible combinations that add up to target The test cases are generated so that the answer can fit in a bit integer Example Input nums target Output Explanation The possible combination ways are Note that different sequences are counted as different combinations Example Input nums target Output Constraints nums length nums i All the elements of nums are unique target Follow up What if negative numbers are allowed in the given array How does it change the problem What limitation we need to add to the question to allow negative numbers
coin change You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money Return the fewest number of coins that you need to make up that amount If that amount of money cannot be made up by any combination of the coins return You may assume that you have an infinite number of each kind of coin Example Input coins amount Output Explanation Example Input coins amount Output Example Input coins amount Output Constraints coins length coins i amount
unique binary search trees Given an integer n return the number of structurally unique BST s binary search trees which has exactly n nodes of unique values from to n Example Input n Output Example Input n Output Constraints n
maximum employees to be invited to a meeting A company is organizing a meeting and has a list of n employees waiting to be invited They have arranged for a large circular table capable of seating any number of employees The employees are numbered from to n Each employee has a favorite person and they will attend the meeting only if they can sit next to their favorite person at the table The favorite person of an employee is not themself Given a indexed integer array favorite where favorite i denotes the favorite person of the ith employee return the maximum number of employees that can be invited to the meeting Example Input favorite Output Explanation The above figure shows how the company can invite employees and and seat them at the round table All employees cannot be invited because employee cannot sit beside employees and simultaneously Note that the company can also invite employees and and give them their desired seats The maximum number of employees that can be invited to the meeting is Example Input favorite Output Explanation Each employee is the favorite person of at least one other employee and the only way the company can invite them is if they invite every employee The seating arrangement will be the same as that in the figure given in example Employee will sit between employees and Employee will sit between employees and Employee will sit between employees and The maximum number of employees that can be invited to the meeting is Example Input favorite Output Explanation The above figure shows how the company will invite employees and and seat them at the round table Employee cannot be invited because the two spots next to their favorite employee are taken So the company leaves them out of the meeting The maximum number of employees that can be invited to the meeting is Constraints n favorite length n favorite i n favorite i i
number of good pairs Given an array of integers nums return the number of good pairs A pair i j is called good if nums i nums j and i j Example Input nums Output Explanation There are good pairs indexed Example Input nums Output Explanation Each pair in the array are good Example Input nums Output Constraints nums length nums i
remove max number of edges to keep graph fully traversable Alice and Bob have an undirected graph of n nodes and three types of edges Type Can be traversed by Alice only Type Can be traversed by Bob only Type Can be traversed by both Alice and Bob Given an array edges where edges i typei ui vi represents a bidirectional edge of type typei between nodes ui and vi find the maximum number of edges you can remove so that after removing the edges the graph can still be fully traversed by both Alice and Bob The graph is fully traversed by Alice and Bob if starting from any node they can reach all other nodes Return the maximum number of edges you can remove or return if Alice and Bob cannot fully traverse the graph Example Input n edges Output Explanation If we remove the edges and The graph will still be fully traversable by Alice and Bob Removing any additional edge will not make it so So the maximum number of edges we can remove is Example Input n edges Output Explanation Notice that removing any edge will not make the graph fully traversable by Alice and Bob Example Input n edges Output Explanation In the current graph Alice cannot reach node from the other nodes Likewise Bob cannot reach Therefore it s impossible to make the graph fully traversable Constraints n edges length min n n edges i length typei ui vi n All tuples typei ui vi are distinct
count good triplets Given an array of integers arr and three integers a b and c You need to find the number of good triplets A triplet arr i arr j arr k is good if the following conditions are true i j k arr length arr i arr j a arr j arr k b arr i arr k c Where x denotes the absolute value of x Return the number of good triplets Example Input arr a b c Output Explanation There are good triplets Example Input arr a b c Output Explanation No triplet satisfies all conditions Constraints arr length arr i a b c
maximum strength of a group You are given a indexed integer array nums representing the score of students in an exam The teacher would like to form one non empty group of students with maximal strength where the strength of a group of students of indices ik is defined as nums nums nums nums ik Return the maximum strength of a group the teacher can create Example Input nums Output Explanation One way to form a group of maximal strength is to group the students at indices Their strength is which we can show is optimal Example Input nums Output Explanation Group the students at indices Then ll have a resulting strength of We cannot achieve greater strength Constraints nums length nums i
maximum score after splitting a string
encode and decode tinyurl Note This is a companion problem to the System Design problem Design TinyURL TinyURL is a URL shortening service where you enter a URL such as https leetcode com problems design tinyurl and it returns a short URL such as http tinyurl com Design a class to encode a URL and decode a tiny URL There is no restriction on how your encode decode algorithm should work You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL Implement the Solution class Solution Initializes the object of the system String encode String longUrl Returns a tiny URL for the given longUrl String decode String shortUrl Returns the original long URL for the given shortUrl It is guaranteed that the given shortUrl was encoded by the same object Example Input url https leetcode com problems design tinyurl Output https leetcode com problems design tinyurl Explanation Solution obj new Solution string tiny obj encode url returns the encoded tiny url string ans obj decode tiny returns the original url after decoding it Constraints url length url is guranteed to be a valid URL
subsets ii Given an integer array nums that may contain duplicates return all possible subsets the power set The solution set must not contain duplicate subsets Return the solution in any order Example Input nums Output Example Input nums Output Constraints nums length nums i
course schedule iv There are a total of numCourses courses you have to take labeled from to numCourses You are given an array prerequisites where prerequisites i ai bi indicates that you must take course ai first if you want to take course bi For example the pair indicates that you have to take course before you can take course Prerequisites can also be indirect If course a is a prerequisite of course b and course b is a prerequisite of course c then course a is a prerequisite of course c You are also given an array queries where queries j uj vj For the jth query you should answer whether course uj is a prerequisite of course vj or not Return a boolean array answer where answer j is the answer to the jth query Example Input numCourses prerequisites queries Output false true Explanation The pair indicates that you have to take course before you can take course Course is not a prerequisite of course but the opposite is true Example Input numCourses prerequisites queries Output false false Explanation There are no prerequisites and each course is independent Example Input numCourses prerequisites queries Output true true Constraints numCourses prerequisites length numCourses numCourses prerequisites i length ai bi n ai bi All the pairs ai bi are unique The prerequisites graph has no cycles queries length ui vi n ui vi
sum in a matrix You are given a indexed integer array nums Initially your score is Perform the following operations until the matrix becomes empty From each row in the matrix select the largest number and remove it In the case of a tie it does not matter which number is chosen Identify the highest number amongst all those removed in step Add that number to your score Return the final score Example Input nums Output Explanation In the first operation we remove and We then add to our score Next we remove and We add to our score Lastly we remove and We add to our score Thus our final score is Example Input nums Output Explanation We remove and add it to the answer We return Constraints nums length nums i length nums i j
flipping an image Given an n x n binary matrix image flip the image horizontally then invert it and return the resulting image To flip an image horizontally means that each row of the image is reversed For example flipping horizontally results in To invert an image means that each is replaced by and each is replaced by For example inverting results in Example Input image Output Explanation First reverse each row Then invert the image Example Input image Output Explanation First reverse each row Then invert the image Constraints n image length n image i length n images i j is either or
create hello world function Write a function createHelloWorld It should return a new function that always returns Hello World Example Input args Output Hello World Explanation const f createHelloWorld f Hello World The function returned by createHelloWorld should always return Hello World Example Input args null Output Hello World Explanation const f createHelloWorld f null Hello World Any arguments could be passed to the function but it should still always return Hello World Constraints args length
bitwise and of numbers range Given two integers left and right that represent the range left right return the bitwise AND of all numbers in this range inclusive Example Input left right Output Example Input left right Output Example Input left right Output Constraints left right
count ways to build rooms in an ant colony You are an ant tasked with adding n new rooms numbered to n to your colony You are given the expansion plan as a indexed integer array of length n prevRoom where prevRoom i indicates that you must build room prevRoom i before building room i and these two rooms must be connected directly Room is already built so prevRoom The expansion plan is given such that once all the rooms are built every room will be reachable from room You can only build one room at a time and you can travel freely between rooms you have already built only if they are connected You can choose to build any room as long as its previous room is already built Return the number of different orders you can build all the rooms in Since the answer may be large return it modulo Example Input prevRoom Output Explanation There is only one way to build the additional rooms Example Input prevRoom Output Explanation The ways are Constraints n prevRoom length n prevRoom prevRoom i n for all i n Every room is reachable from room once all the rooms are built
human traffic of stadium SQL Schema Table Stadium Column Name Type id int date people int is the primary key for this table Each row of this table contains the visit date and visit id to the stadium with the number of people during the visit No two rows will have the same and as the id increases the dates increase as well Write an SQL query to display the records with three or more rows with consecutive id s and the number of people is greater than or equal to for each Return the result table ordered by in ascending order The query result format is in the following example Example Input Stadium table id people Output id people Explanation The four rows with ids and have consecutive ids and each of them has people attended Note that row was included even though the was not the next day after row The rows with ids and are not included because we need at least three consecutive ids
sequentially ordinal rank tracker A scenic location is represented by its name and attractiveness score where name is a unique string among all locations and score is an integer Locations can be ranked from the best to the worst The higher the score the better the location If the scores of two locations are equal then the location with the lexicographically smaller name is better You are building a system that tracks the ranking of locations with the system initially starting with no locations It supports Adding scenic locations one at a time Querying the ith best location of all locations already added where i is the number of times the system has been queried including the current query For example when the system is queried for the time it returns the best location of all locations already added Note that the test data are generated so that at any time the number of queries does not exceed the number of locations added to the system Implement the SORTracker class SORTracker Initializes the tracker system void add string name int score Adds a scenic location with name and score to the system string get Queries and returns the ith best location where i is the number of times this method has been invoked including this invocation Example Input SORTracker add add get add get add get add get add get get bradford branford alps orland orlando alpine Output null null null branford null alps null bradford null bradford null bradford orland Explanation SORTracker tracker new SORTracker Initialize the tracker system tracker add bradford Add location with name bradford and score to the system tracker add branford Add location with name branford and score to the system tracker get The sorted locations from best to worst are branford bradford Note that branford precedes bradford due to its higher score This is the time get is called so return the best location branford tracker add alps Add location with name alps and score to the system tracker get Sorted locations branford alps bradford Note that alps precedes bradford even though they have the same score This is because alps is lexicographically smaller than bradford Return the best location alps as it is the time get is called tracker add orland Add location with name orland and score to the system tracker get Sorted locations branford alps bradford orland Return bradford as it is the time get is called tracker add orlando Add location with name orlando and score to the system tracker get Sorted locations branford orlando alps bradford orland Return bradford tracker add alpine Add location with name alpine and score to the system tracker get Sorted locations branford orlando alpine alps bradford orland Return bradford tracker get Sorted locations branford orlando alpine alps bradford orland Return orland Constraints name consists of lowercase English letters and is unique among all locations name length score At any time the number of calls to get does not exceed the number of calls to add At most calls in total will be made to add and get
subarrays with k different integers Given an integer array nums and an integer k return the number of good subarrays of nums A good array is an array where the number of different integers in that array is exactly k For example has different integers and A subarray is a contiguous part of an array Example Input nums k Output Explanation Subarrays formed with exactly different integers Example Input nums k Output Explanation Subarrays formed with exactly different integers Constraints nums length nums i k nums length
find the index of the first occurrence in a string Given two strings needle and haystack return the index of the first occurrence of needle in haystack or if needle is not part of haystack Example Input haystack sadbutsad needle sad Output Explanation sad occurs at index and The first occurrence is at index so we return Example Input haystack leetcode needle leeto Output Explanation leeto did not occur in leetcode so we return Constraints haystack length needle length haystack and needle consist of only lowercase English characters
minimum operations to make all array elements equal You are given an array nums consisting of positive integers You are also given an integer array queries of size m For the ith query you want to make all of the elements of nums equal to queries i You can perform the following operation on the array any number of times Increase or decrease an element of the array by Return an array answer of size m where answer i is the minimum number of operations to make all elements of nums equal to queries i Note that after each query the array is reset to its original state Example Input nums queries Output Explanation For the first query we can do the following operations Decrease nums times so that nums Decrease nums times so that nums Decrease nums times so that nums So the total number of operations for the first query is For the second query we can do the following operations Increase nums times so that nums Increase nums times so that nums Decrease nums time so that nums Decrease nums times so that nums So the total number of operations for the second query is Example Input nums queries Output Explanation We can increase each value in the array to The total number of operations will be Constraints n nums length m queries length n m nums i queries i
combine two tables SQL Schema Table Person Column Name Type personId int lastName varchar firstName varchar personId is the primary key column for this table This table contains information about the ID of some persons and their first and last names Table Address Column Name Type addressId int personId int city varchar state varchar addressId is the primary key column for this table Each row of this table contains information about the city and state of one person with ID PersonId Write an SQL query to report the first name last name city and state of each person in the Person table If the address of a personId is not present in the Address table report null instead Return the result table in any order The query result format is in the following example Example Input Person table personId lastName firstName Wang Allen Alice Bob Address table addressId personId city state New York City New York Leetcode California Output firstName lastName city state Allen Wang Null Null Bob Alice New York City New York Explanation There is no address in the address table for the personId so we return null in their city and state addressId contains information about the address of personId
maximum score of a good subarray You are given an array of integers nums indexed and an integer k The score of a subarray i j is defined as min nums i nums i nums j j i A good subarray is a subarray where i k j Return the maximum possible score of a good subarray Example Input nums k Output Explanation The optimal subarray is with a score of min Example Input nums k Output Explanation The optimal subarray is with a score of min Constraints nums length nums i k nums length
map sum pairs Design a map that allows you to do the following Maps a string key to a given value Returns the sum of the values that have a key with a prefix equal to a given string Implement the MapSum class MapSum Initializes the MapSum object void insert String key int val Inserts the key val pair into the map If the key already existed the original key value pair will be overridden to the new one int sum string prefix Returns the sum of all the pairs value whose key starts with the prefix Example Input MapSum insert sum insert sum apple ap app ap Output null null null Explanation MapSum mapSum new MapSum mapSum insert apple mapSum sum ap return apple mapSum insert app mapSum sum ap return apple app Constraints key length prefix length key and prefix consist of only lowercase English letters val At most calls will be made to insert and sum
check if a word occurs as a prefix of any word in a sentence Given a sentence that consists of some words separated by a single space and a searchWord check if searchWord is a prefix of any word in sentence Return the index of the word in sentence indexed where searchWord is a prefix of this word If searchWord is a prefix of more than one word return the index of the first word minimum index If there is no such word return A prefix of a string s is any leading contiguous substring of s Example Input sentence i love eating burger searchWord burg Output Explanation burg is prefix of burger which is the word in the sentence Example Input sentence this problem is an easy problem searchWord pro Output Explanation pro is prefix of problem which is the and the word in the sentence but we return as it s the minimal index Example Input sentence i am tired searchWord you Output Explanation you is not a prefix of any word in the sentence Constraints sentence length searchWord length sentence consists of lowercase English letters and spaces searchWord consists of lowercase English letters
excel sheet column title Given an integer columnNumber return its corresponding column title as it appears in an Excel sheet For example A B C Z AA AB Example Input columnNumber Output A Example Input columnNumber Output AB Example Input columnNumber Output ZY Constraints columnNumber
smallest subsequence of distinct characters Given a string s return the lexicographically smallest subsequence of s that contains all the distinct characters of s exactly once Example Input s bcabc Output abc Example Input s cbacdcbc Output acdb Constraints s length s consists of lowercase English letters Note This question is the same as https leetcode com problems remove duplicate letters
making file names unique Given an array of strings names of size n You will create n folders in your file system such that at the ith minute you will create a folder with the name names i Since two files cannot have the same name if you enter a folder name that was previously used the system will have a suffix addition to its name in the form of k where k is the smallest positive integer such that the obtained name remains unique Return an array of strings of length n where ans i is the actual name the system will assign to the ith folder when you create it Example Input names pes fifa gta pes Output pes fifa gta pes Explanation Let s see how the file system creates folder names pes not assigned before remains pes fifa not assigned before remains fifa gta not assigned before remains gta pes not assigned before remains pes Example Input names gta gta gta avalon Output gta gta gta avalon Explanation Let s see how the file system creates folder names gta not assigned before remains gta gta not assigned before remains gta gta the name is reserved system adds k since gta is also reserved systems put k it becomes gta avalon not assigned before remains avalon Example Input names onepiece onepiece onepiece onepiece onepiece Output onepiece onepiece onepiece onepiece onepiece Explanation When the last folder is created the smallest positive valid k is and it becomes onepiece Constraints names length names i length names i consists of lowercase English letters digits and or round brackets
permutations Given an array nums of distinct integers return all the possible permutations You can return the answer in any order Example Input nums Output Example Input nums Output Example Input nums Output Constraints nums length nums i All the integers of nums are unique
russian doll envelopes You are given a array of integers envelopes where envelopes i wi hi represents the width and the height of an envelope One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope s width and height Return the maximum number of envelopes you can Russian doll i e put one inside the other Note You cannot rotate an envelope Example Input envelopes Output Explanation The maximum number of envelopes you can Russian doll is Example Input envelopes Output Constraints envelopes length envelopes i length wi hi
node with highest edge score You are given a directed graph with n nodes labeled from to n where each node has exactly one outgoing edge The graph is represented by a given indexed integer array edges of length n where edges i indicates that there is a directed edge from node i to node edges i The edge score of a node i is defined as the sum of the labels of all the nodes that have an edge pointing to i Return the node with the highest edge score If multiple nodes have the same edge score return the node with the smallest index Example Input edges Output Explanation The nodes and have an edge pointing to node The edge score of node is The node has an edge pointing to node The edge score of node is The node has an edge pointing to node The edge score of node is The nodes and have an edge pointing to node The edge score of node is Node has the highest edge score so return Example Input edges Output Explanation The nodes and have an edge pointing to node The edge score of node is The nodes and have an edge pointing to node The edge score of node is Nodes and both have an edge score of Since node has a smaller index we return Constraints n edges length n edges i n edges i i
maximum length of a concatenated string with unique characters You are given an array of strings arr A string s is formed by the concatenation of a subsequence of arr that has unique characters Return the maximum possible length of s A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements Example Input arr un iq ue Output Explanation All the valid concatenations are un iq ue uniq un iq ique iq ue Maximum length is Example Input arr cha r act ers Output Explanation Possible longest valid concatenations are chaers cha ers and acters act ers Example Input arr abcdefghijklmnopqrstuvwxyz Output Explanation The only string in arr has all characters Constraints arr length arr i length arr i contains only lowercase English letters
convert a number to hexadecimal Given an integer num return a string representing its hexadecimal representation For negative integers s complement method is used All the letters in the answer string should be lowercase characters and there should not be any leading zeros in the answer except for the zero itself Note You are not allowed to use any built in library method to directly solve this problem Example Input num Output Example Input num Output ffffffff Constraints num
minimum operations to make the array k-increasing You are given a indexed array arr consisting of n positive integers and a positive integer k The array arr is called K increasing if arr i k arr i holds for every index i where k i n For example arr is K increasing for k because arr arr arr arr arr arr arr arr However the same arr is not K increasing for k because arr arr or k because arr arr In one operation you can choose an index i and change arr i into any positive integer Return the minimum number of operations required to make the array K increasing for the given k Example Input arr k Output Explanation For k the resultant array has to be non decreasing Some of the K increasing arrays that can be formed are All of them require operations It is suboptimal to change the array to for example because it would take operations It can be shown that we cannot make the array K increasing in less than operations Example Input arr k Output Explanation This is the same example as the one in the problem description Here for every index i where i arr i arr i Since the given array is already K increasing we do not need to perform any operations Example Input arr k Output Explanation Indices and are the only ones not satisfying arr i arr i for i One of the ways we can make the array K increasing is by changing arr to and arr to The array will now be Note that there can be other ways to make the array K increasing but none of them require less than operations Constraints arr length arr i k arr length
ugly number ii An ugly number is a positive integer whose prime factors are limited to and Given an integer n return the nth ugly number Example Input n Output Explanation is the sequence of the first ugly numbers Example Input n Output Explanation has no prime factors therefore all of its prime factors are limited to and Constraints n
greatest common divisor of strings For two strings s and t we say t divides s if and only if s t t i e t is concatenated with itself one or more times Given two strings and return the largest string x such that x divides both and Example Input ABCABC ABC Output ABC Example Input ABABAB ABAB Output AB Example Input LEET CODE Output Constraints length length and consist of English uppercase letters
rotate image You are given an n x n matrix representing an image rotate the image by degrees clockwise You have to rotate the image in place which means you have to modify the input matrix directly DO NOT allocate another matrix and do the rotation Example Input matrix Output Example Input matrix Output Constraints n matrix length matrix i length n matrix i j
binary search Given an array of integers nums which is sorted in ascending order and an integer target write a function to search target in nums If target exists then return its index Otherwise return You must write an algorithm with O log n runtime complexity Example Input nums target Output Explanation exists in nums and its index is Example Input nums target Output Explanation does not exist in nums so return Constraints nums length nums i target All the integers in nums are unique nums is sorted in ascending order
find pivot index Given an array of integers nums calculate the pivot index of this array The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index s right If the index is on the left edge of the array then the left sum is because there are no elements to the left This also applies to the right edge of the array Return the leftmost pivot index If no such index exists return Example Input nums Output Explanation The pivot index is Left sum nums nums nums Right sum nums nums Example Input nums Output Explanation There is no index that satisfies the conditions in the problem statement Example Input nums Output Explanation The pivot index is Left sum no elements to the left of index Right sum nums nums Constraints nums length nums i Note This question is the same as https leetcode com problems find the middle index in array
add two numbers ii You are given two non empty linked lists representing two non negative integers The most significant digit comes first and each of their nodes contains a single digit Add the two numbers and return the sum as a linked list You may assume the two numbers do not contain any leading zero except the number itself Example Input Output Example Input Output Example Input Output Constraints The number of nodes in each linked list is in the range Node val It is guaranteed that the list represents a number that does not have leading zeros Follow up Could you solve it without reversing the input lists
basic calculator Given a string s representing a valid expression implement a basic calculator to evaluate it and return the result of the evaluation Note You are not allowed to use any built in function which evaluates strings as mathematical expressions such as eval Example Input s Output Example Input s Output Example Input s Output Constraints s length s consists of digits and s represents a valid expression is not used as a unary operation i e and is invalid could be used as a unary operation i e and is valid There will be no two consecutive operators in the input Every number and running calculation will fit in a signed bit integer
3sum closest Given an integer array nums of length n and an integer target find three integers in nums such that the sum is closest to target Return the sum of the three integers You may assume that each input would have exactly one solution Example Input nums target Output Explanation The sum that is closest to the target is Example Input nums target Output Explanation The sum that is closest to the target is Constraints nums length nums i target
car fleet ii There are n cars traveling at different speeds in the same direction along a one lane road You are given an array cars of length n where cars i positioni speedi represents positioni is the distance between the ith car and the beginning of the road in meters It is guaranteed that positioni positioni speedi is the initial speed of the ith car in meters per second For simplicity cars can be considered as points moving along the number line Two cars collide when they occupy the same position Once a car collides with another car they unite and form a single car fleet The cars in the formed fleet will have the same position and the same speed which is the initial speed of the slowest car in the fleet Return an array answer where answer i is the time in seconds at which the ith car collides with the next car or if the car does not collide with the next car Answers within of the actual answers are accepted Example Input cars Output Explanation After exactly one second the first car will collide with the second car and form a car fleet with speed m s After exactly seconds the third car will collide with the fourth car and form a car fleet with speed m s Example Input cars Output Constraints cars length positioni speedi positioni positioni
maximum trailing zeros in a cornered path You are given a integer array grid of size m x n where each cell contains a positive integer A cornered path is defined as a set of adjacent cells with at most one turn More specifically the path should exclusively move either horizontally or vertically up to the turn if there is one without returning to a previously visited cell After the turn the path will then move exclusively in the alternate direction move vertically if it moved horizontally and vice versa also without returning to a previously visited cell The product of a path is defined as the product of all the values in the path Return the maximum number of trailing zeros in the product of a cornered path found in grid Note Horizontal movement means moving in either the left or right direction Vertical movement means moving in either the up or down direction Example Input grid Output Explanation The grid on the left shows a valid cornered path It has a product of which has trailing zeros It can be shown that this is the maximum trailing zeros in the product of a cornered path The grid in the middle is not a cornered path as it has more than one turn The grid on the right is not a cornered path as it requires a return to a previously visited cell Example Input grid Output Explanation The grid is shown in the figure above There are no cornered paths in the grid that result in a product with a trailing zero Constraints m grid length n grid i length m n m n grid i j
insert delete getrandom o(1) - duplicates allowed RandomizedCollection is a data structure that contains a collection of numbers possibly duplicates i e a multiset It should support inserting and removing specific elements and also reporting a random element Implement the RandomizedCollection class RandomizedCollection Initializes the empty RandomizedCollection object bool insert int val Inserts an item val into the multiset even if the item is already present Returns true if the item is not present false otherwise bool remove int val Removes an item val from the multiset if present Returns true if the item is present false otherwise Note that if val has multiple occurrences in the multiset we only remove one of them int getRandom Returns a random element from the current multiset of elements The probability of each element being returned is linearly related to the number of the same values the multiset contains You must implement the functions of the class such that each function works on average O time complexity Note The test cases are generated such that getRandom will only be called if there is at least one item in the RandomizedCollection Example Input RandomizedCollection insert insert insert getRandom remove getRandom Output null true false true true Explanation RandomizedCollection randomizedCollection new RandomizedCollection randomizedCollection insert return true since the collection does not contain Inserts into the collection randomizedCollection insert return false since the collection contains Inserts another into the collection Collection now contains randomizedCollection insert return true since the collection does not contain Inserts into the collection Collection now contains randomizedCollection getRandom getRandom should return with probability or return with probability randomizedCollection remove return true since the collection contains Removes from the collection Collection now contains randomizedCollection getRandom getRandom should return or both equally likely Constraints val At most calls in total will be made to insert remove and getRandom There will be at least one element in the data structure when getRandom is called
shuffle string You are given a string s and an integer array indices of the same length The string s will be shuffled such that the character at the ith position moves to indices i in the shuffled string Return the shuffled string Example Input s codeleet indices Output leetcode Explanation As shown codeleet becomes leetcode after shuffling Example Input s abc indices Output abc Explanation After shuffling each character remains in its position Constraints s length indices length n n s consists of only lowercase English letters indices i n All values of indices are unique
cells with odd values in a matrix There is an m x n matrix that is initialized to all s There is also a array indices where each indices i ri ci represents a indexed location to perform some increment operations on the matrix For each location indices i do both of the following Increment all the cells on row ri Increment all the cells on column ci Given m n and indices return the number of odd valued cells in the matrix after applying the increment to all locations in indices Example Input m n indices Output Explanation Initial matrix After applying first increment it becomes The final matrix is which contains odd numbers Example Input m n indices Output Explanation Final matrix There are no odd numbers in the final matrix Constraints m n indices length ri m ci n Follow up Could you solve this in O n m indices length time with only O n m extra space
check if string is transformable with substring sort operations Given two strings s and t transform string s into string t using the following operation any number of times Choose a non empty substring in s and sort it in place so the characters are in ascending order For example applying the operation on the underlined substring in results in Return true if it is possible to transform s into t Otherwise return false A substring is a contiguous sequence of characters within a string Example Input s t Output true Explanation You can transform s into t using the following sort operations from index to from index to Example Input s t Output true Explanation You can transform s into t using the following sort operations Example Input s t Output false Constraints s length t length s length s and t consist of only digits
number of ways to paint n × 3 grid You have a grid of size n x and you want to paint each cell of the grid with exactly one of the three colors Red Yellow or Green while making sure that no two adjacent cells have the same color i e no two cells that share vertical or horizontal sides have the same color Given n the number of rows of the grid return the number of ways you can paint this grid As the answer may grow large the answer must be computed modulo Example Input n Output Explanation There are possible way to paint the grid as shown Example Input n Output Constraints n grid length n
rank teams by votes In a special ranking system each voter gives a rank from highest to lowest to all teams participating in the competition The ordering of teams is decided by who received the most position one votes If two or more teams tie in the first position we consider the second position to resolve the conflict if they tie again we continue this process until the ties are resolved If two or more teams are still tied after considering all positions we rank them alphabetically based on their team letter You are given an array of strings votes which is the votes of all voters in the ranking systems Sort all teams according to the ranking system described above Return a string of all teams sorted by the ranking system Example Input votes ABC ACB ABC ACB ACB Output ACB Explanation Team A was ranked first place by voters No other team was voted as first place so team A is the first team Team B was ranked second by voters and ranked third by voters Team C was ranked second by voters and ranked third by voters As most of the voters ranked C second team C is the second team and team B is the third Example Input votes WXYZ XYZW Output XWYZ Explanation X is the winner due to the tie breaking rule X has the same votes as W for the first position but X has one vote in the second position while W does not have any votes in the second position Example Input votes ZMNAGUEDSJYLBOPHRQICWFXTVK Output ZMNAGUEDSJYLBOPHRQICWFXTVK Explanation Only one voter so their votes are used for the ranking Constraints votes length votes i length votes i length votes j length for i j votes length votes i j is an English uppercase letter All characters of votes i are unique All the characters that occur in votes also occur in votes j where j votes length
using a robot to print the lexicographically smallest string You are given a string s and a robot that currently holds an empty string t Apply one of the following operations until s and t are both empty Remove the first character of a string s and give it to the robot The robot will append this character to the string t Remove the last character of a string t and give it to the robot The robot will write this character on paper Return the lexicographically smallest string that can be written on the paper Example Input s zza Output azz Explanation Let p denote the written string Initially p s zza t Perform first operation three times p s t zza Perform second operation three times p azz s t Example Input s bac Output abc Explanation Let p denote the written string Perform first operation twice p s c t ba Perform second operation twice p ab s c t Perform first operation p ab s t c Perform second operation p abc s t Example Input s bdda Output addb Explanation Let p denote the written string Initially p s bdda t Perform first operation four times p s t bdda Perform second operation four times p addb s t Constraints s length s consists of only English lowercase letters
minimum string length after removing substrings You are given a string s consisting only of uppercase English letters You can apply some operations to this string where in one operation you can remove any occurrence of one of the substrings AB or CD from s Return the minimum possible length of the resulting string that you can obtain Note that the string concatenates after removing the substring and could produce new AB or CD substrings Example Input s ABFCACDB Output Explanation We can do the following operations Remove the substring ABFCACDB so s FCACDB Remove the substring FCACDB so s FCAB Remove the substring FCAB so s FC So the resulting length of the string is It can be shown that it is the minimum length that we can obtain Example Input s ACBBD Output Explanation We cannot do any operations on the string so the length remains the same Constraints s length s consists only of uppercase English letters
cracking the safe There is a safe protected by a password The password is a sequence of n digits where each digit can be in the range k The safe has a peculiar way of checking the password When you enter in a sequence it checks the most recent n digits that were entered each time you type a digit For example the correct password is and you enter in After typing the most recent digits is which is incorrect After typing the most recent digits is which is incorrect After typing the most recent digits is which is incorrect After typing the most recent digits is which is incorrect After typing the most recent digits is which is incorrect After typing the most recent digits is which is correct and the safe unlocks Return any string of minimum length that will unlock the safe at some point of entering it Example Input n k Output Explanation The password is a single digit so enter each digit would also unlock the safe Example Input n k Output Explanation For each possible password is typed in starting from the digit is typed in starting from the digit is typed in starting from the digit is typed in starting from the digit Thus will unlock the safe and would also unlock the safe Constraints n k kn
find valid matrix given row and column sums You are given two arrays rowSum and colSum of non negative integers where rowSum i is the sum of the elements in the ith row and colSum j is the sum of the elements of the jth column of a matrix In other words you do not know the elements of the matrix but you do know the sums of each row and column Find any matrix of non negative integers of size rowSum length x colSum length that satisfies the rowSum and colSum requirements Return a array representing any matrix that fulfills the requirements It s guaranteed that at least one matrix that fulfills the requirements exists Example Input rowSum colSum Output Explanation row rowSum row rowSum column colSum column colSum The row and column sums match and all matrix elements are non negative Another possible matrix is Example Input rowSum colSum Output Constraints rowSum length colSum length rowSum i colSum i sum rowSum sum colSum
sum of unique elements You are given an integer array nums The unique elements of an array are the elements that appear exactly once in the array Return the sum of all the unique elements of nums Example Input nums Output Explanation The unique elements are and the sum is Example Input nums Output Explanation There are no unique elements and the sum is Example Input nums Output Explanation The unique elements are and the sum is Constraints nums length nums i
elimination game You have a list arr of all integers in the range n sorted in a strictly increasing order Apply the following algorithm on arr Starting from left to right remove the first number and every other number afterward until you reach the end of the list Repeat the previous step again but this time from right to left remove the rightmost number and every other number from the remaining numbers Keep repeating the steps again alternating left to right and right to left until a single number remains Given the integer n return the last number that remains in arr Example Input n Output Explanation arr arr arr arr Example Input n Output Constraints n
simplify path Given a string path which is an absolute path starting with a slash to a file or directory in a Unix style file system convert it to the simplified canonical path In a Unix style file system a period refers to the current directory a double period refers to the directory up a level and any multiple consecutive slashes i e are treated as a single slash For this problem any other format of periods such as are treated as file directory names The canonical path should have the following format The path starts with a single slash Any two directories are separated by a single slash The path does not end with a trailing The path only contains the directories on the path from the root directory to the target file or directory i e no period or double period Return the simplified canonical path Example Input path home Output home Explanation Note that there is no trailing slash after the last directory name Example Input path Output Explanation Going one level up from the root directory is a no op as the root level is the highest level you can go Example Input path home foo Output home foo Explanation In the canonical path multiple consecutive slashes are replaced by a single one Constraints path length path consists of English letters digits period slash or path is a valid absolute Unix path
count pairs of nodes You are given an undirected graph defined by an integer n the number of nodes and a integer array edges the edges in the graph where edges i ui vi indicates that there is an undirected edge between ui and vi You are also given an integer array queries Let incident a b be defined as the number of edges that are connected to either node a or b The answer to the jth query is the number of pairs of nodes a b that satisfy both of the following conditions a b incident a b queries j Return an array answers such that answers length queries length and answers j is the answer of the jth query Note that there can be multiple edges between the same two nodes Example Input n edges queries Output Explanation The calculations for incident a b are shown in the table above The answers for each of the queries are as follows answers All the pairs have an incident a b value greater than answers All the pairs except have an incident a b value greater than Example Input n edges queries Output Constraints n edges length ui vi n ui vi queries length queries j edges length
max points on a line Given an array of points where points i xi yi represents a point on the X Y plane return the maximum number of points that lie on the same straight line Example Input points Output Example Input points Output Constraints points length points i length xi yi All the points are unique
binary tree level order traversal Given the root of a binary tree return the level order traversal of its nodes values i e from left to right level by level Example Input root null null Output Example Input root Output Example Input root Output Constraints The number of nodes in the tree is in the range Node val
can convert string in k moves Given two strings s and t your goal is to convert s into t in k moves or less During the ith i k move you can Choose any index j indexed from s such that j s length and j has not been chosen in any previous move and shift the character at that index i times Do nothing Shifting a character means replacing it by the next letter in the alphabet wrapping around so that z becomes a Shifting a character by i means applying the shift operations i times Remember that any index j can be picked at most once Return true if it s possible to convert s into t in no more than k moves otherwise return false Example Input s input t ouput k Output true Explanation In the move we shift i times to get o And in the move we shift n to get u Example Input s abc t bcd k Output false Explanation We need to shift each character in s one time to convert it into t We can shift a to b during the move However there is no way to shift the other characters in the remaining moves to obtain t from s Example Input s aab t bbb k Output true Explanation In the move we shift the first a time to get b In the move we shift the second a times to get b Constraints s length t length k s t contain only lowercase English letters
nim game You are playing the following Nim Game with your friend Initially there is a heap of stones on the table You and your friend will alternate taking turns and you go first On each turn the person whose turn it is will remove to stones from the heap The one who removes the last stone is the winner Given n the number of stones in the heap return true if you can win the game assuming both you and your friend play optimally otherwise return false Example Input n Output false Explanation These are the possible outcomes You remove stone Your friend removes stones including the last stone Your friend wins You remove stones Your friend removes stones including the last stone Your friend wins You remove stones Your friend removes the last stone Your friend wins In all outcomes your friend wins Example Input n Output true Example Input n Output true Constraints n
longest uploaded prefix You are given a stream of n videos each represented by a distinct number from to n that you need to upload to a server You need to implement a data structure that calculates the length of the longest uploaded prefix at various points in the upload process We consider i to be an uploaded prefix if all videos in the range to i inclusive have been uploaded to the server The longest uploaded prefix is the maximum value of i that satisfies this definition Implement the LUPrefix class LUPrefix int n Initializes the object for a stream of n videos void upload int video Uploads video to the server int longest Returns the length of the longest uploaded prefix defined above Example Input LUPrefix upload longest upload longest upload longest Output null null null null Explanation LUPrefix server new LUPrefix Initialize a stream of videos server upload Upload video server longest Since video has not been uploaded yet there is no prefix So we return server upload Upload video server longest The prefix is the longest uploaded prefix so we return server upload Upload video server longest The prefix is the longest uploaded prefix so we return Constraints n video n All values of video are distinct At most calls in total will be made to upload and longest At least one call will be made to longest
vertical order traversal of a binary tree Given the root of a binary tree calculate the vertical order traversal of the binary tree For each node at position row col its left and right children will be at positions row col and row col respectively The root of the tree is at The vertical order traversal of a binary tree is a list of top to bottom orderings for each column index starting from the leftmost column and ending on the rightmost column There may be multiple nodes in the same row and same column In such a case sort these nodes by their values Return the vertical order traversal of the binary tree Example Input root null null Output Explanation Column Only node is in this column Column Nodes and are in this column in that order from top to bottom Column Only node is in this column Column Only node is in this column Example Input root Output Explanation Column Only node is in this column Column Only node is in this column Column Nodes and are in this column is at the top so it comes first and are at the same position so we order them by their value before Column Only node is in this column Column Only node is in this column Example Input root Output Explanation This case is the exact same as example but with nodes and swapped Note that the solution remains the same since and are in the same location and should be ordered by their values Constraints The number of nodes in the tree is in the range Node val
reverse odd levels of binary tree Given the root of a perfect binary tree reverse the node values at each odd level of the tree For example suppose the node values at level are then it should become Return the root of the reversed tree A binary tree is perfect if all parent nodes have two children and all leaves are on the same level The level of a node is the number of edges along the path between it and the root node Example Input root Output Explanation The tree has only one odd level The nodes at level are respectively which are reversed and become Example Input root Output Explanation The nodes at level are which are reversed and become Example Input root Output Explanation The odd levels have non zero values The nodes at level were and are after the reversal The nodes at level were and are after the reversal Constraints The number of nodes in the tree is in the range Node val root is a perfect binary tree
count of smaller numbers after self Given an integer array nums return an integer array counts where counts i is the number of smaller elements to the right of nums i Example Input nums Output Explanation To the right of there are smaller elements and To the right of there is only smaller element To the right of there is smaller element To the right of there is smaller element Example Input nums Output Example Input nums Output Constraints nums length nums i
reverse prefix of word Given a indexed string word and a character ch reverse the segment of word that starts at index and ends at the index of the first occurrence of ch inclusive If the character ch does not exist in word do nothing For example if word abcdefd and ch d then you should reverse the segment that starts at and ends at inclusive The resulting string will be dcbaefd Return the resulting string Example Input word abcdefd ch d Output dcbaefd Explanation The first occurrence of d is at index Reverse the part of word from to inclusive the resulting string is dcbaefd Example Input word xyxzxe ch z Output zxyxxe Explanation The first and only occurrence of z is at index Reverse the part of word from to inclusive the resulting string is zxyxxe Example Input word abcd ch z Output abcd Explanation z does not exist in word You should not do any reverse operation the resulting string is abcd Constraints word length word consists of lowercase English letters ch is a lowercase English letter
design a food rating system Design a food rating system that can do the following Modify the rating of a food item listed in the system Return the highest rated food item for a type of cuisine in the system Implement the FoodRatings class FoodRatings String foods String cuisines int ratings Initializes the system The food items are described by foods cuisines and ratings all of which have a length of n foods i is the name of the ith food cuisines i is the type of cuisine of the ith food and ratings i is the initial rating of the ith food void changeRating String food int newRating Changes the rating of the food item with the name food String highestRated String cuisine Returns the name of the food item that has the highest rating for the given type of cuisine If there is a tie return the item with the lexicographically smaller name Note that a string x is lexicographically smaller than string y if x comes before y in dictionary order that is either x is a prefix of y or if i is the first position such that x i y i then x i comes before y i in alphabetic order Example Input FoodRatings highestRated highestRated changeRating highestRated changeRating highestRated kimchi miso sushi moussaka ramen bulgogi korean japanese japanese greek japanese korean korean japanese sushi japanese ramen japanese Output null kimchi ramen null sushi null ramen Explanation FoodRatings foodRatings new FoodRatings kimchi miso sushi moussaka ramen bulgogi korean japanese japanese greek japanese korean foodRatings highestRated korean return kimchi kimchi is the highest rated korean food with a rating of foodRatings highestRated japanese return ramen ramen is the highest rated japanese food with a rating of foodRatings changeRating sushi sushi now has a rating of foodRatings highestRated japanese return sushi sushi is the highest rated japanese food with a rating of foodRatings changeRating ramen ramen now has a rating of foodRatings highestRated japanese return ramen Both sushi and ramen have a rating of However ramen is lexicographically smaller than sushi Constraints n n foods length cuisines length ratings length foods i length cuisines i length foods i cuisines i consist of lowercase English letters ratings i All the strings in foods are distinct food will be the name of a food item in the system across all calls to changeRating cuisine will be a type of cuisine of at least one food item in the system across all calls to highestRated At most calls in total will be made to changeRating and highestRated
recover a tree from preorder traversal We run a preorder depth first search DFS on the root of a binary tree At each node in this traversal we output D dashes where D is the depth of this node then we output the value of this node If the depth of a node is D the depth of its immediate child is D The depth of the root node is If a node has only one child that child is guaranteed to be the left child Given the output traversal of this traversal recover the tree and return its root Example Input traversal Output Example Input traversal Output null null null Example Input traversal Output null Constraints The number of nodes in the original tree is in the range Node val
minimum remove to make valid parentheses Given a string s of and lowercase English characters Your task is to remove the minimum number of parentheses or in any positions so that the resulting parentheses string is valid and return any valid string Formally a parentheses string is valid if and only if It is the empty string contains only lowercase characters or It can be written as AB A concatenated with B where A and B are valid strings or It can be written as A where A is a valid string Example Input s lee t c o de Output lee t c o de Explanation lee t co de lee t c ode would also be accepted Example Input s a b c d Output ab c d Example Input s Output Explanation An empty string is also valid Constraints s length s i is either or lowercase English letter
maximum strictly increasing cells in a matrix Given a indexed m x n integer matrix mat you can select any cell in the matrix as your starting cell From the starting cell you can move to any other cell in the same row or column but only if the value of the destination cell is strictly greater than the value of the current cell You can repeat this process as many times as possible moving from cell to cell until you can no longer make any moves Your task is to find the maximum number of cells that you can visit in the matrix by starting from some cell Return an integer denoting the maximum number of cells that can be visited Example Input mat Output Explanation The image shows how we can visit cells starting from row column It can be shown that we cannot visit more than cells no matter where we start from so the answer is Example Input mat Output Explanation Since the cells must be strictly increasing we can only visit one cell in this example Example Input mat Output Explanation The image above shows how we can visit cells starting from row column It can be shown that we cannot visit more than cells no matter where we start from so the answer is Constraints m mat length n mat i length m n m n mat i j
match substring after replacement You are given two strings s and sub You are also given a character array mappings where mappings i oldi newi indicates that you may perform the following operation any number of times Replace a character oldi of sub with newi Each character in sub cannot be replaced more than once Return true if it is possible to make sub a substring of s by replacing zero or more characters according to mappings Otherwise return false A substring is a contiguous non empty sequence of characters within a string Example Input s sub leet mappings e t t Output true Explanation Replace the first e in sub with and t in sub with Now sub is a substring of s so we return true Example Input s fooleetbar sub mappings o Output false Explanation The string is not a substring of s and no replacements can be made Note that we cannot replace with o Example Input s sub leetd mappings e t t d b p b Output true Explanation Replace the first and second e in sub with and d in sub with b Now sub is a substring of s so we return true Constraints sub length s length mappings length mappings i length oldi newi s and sub consist of uppercase and lowercase English letters and digits oldi and newi are either uppercase or lowercase English letters or digits
permutations ii Given a collection of numbers nums that might contain duplicates return all possible unique permutations in any order Example Input nums Output Example Input nums Output Constraints nums length nums i
shortest common supersequence Given two strings and return the shortest string that has both and as subsequences If there are multiple valid strings return any of them A string s is a subsequence of string t if deleting some number of characters from t possibly results in the string s Example Input abac cab Output cabac Explanation abac is a subsequence of cabac because we can delete the first c cab is a subsequence of cabac because we can delete the last ac The answer provided is the shortest such string that satisfies these properties Example Input aaaaaaaa aaaaaaaa Output aaaaaaaa Constraints length length and consist of lowercase English letters
remove element Given an integer array nums and an integer val remove all occurrences of val in nums in place The order of the elements may be changed Then return the number of elements in nums which are not equal to val Consider the number of elements in nums which are not equal to val be k to get accepted you need to do the following things Change the array nums such that the first k elements of nums contain the elements which are not equal to val The remaining elements of nums are not important as well as the size of nums Return k Custom Judge The judge will test your solution with the following code int nums Input array int val Value to remove int expectedNums The expected answer with correct length It is sorted with no values equaling val int k removeElement nums val Calls your implementation assert k expectedNums length sort nums k Sort the first k elements of nums for int i i actualLength i assert nums i expectedNums i If all assertions pass then your solution will be accepted Example Input nums val Output nums Explanation Your function should return k with the first two elements of nums being It does not matter what you leave beyond the returned k hence they are underscores Example Input nums val Output nums Explanation Your function should return k with the first five elements of nums containing and Note that the five elements can be returned in any order It does not matter what you leave beyond the returned k hence they are underscores Constraints nums length nums i val
n-ary tree postorder traversal Given the root of an n ary tree return the postorder traversal of its nodes values Nary Tree input serialization is represented in their level order traversal Each group of children is separated by the null value See examples Example Input root null null Output Example Input root null null null null null null null null null null null Output Constraints The number of nodes in the tree is in the range Node val The height of the n ary tree is less than or equal to Follow up Recursive solution is trivial could you do it iteratively
expressive words Sometimes people repeat letters to represent extra feeling For example hello heeellooo hi hiiii In these strings like heeellooo we have groups of adjacent letters that are all the same h eee ll ooo You are given a string s and an array of query strings words A query word is stretchy if it can be made to be equal to s by any number of applications of the following extension operation choose a group consisting of characters c and add some number of characters c to the group so that the size of the group is three or more For example starting with hello we could do an extension on the group o to get hellooo but we cannot get helloo since the group oo has a size less than three Also we could do another extension like ll lllll to get helllllooo If s helllllooo then the query word hello would be stretchy because of these two extension operations query hello hellooo helllllooo s Return the number of query strings that are stretchy Example Input s heeellooo words hello hi helo Output Explanation We can extend e and o in the word hello to get heeellooo We can t extend helo to get heeellooo because the group ll is not size or more Example Input s zzzzzyyyyy words zzyy zy zyy Output Constraints s length words length words i length s and words i consist of lowercase letters
gcd sort of an array You are given an integer array nums and you can perform the following operation any number of times on nums Swap the positions of two elements nums i and nums j if gcd nums i nums j where gcd nums i nums j is the greatest common divisor of nums i and nums j Return true if it is possible to sort nums in non decreasing order using the above swap method or false otherwise Example Input nums Output true Explanation We can sort by performing the following operations Swap and because gcd nums Swap and because gcd nums Example Input nums Output false Explanation It is impossible to sort the array because cannot be swapped with any other element Example Input nums Output true We can sort by performing the following operations Swap and because gcd nums Swap and because gcd nums Swap and because gcd nums Constraints nums length nums i
maximum number of removable characters You are given two strings s and p where p is a subsequence of s You are also given a distinct indexed integer array removable containing a subset of indices of s s is also indexed You want to choose an integer k k removable length such that after removing k characters from s using the first k indices in removable p is still a subsequence of s More formally you will mark the character at s removable i for each i k then remove all marked characters and check if p is still a subsequence Return the maximum k you can choose such that p is still a subsequence of s after the removals A subsequence of a string is a new string generated from the original string with some characters can be none deleted without changing the relative order of the remaining characters Example Input s abcacb p ab removable Output Explanation After removing the characters at indices and abcacb becomes accb ab is a subsequence of accb If we remove the characters at indices and abcacb becomes ccb and ab is no longer a subsequence Hence the maximum k is Example Input s abcbddddd p abcd removable Output Explanation After removing the character at index abcbddddd becomes abcddddd abcd is a subsequence of abcddddd Example Input s abcab p abc removable Output Explanation If you remove the first index in the array removable abc is no longer a subsequence Constraints p length s length removable length s length removable i s length p is a subsequence of s s and p both consist of lowercase English letters The elements in removable are distinct
longest nice subarray You are given an array nums consisting of positive integers We call a subarray of nums nice if the bitwise AND of every pair of elements that are in different positions in the subarray is equal to Return the length of the longest nice subarray A subarray is a contiguous part of an array Note that subarrays of length are always considered nice Example Input nums Output Explanation The longest nice subarray is This subarray satisfies the conditions AND AND AND It can be proven that no longer nice subarray can be obtained so we return Example Input nums Output Explanation The length of the longest nice subarray is Any subarray of length can be chosen Constraints nums length nums i
design linked list Design your implementation of the linked list You can choose to use a singly or doubly linked list A node in a singly linked list should have two attributes val and next val is the value of the current node and next is a pointer reference to the next node If you want to use the doubly linked list you will need one more attribute prev to indicate the previous node in the linked list Assume all nodes in the linked list are indexed Implement the MyLinkedList class MyLinkedList Initializes the MyLinkedList object int get int index Get the value of the indexth node in the linked list If the index is invalid return void addAtHead int val Add a node of value val before the first element of the linked list After the insertion the new node will be the first node of the linked list void addAtTail int val Append a node of value val as the last element of the linked list void addAtIndex int index int val Add a node of value val before the indexth node in the linked list If index equals the length of the linked list the node will be appended to the end of the linked list If index is greater than the length the node will not be inserted void deleteAtIndex int index Delete the indexth node in the linked list if the index is valid Example Input MyLinkedList addAtHead addAtTail addAtIndex get deleteAtIndex get Output null null null null null Explanation MyLinkedList myLinkedList new MyLinkedList myLinkedList addAtHead myLinkedList addAtTail myLinkedList addAtIndex linked list becomes myLinkedList get return myLinkedList deleteAtIndex now the linked list is myLinkedList get return Constraints index val Please do not use the built in LinkedList library At most calls will be made to get addAtHead addAtTail addAtIndex and deleteAtIndex
find the minimum number of fibonacci numbers whose sum is k Given an integer k return the minimum number of Fibonacci numbers whose sum is equal to k The same Fibonacci number can be used multiple times The Fibonacci numbers are defined as Fn Fn Fn for n It is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to k Example Input k Output Explanation The Fibonacci numbers are For k we can use Example Input k Output Explanation For k we can use Example Input k Output Explanation For k we can use Constraints k
maximum path quality of a graph There is an undirected graph with n nodes numbered from to n inclusive You are given a indexed integer array values where values i is the value of the ith node You are also given a indexed integer array edges where each edges j uj vj timej indicates that there is an undirected edge between the nodes uj and vj and it takes timej seconds to travel between the two nodes Finally you are given an integer maxTime A valid path in the graph is any path that starts at node ends at node and takes at most maxTime seconds to complete You may visit the same node multiple times The quality of a valid path is the sum of the values of the unique nodes visited in the path each node s value is added at most once to the sum Return the maximum quality of a valid path Note There are at most four edges connected to each node Example Input values edges maxTime Output Explanation One possible path is The total time taken is The nodes visited are and giving a maximal path quality of Example Input values edges maxTime Output Explanation One possible path is The total time taken is The nodes visited are and giving a maximal path quality of Example Input values edges maxTime Output Explanation One possible path is The total time taken is The nodes visited are and giving a maximal path quality of Constraints n values length n values i edges length edges j length uj vj n timej maxTime All the pairs uj vj are unique There are at most four edges connected to each node The graph may not be connected
maximum difference between increasing elements Given a indexed integer array nums of size n find the maximum difference between nums i and nums j i e nums j nums i such that i j n and nums i nums j Return the maximum difference If no such i and j exists return Example Input nums Output Explanation The maximum difference occurs with i and j nums j nums i Note that with i and j the difference nums j nums i but i j so it is not valid Example Input nums Output Explanation There is no i and j such that i j and nums i nums j Example Input nums Output Explanation The maximum difference occurs with i and j nums j nums i Constraints n nums length n nums i
longest univalue path Given the root of a binary tree return the length of the longest path where each node in the path has the same value This path may or may not pass through the root The length of the path between two nodes is represented by the number of edges between them Example Input root null Output Explanation The shown image shows that the longest path of the same value i e Example Input root null Output Explanation The shown image shows that the longest path of the same value i e Constraints The number of nodes in the tree is in the range Node val The depth of the tree will not exceed
stone game iv Alice and Bob take turns playing a game with Alice starting first Initially there are n stones in a pile On each player s turn that player makes a move consisting of removing any non zero square number of stones in the pile Also if a player cannot make a move he she loses the game Given a positive integer n return true if and only if Alice wins the game otherwise return false assuming both players play optimally Example Input n Output true Explanation Alice can remove stone winning the game because Bob doesn t have any moves Example Input n Output false Explanation Alice can only remove stone after that Bob removes the last one winning the game Example Input n Output true Explanation n is already a perfect square Alice can win with one move removing stones Constraints n
delete leaves with a given value Given a binary tree root and an integer target delete all the leaf nodes with value target Note that once you delete a leaf node with value target if its parent node becomes a leaf node and has the value target it should also be deleted you need to continue doing that until you cannot Example Input root null target Output null null Explanation Leaf nodes in green with value target are removed Picture in left After removing new nodes become leaf nodes with value target Picture in center Example Input root target Output null null Example Input root null null target Output Explanation Leaf nodes in green with value target are removed at each step Constraints The number of nodes in the tree is in the range Node val target
construct k palindrome strings Given a string s and an integer k return true if you can use all the characters in s to construct k palindrome strings or false otherwise Example Input s annabelle k Output true Explanation You can construct two palindromes using all characters in s Some possible constructions anna elble anbna elle anellena b Example Input s leetcode k Output false Explanation It is impossible to construct palindromes using all the characters of s Example Input s true k Output true Explanation The only possible solution is to put each character in a separate string Constraints s length s consists of lowercase English letters k
build array from permutation Given a zero based permutation nums indexed build an array ans of the same length where ans i nums nums i for each i nums length and return it A zero based permutation nums is an array of distinct integers from to nums length inclusive Example Input nums Output Explanation The array ans is built as follows ans nums nums nums nums nums nums nums nums nums nums nums nums nums nums nums nums nums nums Example Input nums Output Explanation The array ans is built as follows ans nums nums nums nums nums nums nums nums nums nums nums nums nums nums nums nums nums nums Constraints nums length nums i nums length The elements in nums are distinct Follow up Can you solve it without using an extra space i e O memory
maximum number of balls in a box You are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive i e n highLimit lowLimit and an infinite number of boxes numbered from to infinity Your job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball s number For example the ball number will be put in the box number and the ball number will be put in the box number Given two integers lowLimit and highLimit return the number of balls in the box with the most balls Example Input lowLimit highLimit Output Explanation Box Number Ball Count Box has the most number of balls with balls Example Input lowLimit highLimit Output Explanation Box Number Ball Count Boxes and have the most number of balls with balls in each Example Input lowLimit highLimit Output Explanation Box Number Ball Count Box has the most number of balls with balls Constraints lowLimit highLimit
exchange seats SQL Schema Table Seat Column Name Type id int student varchar id is the primary key column for this table Each row of this table indicates the name and the ID of a student id is a continuous increment Write an SQL query to swap the seat id of every two consecutive students If the number of students is odd the id of the last student is not swapped Return the result table ordered by id in ascending order The query result format is in the following example Example Input Seat table id student Abbot Doris Emerson Green Jeames Output id student Doris Abbot Green Emerson Jeames Explanation Note that if the number of students is odd there is no need to change the last one s seat
car pooling There is a car with capacity empty seats The vehicle only drives east i e it cannot turn around and drive west You are given the integer capacity and an array trips where trips i numPassengersi fromi toi indicates that the ith trip has numPassengersi passengers and the locations to pick them up and drop them off are fromi and toi respectively The locations are given as the number of kilometers due east from the car s initial location Return true if it is possible to pick up and drop off all passengers for all the given trips or false otherwise Example Input trips capacity Output false Example Input trips capacity Output true Constraints trips length trips i length numPassengersi fromi toi capacity
longest consecutive sequence Given an unsorted array of integers nums return the length of the longest consecutive elements sequence You must write an algorithm that runs in O n time Example Input nums Output Explanation The longest consecutive elements sequence is Therefore its length is Example Input nums Output Constraints nums length nums i
reshape the matrix In MATLAB there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data You are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix The reshaped matrix should be filled with all the elements of the original matrix in the same row traversing order as they were If the reshape operation with given parameters is possible and legal output the new reshaped matrix Otherwise output the original matrix Example Input mat r c Output Example Input mat r c Output Constraints m mat length n mat i length m n mat i j r c
brick wall There is a rectangular brick wall in front of you with n rows of bricks The ith row has some number of bricks each of the same height i e one unit but they can be of different widths The total width of each row is the same Draw a vertical line from the top to the bottom and cross the least bricks If your line goes through the edge of a brick then the brick is not considered as crossed You cannot draw a line just along one of the two vertical edges of the wall in which case the line will obviously cross no bricks Given the array wall that contains the information about the wall return the minimum number of crossed bricks after drawing such a vertical line Example Input wall Output Example Input wall Output Constraints n wall length n wall i length sum wall i length sum wall i is the same for each row i wall i j
cat and mouse ii A game is played by a cat and a mouse named Cat and Mouse The environment is represented by a grid of size rows x cols where each element is a wall floor player Cat Mouse or food Players are represented by the characters C Cat M Mouse Floors are represented by the character and can be walked on Walls are represented by the character and cannot be walked on Food is represented by the character F and can be walked on There is only one of each character C M and F in grid Mouse and Cat play according to the following rules Mouse moves first then they take turns to move During each turn Cat and Mouse can jump in one of the four directions left right up down They cannot jump over the wall nor outside of the grid catJump mouseJump are the maximum lengths Cat and Mouse can jump at a time respectively Cat and Mouse can jump less than the maximum length Staying in the same position is allowed Mouse can jump over Cat The game can end in ways If Cat occupies the same position as Mouse Cat wins If Cat reaches the food first Cat wins If Mouse reaches the food first Mouse wins If Mouse cannot get to the food within turns Cat wins Given a rows x cols matrix grid and two integers catJump and mouseJump return true if Mouse can win the game if both Cat and Mouse play optimally otherwise return false Example Input grid F C M catJump mouseJump Output true Explanation Cat cannot catch Mouse on its turn nor can it get the food before Mouse Example Input grid M C F catJump mouseJump Output true Example Input grid M C F catJump mouseJump Output false Constraints rows grid length cols grid i length rows cols grid i j consist only of characters C M F and There is only one of each character C M and F in grid catJump mouseJump
check if numbers are ascending in a sentence A sentence is a list of tokens separated by a single space with no leading or trailing spaces Every token is either a positive number consisting of digits with no leading zeros or a word consisting of lowercase English letters For example a puppy has eyes legs is a sentence with seven tokens and are numbers and the other tokens such as puppy are words Given a string s representing a sentence you need to check if all the numbers in s are strictly increasing from left to right i e other than the last number each number is strictly smaller than the number on its right in s Return true if so or false otherwise Example Input s box has blue red green and yellow marbles Output true Explanation The numbers in s are They are strictly increasing from left to right Example Input s hello world x Output false Explanation The numbers in s are They are not strictly increasing Example Input s sunset is at pm overnight lows will be in the low and s Output false Explanation The numbers in s are They are not strictly increasing Constraints s length s consists of lowercase English letters spaces and digits from to inclusive The number of tokens in s is between and inclusive The tokens in s are separated by a single space There are at least two numbers in s Each number in s is a positive number less than with no leading zeros s contains no leading or trailing spaces
longest valid parentheses Given a string containing just the characters and return the length of the longest valid well formed parentheses substring Example Input s Output Explanation The longest valid parentheses substring is Example Input s Output Explanation The longest valid parentheses substring is Example Input s Output Constraints s length s i is or
fair distribution of cookies You are given an integer array cookies where cookies i denotes the number of cookies in the ith bag You are also given an integer k that denotes the number of children to distribute all the bags of cookies to All the cookies in the same bag must go to the same child and cannot be split up The unfairness of a distribution is defined as the maximum total cookies obtained by a single child in the distribution Return the minimum unfairness of all distributions Example Input cookies k Output Explanation One optimal distribution is and The child receives which has a total of cookies The child receives which has a total of cookies The unfairness of the distribution is max It can be shown that there is no distribution with an unfairness less than Example Input cookies k Output Explanation One optimal distribution is and The child receives which has a total of cookies The child receives which has a total of cookies The child receives which has a total of cookies The unfairness of the distribution is max It can be shown that there is no distribution with an unfairness less than Constraints cookies length cookies i k cookies length
find the kth largest integer in the array You are given an array of strings nums and an integer k Each string in nums represents an integer without leading zeros Return the string that represents the kth largest integer in nums Note Duplicate numbers should be counted distinctly For example if nums is is the first largest integer is the second largest integer and is the third largest integer Example Input nums k Output Explanation The numbers in nums sorted in non decreasing order are The largest integer in nums is Example Input nums k Output Explanation The numbers in nums sorted in non decreasing order are The largest integer in nums is Example Input nums k Output Explanation The numbers in nums sorted in non decreasing order are The largest integer in nums is Constraints k nums length nums i length nums i consists of only digits nums i will not have any leading zeros
largest magic square A k x k magic square is a k x k grid filled with integers such that every row sum every column sum and both diagonal sums are all equal The integers in the magic square do not have to be distinct Every x grid is trivially a magic square Given an m x n integer grid return the size i e the side length k of the largest magic square that can be found within this grid Example Input grid Output Explanation The largest magic square has a size of Every row sum column sum and diagonal sum of this magic square is equal to Row sums Column sums Diagonal sums Example Input grid Output Constraints m grid length n grid i length m n grid i j
the earliest and latest rounds where players compete There is a tournament where n players are participating The players are standing in a single row and are numbered from to n based on their initial standing position player is the first player in the row player is the second player in the row etc The tournament consists of multiple rounds starting from round number In each round the ith player from the front of the row competes against the ith player from the end of the row and the winner advances to the next round When the number of players is odd for the current round the player in the middle automatically advances to the next round For example if the row consists of players Player competes against player Player competes against player Player automatically advances to the next round After each round is over the winners are lined back up in the row based on the original ordering assigned to them initially ascending order The players numbered firstPlayer and secondPlayer are the best in the tournament They can win against any other player before they compete against each other If any two other players compete against each other either of them might win and thus you may choose the outcome of this round Given the integers n firstPlayer and secondPlayer return an integer array containing two values the earliest possible round number and the latest possible round number in which these two players will compete against each other respectively Example Input n firstPlayer secondPlayer Output Explanation One possible scenario which leads to the earliest round number First round Second round Third round One possible scenario which leads to the latest round number First round Second round Third round Fourth round Example Input n firstPlayer secondPlayer Output Explanation The players numbered and compete in the first round There is no way to make them compete in any other round Constraints n firstPlayer secondPlayer n
check if word equals summation of two words The letter value of a letter is its position in the alphabet starting from i e a b c etc The numerical value of some string of lowercase English letters s is the concatenation of the letter values of each letter in s which is then converted into an integer For example if s acb we concatenate each letter s letter value resulting in After converting it we get You are given three strings firstWord secondWord and targetWord each consisting of lowercase English letters a through j inclusive Return true if the summation of the numerical values of firstWord and secondWord equals the numerical value of targetWord or false otherwise Example Input firstWord acb secondWord cba targetWord cdb Output true Explanation The numerical value of firstWord is acb The numerical value of secondWord is cba The numerical value of targetWord is cdb We return true because Example Input firstWord aaa secondWord a targetWord aab Output false Explanation The numerical value of firstWord is aaa The numerical value of secondWord is a The numerical value of targetWord is aab We return false because Example Input firstWord aaa secondWord a targetWord aaaa Output true Explanation The numerical value of firstWord is aaa The numerical value of secondWord is a The numerical value of targetWord is aaaa We return true because Constraints firstWord length secondWord length targetWord length firstWord secondWord and targetWord consist of lowercase English letters from a to j inclusive
xor queries of a subarray You are given an array arr of positive integers You are also given the array queries where queries i lefti righti For each query i compute the XOR of elements from lefti to righti that is arr lefti XOR arr lefti XOR XOR arr righti Return an array answer where answer i is the answer to the ith query Example Input arr queries Output Explanation The binary representation of the elements in the array are The XOR values for queries are xor xor xor xor xor Example Input arr queries Output Constraints arr length queries length arr i queries i length lefti righti arr length
classes more than 5 students SQL Schema Table Courses Column Name Type student varchar class varchar student class is the primary key column for this table Each row of this table indicates the name of a student and the class in which they are enrolled Write an SQL query to report all the classes that have at least five students Return the result table in any order The query result format is in the following example Example Input Courses table student class A Math B English C Math D Biology E Math F Computer G Math H Math I Math Output class Math Explanation Math has students so we include it English has student so we do not include it Biology has student so we do not include it Computer has student so we do not include it
prison cells after n days There are prison cells in a row and each cell is either occupied or vacant Each day whether the cell is occupied or vacant changes according to the following rules If a cell has two adjacent neighbors that are both occupied or both vacant then the cell becomes occupied Otherwise it becomes vacant Note that because the prison is a row the first and the last cells in the row can t have two adjacent neighbors You are given an integer array cells where cells i if the ith cell is occupied and cells i if the ith cell is vacant and you are given an integer n Return the state of the prison after n days i e n such changes described above Example Input cells n Output Explanation The following table summarizes the state of the prison on each day Day Day Day Day Day Day Day Day Example Input cells n Output Constraints cells length cells i is either or n
reformat date Given a date string in the form Day Month Year where Day is in the set Month is in the set Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec Year is in the range Convert the date string to the format YYYY MM DD where YYYY denotes the digit year MM denotes the digit month DD denotes the digit day Example Input date Oct Output Example Input date Jun Output Example Input date May Output Constraints The given dates are guaranteed to be valid so no error handling is necessary
rank scores SQL Schema Table Scores Column Name Type id int score decimal id is the primary key for this table Each row of this table contains the score of a game Score is a floating point value with two decimal places Write an SQL query to rank the scores The ranking should be calculated according to the following rules The scores should be ranked from the highest to the lowest If there is a tie between two scores both should have the same ranking After a tie the next ranking number should be the next consecutive integer value In other words there should be no holes between ranks Return the result table ordered by score in descending order The query result format is in the following example Example Input Scores table id score Output score rank
clumsy factorial The factorial of a positive integer n is the product of all positive integers less than or equal to n For example factorial We make a clumsy factorial using the integers in decreasing order by swapping out the multiply operations for a fixed rotation of operations with multiply divide add and subtract in this order For example clumsy However these operations are still applied using the usual order of operations of arithmetic We do all multiplication and division steps before any addition or subtraction steps and multiplication and division steps are processed left to right Additionally the division that we use is floor division such that Given an integer n return the clumsy factorial of n Example Input n Output Explanation Example Input n Output Explanation Constraints n
split linked list in parts Given the head of a singly linked list and an integer k split the linked list into k consecutive linked list parts The length of each part should be as equal as possible no two parts should have a size differing by more than one This may lead to some parts being null The parts should be in the order of occurrence in the input list and parts occurring earlier should always have a size greater than or equal to parts occurring later Return an array of the k parts Example Input head k Output Explanation The first element output has output val output next null The last element output is null but its string representation as a ListNode is Example Input head k Output Explanation The input has been split into consecutive parts with size difference at most and earlier parts are a larger size than the later parts Constraints The number of nodes in the list is in the range Node val k
random flip matrix There is an m x n binary grid matrix with all the values set initially Design an algorithm to randomly pick an index i j where matrix i j and flips it to All the indices i j where matrix i j should be equally likely to be returned Optimize your algorithm to minimize the number of calls made to the built in random function of your language and optimize the time and space complexity Implement the Solution class Solution int m int n Initializes the object with the size of the binary matrix m and n int flip Returns a random index i j of the matrix where matrix i j and flips it to void reset Resets all the values of the matrix to be Example Input Solution flip flip flip reset flip Output null null Explanation Solution solution new Solution solution flip return and should be equally likely to be returned solution flip return Since was returned and solution flip return Based on the previously returned indices only can be returned solution reset All the values are reset to and can be returned solution flip return and should be equally likely to be returned Constraints m n There will be at least one free cell for each call to flip At most calls will be made to flip and reset
minimum number of visited cells in a grid You are given a indexed m x n integer matrix grid Your initial position is at the top left cell Starting from the cell i j you can move to one of the following cells Cells i k with j k grid i j j rightward movement or Cells k j with i k grid i j i downward movement Return the minimum number of cells you need to visit to reach the bottom right cell m n If there is no valid path return Example Input grid Output Explanation The image above shows one of the paths that visits exactly cells Example Input grid Output Explanation The image above shows one of the paths that visits exactly cells Example Input grid Output Explanation It can be proven that no path exists Constraints m grid length n grid i length m n m n grid i j m n grid m n
path crossing Given a string path where path i N S E or W each representing moving one unit north south east or west respectively You start at the origin on a plane and walk on the path specified by path Return true if the path crosses itself at any point that is if at any time you are on a location you have previously visited Return false otherwise Example Input path NES Output false Explanation Notice that the path doesn t cross any point more than once Example Input path NESWW Output true Explanation Notice that the path visits the origin twice Constraints path length path i is either N S E or W
reorganize string Given a string s rearrange the characters of s so that any two adjacent characters are not the same Return any possible rearrangement of s or return if not possible Example Input s aab Output aba Example Input s aaab Output Constraints s length s consists of lowercase English letters
distribute candies Alice has n candies where the ith candy is of type candyType i Alice noticed that she started to gain weight so she visited a doctor The doctor advised Alice to only eat n of the candies she has n is always even Alice likes her candies very much and she wants to eat the maximum number of different types of candies while still following the doctor s advice Given the integer array candyType of length n return the maximum number of different types of candies she can eat if she only eats n of them Example Input candyType Output Explanation Alice can only eat candies Since there are only types she can eat one of each type Example Input candyType Output Explanation Alice can only eat candies Whether she eats types or she still can only eat different types Example Input candyType Output Explanation Alice can only eat candies Even though she can eat candies she only has type Constraints n candyType length n n is even candyType i
implement stack using queues Implement a last in first out LIFO stack using only two queues The implemented stack should support all the functions of a normal stack push top pop and empty Implement the MyStack class void push int x Pushes element x to the top of the stack int pop Removes the element on the top of the stack and returns it int top Returns the element on the top of the stack boolean empty Returns true if the stack is empty false otherwise Notes You must use only standard operations of a queue which means that only push to back peek pop from front size and is empty operations are valid Depending on your language the queue may not be supported natively You may simulate a queue using a list or deque double ended queue as long as you use only a queue s standard operations Example Input MyStack push push top pop empty Output null null null false Explanation MyStack myStack new MyStack myStack push myStack push myStack top return myStack pop return myStack empty return False Constraints x At most calls will be made to push pop top and empty All the calls to pop and top are valid Follow up Can you implement the stack using only one queue
find the minimum and maximum number of nodes between critical points A critical point in a linked list is defined as either a local maxima or a local minima A node is a local maxima if the current node has a value strictly greater than the previous node and the next node A node is a local minima if the current node has a value strictly smaller than the previous node and the next node Note that a node can only be a local maxima minima if there exists both a previous node and a next node Given a linked list head return an array of length containing minDistance maxDistance where minDistance is the minimum distance between any two distinct critical points and maxDistance is the maximum distance between any two distinct critical points If there are fewer than two critical points return Example Input head Output Explanation There are no critical points in Example Input head Output Explanation There are three critical points The third node is a local minima because is less than and The fifth node is a local maxima because is greater than and The sixth node is a local minima because is less than and The minimum distance is between the fifth and the sixth node minDistance The maximum distance is between the third and the sixth node maxDistance Example Input head Output Explanation There are two critical points The second node is a local maxima because is greater than and The fifth node is a local maxima because is greater than and Both the minimum and maximum distances are between the second and the fifth node Thus minDistance and maxDistance is Note that the last node is not considered a local maxima because it does not have a next node Constraints The number of nodes in the list is in the range Node val
minimum time to repair cars You are given an integer array ranks representing the ranks of some mechanics ranksi is the rank of the ith mechanic A mechanic with a rank r can repair n cars in r minutes You are also given an integer cars representing the total number of cars waiting in the garage to be repaired Return the minimum time taken to repair all the cars Note All the mechanics can repair the cars simultaneously Example Input ranks cars Output Explanation The first mechanic will repair two cars The time required is minutes The second mechanic will repair two cars The time required is minutes The third mechanic will repair two cars The time required is minutes The fourth mechanic will repair four cars The time required is minutes It can be proved that the cars cannot be repaired in less than minutes Example Input ranks cars Output Explanation The first mechanic will repair one car The time required is minutes The second mechanic will repair four cars The time required is minutes The third mechanic will repair one car The time required is minutes It can be proved that the cars cannot be repaired in less than minutes Constraints ranks length ranks i cars
vowels of all substrings Given a string word return the sum of the number of vowels a e i o and u in every substring of word A substring is a contiguous non empty sequence of characters within a string Note Due to the large constraints the answer may not fit in a signed bit integer Please be careful during the calculations Example Input word aba Output Explanation All possible substrings are a ab aba b ba and a b has vowels in it a ab ba and a have vowel each aba has vowels in it Hence the total sum of vowels Example Input word abc Output Explanation All possible substrings are a ab abc b bc and c a ab and abc have vowel each b bc and c have vowels each Hence the total sum of vowels Example Input word ltcd Output Explanation There are no vowels in any substring of ltcd Constraints word length word consists of lowercase English letters
kth smallest instructions Bob is standing at cell and he wants to reach destination row column He can only travel right and down You are going to help Bob by providing instructions for him to reach destination The instructions are represented as a string where each character is either H meaning move horizontally go right or V meaning move vertically go down Multiple instructions will lead Bob to destination For example if destination is both HHHVV and HVHVH are valid instructions However Bob is very picky Bob has a lucky number k and he wants the kth lexicographically smallest instructions that will lead him to destination k is indexed Given an integer array destination and an integer k return the kth lexicographically smallest instructions that will take Bob to destination Example Input destination k Output HHHVV Explanation All the instructions that reach in lexicographic order are as follows HHHVV HHVHV HHVVH HVHHV HVHVH HVVHH VHHHV VHHVH VHVHH VVHHH Example Input destination k Output HHVHV Example Input destination k Output HHVVH Constraints destination length row column k nCr row column row where nCr a b denotes a choose b
count palindromic subsequences Given a string of digits s return the number of palindromic subsequences of s having length Since the answer may be very large return it modulo Note A string is palindromic if it reads the same forward and backward A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters Example Input s Output Explanation There are possible subsequences of length Two of them both equal to are palindromic Example Input s Output Explanation All subsequences are which is palindromic Example Input s Output Explanation The only two palindromic subsequences are and Constraints s length s consists of digits
check if word can be placed in crossword You are given an m x n matrix board representing the current state of a crossword puzzle The crossword contains lowercase English letters from solved words to represent any empty cells and to represent any blocked cells A word can be placed horizontally left to right or right to left or vertically top to bottom or bottom to top in the board if It does not occupy a cell containing the character The cell each letter is placed in must either be empty or match the letter already on the board There must not be any empty cells or other lowercase letters directly left or right of the word if the word was placed horizontally There must not be any empty cells or other lowercase letters directly above or below the word if the word was placed vertically Given a string word return true if word can be placed in board or false otherwise Example Input board c word abc Output true Explanation The word abc can be placed as shown above top to bottom Example Input board a c a word ac Output false Explanation It is impossible to place the word because there will always be a space letter above or below it Example Input board c word ca Output true Explanation The word ca can be placed as shown above right to left Constraints m board length n board i length m n board i j will be or a lowercase English letter word length max m n word will contain only lowercase English letters
most profitable path in a tree There is an undirected tree with n nodes labeled from to n rooted at node You are given a integer array edges of length n where edges i ai bi indicates that there is an edge between nodes ai and bi in the tree At every node i there is a gate You are also given an array of even integers amount where amount i represents the price needed to open the gate at node i if amount i is negative or the cash reward obtained on opening the gate at node i otherwise The game goes on as follows Initially Alice is at node and Bob is at node bob At every second Alice and Bob each move to an adjacent node Alice moves towards some leaf node while Bob moves towards node For every node along their path Alice and Bob either spend money to open the gate at that node or accept the reward Note that If the gate is already open no price will be required nor will there be any cash reward If Alice and Bob reach the node simultaneously they share the price reward for opening the gate there In other words if the price to open the gate is c then both Alice and Bob pay c each Similarly if the reward at the gate is c both of them receive c each If Alice reaches a leaf node she stops moving Similarly if Bob reaches node he stops moving Note that these events are independent of each other Return the maximum net income Alice can have if she travels towards the optimal leaf node Example Input edges bob amount Output Explanation The above diagram represents the given tree The game goes as follows Alice is initially on node Bob on node They open the gates of their respective nodes Alice s net income is now Both Alice and Bob move to node Since they reach here simultaneously they open the gate together and share the reward Alice s net income becomes Alice moves on to node Since Bob already opened its gate Alice s income remains unchanged Bob moves on to node and stops moving Alice moves on to node and opens the gate there Her net income becomes Now neither Alice nor Bob can make any further moves and the game ends It is not possible for Alice to get a higher net income Example Input edges bob amount Output Explanation Alice follows the path whereas Bob follows the path Thus Alice opens the gate at node only Hence her net income is Constraints n edges length n edges i length ai bi n ai bi edges represents a valid tree bob n amount length n amount i is an even integer in the range
reverse words in a string iii Given a string s reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order Example Input s Let s take LeetCode contest Output s teL ekat edoCteeL tsetnoc Example Input s God Ding Output doG gniD Constraints s length s contains printable ASCII characters s does not contain any leading or trailing spaces There is at least one word in s All the words in s are separated by a single space
find xor-beauty of array You are given a indexed integer array nums The effective value of three indices i j and k is defined as nums i nums j nums k The xor beauty of the array is the XORing of the effective values of all the possible triplets of indices i j k where i j k n Return the xor beauty of nums Note that is bitwise OR of and is bitwise AND of and Example Input nums Output Explanation The triplets and their corresponding effective values are listed below with effective value with effective value with effective value with effective value with effective value with effective value with effective value with effective value Xor beauty of array will be bitwise XOR of all beauties Example Input nums Output Explanation The xor beauty of the given array is Constraints nums length nums i
find target indices after sorting array You are given a indexed integer array nums and a target element target A target index is an index i such that nums i target Return a list of the target indices of nums after sorting nums in non decreasing order If there are no target indices return an empty list The returned list must be sorted in increasing order Example Input nums target Output Explanation After sorting nums is The indices where nums i are and Example Input nums target Output Explanation After sorting nums is The index where nums i is Example Input nums target Output Explanation After sorting nums is The index where nums i is Constraints nums length nums i target
all nodes distance k in binary tree Given the root of a binary tree the value of a target node target and an integer k return an array of the values of all nodes that have a distance k from the target node You can return the answer in any order Example Input root null null target k Output Explanation The nodes that are a distance from the target node with value have values and Example Input root target k Output Constraints The number of nodes in the tree is in the range Node val All the values Node val are unique target is the value of one of the nodes in the tree k
sudoku solver Write a program to solve a Sudoku puzzle by filling the empty cells A sudoku solution must satisfy all of the following rules Each of the digits must occur exactly once in each row Each of the digits must occur exactly once in each column Each of the digits must occur exactly once in each of the sub boxes of the grid The character indicates empty cells Example Input board Output Explanation The input board is shown above and the only valid solution is shown below Constraints board length board i length board i j is a digit or It is guaranteed that the input board has only one solution
largest submatrix with rearrangements You are given a binary matrix matrix of size m x n and you are allowed to rearrange the columns of the matrix in any order Return the area of the largest submatrix within matrix where every element of the submatrix is after reordering the columns optimally Example Input matrix Output Explanation You can rearrange the columns as shown above The largest submatrix of in bold has an area of Example Input matrix Output Explanation You can rearrange the columns as shown above The largest submatrix of in bold has an area of Example Input matrix Output Explanation Notice that you must rearrange entire columns and there is no way to make a submatrix of larger than an area of Constraints m matrix length n matrix i length m n matrix i j is either or
minimum bit flips to convert number A bit flip of a number x is choosing a bit in the binary representation of x and flipping it from either to or to For example for x the binary representation is and we may choose any bit including any leading zeros not shown and flip it We can flip the first bit from the right to get flip the second bit from the right to get flip the fifth bit from the right a leading zero to get etc Given two integers start and goal return the minimum number of bit flips to convert start to goal Example Input start goal Output Explanation The binary representation of and are and respectively We can convert to in steps Flip the first bit from the right Flip the third bit from the right Flip the fourth bit from the right It can be shown we cannot convert to in less than steps Hence we return Example Input start goal Output Explanation The binary representation of and are and respectively We can convert to in steps Flip the first bit from the right Flip the second bit from the right Flip the third bit from the right It can be shown we cannot convert to in less than steps Hence we return Constraints start goal
ipo Suppose LeetCode will start its IPO soon In order to sell a good price of its shares to Venture Capital LeetCode would like to work on some projects to increase its capital before the IPO Since it has limited resources it can only finish at most k distinct projects before the IPO Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects You are given n projects where the ith project has a pure profit profits i and a minimum capital of capital i is needed to start it Initially you have w capital When you finish a project you will obtain its pure profit and the profit will be added to your total capital Pick a list of at most k distinct projects from given projects to maximize your final capital and return the final maximized capital The answer is guaranteed to fit in a bit signed integer Example Input k w profits capital Output Explanation Since your initial capital is you can only start the project indexed After finishing it you will obtain profit and your capital becomes With capital you can either start the project indexed or the project indexed Since you can choose at most projects you need to finish the project indexed to get the maximum capital Therefore output the final maximized capital which is Example Input k w profits capital Output Constraints k w n profits length n capital length n profits i capital i
best time to buy and sell stock iv You are given an integer array prices where prices i is the price of a given stock on the ith day and an integer k Find the maximum profit you can achieve You may complete at most k transactions i e you may buy at most k times and sell at most k times Note You may not engage in multiple transactions simultaneously i e you must sell the stock before you buy again Example Input k prices Output Explanation Buy on day price and sell on day price profit Example Input k prices Output Explanation Buy on day price and sell on day price profit Then buy on day price and sell on day price profit Constraints k prices length prices i
number of senior citizens You are given a indexed array of strings details Each element of details provides information about a given passenger compressed into a string of length The system is such that The first ten characters consist of the phone number of passengers The next character denotes the gender of the person The following two characters are used to indicate the age of the person The last two characters determine the seat allotted to that person Return the number of passengers who are strictly more than years old Example Input details Output Explanation The passengers at indices and have ages and Thus there are people who are over years old Example Input details Output Explanation None of the passengers are older than Constraints details length details i length details i consists of digits from to details i is either M or F or O The phone numbers and seat numbers of the passengers are distinct
new 21 game Alice plays the following game loosely based on the card game Alice starts with points and draws numbers while she has less than k points During each draw she gains an integer number of points randomly from the range maxPts where maxPts is an integer Each draw is independent and the outcomes have equal probabilities Alice stops drawing numbers when she gets k or more points Return the probability that Alice has n or fewer points Answers within of the actual answer are considered accepted Example Input n k maxPts Output Explanation Alice gets a single card then stops Example Input n k maxPts Output Explanation Alice gets a single card then stops In out of possibilities she is at or below points Example Input n k maxPts Output Constraints k n maxPts
logical or of two binary grids represented as quad-trees A Binary Matrix is a matrix in which all the elements are either or Given and represents a n n binary matrix and represents another n n binary matrix Return a Quad Tree representing the n n binary matrix which is the result of logical bitwise OR of the two binary matrixes represented by and Notice that you can assign the value of a node to True or False when isLeaf is False and both are accepted in the answer A Quad Tree is a tree data structure in which each internal node has exactly four children Besides each node has two attributes val True if the node represents a grid of s or False if the node represents a grid of s isLeaf True if the node is leaf node on the tree or False if the node has the four children class Node public boolean val public boolean isLeaf public Node topLeft public Node topRight public Node bottomLeft public Node bottomRight We can construct a Quad Tree from a two dimensional area using the following steps If the current grid has the same value i e all s or all s set isLeaf True and set val to the value of the grid and set the four children to Null and stop If the current grid has different values set isLeaf to False and set val to any value and divide the current grid into four sub grids as shown in the photo Recurse for each of the children with the proper sub grid If you want to know more about the Quad Tree you can refer to the wiki Quad Tree format The input output represents the serialized format of a Quad Tree using level order traversal where null signifies a path terminator where no node exists below It is very similar to the serialization of the binary tree The only difference is that the node is represented as a list isLeaf val If the value of isLeaf or val is True we represent it as in the list isLeaf val and if the value of isLeaf or val is False we represent it as Example Input null null null null Output Explanation and are shown above You can see the binary matrix which is represented by each Quad Tree If we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad Tree Notice that the binary matrices shown are only for illustration you don t have to construct the binary matrix to get the result tree Example Input Output Explanation Each tree represents a binary matrix of size Each matrix contains only zero The resulting matrix is of size with also zero Constraints and are both valid Quad Trees each representing a n n grid n where x
partition to k equal sum subsets Given an integer array nums and an integer k return true if it is possible to divide this array into k non empty subsets whose sums are all equal Example Input nums k Output true Explanation It is possible to divide it into subsets with equal sums Example Input nums k Output false Constraints k nums length nums i The frequency of each element is in the range
print zero even odd You have a function printNumber that can be called with an integer parameter and prints it to the console For example calling printNumber prints to the console You are given an instance of the class ZeroEvenOdd that has three functions zero even and odd The same instance of ZeroEvenOdd will be passed to three different threads Thread A calls zero that should only output s Thread B calls even that should only output even numbers Thread C calls odd that should only output odd numbers Modify the given class to output the series where the length of the series must be Implement the ZeroEvenOdd class ZeroEvenOdd int n Initializes the object with the number n that represents the numbers that should be printed void zero printNumber Calls printNumber to output one zero void even printNumber Calls printNumber to output one even number void odd printNumber Calls printNumber to output one odd number Example Input n Output Explanation There are three threads being fired asynchronously One of them calls zero the other calls even and the last one calls odd is the correct output Example Input n Output Constraints n
find consecutive integers from a data stream For a stream of integers implement a data structure that checks if the last k integers parsed in the stream are equal to value Implement the DataStream class DataStream int value int k Initializes the object with an empty integer stream and the two integers value and k boolean consec int num Adds num to the stream of integers Returns true if the last k integers are equal to value and false otherwise If there are less than k integers the condition does not hold true so returns false Example Input DataStream consec consec consec consec Output null false false true false Explanation DataStream dataStream new DataStream value k dataStream consec Only integer is parsed so returns False dataStream consec Only integers are parsed Since is less than k returns False dataStream consec The integers parsed are all equal to value so returns True dataStream consec The last k integers parsed in the stream are Since is not equal to value it returns False Constraints value num k At most calls will be made to consec
maximize greatness of an array You are given a indexed integer array nums You are allowed to permute nums into a new array perm of your choosing We define the greatness of nums be the number of indices i nums length for which perm i nums i Return the maximum possible greatness you can achieve after permuting nums Example Input nums Output Explanation One of the optimal rearrangements is perm At indices and perm i nums i Hence we return Example Input nums Output Explanation We can prove the optimal perm is At indices and perm i nums i Hence we return Constraints nums length nums i
subsets Given an integer array nums of unique elements return all possible subsets the power set The solution set must not contain duplicate subsets Return the solution in any order Example Input nums Output Example Input nums Output Constraints nums length nums i All the numbers of nums are unique
kth smallest element in a bst Given the root of a binary search tree and an integer k return the kth smallest value indexed of all the values of the nodes in the tree Example Input root null k Output Example Input root null null k Output Constraints The number of nodes in the tree is n k n Node val Follow up If the BST is modified often i e we can do insert and delete operations and you need to find the kth smallest frequently how would you optimize
number of good ways to split a string You are given a string s A split is called good if you can split s into two non empty strings sleft and sright where their concatenation is equal to s i e sleft sright s and the number of distinct letters in sleft and sright is the same Return the number of good splits you can make in s Example Input s aacaba Output Explanation There are ways to split aacaba and of them are good a acaba Left string and right string contains and different letters respectively aa caba Left string and right string contains and different letters respectively aac aba Left string and right string contains and different letters respectively good split aaca ba Left string and right string contains and different letters respectively good split aacab a Left string and right string contains and different letters respectively Example Input s abcd Output Explanation Split the string as follows ab cd Constraints s length s consists of only lowercase English letters
transform to chessboard You are given an n x n binary grid board In each move you can swap any two rows with each other or any two columns with each other Return the minimum number of moves to transform the board into a chessboard board If the task is impossible return A chessboard board is a board where no s and no s are directionally adjacent Example Input board Output Explanation One potential sequence of moves is shown The first move swaps the first and second column The second move swaps the second and third row Example Input board Output Explanation Also note that the board with in the top left corner is also a valid chessboard Example Input board Output Explanation No matter what sequence of moves you make you cannot end with a valid chessboard Constraints n board length n board i length n board i j is either or
buddy strings Given two strings s and goal return true if you can swap two letters in s so the result is equal to goal otherwise return false Swapping letters is defined as taking two indices i and j indexed such that i j and swapping the characters at s i and s j For example swapping at indices and in abcd results in cbad Example Input s ab goal ba Output true Explanation You can swap s a and s b to get ba which is equal to goal Example Input s ab goal ab Output false Explanation The only letters you can swap are s a and s b which results in ba goal Example Input s aa goal aa Output true Explanation You can swap s a and s a to get aa which is equal to goal Constraints s length goal length s and goal consist of lowercase letters
walking robot simulation ii A width x height grid is on an XY plane with the bottom left cell at and the top right cell at width height The grid is aligned with the four cardinal directions North East South and West A robot is initially at cell facing direction East The robot can be instructed to move for a specific number of steps For each step it does the following Attempts to move forward one cell in the direction it is facing If the cell the robot is moving to is out of bounds the robot instead turns degrees counterclockwise and retries the step After the robot finishes moving the number of steps required it stops and awaits the next instruction Implement the Robot class Robot int width int height Initializes the width x height grid with the robot at facing East void step int num Instructs the robot to move forward num steps int getPos Returns the current cell the robot is at as an array of length x y String getDir Returns the current direction of the robot North East South or West Example Input Robot step step getPos getDir step step step getPos getDir Output null null null East null null null West Explanation Robot robot new Robot Initialize the grid and the robot at facing East robot step It moves two steps East to and faces East robot step It moves two steps East to and faces East robot getPos return robot getDir return East robot step It moves one step East to and faces East Moving the next step East would be out of bounds so it turns and faces North Then it moves one step North to and faces North robot step It moves one step North to and faces North not West robot step Moving the next step North would be out of bounds so it turns and faces West Then it moves four steps West to and faces West robot getPos return robot getDir return West Constraints width height num At most calls in total will be made to step getPos and getDir
smallest index with equal value Given a indexed integer array nums return the smallest index i of nums such that i mod nums i or if such index does not exist x mod y denotes the remainder when x is divided by y Example Input nums Output Explanation i mod nums i mod nums i mod nums All indices have i mod nums i so we return the smallest index Example Input nums Output Explanation i mod nums i mod nums i mod nums i mod nums is the only index which has i mod nums i Example Input nums Output Explanation No index satisfies i mod nums i Constraints nums length nums i
number of sub-arrays with odd sum Given an array of integers arr return the number of subarrays with an odd sum Since the answer can be very large return it modulo Example Input arr Output Explanation All subarrays are All sub arrays sum are Odd sums are so the answer is Example Input arr Output Explanation All subarrays are All sub arrays sum are All sub arrays have even sum and the answer is Example Input arr Output Constraints arr length arr i
minimum number of steps to make two strings anagram You are given two strings of the same length s and t In one step you can choose any character of t and replace it with another character Return the minimum number of steps to make t an anagram of s An Anagram of a string is a string that contains the same characters with a different or the same ordering Example Input s bab t aba Output Explanation Replace the first a in t with b t bba which is anagram of s Example Input s leetcode t practice Output Explanation Replace p r a i and c from t with proper characters to make t anagram of s Example Input s anagram t mangaar Output Explanation anagram and mangaar are anagrams Constraints s length s length t length s and t consist of lowercase English letters only
number of ways to reach a position after exactly k steps You are given two positive integers startPos and endPos Initially you are standing at position startPos on an infinite number line With one step you can move either one position to the left or one position to the right Given a positive integer k return the number of different ways to reach the position endPos starting from startPos such that you perform exactly k steps Since the answer may be very large return it modulo Two ways are considered different if the order of the steps made is not exactly the same Note that the number line includes negative integers Example Input startPos endPos k Output Explanation We can reach position from in exactly steps in three ways It can be proven that no other way is possible so we return Example Input startPos endPos k Output Explanation It is impossible to reach position from position in exactly steps Constraints startPos endPos k
interleaving string Given strings and find whether is formed by an interleaving of and An interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively such that s sn t tm n m The interleaving is or Note a b is the concatenation of strings a and b Example Input aabcc dbbca aadbbcbcac Output true Explanation One way to obtain is Split into aa bc c and into dbbc a Interleaving the two splits we get aa dbbc bc a c aadbbcbcac Since can be obtained by interleaving and we return true Example Input aabcc dbbca aadbbbaccc Output false Explanation Notice how it is impossible to interleave with any other string to obtain Example Input Output true Constraints length length length and consist of lowercase English letters Follow up Could you solve it using only O length additional memory space
arithmetic subarrays A sequence of numbers is called arithmetic if it consists of at least two elements and the difference between every two consecutive elements is the same More formally a sequence s is arithmetic if and only if s i s i s s for all valid i For example these are arithmetic sequences The following sequence is not arithmetic You are given an array of n integers nums and two arrays of m integers each l and r representing the m range queries where the ith query is the range l i r i All the arrays are indexed Return a list of boolean elements answer where answer i is true if the subarray nums l i nums l i nums r i can be rearranged to form an arithmetic sequence and false otherwise Example Input nums l r Output true false true Explanation In the query the subarray is This can be rearranged as which is an arithmetic sequence In the query the subarray is This cannot be rearranged as an arithmetic sequence In the query the subarray is This can be rearranged as which is an arithmetic sequence Example Input nums l r Output false true false false true true Constraints n nums length m l length m r length n m l i r i n nums i
k divisible elements subarrays Given an integer array nums and two integers k and p return the number of distinct subarrays which have at most k elements divisible by p Two arrays and are said to be distinct if They are of different lengths or There exists at least one index i where i i A subarray is defined as a non empty contiguous sequence of elements in an array Example Input nums k p Output Explanation The elements at indices and are divisible by p The distinct subarrays which have at most k elements divisible by are and Note that the subarrays and occur more than once in nums but they should each be counted only once The subarray should not be counted because it has elements that are divisible by Example Input nums k p Output Explanation All element of nums are divisible by p Also every subarray of nums will have at most elements that are divisible by Since all subarrays are distinct the total number of subarrays satisfying all the constraints is Constraints nums length nums i p k nums length Follow up Can you solve this problem in O time complexity
parallel courses ii You are given an integer n which indicates that there are n courses labeled from to n You are also given an array relations where relations i prevCoursei nextCoursei representing a prerequisite relationship between course prevCoursei and course nextCoursei course prevCoursei has to be taken before course nextCoursei Also you are given the integer k In one semester you can take at most k courses as long as you have taken all the prerequisites in the previous semesters for the courses you are taking Return the minimum number of semesters needed to take all courses The testcases will be generated such that it is possible to take every course Example Input n relations k Output Explanation The figure above represents the given graph In the first semester you can take courses and In the second semester you can take course In the third semester you can take course Example Input n relations k Output Explanation The figure above represents the given graph In the first semester you can only take courses and since you cannot take more than two per semester In the second semester you can take course In the third semester you can take course In the fourth semester you can take course Constraints n k n relations length n n relations i length prevCoursei nextCoursei n prevCoursei nextCoursei All the pairs prevCoursei nextCoursei are unique The given graph is a directed acyclic graph
prefix and suffix search Design a special dictionary that searches the words in it by a prefix and a suffix Implement the WordFilter class WordFilter string words Initializes the object with the words in the dictionary f string pref string suff Returns the index of the word in the dictionary which has the prefix pref and the suffix suff If there is more than one valid index return the largest of them If there is no such word in the dictionary return Example Input WordFilter f apple a e Output null Explanation WordFilter wordFilter new WordFilter apple wordFilter f a e return because the word at index has prefix a and suffix e Constraints words length words i length pref length suff length words i pref and suff consist of lowercase English letters only At most calls will be made to the function f
house robber iii The thief has found himself a new place for his thievery again There is only one entrance to this area called root Besides the root each house has one and only one parent house After a tour the smart thief realized that all houses in this place form a binary tree It will automatically contact the police if two directly linked houses were broken into on the same night Given the root of the binary tree return the maximum amount of money the thief can rob without alerting the police Example Input root null null Output Explanation Maximum amount of money the thief can rob Example Input root null Output Explanation Maximum amount of money the thief can rob Constraints The number of nodes in the tree is in the range Node val
queries on number of points inside a circle You are given an array points where points i xi yi is the coordinates of the ith point on a plane Multiple points can have the same coordinates You are also given an array queries where queries j xj yj rj describes a circle centered at xj yj with a radius of rj For each query queries j compute the number of points inside the jth circle Points on the border of the circle are considered inside Return an array answer where answer j is the answer to the jth query Example Input points queries Output Explanation The points and circles are shown above queries is the green circle queries is the red circle and queries is the blue circle Example Input points queries Output Explanation The points and circles are shown above queries is green queries is red queries is blue and queries is purple Constraints points length points i length xi yi queries length queries j length xj yj rj All coordinates are integers Follow up Could you find the answer for each query in better complexity than O n
maximum number of weeks for which you can work There are n projects numbered from to n You are given an integer array milestones where each milestones i denotes the number of milestones the ith project has You can work on the projects following these two rules Every week you will finish exactly one milestone of one project You must work every week You cannot work on two milestones from the same project for two consecutive weeks Once all the milestones of all the projects are finished or if the only milestones that you can work on will cause you to violate the above rules you will stop working Note that you may not be able to finish every project s milestones due to these constraints Return the maximum number of weeks you would be able to work on the projects without violating the rules mentioned above Example Input milestones Output Explanation One possible scenario is During the week you will work on a milestone of project During the week you will work on a milestone of project During the week you will work on a milestone of project During the week you will work on a milestone of project During the week you will work on a milestone of project During the week you will work on a milestone of project The total number of weeks is Example Input milestones Output Explanation One possible scenario is During the week you will work on a milestone of project During the week you will work on a milestone of project During the week you will work on a milestone of project During the week you will work on a milestone of project During the week you will work on a milestone of project During the week you will work on a milestone of project During the week you will work on a milestone of project The total number of weeks is Note that you cannot work on the last milestone of project on week because it would violate the rules Thus one milestone in project will remain unfinished Constraints n milestones length n milestones i
split array with same average You are given an integer array nums You should move each element of nums into one of the two arrays A and B such that A and B are non empty and average A average B Return true if it is possible to achieve that and false otherwise Note that for an array arr average arr is the sum of all the elements of arr over the length of arr Example Input nums Output true Explanation We can split the array into and and both of them have an average of Example Input nums Output false Constraints nums length nums i
course schedule iii There are n different online courses numbered from to n You are given an array courses where courses i durationi lastDayi indicate that the ith course should be taken continuously for durationi days and must be finished before or on lastDayi You will start on the day and you cannot take two or more courses simultaneously Return the maximum number of courses that you can take Example Input courses Output Explanation There are totally courses but you can take courses at most First take the course it costs days so you will finish it on the day and ready to take the next course on the day Second take the course it costs days so you will finish it on the day and ready to take the next course on the day Third take the course it costs days so you will finish it on the day The course cannot be taken now since you will finish it on the day which exceeds the closed date Example Input courses Output Example Input courses Output Constraints courses length durationi lastDayi
smallest string with swaps You are given a string s and an array of pairs of indices in the string pairs where pairs i a b indicates indices indexed of the string You can swap the characters at any pair of indices in the given pairs any number of times Return the lexicographically smallest string that s can be changed to after using the swaps Example Input s dcab pairs Output bacd Explaination Swap s and s s bcad Swap s and s s bacd Example Input s dcab pairs Output abcd Explaination Swap s and s s bcad Swap s and s s acbd Swap s and s s abcd Example Input s cba pairs Output abc Explaination Swap s and s s bca Swap s and s s bac Swap s and s s abc Constraints s length pairs length pairs i pairs i s length s only contains lower case English letters
minimum deletions to make character frequencies unique A string s is called good if there are no two different characters in s that have the same frequency Given a string s return the minimum number of characters you need to delete to make s good The frequency of a character in a string is the number of times it appears in the string For example in the string aab the frequency of a is while the frequency of b is Example Input s aab Output Explanation s is already good Example Input s aaabbbcc Output Explanation You can delete two b s resulting in the good string aaabcc Another way it to delete one b and one c resulting in the good string aaabbc Example Input s ceabaacb Output Explanation You can delete both c s resulting in the good string eabaab Note that we only care about characters that are still in the string at the end i e frequency of is ignored Constraints s length s contains only lowercase English letters
array prototype last Write code that enhances all arrays such that you can call the array last method on any array and it will return the last element If there are no elements in the array it should return Example Input nums Output Explanation Calling nums last should return the last element Example Input nums Output Explanation Because there are no elements return Constraints arr length arr i
find palindrome with fixed length Given an integer array queries and a positive integer intLength return an array answer where answer i is either the queries i th smallest positive palindrome of length intLength or if no such palindrome exists A palindrome is a number that reads the same backwards and forwards Palindromes cannot have leading zeros Example Input queries intLength Output Explanation The first few palindromes of length are The palindrome of length is Example Input queries intLength Output Explanation The first six palindromes of length are and Constraints queries length queries i intLength
number of different integers in a string You are given a string word that consists of digits and lowercase English letters You will replace every non digit character with a space For example will become Notice that you are left with some integers that are separated by at least one space and Return the number of different integers after performing the replacement operations on word Two integers are considered different if their decimal representations without any leading zeros are different Example Input word Output Explanation The three different integers are and Notice that is only counted once Example Input word Output Example Input word Output Explanation The three integers and all represent the same integer because the leading zeros are ignored when comparing their decimal values Constraints word length word consists of digits and lowercase English letters
valid square Given the coordinates of four points in space and return true if the four points construct a square The coordinate of a point pi is represented as xi yi The input is not given in any order A valid square has four equal sides with positive length and four equal angles degree angles Example Input Output true Example Input Output false Example Input Output true Constraints length length length length xi yi
next greater element iv You are given a indexed array of non negative integers nums For each integer in nums you must find its respective second greater integer The second greater integer of nums i is nums j such that j i nums j nums i There exists exactly one index k such that nums k nums i and i k j If there is no such nums j the second greater integer is considered to be For example in the array the second greater integer of is is and that of and is Return an integer array answer where answer i is the second greater integer of nums i Example Input nums Output Explanation index is the first integer greater than and is the second integer greater than to the right of index is the first and is the second integer greater than to the right of index is the first and is the second integer greater than to the right of index There is no integer greater than to its right so the second greater integer is considered to be index There is no integer greater than to its right so the second greater integer is considered to be Thus we return Example Input nums Output Explanation We return since neither integer has any integer greater than it Constraints nums length nums i
minimum rounds to complete all tasks You are given a indexed integer array tasks where tasks i represents the difficulty level of a task In each round you can complete either or tasks of the same difficulty level Return the minimum rounds required to complete all the tasks or if it is not possible to complete all the tasks Example Input tasks Output Explanation To complete all the tasks a possible plan is In the first round you complete tasks of difficulty level In the second round you complete tasks of difficulty level In the third round you complete tasks of difficulty level In the fourth round you complete tasks of difficulty level It can be shown that all the tasks cannot be completed in fewer than rounds so the answer is Example Input tasks Output Explanation There is only task of difficulty level but in each round you can only complete either or tasks of the same difficulty level Hence you cannot complete all the tasks and the answer is Constraints tasks length tasks i
merge triplets to form target triplet A triplet is an array of three integers You are given a integer array triplets where triplets i ai bi ci describes the ith triplet You are also given an integer array target x y z that describes the triplet you want to obtain To obtain target you may apply the following operation on triplets any number of times possibly zero Choose two indices indexed i and j i j and update triplets j to become max ai aj max bi bj max ci cj For example if triplets i and triplets j triplets j will be updated to max max max Return true if it is possible to obtain the target triplet x y z as an element of triplets or false otherwise Example Input triplets target Output true Explanation Perform the following operations Choose the first and last triplets Update the last triplet to be max max max triplets The target triplet is now an element of triplets Example Input triplets target Output false Explanation It is impossible to have as an element because there is no in any of the triplets Example Input triplets target Output true Explanation Perform the following operations Choose the first and third triplets Update the third triplet to be max max max triplets Choose the third and fourth triplets Update the fourth triplet to be max max max triplets The target triplet is now an element of triplets Constraints triplets length triplets i length target length ai bi ci x y z
find the pivot integer Given a positive integer n find the pivot integer x such that The sum of all elements between and x inclusively equals the sum of all elements between x and n inclusively Return the pivot integer x If no such integer exists return It is guaranteed that there will be at most one pivot index for the given input Example Input n Output Explanation is the pivot integer since Example Input n Output Explanation is the pivot integer since Example Input n Output Explanation It can be proved that no such integer exist Constraints n
frequency tracker Design a data structure that keeps track of the values in it and answers some queries regarding their frequencies Implement the FrequencyTracker class FrequencyTracker Initializes the FrequencyTracker object with an empty array initially void add int number Adds number to the data structure void deleteOne int number Deletes one occurrence of number from the data structure The data structure may not contain number and in this case nothing is deleted bool hasFrequency int frequency Returns true if there is a number in the data structure that occurs frequency number of times otherwise it returns false Example Input FrequencyTracker add add hasFrequency Output null null null true Explanation FrequencyTracker frequencyTracker new FrequencyTracker frequencyTracker add The data structure now contains frequencyTracker add The data structure now contains frequencyTracker hasFrequency Returns true because occurs twice Example Input FrequencyTracker add deleteOne hasFrequency Output null null null false Explanation FrequencyTracker frequencyTracker new FrequencyTracker frequencyTracker add The data structure now contains frequencyTracker deleteOne The data structure becomes empty frequencyTracker hasFrequency Returns false because the data structure is empty Example Input FrequencyTracker hasFrequency add hasFrequency Output null false null true Explanation FrequencyTracker frequencyTracker new FrequencyTracker frequencyTracker hasFrequency Returns false because the data structure is empty frequencyTracker add The data structure now contains frequencyTracker hasFrequency Returns true because occurs once Constraints number frequency At most calls will be made to add deleteOne and hasFrequency in total
k-diff pairs in an array Given an array of integers nums and an integer k return the number of unique k diff pairs in the array A k diff pair is an integer pair nums i nums j where the following are true i j nums length i j nums i nums j k Notice that val denotes the absolute value of val Example Input nums k Output Explanation There are two diff pairs in the array and Although we have two in the input we should only return the number of unique pairs Example Input nums k Output Explanation There are four diff pairs in the array and Example Input nums k Output Explanation There is one diff pair in the array Constraints nums length nums i k
remove colored pieces if both neighbors are the same color There are n pieces arranged in a line and each piece is colored either by A or by B You are given a string colors of length n where colors i is the color of the ith piece Alice and Bob are playing a game where they take alternating turns removing pieces from the line In this game Alice moves first Alice is only allowed to remove a piece colored A if both its neighbors are also colored A She is not allowed to remove pieces that are colored B Bob is only allowed to remove a piece colored B if both its neighbors are also colored B He is not allowed to remove pieces that are colored A Alice and Bob cannot remove pieces from the edge of the line If a player cannot make a move on their turn that player loses and the other player wins Assuming Alice and Bob play optimally return true if Alice wins or return false if Bob wins Example Input colors AAABABB Output true Explanation AAABABB AABABB Alice moves first She removes the second A from the left since that is the only A whose neighbors are both A Now it s Bob s turn Bob cannot make a move on his turn since there are no B s whose neighbors are both B Thus Alice wins so return true Example Input colors AA Output false Explanation Alice has her turn first There are only two A s and both are on the edge of the line so she cannot move on her turn Thus Bob wins so return false Example Input colors ABBBBBBBAAA Output false Explanation ABBBBBBBAAA ABBBBBBBAA Alice moves first Her only option is to remove the second to last A from the right ABBBBBBBAA ABBBBBBAA Next is Bob s turn He has many options for which B piece to remove He can pick any On Alice s second turn she has no more pieces that she can remove Thus Bob wins so return false Constraints colors length colors consists of only the letters A and B
hand of straights Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize and consists of groupSize consecutive cards Given an integer array hand where hand i is the value written on the ith card and an integer groupSize return true if she can rearrange the cards or false otherwise Example Input hand groupSize Output true Explanation Alice s hand can be rearranged as Example Input hand groupSize Output false Explanation Alice s hand can not be rearranged into groups of Constraints hand length hand i groupSize hand length Note This question is the same as https leetcode com problems divide array in sets of k consecutive numbers
satisfiability of equality equations You are given an array of strings equations that represent relationships between variables where each string equations i is of length and takes one of two different forms xi yi or xi yi Here xi and yi are lowercase letters not necessarily different that represent one letter variable names Return true if it is possible to assign integers to variable names so as to satisfy all the given equations or false otherwise Example Input equations a b b a Output false Explanation If we assign say a and b then the first equation is satisfied but not the second There is no way to assign the variables to satisfy both equations Example Input equations b a a b Output true Explanation We could assign a and b to satisfy both equations Constraints equations length equations i length equations i is a lowercase letter equations i is either or equations i is equations i is a lowercase letter
count the hidden sequences You are given a indexed array of n integers differences which describes the differences between each pair of consecutive integers of a hidden sequence of length n More formally call the hidden sequence hidden then we have that differences i hidden i hidden i You are further given two integers lower and upper that describe the inclusive range of values lower upper that the hidden sequence can contain For example given differences lower upper the hidden sequence is a sequence of length whose elements are in between and inclusive and are possible hidden sequences is not possible since it contains an element greater than is not possible since the differences are not correct Return the number of possible hidden sequences there are If there are no possible sequences return Example Input differences lower upper Output Explanation The possible hidden sequences are Thus we return Example Input differences lower upper Output Explanation The possible hidden sequences are Thus we return Example Input differences lower upper Output Explanation There are no possible hidden sequences Thus we return Constraints n differences length n differences i lower upper
reverse linked list Given the head of a singly linked list reverse the list and return the reversed list Example Input head Output Example Input head Output Example Input head Output Constraints The number of nodes in the list is the range Node val Follow up A linked list can be reversed either iteratively or recursively Could you implement both
maximum subarray min-product The min product of an array is equal to the minimum value in the array multiplied by the array s sum For example the array minimum value is has a min product of Given an array of integers nums return the maximum min product of any non empty subarray of nums Since the answer may be large return it modulo Note that the min product should be maximized before performing the modulo operation Testcases are generated such that the maximum min product without modulo will fit in a bit signed integer A subarray is a contiguous part of an array Example Input nums Output Explanation The maximum min product is achieved with the subarray minimum value is Example Input nums Output Explanation The maximum min product is achieved with the subarray minimum value is Example Input nums Output Explanation The maximum min product is achieved with the subarray minimum value is Constraints nums length nums i
promise pool Given an array of asyncronous functions functions and a pool limit n return an asyncronous function promisePool It should return a promise that resolves when all the input functions resolve Pool limit is defined as the maximum number promises that can be pending at once promisePool should begin execution of as many functions as possible and continue executing new functions when old promises resolve promisePool should execute functions i then functions i then functions i etc When the last promise resolves promisePool should also resolve For example if n promisePool will execute one function at a time in series However if n it first executes two functions When either of the two functions resolve a function should be executed if available and so on until there are no functions left to execute You can assume all functions never reject It is acceptable for promisePool to return a promise that resolves any value Example Input functions new Promise res setTimeout res new Promise res setTimeout res new Promise res setTimeout res n Output Explanation Three functions are passed in They sleep for and respectively They resolve at and respectively The returned promise resolves at At t the first functions are executed The pool size limit of is reached At t the function resolves and the function is executed Pool size is At t the function resolves There is nothing left to execute Pool size is At t the function resolves Pool size is zero so the returned promise also resolves Example Input functions new Promise res setTimeout res new Promise res setTimeout res new Promise res setTimeout res n Output Explanation The three input promises resolve at and respectively The returned promise resolves at At t all functions are executed The pool limit of is never met At t the function resolves Pool size is At t the function resolved Pool size is At t the function resolves Pool size is so the returned promise also resolves Example Input functions new Promise res setTimeout res new Promise res setTimeout res new Promise res setTimeout res n Output Explanation The three input promises resolve at and respectively The returned promise resolves at At t the function is executed Pool size is At t the function resolves and the function is executed Pool size is At t the function resolves and the function is executed Pool size is At t the function resolves Pool size is so the returned promise resolves Constraints functions length n
convert to base -2 Given an integer n return a binary string representing its representation in base Note that the returned string should not have leading zeros unless the string is Example Input n Output Explantion Example Input n Output Explantion Example Input n Output Explantion Constraints n
final value of variable after performing operations There is a programming language with only four operations and one variable X X and X increments the value of the variable X by X and X decrements the value of the variable X by Initially the value of X is Given an array of strings operations containing a list of operations return the final value of X after performing all the operations Example Input operations X X X Output Explanation The operations are performed as follows Initially X X X is decremented by X X X is incremented by X X X is incremented by X Example Input operations X X X Output Explanation The operations are performed as follows Initially X X X is incremented by X X X is incremented by X X X is incremented by X Example Input operations X X X X Output Explanation The operations are performed as follows Initially X X X is incremented by X X X is incremented by X X X is decremented by X X X is decremented by X Constraints operations length operations i will be either X X X or X
validate ip address Given a string queryIP return if IP is a valid address if IP is a valid address or Neither if IP is not a correct IP of any type A valid address is an IP in the form where xi and xi cannot contain leading zeros For example and are valid addresses while and are invalid addresses A valid address is an IP in the form where xi length xi is a hexadecimal string which may contain digits lowercase English letter a to f and upper case English letters A to F Leading zeros are allowed in xi For example and are valid addresses while and are invalid addresses Example Input queryIP Output Explanation This is a valid address return Example Input queryIP Output Explanation This is a valid address return Example Input queryIP Output Neither Explanation This is neither a address nor a address Constraints queryIP consists only of English letters digits and the characters and
lemonade change At a lemonade stand each lemonade costs Customers are standing in a queue to buy from you and order one at a time in the order specified by bills Each customer will only buy one lemonade and pay with either a or bill You must provide the correct change to each customer so that the net transaction is that the customer pays Note that you do not have any change in hand at first Given an integer array bills where bills i is the bill the ith customer pays return true if you can provide every customer with the correct change or false otherwise Example Input bills Output true Explanation From the first customers we collect three bills in order From the fourth customer we collect a bill and give back a From the fifth customer we give a bill and a bill Since all customers got correct change we output true Example Input bills Output false Explanation From the first two customers in order we collect two bills For the next two customers in order we collect a bill and give back a bill For the last customer we can not give the change of back because we only have two bills Since not every customer received the correct change the answer is false Constraints bills length bills i is either or
count words obtained after adding a letter You are given two indexed arrays of strings startWords and targetWords Each string consists of lowercase English letters only For each string in targetWords check if it is possible to choose a string from startWords and perform a conversion operation on it to be equal to that from targetWords The conversion operation is described in the following two steps Append any lowercase letter that is not present in the string to its end For example if the string is abc the letters d e or y can be added to it but not a If d is added the resulting string will be abcd Rearrange the letters of the new string in any arbitrary order For example abcd can be rearranged to acbd bacd cbda and so on Note that it can also be rearranged to abcd itself Return the number of strings in targetWords that can be obtained by performing the operations on any string of startWords Note that you will only be verifying if the string in targetWords can be obtained from a string in startWords by performing the operations The strings in startWords do not actually change during this process Example Input startWords ant act tack targetWords tack act acti Output Explanation In order to form targetWords tack we use startWords act append k to it and rearrange actk to tack There is no string in startWords that can be used to obtain targetWords act Note that act does exist in startWords but we must append one letter to the string before rearranging it In order to form targetWords acti we use startWords act append i to it and rearrange acti to acti itself Example Input startWords ab a targetWords abc abcd Output Explanation In order to form targetWords abc we use startWords ab add c to it and rearrange it to abc There is no string in startWords that can be used to obtain targetWords abcd Constraints startWords length targetWords length startWords i length targetWords j length Each string of startWords and targetWords consists of lowercase English letters only No letter occurs more than once in any string of startWords or targetWords
amount of time for binary tree to be infected You are given the root of a binary tree with unique values and an integer start At minute an infection starts from the node with value start Each minute a node becomes infected if The node is currently uninfected The node is adjacent to an infected node Return the number of minutes needed for the entire tree to be infected Example Input root null start Output Explanation The following nodes are infected during Minute Node Minute Nodes and Minute Node Minute Node Minute Nodes and It takes minutes for the whole tree to be infected so we return Example Input root start Output Explanation At minute the only node in the tree is infected so we return Constraints The number of nodes in the tree is in the range Node val Each node has a unique value A node with a value of start exists in the tree
couples holding hands There are n couples sitting in seats arranged in a row and want to hold hands The people and seats are represented by an integer array row where row i is the ID of the person sitting in the ith seat The couples are numbered in order the first couple being the second couple being and so on with the last couple being Return the minimum number of swaps so that every couple is sitting side by side A swap consists of choosing any two people then they stand up and switch seats Example Input row Output Explanation We only need to swap the second row and third row person Example Input row Output Explanation All couples are already seated side by side Constraints row length n n is even row i All the elements of row are unique
decrypt string from alphabet to integer mapping You are given a string s formed by digits and We want to map s to English lowercase characters as follows Characters a to i are represented by to respectively Characters j to z are represented by to respectively Return the string formed after mapping The test cases are generated so that a unique mapping will always exist Example Input s Output jkab Explanation j k a b Example Input s Output acz Constraints s length s consists of digits and the letter s will be a valid string such that mapping is always possible
minimum total cost to make arrays unequal You are given two indexed integer arrays and of equal length n In one operation you can swap the values of any two indices of The cost of this operation is the sum of the indices Find the minimum total cost of performing the given operation any number of times such that i i for all i n after performing all the operations Return the minimum total cost such that and satisfy the above condition In case it is not possible return Example Input Output Explanation One of the ways we can perform the operations is Swap values at indices and incurring cost Now Swap values at indices and incurring cost Now Swap values at indices and incurring cost Now We can see that for each index i i i The cost required here is Note that there are other ways to swap values but it can be proven that it is not possible to obtain a cost less than Example Input Output Explanation One of the ways we can perform the operations is Swap values at indices and incurring cost Now Swap values at indices and incurring cost Now The total cost needed here is which is the minimum possible Example Input Output Explanation It can be shown that it is not possible to satisfy the given conditions irrespective of the number of operations we perform Hence we return Constraints n length length n i i n
swap nodes in pairs Given a linked list swap every two adjacent nodes and return its head You must solve the problem without modifying the values in the list s nodes i e only nodes themselves may be changed Example Input head Output Example Input head Output Example Input head Output Constraints The number of nodes in the list is in the range Node val
number of steps to reduce a number to zero Given an integer num return the number of steps to reduce it to zero In one step if the current number is even you have to divide it by otherwise you have to subtract from it Example Input num Output Explanation Step is even divide by and obtain Step is odd subtract and obtain Step is even divide by and obtain Step is odd subtract and obtain Step is even divide by and obtain Step is odd subtract and obtain Example Input num Output Explanation Step is even divide by and obtain Step is even divide by and obtain Step is even divide by and obtain Step is odd subtract and obtain Example Input num Output Constraints num
fizz buzz multithreaded You have the four functions printFizz that prints the word fizz to the console printBuzz that prints the word buzz to the console printFizzBuzz that prints the word fizzbuzz to the console and printNumber that prints a given integer to the console You are given an instance of the class FizzBuzz that has four functions fizz buzz fizzbuzz and number The same instance of FizzBuzz will be passed to four different threads Thread A calls fizz that should output the word fizz Thread B calls buzz that should output the word buzz Thread C calls fizzbuzz that should output the word fizzbuzz Thread D calls number that should only output the integers Modify the given class to output the series fizz buzz where the ith token indexed of the series is fizzbuzz if i is divisible by and fizz if i is divisible by and not buzz if i is divisible by and not or i if i is not divisible by or Implement the FizzBuzz class FizzBuzz int n Initializes the object with the number n that represents the length of the sequence that should be printed void fizz printFizz Calls printFizz to output fizz void buzz printBuzz Calls printBuzz to output buzz void fizzbuzz printFizzBuzz Calls printFizzBuzz to output fizzbuzz void number printNumber Calls printnumber to output the numbers Example Input n Output fizz buzz fizz fizz buzz fizz fizzbuzz Example Input n Output fizz buzz Constraints n
find the winner of an array game Given an integer array arr of distinct integers and an integer k A game will be played between the first two elements of the array i e arr and arr In each round of the game we compare arr with arr the larger integer wins and remains at position and the smaller integer moves to the end of the array The game ends when an integer wins k consecutive rounds Return the integer which will win the game It is guaranteed that there will be a winner of the game Example Input arr k Output Explanation Let s see the rounds of the game Round arr winner So we can see that rounds will be played and is the winner because it wins consecutive games Example Input arr k Output Explanation will win the first rounds consecutively Constraints arr length arr i arr contains distinct integers k
find the highest altitude There is a biker going on a road trip The road trip consists of n points at different altitudes The biker starts his trip on point with altitude equal You are given an integer array gain of length n where gain i is the net gain in altitude between points i and i for all i n Return the highest altitude of a point Example Input gain Output Explanation The altitudes are The highest is Example Input gain Output Explanation The altitudes are The highest is Constraints n gain length n gain i
binary tree coloring game Two players play a turn based game on a binary tree We are given the root of this binary tree and the number of nodes n in the tree n is odd and each node has a distinct value from to n Initially the first player names a value x with x n and the second player names a value y with y n and y x The first player colors the node with value x red and the second player colors the node with value y blue Then the players take turns starting with the first player In each turn that player chooses a node of their color red if player blue if player and colors an uncolored neighbor of the chosen node either the left child right child or parent of the chosen node If and only if a player cannot choose such a node in this way they must pass their turn If both players pass their turn the game ends and the winner is the player that colored more nodes You are the second player If it is possible to choose such a y to ensure you win the game return true If it is not possible return false Example Input root n x Output true Explanation The second player can choose the node with value Example Input root n x Output false Constraints The number of nodes in the tree is n x n n is odd Node val n All the values of the tree are unique
closest prime numbers in range Given two positive integers left and right find the two integers and such that left right and are both prime numbers is the minimum amongst all other pairs satisfying the above conditions Return the positive integer array ans If there are multiple pairs satisfying these conditions return the one with the minimum value or if such numbers do not exist A number greater than is called prime if it is only divisible by and itself Example Input left right Output Explanation The prime numbers between and are and The closest gap between any pair is which can be achieved by or Since is smaller than we return the first pair Example Input left right Output Explanation There exists only one prime number in the given range so the conditions cannot be satisfied Constraints left right
avoid flood in the city Your country has an infinite number of lakes Initially all the lakes are empty but when it rains over the nth lake the nth lake becomes full of water If it rains over a lake that is full of water there will be a flood Your goal is to avoid floods in any lake Given an integer array rains where rains i means there will be rains over the rains i lake rains i means there are no rains this day and you can choose one lake this day and dry it Return an array ans where ans length rains length ans i if rains i ans i is the lake you choose to dry in the ith day if rains i If there are multiple valid answers return any of them If it is impossible to avoid flood return an empty array Notice that if you chose to dry a full lake it becomes empty but if you chose to dry an empty lake nothing changes Example Input rains Output Explanation After the first day full lakes are After the second day full lakes are After the third day full lakes are After the fourth day full lakes are There s no day to dry any lake and there is no flood in any lake Example Input rains Output Explanation After the first day full lakes are After the second day full lakes are After the third day we dry lake Full lakes are After the fourth day we dry lake There is no full lakes After the fifth day full lakes are After the sixth day full lakes are It is easy that this scenario is flood free is another acceptable scenario Example Input rains Output Explanation After the second day full lakes are We have to dry one lake in the third day After that it will rain over lakes It s easy to prove that no matter which lake you choose to dry in the day the other one will flood Constraints rains length rains i
find the longest balanced substring of a binary string You are given a binary string s consisting only of zeroes and ones A substring of s is considered balanced if all zeroes are before ones and the number of zeroes is equal to the number of ones inside the substring Notice that the empty substring is considered a balanced substring Return the length of the longest balanced substring of s A substring is a contiguous sequence of characters within a string Example Input s Output Explanation The longest balanced substring is which has length Example Input s Output Explanation The longest balanced substring is which has length Example Input s Output Explanation There is no balanced substring except the empty substring so the answer is Constraints s length s i
shortest distance to a character Given a string s and a character c that occurs in s return an array of integers answer where answer length s length and answer i is the distance from index i to the closest occurrence of character c in s The distance between two indices i and j is abs i j where abs is the absolute value function Example Input s loveleetcode c e Output Explanation The character e appears at indices and indexed The closest occurrence of e for index is at index so the distance is abs The closest occurrence of e for index is at index so the distance is abs For index there is a tie between the e at index and the e at index but the distance is still the same abs abs The closest occurrence of e for index is at index so the distance is abs Example Input s aaab c b Output Constraints s length s i and c are lowercase English letters It is guaranteed that c occurs at least once in s
largest local values in a matrix You are given an n x n integer matrix grid Generate an integer matrix maxLocal of size n x n such that maxLocal i j is equal to the largest value of the x matrix in grid centered around row i and column j In other words we want to find the largest value in every contiguous x matrix in grid Return the generated matrix Example Input grid Output Explanation The diagram above shows the original matrix and the generated matrix Notice that each value in the generated matrix corresponds to the largest value of a contiguous x matrix in grid Example Input grid Output Explanation Notice that the is contained within every contiguous x matrix in grid Constraints n grid length grid i length n grid i j
smallest good base Given an integer n represented as a string return the smallest good base of n We call k a good base of n if all digits of n base k are s Example Input n Output Explanation base is Example Input n Output Explanation base is Example Input n Output Explanation base is Constraints n is an integer in the range n does not contain any leading zeros
check if matrix is x-matrix A square matrix is said to be an X Matrix if both of the following conditions hold All the elements in the diagonals of the matrix are non zero All other elements are Given a integer array grid of size n x n representing a square matrix return true if grid is an X Matrix Otherwise return false Example Input grid Output true Explanation Refer to the diagram above An X Matrix should have the green elements diagonals be non zero and the red elements be Thus grid is an X Matrix Example Input grid Output false Explanation Refer to the diagram above An X Matrix should have the green elements diagonals be non zero and the red elements be Thus grid is not an X Matrix Constraints n grid length grid i length n grid i j
check if all the integers in a range are covered You are given a integer array ranges and two integers left and right Each ranges i starti endi represents an inclusive interval between starti and endi Return true if each integer in the inclusive range left right is covered by at least one interval in ranges Return false otherwise An integer x is covered by an interval ranges i starti endi if starti x endi Example Input ranges left right Output true Explanation Every integer between and is covered is covered by the first range and are covered by the second range is covered by the third range Example Input ranges left right Output false Explanation is not covered by any range Constraints ranges length starti endi left right
minimum subsequence in non-increasing order Given the array nums obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non included elements in such subsequence If there are multiple solutions return the subsequence with minimum size and if there still exist multiple solutions return the subsequence with the maximum total sum of all its elements A subsequence of an array can be obtained by erasing some possibly zero elements from the array Note that the solution with the given constraints is guaranteed to be unique Also return the answer sorted in non increasing order Example Input nums Output Explanation The subsequences and are minimal such that the sum of their elements is strictly greater than the sum of elements not included However the subsequence has the maximum total sum of its elements Example Input nums Output Explanation The subsequence has the sum of its elements equal to which is not strictly greater than the sum of elements not included Therefore the subsequence is the minimal satisfying the conditions Note the subsequence has to be returned in non decreasing order Constraints nums length nums i
wildcard matching Given an input string s and a pattern p implement wildcard pattern matching with support for and where Matches any single character Matches any sequence of characters including the empty sequence The matching should cover the entire input string not partial Example Input s aa p a Output false Explanation a does not match the entire string aa Example Input s aa p Output true Explanation matches any sequence Example Input s cb p a Output false Explanation matches c but the second letter is a which does not match b Constraints s length p length s contains only lowercase English letters p contains only lowercase English letters or
largest number after digit swaps by parity You are given a positive integer num You may swap any two digits of num that have the same parity i e both odd digits or both even digits Return the largest possible value of num after any number of swaps Example Input num Output Explanation Swap the digit with the digit this results in the number Swap the digit with the digit this results in the number Note that there may be other sequences of swaps but it can be shown that is the largest possible number Also note that we may not swap the digit with the digit since they are of different parities Example Input num Output Explanation Swap the digit with the digit this results in the number Swap the first digit with the digit this results in the number Note that there may be other sequences of swaps but it can be shown that is the largest possible number Constraints num
longest cycle in a graph You are given a directed graph of n nodes numbered from to n where each node has at most one outgoing edge The graph is represented with a given indexed array edges of size n indicating that there is a directed edge from node i to node edges i If there is no outgoing edge from node i then edges i Return the length of the longest cycle in the graph If no cycle exists return A cycle is a path that starts and ends at the same node Example Input edges Output Explanation The longest cycle in the graph is the cycle The length of this cycle is so is returned Example Input edges Output Explanation There are no cycles in this graph Constraints n edges length n edges i n edges i i
minimum number of increments on subarrays to form a target array You are given an integer array target You have an integer array initial of the same size as target with all elements initially zeros In one operation you can choose any subarray from initial and increment each value by one Return the minimum number of operations to form a target array from initial The test cases are generated so that the answer fits in a bit integer Example Input target Output Explanation We need at least operations to form the target array from the initial array increment from index to inclusive increment from index to inclusive increment at index target array is formed Example Input target Output Explanation Example Input target Output Explanation Constraints target length target i
island perimeter You are given row x col grid representing a map where grid i j represents land and grid i j represents water Grid cells are connected horizontally vertically not diagonally The grid is completely surrounded by water and there is exactly one island i e one or more connected land cells The island doesn t have lakes meaning the water inside isn t connected to the water around the island One cell is a square with side length The grid is rectangular width and height don t exceed Determine the perimeter of the island Example Input grid Output Explanation The perimeter is the yellow stripes in the image above Example Input grid Output Example Input grid Output Constraints row grid length col grid i length row col grid i j is or There is exactly one island in grid
evaluate boolean binary tree You are given the root of a full binary tree with the following properties Leaf nodes have either the value or where represents False and represents True Non leaf nodes have either the value or where represents the boolean OR and represents the boolean AND The evaluation of a node is as follows If the node is a leaf node the evaluation is the value of the node i e True or False Otherwise evaluate the node s two children and apply the boolean operation of its value with the children s evaluations Return the boolean result of evaluating the root node A full binary tree is a binary tree where each node has either or children A leaf node is a node that has zero children Example Input root null null Output true Explanation The above diagram illustrates the evaluation process The AND node evaluates to False AND True False The OR node evaluates to True OR False True The root node evaluates to True so we return true Example Input root Output false Explanation The root node is a leaf node and it evaluates to false so we return false Constraints The number of nodes in the tree is in the range Node val Every node has either or children Leaf nodes have a value of or Non leaf nodes have a value of or
difference of number of distinct values on diagonals Given a indexed grid of size m x n you should find the matrix answer of size m x n The value of each cell r c of the matrix answer is calculated in the following way Let topLeft r c be the number of distinct values in the top left diagonal of the cell r c in the matrix grid Let bottomRight r c be the number of distinct values in the bottom right diagonal of the cell r c in the matrix grid Then answer r c topLeft r c bottomRight r c Return the matrix answer A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom right direction until reaching the matrix s end A cell belongs to the top left diagonal of the cell r c if both belong to the same diagonal and r Similarly is defined bottom right diagonal Example Input grid Output Explanation The diagram denotes the initial grid The diagram denotes a grid for cell where blue colored cells are cells on its bottom right diagonal The diagram denotes a grid for cell where red colored cells are cells on its top left diagonal The diagram denotes a grid for cell where blue colored cells are cells on its bottom right diagonal and red colored cells are cells on its top left diagonal The cell contains on its bottom right diagonal and on its top left diagonal The answer is The cell contains on its bottom right diagonal and on its top left diagonal The answer is The cell contains on its bottom right diagonal and on its top left diagonal The answer is The answers of other cells are similarly calculated Example Input grid Output Explanation The cell contains on its bottom right diagonal and on its top left diagonal The answer is Constraints m grid length n grid i length m n grid i j
chunk array Given an array arr and a chunk size size return a chunked array A chunked array contains the original elements in arr but consists of subarrays each of length size The length of the last subarray may be less than size if arr length is not evenly divisible by size You may assume the array is the output of JSON parse In other words it is valid JSON Please solve it without using lodash s chunk function Example Input arr size Output Explanation The arr has been split into subarrays each with element Example Input arr size Output Explanation The arr has been split into subarrays with elements However only two elements are left for the subarray Example Input arr size Output Explanation Size is greater than arr length thus all elements are in the first subarray Example Input arr size Output Explanation There are no elements to be chunked so an empty array is returned Constraints arr is a valid JSON array JSON stringify arr length size arr length
132 pattern Given an array of n integers nums a pattern is a subsequence of three integers nums i nums j and nums k such that i j k and nums i nums k nums j Return true if there is a pattern in nums otherwise return false Example Input nums Output false Explanation There is no pattern in the sequence Example Input nums Output true Explanation There is a pattern in the sequence Example Input nums Output true Explanation There are three patterns in the sequence and Constraints n nums length n nums i
count good numbers A digit string is good if the digits indexed at even indices are even and the digits at odd indices are prime or For example is good because the digits and at even positions are even and the digits and at odd positions are prime However is not good because is at an even index but is not even Given an integer n return the total number of good digit strings of length n Since the answer may be large return it modulo A digit string is a string consisting of digits through that may contain leading zeros Example Input n Output Explanation The good numbers of length are Example Input n Output Example Input n Output Constraints n
student attendance record i You are given a string s representing an attendance record for a student where each character signifies whether the student was absent late or present on that day The record only contains the following three characters A Absent L Late P Present The student is eligible for an attendance award if they meet both of the following criteria The student was absent A for strictly fewer than days total The student was never late L for or more consecutive days Return true if the student is eligible for an attendance award or false otherwise Example Input s PPALLP Output true Explanation The student has fewer than absences and was never late or more consecutive days Example Input s PPALLL Output false Explanation The student was late consecutive days in the last days so is not eligible for the award Constraints s length s i is either A L or P
grid illumination There is a grid of size n x n where each cell of this grid has a lamp that is initially turned off You are given a array of lamp positions lamps where lamps i rowi coli indicates that the lamp at grid rowi coli is turned on Even if the same lamp is listed more than once it is turned on When a lamp is turned on it illuminates its cell and all other cells in the same row column or diagonal You are also given another array queries where queries j rowj colj For the jth query determine whether grid rowj colj is illuminated or not After answering the jth query turn off the lamp at grid rowj colj and its adjacent lamps if they exist A lamp is adjacent if its cell shares either a side or corner with grid rowj colj Return an array of integers ans where ans j should be if the cell in the jth query was illuminated or if the lamp was not Example Input n lamps queries Output Explanation We have the initial grid with all lamps turned off In the above picture we see the grid after turning on the lamp at grid then turning on the lamp at grid The query asks if the lamp at grid is illuminated or not the blue square It is illuminated so set ans Then we turn off all lamps in the red square The query asks if the lamp at grid is illuminated or not the blue square It is not illuminated so set ans Then we turn off all lamps in the red rectangle Example Input n lamps queries Output Example Input n lamps queries Output Constraints n lamps length queries length lamps i length rowi coli n queries j length rowj colj n
course schedule ii There are a total of numCourses courses you have to take labeled from to numCourses You are given an array prerequisites where prerequisites i ai bi indicates that you must take course bi first if you want to take course ai For example the pair indicates that to take course you have to first take course Return the ordering of courses you should take to finish all courses If there are many valid answers return any of them If it is impossible to finish all courses return an empty array Example Input numCourses prerequisites Output Explanation There are a total of courses to take To take course you should have finished course So the correct course order is Example Input numCourses prerequisites Output Explanation There are a total of courses to take To take course you should have finished both courses and Both courses and should be taken after you finished course So one correct course order is Another correct ordering is Example Input numCourses prerequisites Output Constraints numCourses prerequisites length numCourses numCourses prerequisites i length ai bi numCourses ai bi All the pairs ai bi are distinct
check if object instance of class Write a function that checks if a given value is an instance of a given class or superclass For this problem an object is considered an instance of a given class if that object has access to that class s methods There are no constraints on the data types that can be passed to the function For example the value or the class could be undefined Example Input func checkIfInstanceOf new Date Date Output true Explanation The object returned by the Date constructor is by definition an instance of Date Example Input func class Animal class Dog extends Animal return checkIfInstanceOf new Dog Animal Output true Explanation class Animal class Dog extends Animal checkIfInstance new Dog Animal true Dog is a subclass of Animal Therefore a Dog object is an instance of both Dog and Animal Example Input func checkIfInstanceOf Date Date Output false Explanation A date constructor cannot logically be an instance of itself Example Input func checkIfInstanceOf Number Output true Explanation is a Number Note that the instanceof keyword would return false However it is still considered an instance of Number because it accesses the Number methods For example toFixed
delete nodes and return forest Given the root of a binary tree each node in the tree has a distinct value After deleting all nodes with a value in we are left with a forest a disjoint union of trees Return the roots of the trees in the remaining forest You may return the result in any order Example Input root Output null Example Input root null Output Constraints The number of nodes in the given tree is at most Each node has a distinct value between and length contains distinct values between and
keyboard row Given an array of strings words return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below In the American keyboard the first row consists of the characters qwertyuiop the second row consists of the characters asdfghjkl and the third row consists of the characters zxcvbnm Example Input words Hello Alaska Dad Peace Output Alaska Dad Example Input words omk Output Example Input words adsdf sfd Output adsdf sfd Constraints words length words i length words i consists of English letters both lowercase and uppercase
diameter of binary tree Given the root of a binary tree return the length of the diameter of the tree The diameter of a binary tree is the length of the longest path between any two nodes in a tree This path may or may not pass through the root The length of a path between two nodes is represented by the number of edges between them Example Input root Output Explanation is the length of the path or Example Input root Output Constraints The number of nodes in the tree is in the range Node val
create sorted array through instructions Given an integer array instructions you are asked to create a sorted array from the elements in instructions You start with an empty container nums For each element from left to right in instructions insert it into nums The cost of each insertion is the minimum of the following The number of elements currently in nums that are strictly less than instructions i The number of elements currently in nums that are strictly greater than instructions i For example if inserting element into nums the cost of insertion is min elements and are less than element is greater than and nums will become Return the total cost to insert all elements from instructions into nums Since the answer may be large return it modulo Example Input instructions Output Explanation Begin with nums Insert with cost min now nums Insert with cost min now nums Insert with cost min now nums Insert with cost min now nums The total cost is Example Input instructions Output Explanation Begin with nums Insert with cost min now nums Insert with cost min now nums Insert with cost min now nums Insert with cost min now nums Insert with cost min now nums Insert with cost min now nums The total cost is Example Input instructions Output Explanation Begin with nums Insert with cost min now nums Insert with cost min now nums Insert with cost min now nums Insert with cost min now nums Insert with cost min now nums Insert with cost min now nums Insert with cost min now nums Insert with cost min now nums Insert with cost min now nums The total cost is Constraints instructions length instructions i
swap salary SQL Schema Table Salary Column Name Type id int name varchar sex ENUM salary int id is the primary key for this table The sex column is ENUM value of type m f The table contains information about an employee Write an SQL query to swap all f and m values i e change all f values to m and vice versa with a single update statement and no intermediate temporary tables Note that you must write a single update statement do not write any select statement for this problem The query result format is in the following example Example Input Salary table id name sex salary A m B f C m D f Output id name sex salary A f B m C f D m Explanation A and C were changed from m to f B and D were changed from f to m
maximum product after k increments You are given an array of non negative integers nums and an integer k In one operation you may choose any element from nums and increment it by Return the maximum product of nums after at most k operations Since the answer may be very large return it modulo Note that you should maximize the product before taking the modulo Example Input nums k Output Explanation Increment the first number times Now nums with a product of It can be shown that is maximum product possible so we return Note that there may be other ways to increment nums to have the maximum product Example Input nums k Output Explanation Increment the second number time and increment the fourth number time Now nums with a product of It can be shown that is maximum product possible so we return Note that there may be other ways to increment nums to have the maximum product Constraints nums length k nums i
minimum amount of time to fill cups You have a water dispenser that can dispense cold warm and hot water Every second you can either fill up cups with different types of water or cup of any type of water You are given a indexed integer array amount of length where amount amount and amount denote the number of cold warm and hot water cups you need to fill respectively Return the minimum number of seconds needed to fill up all the cups Example Input amount Output Explanation One way to fill up the cups is Second Fill up a cold cup and a warm cup Second Fill up a warm cup and a hot cup Second Fill up a warm cup and a hot cup Second Fill up a warm cup It can be proven that is the minimum number of seconds needed Example Input amount Output Explanation One way to fill up the cups is Second Fill up a cold cup and a hot cup Second Fill up a cold cup and a warm cup Second Fill up a cold cup and a warm cup Second Fill up a warm cup and a hot cup Second Fill up a cold cup and a hot cup Second Fill up a cold cup and a warm cup Second Fill up a hot cup Example Input amount Output Explanation Every second we fill up a cold cup Constraints amount length amount i
maximum score of spliced array You are given two indexed integer arrays and both of length n You can choose two integers left and right where left right n and swap the subarray left right with the subarray left right For example if and and you choose left and right becomes and becomes You may choose to apply the mentioned operation once or not do anything The score of the arrays is the maximum of sum and sum where sum arr is the sum of all the elements in the array arr Return the maximum possible score A subarray is a contiguous sequence of elements within an array arr left right denotes the subarray that contains the elements of nums between indices left and right inclusive Example Input Output Explanation Choosing left and right we have and The score is max sum sum max Example Input Output Explanation Choosing left right we have and The score is max sum sum max Example Input Output Explanation We choose not to swap any subarray The score is max sum sum max Constraints n length length n i i
find the string with lcp We define the lcp matrix of any indexed string word of n lowercase English letters as an n x n grid such that lcp i j is equal to the length of the longest common prefix between the substrings word i n and word j n Given an n x n matrix lcp return the alphabetically smallest string word that corresponds to lcp If there is no such string return an empty string A string a is lexicographically smaller than a string b of the same length if in the first position where a and b differ string a has a letter that appears earlier in the alphabet than the corresponding letter in b For example aabd is lexicographically smaller than aaca because the first position they differ is at the third letter and b comes before c Example Input lcp Output abab Explanation lcp corresponds to any letter string with two alternating letters The lexicographically smallest of them is abab Example Input lcp Output aaaa Explanation lcp corresponds to any letter string with a single distinct letter The lexicographically smallest of them is aaaa Example Input lcp Output Explanation lcp cannot be equal to since word consists of only a single letter Thus no answer exists Constraints n lcp length lcp i length lcp i j n
largest number after mutating substring You are given a string num which represents a large integer You are also given a indexed integer array change of length that maps each digit to another digit More formally digit d maps to digit change d You may choose to mutate a single substring of num To mutate a substring replace each digit num i with the digit it maps to in change i e replace num i with change num i Return a string representing the largest possible integer after mutating or choosing not to a single substring of num A substring is a contiguous sequence of characters within the string Example Input num change Output Explanation Replace the substring maps to change Thus becomes is the largest number that can be created so return it Example Input num change Output Explanation Replace the substring maps to change maps to change maps to change Thus becomes is the largest number that can be created so return it Example Input num change Output Explanation is already the largest number that can be created so return it Constraints num length num consists of only digits change length change d
minimum number of operations to sort a binary tree by level You are given the root of a binary tree with unique values In one operation you can choose any two nodes at the same level and swap their values Return the minimum number of operations needed to make the values at each level sorted in a strictly increasing order The level of a node is the number of edges along the path between it and the root node Example Input root null null null null null Output Explanation Swap and The level becomes Swap and The level becomes Swap and The level becomes We used operations so return It can be proven that is the minimum number of operations needed Example Input root Output Explanation Swap and The level becomes Swap and The level becomes Swap and The level becomes We used operations so return It can be proven that is the minimum number of operations needed Example Input root Output Explanation Each level is already sorted in increasing order so return Constraints The number of nodes in the tree is in the range Node val All the values of the tree are unique
minimum operations to make array equal You have an array arr of length n where arr i i for all valid values of i i e i n In one operation you can select two indices x and y where x y n and subtract from arr x and add to arr y i e perform arr x and arr y The goal is to make all the elements of the array equal It is guaranteed that all the elements of the array can be made equal using some operations Given an integer n the length of the array return the minimum number of operations needed to make all the elements of arr equal Example Input n Output Explanation arr First operation choose x and y this leads arr to be In the second operation choose x and y again thus arr Example Input n Output Constraints n
minimum cost to split an array You are given an integer array nums and an integer k Split the array into some number of non empty subarrays The cost of a split is the sum of the importance value of each subarray in the split Let trimmed subarray be the version of the subarray where all numbers which appear only once are removed For example trimmed The importance value of a subarray is k trimmed subarray length For example if a subarray is then trimmed The importance value of this subarray will be k Return the minimum possible cost of a split of nums A subarray is a contiguous non empty sequence of elements within an array Example Input nums k Output Explanation We split nums to have two subarrays The importance value of is The importance value of is The cost of the split is It can be shown that this is the minimum possible cost among all the possible splits Example Input nums k Output Explanation We split nums to have two subarrays The importance value of is The importance value of is The cost of the split is It can be shown that this is the minimum possible cost among all the possible splits Example Input nums k Output Explanation We split nums to have one subarray The importance value of is The cost of the split is It can be shown that this is the minimum possible cost among all the possible splits Constraints nums length nums i nums length k
random pick with weight You are given a indexed array of positive integers w where w i describes the weight of the ith index You need to implement the function pickIndex which randomly picks an index in the range w length inclusive and returns it The probability of picking an index i is w i sum w For example if w the probability of picking index is i e and the probability of picking index is i e Example Input Solution pickIndex Output null Explanation Solution solution new Solution solution pickIndex return The only option is to return since there is only one element in w Example Input Solution pickIndex pickIndex pickIndex pickIndex pickIndex Output null Explanation Solution solution new Solution solution pickIndex return It is returning the second element index that has a probability of solution pickIndex return solution pickIndex return solution pickIndex return solution pickIndex return It is returning the first element index that has a probability of Since this is a randomization problem multiple answers are allowed All of the following outputs can be considered correct null null null null null and so on Constraints w length w i pickIndex will be called at most times
time needed to rearrange a binary string You are given a binary string s In one second all occurrences of are simultaneously replaced with This process repeats until no occurrences of exist Return the number of seconds needed to complete this process Example Input s Output Explanation After one second s becomes After another second s becomes After the third second s becomes After the fourth second s becomes No occurrence of exists any longer and the process needed seconds to complete so we return Example Input s Output Explanation No occurrence of exists in s and the processes needed seconds to complete so we return Constraints s length s i is either or Follow up Can you solve this problem in O n time complexity
partition array such that maximum difference is k You are given an integer array nums and an integer k You may partition nums into one or more subsequences such that each element in nums appears in exactly one of the subsequences Return the minimum number of subsequences needed such that the difference between the maximum and minimum values in each subsequence is at most k A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements Example Input nums k Output Explanation We can partition nums into the two subsequences and The difference between the maximum and minimum value in the first subsequence is The difference between the maximum and minimum value in the second subsequence is Since two subsequences were created we return It can be shown that is the minimum number of subsequences needed Example Input nums k Output Explanation We can partition nums into the two subsequences and The difference between the maximum and minimum value in the first subsequence is The difference between the maximum and minimum value in the second subsequence is Since two subsequences were created we return Note that another optimal solution is to partition nums into the two subsequences and Example Input nums k Output Explanation We can partition nums into the three subsequences and The difference between the maximum and minimum value in the first subsequences is The difference between the maximum and minimum value in the second subsequences is The difference between the maximum and minimum value in the third subsequences is Since three subsequences were created we return It can be shown that is the minimum number of subsequences needed Constraints nums length nums i k
generate random point in a circle Given the radius and the position of the center of a circle implement the function randPoint which generates a uniform random point inside the circle Implement the Solution class Solution double radius double double initializes the object with the radius of the circle radius and the position of the center randPoint returns a random point inside the circle A point on the circumference of the circle is considered to be in the circle The answer is returned as an array x y Example Input Solution randPoint randPoint randPoint Output null Explanation Solution solution new Solution solution randPoint return solution randPoint return solution randPoint return Constraints radius At most calls will be made to randPoint
self dividing numbers A self dividing number is a number that is divisible by every digit it contains For example is a self dividing number because and A self dividing number is not allowed to contain the digit zero Given two integers left and right return a list of all the self dividing numbers in the range left right Example Input left right Output Example Input left right Output Constraints left right
consecutive numbers SQL Schema Table Logs Column Name Type id int num varchar id is the primary key for this table id is an autoincrement column Write an SQL query to find all numbers that appear at least three times consecutively Return the result table in any order The query result format is in the following example Example Input Logs table id num Output ConsecutiveNums Explanation is the only number that appears consecutively for at least three times
can make arithmetic progression from sequence A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same Given an array of numbers arr return true if the array can be rearranged to form an arithmetic progression Otherwise return false Example Input arr Output true Explanation We can reorder the elements as or with differences and respectively between each consecutive elements Example Input arr Output false Explanation There is no way to reorder the elements to obtain an arithmetic progression Constraints arr length arr i
sum multiples Given a positive integer n find the sum of all integers in the range n inclusive that are divisible by or Return an integer denoting the sum of all numbers in the given range satisfying the constraint Example Input n Output Explanation Numbers in the range that are divisible by or are The sum of these numbers is Example Input n Output Explanation Numbers in the range that are divisible by or are The sum of these numbers is Example Input n Output Explanation Numbers in the range that are divisible by or are The sum of these numbers is Constraints n
rotate function You are given an integer array nums of length n Assume arrk to be an array obtained by rotating nums by k positions clock wise We define the rotation function F on nums as follow F k arrk arrk n arrk n Return the maximum value of F F F n The test cases are generated so that the answer fits in a bit integer Example Input nums Output Explanation F F F F So the maximum value of F F F F is F Example Input nums Output Constraints n nums length n nums i
form smallest number from two digit arrays Given two arrays of unique digits and return the smallest number that contains at least one digit from each array Example Input Output Explanation The number contains the digit from and the digit from It can be proven that is the smallest number we can have Example Input Output Explanation The number contains the digit which exists in both arrays Constraints length length i i All digits in each array are unique
count negative numbers in a sorted matrix Given a m x n matrix grid which is sorted in non increasing order both row wise and column wise return the number of negative numbers in grid Example Input grid Output Explanation There are negatives number in the matrix Example Input grid Output Constraints m grid length n grid i length m n grid i j Follow up Could you find an O n m solution
predict the winner You are given an integer array nums Two players are playing a game with this array player and player Player and player take turns with player starting first Both players start the game with a score of At each turn the player takes one of the numbers from either end of the array i e nums or nums nums length which reduces the size of the array by The player adds the chosen number to their score The game ends when there are no more elements in the array Return true if Player can win the game If the scores of both players are equal then player is still the winner and you should also return true You may assume that both players are playing optimally Example Input nums Output false Explanation Initially player can choose between and If he chooses or then player can choose from or and If player chooses then player will be left with or So final score of player is and player is Hence player will never be the winner and you need to return false Example Input nums Output true Explanation Player first chooses Then player has to choose between and No matter which number player choose player can choose Finally player has more score than player so you need to return True representing can win Constraints nums length nums i
minimize the difference between target and chosen elements You are given an m x n integer matrix mat and an integer target Choose one integer from each row in the matrix such that the absolute difference between target and the sum of the chosen elements is minimized Return the minimum absolute difference The absolute difference between two numbers a and b is the absolute value of a b Example Input mat target Output Explanation One possible choice is to Choose from the first row Choose from the second row Choose from the third row The sum of the chosen elements is which equals the target so the absolute difference is Example Input mat target Output Explanation The best possible choice is to Choose from the first row Choose from the second row Choose from the third row The sum of the chosen elements is and the absolute difference is Example Input mat target Output Explanation The best choice is to choose from the first row The absolute difference is Constraints m mat length n mat i length m n mat i j target
smallest subarrays with maximum bitwise or You are given a indexed array nums of length n consisting of non negative integers For each index i from to n you must determine the size of the minimum sized non empty subarray of nums starting at i inclusive that has the maximum possible bitwise OR In other words let Bij be the bitwise OR of the subarray nums i j You need to find the smallest subarray starting at i such that bitwise OR of this subarray is equal to max Bik where i k n The bitwise OR of an array is the bitwise OR of all the numbers in it Return an integer array answer of size n where answer i is the length of the minimum sized subarray starting at i with maximum bitwise OR A subarray is a contiguous non empty sequence of elements within an array Example Input nums Output Explanation The maximum possible bitwise OR starting at any index is Starting at index the shortest subarray that yields it is Starting at index the shortest subarray that yields the maximum bitwise OR is Starting at index the shortest subarray that yields the maximum bitwise OR is Starting at index the shortest subarray that yields the maximum bitwise OR is Starting at index the shortest subarray that yields the maximum bitwise OR is Therefore we return Example Input nums Output Explanation Starting at index the shortest subarray that yields the maximum bitwise OR is of length Starting at index the shortest subarray that yields the maximum bitwise OR is of length Therefore we return Constraints n nums length n nums i
maximum tastiness of candy basket You are given an array of positive integers price where price i denotes the price of the ith candy and a positive integer k The store sells baskets of k distinct candies The tastiness of a candy basket is the smallest absolute difference of the prices of any two candies in the basket Return the maximum tastiness of a candy basket Example Input price k Output Explanation Choose the candies with the prices The tastiness of the candy basket is min min It can be proven that is the maximum tastiness that can be achieved Example Input price k Output Explanation Choose the candies with the prices The tastiness of the candy basket is min min It can be proven that is the maximum tastiness that can be achieved Example Input price k Output Explanation Choosing any two distinct candies from the candies we have will result in a tastiness of Constraints k price length price i
restaurant growth SQL Schema Table Customer Column Name Type int name varchar date amount int is the primary key for this table This table contains data about customer transactions in a restaurant is the date on which the customer with ID has visited the restaurant amount is the total paid by a customer You are the restaurant owner and you want to analyze a possible expansion there will be at least one customer every day Write an SQL query to compute the moving average of how much the customer paid in a seven days window i e current day days before should be rounded to two decimal places Return result table ordered by in ascending order The query result format is in the following example Example Input Customer table name amount Jhon Daniel Jade Khaled Winston Elvis Anna Maria Jaze Jhon Jade Output amount Explanation moving average from to has an of moving average from to has an of moving average from to has an of moving average from to has an of
merge bsts to create single bst You are given n BST binary search tree root nodes for n separate BSTs stored in an array trees indexed Each BST in trees has at most nodes and no two roots have the same value In one operation you can Select two distinct indices i and j such that the value stored at one of the leaves of trees i is equal to the root value of trees j Replace the leaf node in trees i with trees j Remove trees j from trees Return the root of the resulting BST if it is possible to form a valid BST after performing n operations or null if it is impossible to create a valid BST A BST binary search tree is a binary tree where each node satisfies the following property Every node in the node s left subtree has a value strictly less than the node s value Every node in the node s right subtree has a value strictly greater than the node s value A leaf is a node that has no children Example Input trees Output null Explanation In the first operation pick i and j and merge trees into trees Delete trees so trees In the second operation pick i and j and merge trees into trees Delete trees so trees null The resulting tree shown above is a valid BST so return its root Example Input trees Output Explanation Pick i and j and merge trees into trees Delete trees so trees The resulting tree is shown above This is the only valid operation that can be performed but the resulting tree is not a valid BST so return null Example Input trees Output Explanation It is impossible to perform any operations Constraints n trees length n The number of nodes in each tree is in the range Each node in the input may have children but no grandchildren No two roots of trees have the same value All the trees in the input are valid BSTs TreeNode val
ambiguous coordinates We had some dimensional coordinates like or Then we removed all commas decimal points and spaces and ended up with the string s For example becomes s and becomes s Return a list of strings representing all possibilities for what our original coordinates could have been Our original representation never had extraneous zeroes so we never started with numbers like or any other number that can be represented with fewer digits Also a decimal point within a number never occurs without at least one digit occurring before it so we never started with numbers like The final answer list can be returned in any order All coordinates in the final answer have exactly one space between them occurring after the comma Example Input s Output Example Input s Output Explanation or are not allowed Example Input s Output Constraints s length s and s s length The rest of s are digits
minimum cost of a path with special roads You are given an array start where start startX startY represents your initial position startX startY in a space You are also given the array target where target targetX targetY represents your target position targetX targetY The cost of going from a position to any other position in the space is There are also some special roads You are given a array specialRoads where specialRoads i costi indicates that the ith special road can take you from to with a cost equal to costi You can use each special road any number of times Return the minimum cost required to go from startX startY to targetX targetY Example Input start target specialRoads Output Explanation The optimal path from to is the following This move has a cost of This move uses the first special edge the cost is This move has a cost of This move uses the second special edge the cost is So the total cost is It can be shown that we cannot achieve a smaller total cost than Example Input start target specialRoads Output Explanation It is optimal to not use any special edges and go directly from the starting to the ending position with a cost Constraints start length target length startX targetX startY targetY specialRoads length specialRoads i length startX targetX startY targetY costi
smallest subtree with all the deepest nodes Given the root of a binary tree the depth of each node is the shortest distance to the root Return the smallest subtree such that it contains all the deepest nodes in the original tree A node is called the deepest if it has the largest depth possible among any node in the entire tree The subtree of a node is a tree consisting of that node plus the set of all descendants of that node Example Input root null null Output Explanation We return the node with value colored in yellow in the diagram The nodes coloured in blue are the deepest nodes of the tree Notice that nodes and contain the deepest nodes in the tree but node is the smallest subtree among them so we return it Example Input root Output Explanation The root is the deepest node in the tree Example Input root null Output Explanation The deepest node in the tree is the valid subtrees are the subtrees of nodes and but the subtree of node is the smallest Constraints The number of nodes in the tree will be in the range Node val The values of the nodes in the tree are unique Note This question is the same as https leetcode com problems lowest common ancestor of deepest leaves
product sales analysis iii SQL Schema Table Sales Column Name Type int int year int quantity int price int year is the primary key of this table is a foreign key to Product table Each row of this table shows a sale on the product in a certain year Note that the price is per unit Table Product Column Name Type int varchar is the primary key of this table Each row of this table indicates the product name of each product Write an SQL query that selects the product id year quantity and price for the first year of every product sold Return the resulting table in any order The query result format is in the following example Example Input Sales table year quantity price Product table Nokia Apple Samsung Output quantity price
minimum operations to make the array increasing You are given an integer array nums indexed In one operation you can choose an element of the array and increment it by For example if nums you can choose to increment nums to make nums Return the minimum number of operations needed to make nums strictly increasing An array nums is strictly increasing if nums i nums i for all i nums length An array of length is trivially strictly increasing Example Input nums Output Explanation You can do the following operations Increment nums so nums becomes Increment nums so nums becomes Increment nums so nums becomes Example Input nums Output Example Input nums Output Constraints nums length nums i
number of valid clock times You are given a string of length called time representing the current time on a digital clock in the format hh mm The earliest possible time is and the latest possible time is In the string time the digits represented by the symbol are unknown and must be replaced with a digit from to Return an integer answer the number of valid clock times that can be created by replacing every with a digit from to Example Input time Output Explanation We can replace the with either a or producing or Note that we cannot replace it with a since the time is invalid In total we have two choices Example Input time Output Explanation Each can be replaced by any digit from to so we have total choices Example Input time Output Explanation There are possible choices for the hours and possible choices for the minutes In total we have choices Constraints time is a valid string of length in the format hh mm hh mm Some of the digits might be replaced with and need to be replaced with digits from to
word ladder ii A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord sk such that Every adjacent pair of words differs by a single letter Every si for i k is in wordList Note that beginWord does not need to be in wordList sk endWord Given two words beginWord and endWord and a dictionary wordList return all the shortest transformation sequences from beginWord to endWord or an empty list if no such sequence exists Each sequence should be returned as a list of the words beginWord sk Example Input beginWord hit endWord cog wordList hot dot dog lot log cog Output hit hot dot dog cog hit hot lot log cog Explanation There are shortest transformation sequences hit hot dot dog cog hit hot lot log cog Example Input beginWord hit endWord cog wordList hot dot dog lot log Output Explanation The endWord cog is not in wordList therefore there is no valid transformation sequence Constraints beginWord length endWord length beginWord length wordList length wordList i length beginWord length beginWord endWord and wordList i consist of lowercase English letters beginWord endWord All the words in wordList are unique The sum of all shortest transformation sequences does not exceed
implement magic dictionary Design a data structure that is initialized with a list of different words Provided a string you should determine if you can change exactly one character in this string to match any word in the data structure Implement the MagicDictionary class MagicDictionary Initializes the object void buildDict String dictionary Sets the data structure with an array of distinct strings dictionary bool search String searchWord Returns true if you can change exactly one character in searchWord to match any string in the data structure otherwise returns false Example Input MagicDictionary buildDict search search search search hello leetcode hello hhllo hell leetcoded Output null null false true false false Explanation MagicDictionary magicDictionary new MagicDictionary magicDictionary buildDict hello leetcode magicDictionary search hello return False magicDictionary search hhllo We can change the second h to e to match hello so we return True magicDictionary search hell return False magicDictionary search leetcoded return False Constraints dictionary length dictionary i length dictionary i consists of only lower case English letters All the strings in dictionary are distinct searchWord length searchWord consists of only lower case English letters buildDict will be called only once before search At most calls will be made to search
to lower case Given a string s return the string after replacing every uppercase letter with the same lowercase letter Example Input s Hello Output hello Example Input s here Output here Example Input s LOVELY Output lovely Constraints s length s consists of printable ASCII characters
subtree of another tree Given the roots of two binary trees root and subRoot return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node s descendants The tree tree could also be considered as a subtree of itself Example Input root subRoot Output true Example Input root null null null null subRoot Output false Constraints The number of nodes in the root tree is in the range The number of nodes in the subRoot tree is in the range root val subRoot val
cinema seat allocation A cinema has n rows of seats numbered from to n and there are ten seats in each row labelled from to as shown in the figure above Given the array reservedSeats containing the numbers of seats already reserved for example reservedSeats i means the seat located in row and labelled with is already reserved Return the maximum number of four person groups you can assign on the cinema seats A four person group occupies four adjacent seats in one single row Seats across an aisle such as and are not considered to be adjacent but there is an exceptional case on which an aisle split a four person group in that case the aisle split a four person group in the middle which means to have two people on each side Example Input n reservedSeats Output Explanation The figure above shows the optimal allocation for four groups where seats mark with blue are already reserved and contiguous seats mark with orange are for one group Example Input n reservedSeats Output Example Input n reservedSeats Output Constraints n reservedSeats length min n reservedSeats i length reservedSeats i n reservedSeats i All reservedSeats i are distinct
uncrossed lines You are given two integer arrays and We write the integers of and in the order they are given on two separate horizontal lines We may draw connecting lines a straight line connecting two numbers i and j such that i j and the line we draw does not intersect any other connecting non horizontal line Note that a connecting line cannot intersect even at the endpoints i e each number can only belong to one connecting line Return the maximum number of connecting lines we can draw in this way Example Input Output Explanation We can draw uncrossed lines as in the diagram We cannot draw uncrossed lines because the line from to will intersect the line from to Example Input Output Example Input Output Constraints length length i j
three divisors Given an integer n return true if n has exactly three positive divisors Otherwise return false An integer m is a divisor of n if there exists an integer k such that n k m Example Input n Output false Explantion has only two divisors and Example Input n Output true Explantion has three divisors and Constraints n
max chunks to make sorted ii You are given an integer array arr We split arr into some number of chunks i e partitions and individually sort each chunk After concatenating them the result should equal the sorted array Return the largest number of chunks we can make to sort the array Example Input arr Output Explanation Splitting into two or more chunks will not return the required result For example splitting into will result in which isn t sorted Example Input arr Output Explanation We can split into two chunks such as However splitting into is the highest number of chunks possible Constraints arr length arr i
longest turbulent subarray Given an integer array arr return the length of a maximum size turbulent subarray of arr A subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray More formally a subarray arr i arr i arr j of arr is said to be turbulent if and only if For i k j arr k arr k when k is odd and arr k arr k when k is even Or for i k j arr k arr k when k is even and arr k arr k when k is odd Example Input arr Output Explanation arr arr arr arr arr Example Input arr Output Example Input arr Output Constraints arr length arr i
maximum ice cream bars It is a sweltering summer day and a boy wants to buy some ice cream bars At the store there are n ice cream bars You are given an array costs of length n where costs i is the price of the ith ice cream bar in coins The boy initially has coins coins to spend and he wants to buy as many ice cream bars as possible Note The boy can buy the ice cream bars in any order Return the maximum number of ice cream bars the boy can buy with coins coins You must solve the problem by counting sort Example Input costs coins Output Explanation The boy can buy ice cream bars at indices for a total price of Example Input costs coins Output Explanation The boy cannot afford any of the ice cream bars Example Input costs coins Output Explanation The boy can buy all the ice cream bars for a total price of Constraints costs length n n costs i coins
integer replacement Given a positive integer n you can apply one of the following operations If n is even replace n with n If n is odd replace n with either n or n Return the minimum number of operations needed for n to become Example Input n Output Explanation Example Input n Output Explanation or Example Input n Output Constraints n
tree of coprimes There is a tree i e a connected undirected graph that has no cycles consisting of n nodes numbered from to n and exactly n edges Each node has a value associated with it and the root of the tree is node To represent this tree you are given an integer array nums and a array edges Each nums i represents the ith node s value and each edges j uj vj represents an edge between nodes uj and vj in the tree Two values x and y are coprime if gcd x y where gcd x y is the greatest common divisor of x and y An ancestor of a node i is any other node on the shortest path from node i to the root A node is not considered an ancestor of itself Return an array ans of size n where ans i is the closest ancestor to node i such that nums i and nums ans i are coprime or if there is no such ancestor Example Input nums edges Output Explanation In the above figure each node s value is in parentheses Node has no coprime ancestors Node has only one ancestor node Their values are coprime gcd Node has two ancestors nodes and Node s value is not coprime gcd but node s value is gcd so node is the closest valid ancestor Node has two ancestors nodes and It is coprime with node gcd so node is its closest valid ancestor Example Input nums edges Output Constraints nums length n nums i n edges length n edges j length uj vj n uj vj
sum of number and its reverse Given a non negative integer num return true if num can be expressed as the sum of any non negative integer and its reverse or false otherwise Example Input num Output true Explanation so we return true Example Input num Output false Explanation cannot be expressed as the sum of a non negative integer and its reverse so we return false Example Input num Output true Explanation so we return true Note that when a number is reversed there may be leading zeros Constraints num
intervals between identical elements You are given a indexed array of n integers arr The interval between two elements in arr is defined as the absolute difference between their indices More formally the interval between arr i and arr j is i j Return an array intervals of length n where intervals i is the sum of intervals between arr i and each element in arr with the same value as arr i Note x is the absolute value of x Example Input arr Output Explanation Index Another is found at index Index Another is found at index Index Two more are found at indices and Index Another is found at index Index Another is found at index Index Two more are found at indices and Index Two more are found at indices and Example Input arr Output Explanation Index Two more are found at indices and Index There is only one in the array so its sum of intervals to identical elements is Index Two more are found at indices and Index Two more are found at indices and Constraints n arr length n arr i
symmetric tree Given the root of a binary tree check whether it is a mirror of itself i e symmetric around its center Example Input root Output true Example Input root null null Output false Constraints The number of nodes in the tree is in the range Node val Follow up Could you solve it both recursively and iteratively
customer placing the largest number of orders SQL Schema Table Orders Column Name Type int int is the primary key for this table This table contains information about the order ID and the customer ID Write an SQL query to find the for the customer who has placed the largest number of orders The test cases are generated so that exactly one customer will have placed more orders than any other customer The query result format is in the following example Example Input Orders table Output Explanation The customer with number has two orders which is greater than either customer or because each of them only has one order So the result is Follow up What if more than one customer has the largest number of orders can you find all the in this case
maximum number of integers to choose from a range i You are given an integer array banned and two integers n and maxSum You are choosing some number of integers following the below rules The chosen integers have to be in the range n Each integer can be chosen at most once The chosen integers should not be in the array banned The sum of the chosen integers should not exceed maxSum Return the maximum number of integers you can choose following the mentioned rules Example Input banned n maxSum Output Explanation You can choose the integers and and are from the range both did not appear in banned and their sum is which did not exceed maxSum Example Input banned n maxSum Output Explanation You cannot choose any integer while following the mentioned conditions Example Input banned n maxSum Output Explanation You can choose the integers and They are from the range all did not appear in banned and their sum is which did not exceed maxSum Constraints banned length banned i n maxSum
make number of distinct characters equal You are given two indexed strings and A move consists of choosing two indices i and j such that i length and j length and swapping i with j Return true if it is possible to get the number of distinct characters in and to be equal with exactly one move Return false otherwise Example Input ac b Output false Explanation Any pair of swaps would yield two distinct characters in the first string and one in the second string Example Input abcc aab Output true Explanation We swap index of the first string with index of the second string The resulting strings are abac and cab which both have distinct characters Example Input abcde fghij Output true Explanation Both resulting strings will have distinct characters regardless of which indices we swap Constraints length length and consist of only lowercase English letters
redundant connection ii In this problem a rooted tree is a directed graph such that there is exactly one node the root for which all other nodes are descendants of this node plus every node has exactly one parent except for the root node which has no parents The given input is a directed graph that started as a rooted tree with n nodes with distinct values from to n with one additional directed edge added The added edge has two different vertices chosen from to n and was not an edge that already existed The resulting graph is given as a array of edges Each element of edges is a pair ui vi that represents a directed edge connecting nodes ui and vi where ui is a parent of child vi Return an edge that can be removed so that the resulting graph is a rooted tree of n nodes If there are multiple answers return the answer that occurs last in the given array Example Input edges Output Example Input edges Output Constraints n edges length n edges i length ui vi n ui vi
number of digit one Given an integer n count the total number of digit appearing in all non negative integers less than or equal to n Example Input n Output Example Input n Output Constraints n
maximum number of non-overlapping substrings Given a string s of lowercase letters you need to find the maximum number of non empty substrings of s that meet the following conditions The substrings do not overlap that is for any two substrings s i j and s x y either j x or i y is true A substring that contains a certain character c must also contain all occurrences of c Find the maximum number of substrings that meet the above conditions If there are multiple solutions with the same number of substrings return the one with minimum total length It can be shown that there exists a unique solution of minimum total length Notice that you can return the substrings in any order Example Input s adefaddaccc Output e f ccc Explanation The following are all the possible substrings that meet the conditions adefaddaccc adefadda ef e f ccc If we choose the first string we cannot choose anything else and we d get only If we choose adefadda we are left with ccc which is the only one that doesn t overlap thus obtaining substrings Notice also that it s not optimal to choose ef since it can be split into two Therefore the optimal way is to choose e f ccc which gives us substrings No other solution of the same number of substrings exist Example Input s abbaccd Output d bb cc Explanation Notice that while the set of substrings d abba cc also has length it s considered incorrect since it has larger total length Constraints s length s contains only lowercase English letters
minimum total distance traveled There are some robots and factories on the X axis You are given an integer array robot where robot i is the position of the ith robot You are also given a integer array factory where factory j positionj limitj indicates that positionj is the position of the jth factory and that the jth factory can repair at most limitj robots The positions of each robot are unique The positions of each factory are also unique Note that a robot can be in the same position as a factory initially All the robots are initially broken they keep moving in one direction The direction could be the negative or the positive direction of the X axis When a robot reaches a factory that did not reach its limit the factory repairs the robot and it stops moving At any moment you can set the initial direction of moving for some robot Your target is to minimize the total distance traveled by all the robots Return the minimum total distance traveled by all the robots The test cases are generated such that all the robots can be repaired Note that All robots move at the same speed If two robots move in the same direction they will never collide If two robots move in opposite directions and they meet at some point they do not collide They cross each other If a robot passes by a factory that reached its limits it crosses it as if it does not exist If the robot moved from a position x to a position y the distance it moved is y x Example Input robot factory Output Explanation As shown in the figure The first robot at position moves in the positive direction It will be repaired at the first factory The second robot at position moves in the negative direction It will be repaired at the first factory The third robot at position will be repaired at the second factory It does not need to move The limit of the first factory is and it fixed robots The limit of the second factory is and it fixed robot The total distance is It can be shown that we cannot achieve a better total distance than Example Input robot factory Output Explanation As shown in the figure The first robot at position moves in the positive direction It will be repaired at the second factory The second robot at position moves in the negative direction It will be repaired at the first factory The limit of the first factory is and it fixed robot The limit of the second factory is and it fixed robot The total distance is It can be shown that we cannot achieve a better total distance than Constraints robot length factory length factory j length robot i positionj limitj robot length The input will be generated such that it is always possible to repair every robot
distant barcodes In a warehouse there is a row of barcodes where the ith barcode is barcodes i Rearrange the barcodes so that no two adjacent barcodes are equal You may return any answer and it is guaranteed an answer exists Example Input barcodes Output Example Input barcodes Output Constraints barcodes length barcodes i
spiral matrix ii Given a positive integer n generate an n x n matrix filled with elements from to in spiral order Example Input n Output Example Input n Output Constraints n
all o`one data structure Design a data structure to store the strings count with the ability to return the strings with minimum and maximum counts Implement the AllOne class AllOne Initializes the object of the data structure inc String key Increments the count of the string key by If key does not exist in the data structure insert it with count dec String key Decrements the count of the string key by If the count of key is after the decrement remove it from the data structure It is guaranteed that key exists in the data structure before the decrement getMaxKey Returns one of the keys with the maximal count If no element exists return an empty string getMinKey Returns one of the keys with the minimum count If no element exists return an empty string Note that each function must run in O average time complexity Example Input AllOne inc inc getMaxKey getMinKey inc getMaxKey getMinKey hello hello leet Output null null null hello hello null hello leet Explanation AllOne allOne new AllOne allOne inc hello allOne inc hello allOne getMaxKey return hello allOne getMinKey return hello allOne inc leet allOne getMaxKey return hello allOne getMinKey return leet Constraints key length key consists of lowercase English letters It is guaranteed that for each call to dec key is existing in the data structure At most calls will be made to inc dec getMaxKey and getMinKey
finding the users active minutes You are given the logs for users actions on LeetCode and an integer k The logs are represented by a integer array logs where each logs i IDi timei indicates that the user with IDi performed an action at the minute timei Multiple users can perform actions simultaneously and a single user can perform multiple actions in the same minute The user active minutes UAM for a given user is defined as the number of unique minutes in which the user performed an action on LeetCode A minute can only be counted once even if multiple actions occur during it You are to calculate a indexed array answer of size k such that for each j j k answer j is the number of users whose UAM equals j Return the array answer as described above Example Input logs k Output Explanation The user with ID performed actions at minutes and again Hence they have a UAM of minute is only counted once The user with ID performed actions at minutes and Hence they have a UAM of Since both users have a UAM of answer is and the remaining answer j values are Example Input logs k Output Explanation The user with ID performed a single action at minute Hence they have a UAM of The user with ID performed actions at minutes and Hence they have a UAM of There is one user with a UAM of and one with a UAM of Hence answer answer and the remaining values are Constraints logs length IDi timei k is in the range The maximum UAM for a user
count square sum triples A square triple a b c is a triple where a b and c are integers and Given an integer n return the number of square triples such that a b c n Example Input n Output Explanation The square triples are and Example Input n Output Explanation The square triples are and Constraints n
climbing stairs You are climbing a staircase It takes n steps to reach the top Each time you can either climb or steps In how many distinct ways can you climb to the top Example Input n Output Explanation There are two ways to climb to the top step step steps Example Input n Output Explanation There are three ways to climb to the top step step step step steps steps step Constraints n
longest palindrome Given a string s which consists of lowercase or uppercase letters return the length of the longest palindrome that can be built with those letters Letters are case sensitive for example Aa is not considered a palindrome here Example Input s abccccdd Output Explanation One longest palindrome that can be built is dccaccd whose length is Example Input s a Output Explanation The longest palindrome that can be built is a whose length is Constraints s length s consists of lowercase and or uppercase English letters only
moving stones until consecutive There are three stones in different positions on the X axis You are given three integers a b and c the positions of the stones In one move you pick up a stone at an endpoint i e either the lowest or highest position stone and move it to an unoccupied position between those endpoints Formally let s say the stones are currently at positions x y and z with x y z You pick up the stone at either position x or position z and move that stone to an integer position k with x k z and k y The game ends when you cannot make any more moves i e the stones are in three consecutive positions Return an integer array answer of length where answer is the minimum number of moves you can play and answer is the maximum number of moves you can play Example Input a b c Output Explanation Move the stone from to or move the stone from to to Example Input a b c Output Explanation We cannot make any moves Example Input a b c Output Explanation Move the stone from to or move the stone from to to Constraints a b c a b and c have different values
number of valid words for each puzzle With respect to a given puzzle string a word is valid if both the following conditions are satisfied word contains the first letter of puzzle For each letter in word that letter is in puzzle For example if the puzzle is abcdefg then valid words are faced cabbage and baggage while invalid words are beefed does not include a and based includes s which is not in the puzzle Return an array answer where answer i is the number of words in the given word list words that is valid with respect to the puzzle puzzles i Example Input words aaaa asas able ability actt actor access puzzles aboveyz abrodyz abslute absoryz actresz gaswxyz Output Explanation valid word for aboveyz aaaa valid word for abrodyz aaaa valid words for abslute aaaa asas able valid words for absoryz aaaa asas valid words for actresz aaaa asas actt access There are no valid words for gaswxyz cause none of the words in the list contains letter g Example Input words apple pleas please puzzles aelwxyz aelpxyz aelpsxy saelpxy xaelpsy Output Constraints words length words i length puzzles length puzzles i length words i and puzzles i consist of lowercase English letters Each puzzles i does not contain repeated characters
least number of unique integers after k removals Given an array of integers arr and an integer k Find the least number of unique integers after removing exactly k elements Example Input arr k Output Explanation Remove the single only is left Example Input arr k Output Explanation Remove and either one of the two or three and will be left Constraints arr length arr i k arr length
minimum moves to reach target score You are playing a game with integers You start with the integer and you want to reach the integer target In one move you can either Increment the current integer by one i e x x Double the current integer i e x x You can use the increment operation any number of times however you can only use the double operation at most maxDoubles times Given the two integers target and maxDoubles return the minimum number of moves needed to reach target starting with Example Input target maxDoubles Output Explanation Keep incrementing by until you reach target Example Input target maxDoubles Output Explanation Initially x Increment times so x Double once so x Increment once so x Double again so x Increment once so x Example Input target maxDoubles Output Explanation Initially x Increment once so x Double once so x Increment once so x Double again so x Constraints target maxDoubles
find first and last position of element in sorted array Given an array of integers nums sorted in non decreasing order find the starting and ending position of a given target value If target is not found in the array return You must write an algorithm with O log n runtime complexity Example Input nums target Output Example Input nums target Output Example Input nums target Output Constraints nums length nums i nums is a non decreasing array target
path with minimum effort You are a hiker preparing for an upcoming hike You are given heights a array of size rows x columns where heights row col represents the height of cell row col You are situated in the top left cell and you hope to travel to the bottom right cell rows columns i e indexed You can move up down left or right and you wish to find a route that requires the minimum effort A route s effort is the maximum absolute difference in heights between two consecutive cells of the route Return the minimum effort required to travel from the top left cell to the bottom right cell Example Input heights Output Explanation The route of has a maximum absolute difference of in consecutive cells This is better than the route of where the maximum absolute difference is Example Input heights Output Explanation The route of has a maximum absolute difference of in consecutive cells which is better than route Example Input heights Output Explanation This route does not require any effort Constraints rows heights length columns heights i length rows columns heights i j
create components with same value There is an undirected tree with n nodes labeled from to n You are given a indexed integer array nums of length n where nums i represents the value of the ith node You are also given a integer array edges of length n where edges i ai bi indicates that there is an edge between nodes ai and bi in the tree You are allowed to delete some edges splitting the tree into multiple connected components Let the value of a component be the sum of all nums i for which node i is in the component Return the maximum number of edges you can delete such that every connected component in the tree has the same value Example Input nums edges Output Explanation The above figure shows how we can delete the edges and The created components are nodes and The sum of the values in each component equals It can be proven that no better deletion exists so the answer is Example Input nums edges Output Explanation There are no edges to be deleted Constraints n nums length n nums i edges length n edges i length edges i edges i n edges represents a valid tree
duplicate emails SQL Schema Table Person Column Name Type id int email varchar id is the primary key column for this table Each row of this table contains an email The emails will not contain uppercase letters Write an SQL query to report all the duplicate emails Note that it s guaranteed that the email field is not NULL Return the result table in any order The query result format is in the following example Example Input Person table id email a b com c d com a b com Output Email a b com Explanation a b com is repeated two times
minimum swaps to arrange a binary grid Given an n x n binary grid in one step you can choose two adjacent rows of the grid and swap them A grid is said to be valid if all the cells above the main diagonal are zeros Return the minimum number of steps needed to make the grid valid or if the grid cannot be valid The main diagonal of a grid is the diagonal that starts at cell and ends at cell n n Example Input grid Output Example Input grid Output Explanation All rows are similar swaps have no effect on the grid Example Input grid Output Constraints n grid length grid i length n grid i j is either or
least operators to express number Given a single positive integer x we will write an expression of the form x x x x where each operator etc is either addition subtraction multiplication or division or For example with x we might write which is a value of When writing such an expression we adhere to the following conventions The division operator returns rational numbers There are no parentheses placed anywhere We use the usual order of operations multiplication and division happen before addition and subtraction It is not allowed to use the unary negation operator For example x x is a valid expression as it only uses subtraction but x x is not because it uses negation We would like to write an expression with the least number of operators such that the expression equals the given target Return the least number of operators used Example Input x target Output Explanation The expression contains operations Example Input x target Output Explanation The expression contains operations Example Input x target Output Explanation The expression contains operations Constraints x target
finding mk average You are given two integers m and k and a stream of integers You are tasked to implement a data structure that calculates the MKAverage for the stream The MKAverage can be calculated using these steps If the number of the elements in the stream is less than m you should consider the MKAverage to be Otherwise copy the last m elements of the stream to a separate container Remove the smallest k elements and the largest k elements from the container Calculate the average value for the rest of the elements rounded down to the nearest integer Implement the MKAverage class MKAverage int m int k Initializes the MKAverage object with an empty stream and the two integers m and k void addElement int num Inserts a new element num into the stream int calculateMKAverage Calculates and returns the MKAverage for the current stream rounded down to the nearest integer Example Input MKAverage addElement addElement calculateMKAverage addElement calculateMKAverage addElement addElement addElement calculateMKAverage Output null null null null null null null Explanation MKAverage obj new MKAverage obj addElement current elements are obj addElement current elements are obj calculateMKAverage return because m and only elements exist obj addElement current elements are obj calculateMKAverage The last elements are After removing smallest and largest element the container will be The average of equals return obj addElement current elements are obj addElement current elements are obj addElement current elements are obj calculateMKAverage The last elements are After removing smallest and largest element the container will be The average of equals return Constraints m k m num At most calls will be made to addElement and calculateMKAverage
row with maximum ones Given a m x n binary matrix mat find the indexed position of the row that contains the maximum count of ones and the number of ones in that row In case there are multiple rows that have the maximum count of ones the row with the smallest row number should be selected Return an array containing the index of the row and the number of ones in it Example Input mat Output Explanation Both rows have the same number of s So we return the index of the smaller row and the maximum count of ones So the answer is Example Input mat Output Explanation The row indexed has the maximum count of ones So we return its index and the count So the answer is Example Input mat Output Explanation The row indexed has the maximum count of ones So the answer is Constraints m mat length n mat i length m n mat i j is either or
delete columns to make sorted iii You are given an array of n strings strs all of the same length We may choose any deletion indices and we delete all the characters in those indices for each string For example if we have strs abcdef uvwxyz and deletion indices then the final array after deletions is bef vyz Suppose we chose a set of deletion indices answer such that after deletions the final array has every string row in lexicographic order i e strs strs strs strs length and strs strs strs strs length and so on Return the minimum possible value of answer length Example Input strs babca bbazb Output Explanation After deleting columns and the final array is strs bc az Both these rows are individually in lexicographic order ie strs strs and strs strs Note that strs strs the array strs is not necessarily in lexicographic order Example Input strs edcba Output Explanation If we delete less than columns the only row will not be lexicographically sorted Example Input strs ghi def abc Output Explanation All rows are already lexicographically sorted Constraints n strs length n strs i length strs i consists of lowercase English letters
minimize maximum of array You are given a indexed array nums comprising of n non negative integers In one operation you must Choose an integer i such that i n and nums i Decrease nums i by Increase nums i by Return the minimum possible value of the maximum integer of nums after performing any number of operations Example Input nums Output Explanation One set of optimal operations is as follows Choose i and nums becomes Choose i and nums becomes Choose i and nums becomes The maximum integer of nums is It can be shown that the maximum number cannot be less than Therefore we return Example Input nums Output Explanation It is optimal to leave nums as is and since is the maximum value we return Constraints n nums length n nums i
valid sudoku Determine if a x Sudoku board is valid Only the filled cells need to be validated according to the following rules Each row must contain the digits without repetition Each column must contain the digits without repetition Each of the nine x sub boxes of the grid must contain the digits without repetition Note A Sudoku board partially filled could be valid but is not necessarily solvable Only the filled cells need to be validated according to the mentioned rules Example Input board Output true Example Input board Output false Explanation Same as Example except with the in the top left corner being modified to Since there are two s in the top left sub box it is invalid Constraints board length board i length board i j is a digit or
reconstruct a 2-row binary matrix Given the following details of a matrix with n columns and rows The matrix is a binary matrix which means each element in the matrix can be or The sum of elements of the th upper row is given as upper The sum of elements of the st lower row is given as lower The sum of elements in the i th column indexed is colsum i where colsum is given as an integer array with length n Your task is to reconstruct the matrix with upper lower and colsum Return it as a D integer array If there are more than one valid solution any of them will be accepted If no valid solution exists return an empty D array Example Input upper lower colsum Output Explanation and are also correct answers Example Input upper lower colsum Output Example Input upper lower colsum Output Constraints colsum length upper lower colsum length colsum i
preimage size of factorial zeroes function Let f x be the number of zeroes at the end of x Recall that x x and by convention For example f because has no zeroes at the end while f because has two zeroes at the end Given an integer k return the number of non negative integers x have the property that f x k Example Input k Output Explanation and end with k zeroes Example Input k Output Explanation There is no x such that x ends in k zeroes Example Input k Output Constraints k
set intersection size at least two You are given a integer array intervals where intervals i starti endi represents all the integers from starti to endi inclusively A containing set is an array nums where each interval from intervals has at least two integers in nums For example if intervals then and are containing sets Return the minimum possible size of a containing set Example Input intervals Output Explanation let nums It can be shown that there cannot be any containing array of size Example Input intervals Output Explanation let nums It can be shown that there cannot be any containing array of size Example Input intervals Output Explanation let nums It can be shown that there cannot be any containing array of size Constraints intervals length intervals i length starti endi
count collisions of monkeys on a polygon There is a regular convex polygon with n vertices The vertices are labeled from to n in a clockwise direction and each vertex has exactly one monkey The following figure shows a convex polygon of vertices Each monkey moves simultaneously to a neighboring vertex A neighboring vertex for a vertex i can be the vertex i n in the clockwise direction or the vertex i n n in the counter clockwise direction A collision happens if at least two monkeys reside on the same vertex after the movement or intersect on an edge Return the number of ways the monkeys can move so that at least one collision happens Since the answer may be very large return it modulo Note that each monkey can only move once Example Input n Output Explanation There are total possible movements Two ways such that they collide at some point are Monkey moves in a clockwise direction monkey moves in an anticlockwise direction monkey moves in a clockwise direction Monkeys and collide Monkey moves in an anticlockwise direction monkey moves in an anticlockwise direction monkey moves in a clockwise direction Monkeys and collide It can be shown total movements result in a collision Example Input n Output Explanation It can be shown that there are ways for the monkeys to collide Constraints n
final prices with a special discount in a shop You are given an integer array prices where prices i is the price of the ith item in a shop There is a special discount for items in the shop If you buy the ith item then you will receive a discount equivalent to prices j where j is the minimum index such that j i and prices j prices i Otherwise you will not receive any discount at all Return an integer array answer where answer i is the final price you will pay for the ith item of the shop considering the special discount Example Input prices Output Explanation For item with price you will receive a discount equivalent to prices therefore the final price you will pay is For item with price you will receive a discount equivalent to prices therefore the final price you will pay is For item with price you will receive a discount equivalent to prices therefore the final price you will pay is For items and you will not receive any discount at all Example Input prices Output Explanation In this case for all items you will not receive any discount at all Example Input prices Output Constraints prices length prices i
basic calculator iv Given an expression such as expression e a and an evaluation map such as e given in terms of evalvars e and evalints return a list of tokens representing the simplified expression such as a An expression alternates chunks and symbols with a space separating each chunk and symbol A chunk is either an expression in parentheses a variable or a non negative integer A variable is a string of lowercase letters not including digits Note that variables can be multiple letters and note that variables never have a leading coefficient or unary operator like or x Expressions are evaluated in the usual order brackets first then multiplication then addition and subtraction For example expression has an answer of The format of the output is as follows For each term of free variables with a non zero coefficient we write the free variables within a term in sorted order lexicographically For example we would never write a term like b a c only a b c Terms have degrees equal to the number of free variables being multiplied counting multiplicity We write the largest degree terms of our answer first breaking ties by lexicographic order ignoring the leading coefficient of the term For example a a b c has degree The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables if they exist A leading coefficient of is still printed An example of a well formatted answer is a a a a a b b b a c Terms including constant terms with coefficient are not included For example an expression of has an output of Note You may assume that the given expression is always valid All intermediate results will be in the range of Example Input expression e a evalvars e evalints Output a Example Input expression e temperature pressure evalvars e temperature evalints Output pressure Example Input expression e e evalvars evalints Output e e Constraints expression length expression consists of lowercase English letters digits expression does not contain any leading or trailing spaces All the tokens in expression are separated by a single space evalvars length evalvars i length evalvars i consists of lowercase English letters evalints length evalvars length evalints i
maximum absolute sum of any subarray You are given an integer array nums The absolute sum of a subarray numsl numsl numsr numsr is abs numsl numsl numsr numsr Return the maximum absolute sum of any possibly empty subarray of nums Note that abs x is defined as follows If x is a negative integer then abs x x If x is a non negative integer then abs x x Example Input nums Output Explanation The subarray has absolute sum abs abs Example Input nums Output Explanation The subarray has absolute sum abs abs Constraints nums length nums i
number of orders in the backlog You are given a integer array orders where each orders i pricei amounti orderTypei denotes that amounti orders have been placed of type orderTypei at the price pricei The orderTypei is if it is a batch of buy orders or if it is a batch of sell orders Note that orders i represents a batch of amounti independent orders with the same price and order type All orders represented by orders i will be placed before all orders represented by orders i for all valid i There is a backlog that consists of orders that have not been executed The backlog is initially empty When an order is placed the following happens If the order is a buy order you look at the sell order with the smallest price in the backlog If that sell order s price is smaller than or equal to the current buy order s price they will match and be executed and that sell order will be removed from the backlog Else the buy order is added to the backlog Vice versa if the order is a sell order you look at the buy order with the largest price in the backlog If that buy order s price is larger than or equal to the current sell order s price they will match and be executed and that buy order will be removed from the backlog Else the sell order is added to the backlog Return the total amount of orders in the backlog after placing all the orders from the input Since this number can be large return it modulo Example Input orders Output Explanation Here is what happens with the orders orders of type buy with price are placed There are no sell orders so the orders are added to the backlog orders of type sell with price are placed There are no buy orders with prices larger than or equal to so the orders are added to the backlog order of type sell with price is placed There are no buy orders with prices larger than or equal to in the backlog so this order is added to the backlog orders of type buy with price are placed The first orders are matched with the sell orders of the least price which is and these sell orders are removed from the backlog The order is matched with the sell order of the least price which is and this sell order is removed from the backlog Then there are no more sell orders in the backlog so the order is added to the backlog Finally the backlog has buy orders with price and buy order with price So the total number of orders in the backlog is Example Input orders Output Explanation Here is what happens with the orders orders of type sell with price are placed There are no buy orders so the orders are added to the backlog orders of type buy with price are placed They are matched with the sell orders with the least price which is and those sell orders are removed from the backlog orders of type buy with price are placed The least price of a sell order is so the orders are added to the backlog order of type sell with price is placed It is matched with the buy order of the highest price which is and that buy order is removed from the backlog Finally the backlog has sell orders with price and buy orders with price So the total number of orders which is equal to Constraints orders length orders i length pricei amounti orderTypei is either or
maximum number of words you can type There is a malfunctioning keyboard where some letter keys do not work All other keys on the keyboard work properly Given a string text of words separated by a single space no leading or trailing spaces and a string brokenLetters of all distinct letter keys that are broken return the number of words in text you can fully type using this keyboard Example Input text hello world brokenLetters ad Output Explanation We cannot type world because the d key is broken Example Input text leet code brokenLetters lt Output Explanation We cannot type leet because the l and t keys are broken Example Input text leet code brokenLetters e Output Explanation We cannot type either word because the e key is broken Constraints text length brokenLetters length text consists of words separated by a single space without any leading or trailing spaces Each word only consists of lowercase English letters brokenLetters consists of distinct lowercase English letters
build array where you can find the maximum exactly k comparisons You are given three integers n m and k Consider the following algorithm to find the maximum element of an array of positive integers You should build the array arr which has the following properties arr has exactly n integers arr i m where i n After applying the mentioned algorithm to arr the value is equal to k Return the number of ways to build the array arr under the mentioned conditions As the answer may grow large the answer must be computed modulo Example Input n m k Output Explanation The possible arrays are Example Input n m k Output Explanation There are no possible arrays that satisify the mentioned conditions Example Input n m k Output Explanation The only possible array is Constraints n m k n
letter tile possibilities You have n tiles where each tile has one letter tiles i printed on it Return the number of possible non empty sequences of letters you can make using the letters printed on those tiles Example Input tiles AAB Output Explanation The possible sequences are A B AA AB BA AAB ABA BAA Example Input tiles AAABBC Output Example Input tiles V Output Constraints tiles length tiles consists of uppercase English letters
largest color value in a directed graph There is a directed graph of n colored nodes and m edges The nodes are numbered from to n You are given a string colors where colors i is a lowercase English letter representing the color of the ith node in this graph indexed You are also given a array edges where edges j aj bj indicates that there is a directed edge from node aj to node bj A valid path in the graph is a sequence of nodes xk such that there is a directed edge from xi to xi for every i k The color value of the path is the number of nodes that are colored the most frequently occurring color along that path Return the largest color value of any valid path in the given graph or if the graph contains a cycle Example Input colors abaca edges Output Explanation The path contains nodes that are colored a red in the above image Example Input colors a edges Output Explanation There is a cycle from to Constraints n colors length m edges length n m colors consists of lowercase English letters aj bj n
second minimum time to reach destination A city is represented as a bi directional connected graph with n vertices where each vertex is labeled from to n inclusive The edges in the graph are represented as a integer array edges where each edges i ui vi denotes a bi directional edge between vertex ui and vertex vi Every vertex pair is connected by at most one edge and no vertex has an edge to itself The time taken to traverse any edge is time minutes Each vertex has a traffic signal which changes its color from green to red and vice versa every change minutes All signals change at the same time You can enter a vertex at any time but can leave a vertex only when the signal is green You cannot wait at a vertex if the signal is green The second minimum value is defined as the smallest value strictly larger than the minimum value For example the second minimum value of is and the second minimum value of is Given n edges time and change return the second minimum time it will take to go from vertex to vertex n Notes You can go through any vertex any number of times including and n You can assume that when the journey starts all signals have just turned green Example Input n edges time change Output Explanation The figure on the left shows the given graph The blue path in the figure on the right is the minimum time path The time taken is Start at time elapsed minutes time elapsed minutes time elapsed Hence the minimum time needed is minutes The red path shows the path to get the second minimum time Start at time elapsed minutes time elapsed minutes time elapsed Wait at for minutes time elapsed minutes time elapsed Hence the second minimum time is minutes Example Input n edges time change Output Explanation The minimum time path is with time minutes The second minimum time path is with time minutes Constraints n n edges length min n n edges i length ui vi n ui vi There are no duplicate edges Each vertex can be reached directly or indirectly from every other vertex time change
insert interval You are given an array of non overlapping intervals intervals where intervals i starti endi represent the start and the end of the ith interval and intervals is sorted in ascending order by starti You are also given an interval newInterval start end that represents the start and end of another interval Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals merge overlapping intervals if necessary Return intervals after the insertion Example Input intervals newInterval Output Example Input intervals newInterval Output Explanation Because the new interval overlaps with Constraints intervals length intervals i length starti endi intervals is sorted by starti in ascending order newInterval length start end
minimize the total price of the trips There exists an undirected and unrooted tree with n nodes indexed from to n You are given the integer n and a integer array edges of length n where edges i ai bi indicates that there is an edge between nodes ai and bi in the tree Each node has an associated price You are given an integer array price where price i is the price of the ith node The price sum of a given path is the sum of the prices of all nodes lying on that path Additionally you are given a integer array trips where trips i starti endi indicates that you start the ith trip from the node starti and travel to the node endi by any path you like Before performing your first trip you can choose some non adjacent nodes and halve the prices Return the minimum total price sum to perform all the given trips Example Input n edges price trips Output Explanation The diagram above denotes the tree after rooting it at node The first part shows the initial tree and the second part shows the tree after choosing nodes and and making their price half For the trip we choose path The price sum of that path is For the trip we choose path The price sum of that path is For the trip we choose path The price sum of that path is The total price sum of all trips is It can be proven that is the minimum answer that we can achieve Example Input n edges price trips Output Explanation The diagram above denotes the tree after rooting it at node The first part shows the initial tree and the second part shows the tree after choosing node and making its price half For the trip we choose path The price sum of that path is The total price sum of all trips is It can be proven that is the minimum answer that we can achieve Constraints n edges length n ai bi n edges represents a valid tree price length n price i is an even integer price i trips length starti endi n
k closest points to origin Given an array of points where points i xi yi represents a point on the X Y plane and an integer k return the k closest points to the origin The distance between two points on the X Y plane is the Euclidean distance i e You may return the answer in any order The answer is guaranteed to be unique except for the order that it is in Example Input points k Output Explanation The distance between and the origin is sqrt The distance between and the origin is sqrt Since sqrt sqrt is closer to the origin We only want the closest k points from the origin so the answer is just Example Input points k Output Explanation The answer would also be accepted Constraints k points length xi yi
search in rotated sorted array There is an integer array nums sorted in ascending order with distinct values Prior to being passed to your function nums is possibly rotated at an unknown pivot index k k nums length such that the resulting array is nums k nums k nums n nums nums nums k indexed For example might be rotated at pivot index and become Given the array nums after the possible rotation and an integer target return the index of target if it is in nums or if it is not in nums You must write an algorithm with O log n runtime complexity Example Input nums target Output Example Input nums target Output Example Input nums target Output Constraints nums length nums i All values of nums are unique nums is an ascending array that is possibly rotated target
palindrome number Given an integer x return true if x is a palindrome and false otherwise Example Input x Output true Explanation reads as from left to right and from right to left Example Input x Output false Explanation From left to right it reads From right to left it becomes Therefore it is not a palindrome Example Input x Output false Explanation Reads from right to left Therefore it is not a palindrome Constraints x Follow up Could you solve it without converting the integer to a string
minimum number of days to eat n oranges There are n oranges in the kitchen and you decided to eat some of these oranges every day as follows Eat one orange If the number of remaining oranges n is divisible by then you can eat n oranges If the number of remaining oranges n is divisible by then you can eat n oranges You can only choose one of the actions per day Given the integer n return the minimum number of days to eat n oranges Example Input n Output Explanation You have oranges Day Eat orange Day Eat oranges Since is divisible by Day Eat oranges Day Eat the last orange You need at least days to eat the oranges Example Input n Output Explanation You have oranges Day Eat oranges Since is divisible by Day Eat oranges Since is divisible by Day Eat the last orange You need at least days to eat the oranges Constraints n
reachable nodes with restrictions There is an undirected tree with n nodes labeled from to n and n edges You are given a integer array edges of length n where edges i ai bi indicates that there is an edge between nodes ai and bi in the tree You are also given an integer array restricted which represents restricted nodes Return the maximum number of nodes you can reach from node without visiting a restricted node Note that node will not be a restricted node Example Input n edges restricted Output Explanation The diagram above shows the tree We have that are the only nodes that can be reached from node without visiting a restricted node Example Input n edges restricted Output Explanation The diagram above shows the tree We have that are the only nodes that can be reached from node without visiting a restricted node Constraints n edges length n edges i length ai bi n ai bi edges represents a valid tree restricted length n restricted i n All the values of restricted are unique
maximum rows covered by columns You are given a indexed m x n binary matrix matrix and an integer numSelect which denotes the number of distinct columns you must select from matrix Let us consider s cnumSelect as the set of columns selected by you A row row is covered by s if For each cell matrix row col col n where matrix row col col is present in s or No cell in row has a value of You need to choose numSelect columns such that the number of rows that are covered is maximized Return the maximum number of rows that can be covered by a set of numSelect columns Example Input matrix numSelect Output Explanation One possible way to cover rows is shown in the diagram above We choose s Row is covered because it has no occurrences of Row is covered because the columns with value i e and are present in s Row is not covered because matrix but is not present in s Row is covered because matrix and is present in s Thus we can cover three rows Note that s will also cover rows but it can be shown that no more than three rows can be covered Example Input matrix numSelect Output Explanation Selecting the only column will result in both rows being covered since the entire matrix is selected Therefore we return Constraints m matrix length n matrix i length m n matrix i j is either or numSelect n
sum of k-mirror numbers A k mirror number is a positive integer without leading zeros that reads the same both forward and backward in base as well as in base k For example is a mirror number The representation of in base and base are and respectively which read the same both forward and backward On the contrary is not a mirror number The representation of in base is which does not read the same both forward and backward Given the base k and the number n return the sum of the n smallest k mirror numbers Example Input k n Output Explanation The smallest mirror numbers and their representations in base are listed as follows base base Their sum Example Input k n Output Explanation The smallest mirror numbers are and their representations in base are listed as follows base base Their sum Example Input k n Output Explanation The smallest mirror numbers are Constraints k n
video stitching You are given a series of video clips from a sporting event that lasted time seconds These video clips can be overlapping with each other and have varying lengths Each video clip is described by an array clips where clips i starti endi indicates that the ith clip started at starti and ended at endi We can cut these clips into segments freely For example a clip can be cut into segments Return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event time If the task is impossible return Example Input clips time Output Explanation We take the clips a total of clips Then we can reconstruct the sporting event as follows We cut into segments Now we have segments which cover the sporting event Example Input clips time Output Explanation We cannot cover with only and Example Input clips time Output Explanation We can take clips and Constraints clips length starti endi time
array with elements not equal to average of neighbors You are given a indexed array nums of distinct integers You want to rearrange the elements in the array such that every element in the rearranged array is not equal to the average of its neighbors More formally the rearranged array should have the property such that for every i in the range i nums length nums i nums i is not equal to nums i Return any rearrangement of nums that meets the requirements Example Input nums Output Explanation When i nums i and the average of its neighbors is When i nums i and the average of its neighbors is When i nums i and the average of its neighbors is Example Input nums Output Explanation When i nums i and the average of its neighbors is When i nums i and the average of its neighbors is When i nums i and the average of its neighbors is Constraints nums length nums i
longest substring without repeating characters Given a string s find the length of the longest substring without repeating characters Example Input s abcabcbb Output Explanation The answer is abc with the length of Example Input s bbbbb Output Explanation The answer is b with the length of Example Input s pwwkew Output Explanation The answer is wke with the length of Notice that the answer must be a substring pwke is a subsequence and not a substring Constraints s length s consists of English letters digits symbols and spaces
count fertile pyramids in a land A farmer has a rectangular grid of land with m rows and n columns that can be divided into unit cells Each cell is either fertile represented by a or barren represented by a All cells outside the grid are considered barren A pyramidal plot of land can be defined as a set of cells with the following criteria The number of cells in the set has to be greater than and all cells must be fertile The apex of a pyramid is the topmost cell of the pyramid The height of a pyramid is the number of rows it covers Let r c be the apex of the pyramid and its height be h Then the plot comprises of cells i j where r i r h and c i r j c i r An inverse pyramidal plot of land can be defined as a set of cells with similar criteria The number of cells in the set has to be greater than and all cells must be fertile The apex of an inverse pyramid is the bottommost cell of the inverse pyramid The height of an inverse pyramid is the number of rows it covers Let r c be the apex of the pyramid and its height be h Then the plot comprises of cells i j where r h i r and c r i j c r i Some examples of valid and invalid pyramidal and inverse pyramidal plots are shown below Black cells indicate fertile cells Given a indexed m x n binary matrix grid representing the farmland return the total number of pyramidal and inverse pyramidal plots that can be found in grid Example Input grid Output Explanation The possible pyramidal plots are shown in blue and red respectively There are no inverse pyramidal plots in this grid Hence total number of pyramidal and inverse pyramidal plots is Example Input grid Output Explanation The pyramidal plot is shown in blue and the inverse pyramidal plot is shown in red Hence the total number of plots is Example Input grid Output Explanation There are pyramidal plots of which are shown in the and figures There are inverse pyramidal plots of which are shown in the last figure The total number of plots is Constraints m grid length n grid i length m n m n grid i j is either or
largest rectangle in histogram Given an array of integers heights representing the histogram s bar height where the width of each bar is return the area of the largest rectangle in the histogram Example Input heights Output Explanation The above is a histogram where width of each bar is The largest rectangle is shown in the red area which has an area units Example Input heights Output Constraints heights length heights i
valid parenthesis string Given a string s containing only three types of characters and return true if s is valid The following rules define a valid string Any left parenthesis must have a corresponding right parenthesis Any right parenthesis must have a corresponding left parenthesis Left parenthesis must go before the corresponding right parenthesis could be treated as a single right parenthesis or a single left parenthesis or an empty string Example Input s Output true Example Input s Output true Example Input s Output true Constraints s length s i is or
queries quality and percentage SQL Schema Table Queries Column Name Type varchar result varchar position int rating int There is no primary key for this table it may have duplicate rows This table contains information collected from some queries on a database The position column has a value from to The rating column has a value from to Query with rating less than is a poor query We define query quality as The average of the ratio between query rating and its position We also define poor query percentage as The percentage of all queries with rating less than Write an SQL query to find each the quality and Both quality and should be rounded to decimal places Return the result table in any order The query result format is in the following example Example Input Queries table result position rating Dog Golden Retriever Dog German Shepherd Dog Mule Cat Shirazi Cat Siamese Cat Sphynx Output quality Dog Cat Explanation Dog queries quality is Dog queries is Cat queries quality equals Cat queries is
kth ancestor of a tree node You are given a tree with n nodes numbered from to n in the form of a parent array parent where parent i is the parent of ith node The root of the tree is node Find the kth ancestor of a given node The kth ancestor of a tree node is the kth node in the path from that node to the root node Implement the TreeAncestor class TreeAncestor int n int parent Initializes the object with the number of nodes in the tree and the parent array int getKthAncestor int node int k return the kth ancestor of the given node node If there is no such ancestor return Example Input TreeAncestor getKthAncestor getKthAncestor getKthAncestor Output null Explanation TreeAncestor treeAncestor new TreeAncestor treeAncestor getKthAncestor returns which is the parent of treeAncestor getKthAncestor returns which is the grandparent of treeAncestor getKthAncestor returns because there is no such ancestor Constraints k n parent length n parent parent i n for all i n node n There will be at most queries
number of students doing homework at a given time Given two integer arrays startTime and endTime and given an integer queryTime The ith student started doing their homework at the time startTime i and finished it at time endTime i Return the number of students doing their homework at time queryTime More formally return the number of students where queryTime lays in the interval startTime i endTime i inclusive Example Input startTime endTime queryTime Output Explanation We have students where The first student started doing homework at time and finished at time and wasn t doing anything at time The second student started doing homework at time and finished at time and also wasn t doing anything at time The third student started doing homework at time and finished at time and was the only student doing homework at time Example Input startTime endTime queryTime Output Explanation The only student was doing their homework at the queryTime Constraints startTime length endTime length startTime length startTime i endTime i queryTime
stone game Alice and Bob play a game with piles of stones There are an even number of piles arranged in a row and each pile has a positive integer number of stones piles i The objective of the game is to end with the most stones The total number of stones across all the piles is odd so there are no ties Alice and Bob take turns with Alice starting first Each turn a player takes the entire pile of stones either from the beginning or from the end of the row This continues until there are no more piles left at which point the person with the most stones wins Assuming Alice and Bob play optimally return true if Alice wins the game or false if Bob wins Example Input piles Output true Explanation Alice starts first and can only take the first or the last Say she takes the first so that the row becomes If Bob takes then the board is and Alice takes to win with points If Bob takes the last then the board is and Alice takes to win with points This demonstrated that taking the first was a winning move for Alice so we return true Example Input piles Output true Constraints piles length piles length is even piles i sum piles i is odd
jump game iv Given an array of integers arr you are initially positioned at the first index of the array In one step you can jump from index i to index i where i arr length i where i j where arr i arr j and i j Return the minimum number of steps to reach the last index of the array Notice that you can not jump outside of the array at any time Example Input arr Output Explanation You need three jumps from index Note that index is the last index of the array Example Input arr Output Explanation Start index is the last index You do not need to jump Example Input arr Output Explanation You can jump directly from index to index which is last index of the array Constraints arr length arr i
shortest palindrome You are given a string s You can convert s to a palindrome by adding characters in front of it Return the shortest palindrome you can find by performing this transformation Example Input s aacecaaa Output aaacecaaa Example Input s abcd Output dcbabcd Constraints s length s consists of lowercase English letters only
number of restricted paths from first to last node There is an undirected weighted connected graph You are given a positive integer n which denotes that the graph has n nodes labeled from to n and an array edges where each edges i ui vi weighti denotes that there is an edge between nodes ui and vi with weight equal to weighti A path from node start to node end is a sequence of nodes zk such that start and zk end and there is an edge between zi and zi where i k The distance of a path is the sum of the weights on the edges of the path Let distanceToLastNode x denote the shortest distance of a path between node n and node x A restricted path is a path that also satisfies that distanceToLastNode zi distanceToLastNode zi where i k Return the number of restricted paths from node to node n Since that number may be too large return it modulo Example Input n edges Output Explanation Each circle contains the node number in black and its distanceToLastNode value in blue The three restricted paths are Example Input n edges Output Explanation Each circle contains the node number in black and its distanceToLastNode value in blue The only restricted path is Constraints n n edges length edges i length ui vi n ui vi weighti There is at most one edge between any two nodes There is at least one path between any two nodes
widest vertical area between two points containing no points Given n points on a plane where points i xi yi Return the widest vertical area between two points such that no points are inside the area A vertical area is an area of fixed width extending infinitely along the y axis i e infinite height The widest vertical area is the one with the maximum width Note that points on the edge of a vertical area are not considered included in the area Example Input points Output Explanation Both the red and the blue area are optimal Example Input points Output Constraints n points length n points i length xi yi
divide two integers Given two integers dividend and divisor divide two integers without using multiplication division and mod operator The integer division should truncate toward zero which means losing its fractional part For example would be truncated to and would be truncated to Return the quotient after dividing dividend by divisor Note Assume we are dealing with an environment that could only store integers within the bit signed integer range For this problem if the quotient is strictly greater than then return and if the quotient is strictly less than then return Example Input dividend divisor Output Explanation which is truncated to Example Input dividend divisor Output Explanation which is truncated to Constraints dividend divisor divisor
maximize win from two segments There are some prizes on the X axis You are given an integer array prizePositions that is sorted in non decreasing order where prizePositions i is the position of the ith prize There could be different prizes at the same position on the line You are also given an integer k You are allowed to select two segments with integer endpoints The length of each segment must be k You will collect all prizes whose position falls within at least one of the two selected segments including the endpoints of the segments The two selected segments may intersect For example if k you can choose segments and and you will win any prize i that satisfies prizePositions i or prizePositions i Return the maximum number of prizes you can win if you choose the two segments optimally Example Input prizePositions k Output Explanation In this example you can win all prizes by selecting two segments and Example Input prizePositions k Output Explanation For this example one choice for the segments is and and you will be able to get prizes Constraints prizePositions length prizePositions i k prizePositions is sorted in non decreasing order
count all possible routes You are given an array of distinct positive integers locations where locations i represents the position of city i You are also given integers start finish and fuel representing the starting city ending city and the initial amount of fuel you have respectively At each step if you are at city i you can pick any city j such that j i and j locations length and move to city j Moving from city i to city j reduces the amount of fuel you have by locations i locations j Please notice that x denotes the absolute value of x Notice that fuel cannot become negative at any point in time and that you are allowed to visit any city more than once including start and finish Return the count of all possible routes from start to finish Since the answer may be too large return it modulo Example Input locations start finish fuel Output Explanation The following are all possible routes each uses units of fuel Example Input locations start finish fuel Output Explanation The following are all possible routes used fuel used fuel used fuel used fuel used fuel Example Input locations start finish fuel Output Explanation It is impossible to get from to using only units of fuel since the shortest route needs units of fuel Constraints locations length locations i All integers in locations are distinct start finish locations length fuel
determine color of a chessboard square You are given coordinates a string that represents the coordinates of a square of the chessboard Below is a chessboard for your reference Return true if the square is white and false if the square is black The coordinate will always represent a valid chessboard square The coordinate will always have the letter first and the number second Example Input coordinates Output false Explanation From the chessboard above the square with coordinates is black so return false Example Input coordinates Output true Explanation From the chessboard above the square with coordinates is white so return true Example Input coordinates Output false Constraints coordinates length a coordinates h coordinates
sum of all odd length subarrays Given an array of positive integers arr return the sum of all possible odd length subarrays of arr A subarray is a contiguous subsequence of the array Example Input arr Output Explanation The odd length subarrays of arr and their sums are If we add all these together we get Example Input arr Output Explanation There are only subarrays of odd length and Their sum is Example Input arr Output Constraints arr length arr i Follow up Could you solve this problem in O n time complexity
count ways to build good strings Given the integers zero one low and high we can construct a string by starting with an empty string and then at each step perform either of the following Append the character zero times Append the character one times This can be performed any number of times A good string is a string constructed by the above process having a length between low and high inclusive Return the number of different good strings that can be constructed satisfying these properties Since the answer can be large return it modulo Example Input low high zero one Output Explanation One possible valid good string is It can be constructed as follows All binary strings from to are good strings in this example Example Input low high zero one Output Explanation The good strings are and Constraints low high zero one low
word search ii Given an m x n board of characters and a list of strings words return all words on the board Each word must be constructed from letters of sequentially adjacent cells where adjacent cells are horizontally or vertically neighboring The same letter cell may not be used more than once in a word Example Input board o a a n e t a e i h k r i f l v words oath pea eat rain Output eat oath Example Input board a b c d words abcb Output Constraints m board length n board i length m n board i j is a lowercase English letter words length words i length words i consists of lowercase English letters All the strings of words are unique
array nesting You are given an integer array nums of length n where nums is a permutation of the numbers in the range n You should build a set s k nums k nums nums k nums nums nums k subjected to the following rule The first element in s k starts with the selection of the element nums k of index k The next element in s k should be nums nums k and then nums nums nums k and so on We stop adding right before a duplicate element occurs in s k Return the longest length of a set s k Example Input nums Output Explanation nums nums nums nums nums nums nums One of the longest sets s k s nums nums nums nums Example Input nums Output Constraints nums length nums i nums length All the values of nums are unique
pizza with 3n slices There is a pizza with slices of varying size you and your friends will take slices of pizza as follows You will pick any pizza slice Your friend Alice will pick the next slice in the anti clockwise direction of your pick Your friend Bob will pick the next slice in the clockwise direction of your pick Repeat until there are no more slices of pizzas Given an integer array slices that represent the sizes of the pizza slices in a clockwise direction return the maximum possible sum of slice sizes that you can pick Example Input slices Output Explanation Pick pizza slice of size Alice and Bob will pick slices with size and respectively Then Pick slices with size finally Alice and Bob will pick slice of size and respectively Total Example Input slices Output Explanation Pick pizza slice of size in each turn If you pick slice with size your partners will pick slices of size Constraints n slices length slices length slices i
count the number of square-free subsets You are given a positive integer indexed array nums A subset of the array nums is square free if the product of its elements is a square free integer A square free integer is an integer that is divisible by no square number other than Return the number of square free non empty subsets of the array nums Since the answer may be too large return it modulo A non empty subset of nums is an array that can be obtained by deleting some possibly none but not all elements from nums Two subsets are different if and only if the chosen indices to delete are different Example Input nums Output Explanation There are square free subsets in this example The subset consisting of the element The product of its elements is which is a square free integer The subset consisting of the element The product of its elements is which is a square free integer The subset consisting of and elements The product of its elements is which is a square free integer It can be proven that there are no more than square free subsets in the given array Example Input nums Output Explanation There is square free subset in this example The subset consisting of the element The product of its elements is which is a square free integer It can be proven that there is no more than square free subset in the given array Constraints nums length nums i
guess number higher or lower We are playing the Guess Game The game is as follows I pick a number from to n You have to guess which number I picked Every time you guess wrong I will tell you whether the number I picked is higher or lower than your guess You call a pre defined API int guess int num which returns three possible results Your guess is higher than the number I picked i e num pick Your guess is lower than the number I picked i e num pick your guess is equal to the number I picked i e num pick Return the number that I picked Example Input n pick Output Example Input n pick Output Example Input n pick Output Constraints n pick n
toeplitz matrix Given an m x n matrix return true if the matrix is Toeplitz Otherwise return false A matrix is Toeplitz if every diagonal from top left to bottom right has the same elements Example Input matrix Output true Explanation In the above grid the diagonals are In each diagonal all elements are the same so the answer is True Example Input matrix Output false Explanation The diagonal has different elements Constraints m matrix length n matrix i length m n matrix i j Follow up What if the matrix is stored on disk and the memory is limited such that you can only load at most one row of the matrix into the memory at once What if the matrix is so large that you can only load up a partial row into the memory at once
combination sum iii Find all valid combinations of k numbers that sum up to n such that the following conditions are true Only numbers through are used Each number is used at most once Return a list of all possible valid combinations The list must not contain the same combination twice and the combinations may be returned in any order Example Input k n Output Explanation There are no other valid combinations Example Input k n Output Explanation There are no other valid combinations Example Input k n Output Explanation There are no valid combinations Using different numbers in the range the smallest sum we can get is and since there are no valid combination Constraints k n
minimum difficulty of a job schedule You want to schedule a list of jobs in d days Jobs are dependent i e To work on the ith job you have to finish all the jobs j where j i You have to finish at least one task every day The difficulty of a job schedule is the sum of difficulties of each day of the d days The difficulty of a day is the maximum difficulty of a job done on that day You are given an integer array jobDifficulty and an integer d The difficulty of the ith job is jobDifficulty i Return the minimum difficulty of a job schedule If you cannot find a schedule for the jobs return Example Input jobDifficulty d Output Explanation First day you can finish the first jobs total difficulty Second day you can finish the last job total difficulty The difficulty of the schedule Example Input jobDifficulty d Output Explanation If you finish a job per day you will still have a free day you cannot find a schedule for the given jobs Example Input jobDifficulty d Output Explanation The schedule is one job per day total difficulty will be Constraints jobDifficulty length jobDifficulty i d
maximum binary tree You are given an integer array nums with no duplicates A maximum binary tree can be built recursively from nums using the following algorithm Create a root node whose value is the maximum value in nums Recursively build the left subtree on the subarray prefix to the left of the maximum value Recursively build the right subtree on the subarray suffix to the right of the maximum value Return the maximum binary tree built from nums Example Input nums Output null null null Explanation The recursive calls are as follow The largest value in is Left prefix is and right suffix is The largest value in is Left prefix is and right suffix is Empty array so no child The largest value in is Left prefix is and right suffix is Empty array so no child Only one element so child is a node with value The largest value in is Left prefix is and right suffix is Only one element so child is a node with value Empty array so no child Example Input nums Output null null Constraints nums length nums i All integers in nums are unique
keys and rooms There are n rooms labeled from to n and all the rooms are locked except for room Your goal is to visit all the rooms However you cannot enter a locked room without having its key When you visit a room you may find a set of distinct keys in it Each key has a number on it denoting which room it unlocks and you can take all of them with you to unlock the other rooms Given an array rooms where rooms i is the set of keys that you can obtain if you visited room i return true if you can visit all the rooms or false otherwise Example Input rooms Output true Explanation We visit room and pick up key We then visit room and pick up key We then visit room and pick up key We then visit room Since we were able to visit every room we return true Example Input rooms Output false Explanation We can not enter room number since the only key that unlocks it is in that room Constraints n rooms length n rooms i length sum rooms i length rooms i j n All the values of rooms i are unique
transpose matrix Given a integer array matrix return the transpose of matrix The transpose of a matrix is the matrix flipped over its main diagonal switching the matrix s row and column indices Example Input matrix Output Example Input matrix Output Constraints m matrix length n matrix i length m n m n matrix i j
maximum non negative product in a matrix You are given a m x n matrix grid Initially you are located at the top left corner and in each step you can only move right or down in the matrix Among all possible paths starting from the top left corner and ending in the bottom right corner m n find the path with the maximum non negative product The product of a path is the product of all integers in the grid cells visited along the path Return the maximum non negative product modulo If the maximum product is negative return Notice that the modulo is performed after getting the maximum product Example Input grid Output Explanation It is not possible to get non negative product in the path from to so return Example Input grid Output Explanation Maximum non negative product is shown Example Input grid Output Explanation Maximum non negative product is shown Constraints m grid length n grid i length m n grid i j
number of rectangles that can form the largest square You are given an array rectangles where rectangles i li wi represents the ith rectangle of length li and width wi You can cut the ith rectangle to form a square with a side length of k if both k li and k wi For example if you have a rectangle you can cut it to get a square with a side length of at most Let maxLen be the side length of the largest square you can obtain from any of the given rectangles Return the number of rectangles that can make a square with a side length of maxLen Example Input rectangles Output Explanation The largest squares you can get from each rectangle are of lengths The largest possible square is of length and you can get it out of rectangles Example Input rectangles Output Constraints rectangles length rectangles i length li wi li wi
find all lonely numbers in the array You are given an integer array nums A number x is lonely when it appears only once and no adjacent numbers i e x and x appear in the array Return all lonely numbers in nums You may return the answer in any order Example Input nums Output Explanation is a lonely number since it appears exactly once and and does not appear in nums is a lonely number since it appears exactly once and and does not appear in nums is not a lonely number since appears in nums and vice versa Hence the lonely numbers in nums are Note that may also be returned Example Input nums Output Explanation is a lonely number since it appears exactly once and and does not appear in nums is a lonely number since it appears exactly once and and does not appear in nums is not a lonely number since it appears twice Hence the lonely numbers in nums are Note that may also be returned Constraints nums length nums i
running sum of 1d array Given an array nums We define a running sum of an array as runningSum i sum nums nums i Return the running sum of nums Example Input nums Output Explanation Running sum is obtained as follows Example Input nums Output Explanation Running sum is obtained as follows Example Input nums Output Constraints nums length nums i
find k pairs with smallest sums You are given two integer arrays and sorted in ascending order and an integer k Define a pair u v which consists of one element from the first array and one element from the second array Return the k pairs uk vk with the smallest sums Example Input k Output Explanation The first pairs are returned from the sequence Example Input k Output Explanation The first pairs are returned from the sequence Example Input k Output Explanation All possible pairs are returned from the sequence Constraints length length i i and both are sorted in ascending order k
find the maximum divisibility score You are given two indexed integer arrays nums and divisors The divisibility score of divisors i is the number of indices j such that nums j is divisible by divisors i Return the integer divisors i with the maximum divisibility score If there is more than one integer with the maximum score return the minimum of them Example Input nums divisors Output Explanation The divisibility score for every element in divisors is The divisibility score of divisors is since no number in nums is divisible by The divisibility score of divisors is since nums is divisible by The divisibility score of divisors is since nums nums and nums are divisible by Since divisors has the maximum divisibility score we return it Example Input nums divisors Output Explanation The divisibility score for every element in divisors is The divisibility score of divisors is since nums and nums are divisible by The divisibility score of divisors is since nums and nums are divisible by The divisibility score of divisors is since nums and nums are divisible by Since divisors divisors and divisors all have the maximum divisibility score we return the minimum of them i e divisors Example Input nums divisors Output Explanation The divisibility score for every element in divisors is The divisibility score of divisors is since no number in nums is divisible by The divisibility score of divisors is since no number in nums is divisible by Since divisors and divisors both have the maximum divisibility score we return the minimum of them i e divisors Constraints nums length divisors length nums i divisors i
difference between maximum and minimum price sum There exists an undirected and initially unrooted tree with n nodes indexed from to n You are given the integer n and a integer array edges of length n where edges i ai bi indicates that there is an edge between nodes ai and bi in the tree Each node has an associated price You are given an integer array price where price i is the price of the ith node The price sum of a given path is the sum of the prices of all nodes lying on that path The tree can be rooted at any node root of your choice The incurred cost after choosing root is the difference between the maximum and minimum price sum amongst all paths starting at root Return the maximum possible cost amongst all possible root choices Example Input n edges price Output Explanation The diagram above denotes the tree after rooting it at node The first part colored in red shows the path with the maximum price sum The second part colored in blue shows the path with the minimum price sum The first path contains nodes the prices are and the sum of the prices is The second path contains the node with the price The difference between the maximum and minimum price sum is It can be proved that is the maximum cost Example Input n edges price Output Explanation The diagram above denotes the tree after rooting it at node The first part colored in red shows the path with the maximum price sum The second part colored in blue shows the path with the minimum price sum The first path contains nodes the prices are and the sum of the prices is The second path contains node with a price The difference between the maximum and minimum price sum is It can be proved that is the maximum cost Constraints n edges length n ai bi n edges represents a valid tree price length n price i
rotate list Given the head of a linked list rotate the list to the right by k places Example Input head k Output Example Input head k Output Constraints The number of nodes in the list is in the range Node val k
number of steps to reduce a number in binary representation to one Given the binary representation of an integer as a string s return the number of steps to reduce it to under the following rules If the current number is even you have to divide it by If the current number is odd you have to add to it It is guaranteed that you can always reach one for all test cases Example Input s Output Explanation corressponds to number in their decimal representation Step is odd add and obtain Step is even divide by and obtain Step is odd add and obtain Step is even divide by and obtain Step is even divide by and obtain Step is even divide by and obtain Example Input s Output Explanation corressponds to number in their decimal representation Step is even divide by and obtain Example Input s Output Constraints s length s consists of characters or s
four divisors Given an integer array nums return the sum of divisors of the integers in that array that have exactly four divisors If there is no such integer in the array return Example Input nums Output Explanation has divisors has divisors has divisors The answer is the sum of divisors of only Example Input nums Output Example Input nums Output Constraints nums length nums i
previous permutation with one swap Given an array of positive integers arr not necessarily distinct return the lexicographically largest permutation that is smaller than arr that can be made with exactly one swap If it cannot be done then return the same array Note that a swap exchanges the positions of two numbers arr i and arr j Example Input arr Output Explanation Swapping and Example Input arr Output Explanation This is already the smallest permutation Example Input arr Output Explanation Swapping and Constraints arr length arr i
deepest leaves sum Given the root of a binary tree return the sum of values of its deepest leaves Example Input root null null null null null Output Example Input root null null null null Output Constraints The number of nodes in the tree is in the range Node val
minimum number of operations to make all array elements equal to 1 You are given a indexed array nums consisiting of positive integers You can do the following operation on the array any number of times Select an index i such that i n and replace either of nums i or nums i with their gcd value Return the minimum number of operations to make all elements of nums equal to If it is impossible return The gcd of two integers is the greatest common divisor of the two integers Example Input nums Output Explanation We can do the following operations Choose index i and replace nums with gcd Now we have nums Choose index i and replace nums with gcd Now we have nums Choose index i and replace nums with gcd Now we have nums Choose index i and replace nums with gcd Now we have nums Example Input nums Output Explanation It can be shown that it is impossible to make all the elements equal to Constraints nums length nums i Follow up The O n time complexity solution works but could you find an O constant time complexity solution
kth largest sum in a binary tree You are given the root of a binary tree and a positive integer k The level sum in the tree is the sum of the values of the nodes that are on the same level Return the kth largest level sum in the tree not necessarily distinct If there are fewer than k levels in the tree return Note that two nodes are on the same level if they have the same distance from the root Example Input root k Output Explanation The level sums are the following Level Level Level Level The largest level sum is Example Input root null k Output Explanation The largest level sum is Constraints The number of nodes in the tree is n n Node val k n
remove letter to equalize frequency You are given a indexed string word consisting of lowercase English letters You need to select one index and remove the letter at that index from word so that the frequency of every letter present in word is equal Return true if it is possible to remove one letter so that the frequency of all letters in word are equal and false otherwise Note The frequency of a letter x is the number of times it occurs in the string You must remove exactly one letter and cannot chose to do nothing Example Input word abcc Output true Explanation Select index and delete it word becomes abc and each character has a frequency of Example Input word aazz Output false Explanation We must delete a character so either the frequency of a is and the frequency of z is or vice versa It is impossible to make all present letters have equal frequency Constraints word length word consists of lowercase English letters only
earliest possible day of full bloom You have n flower seeds Every seed must be planted first before it can begin to grow then bloom Planting a seed takes time and so does the growth of a seed You are given two indexed integer arrays plantTime and growTime of length n each plantTime i is the number of full days it takes you to plant the ith seed Every day you can work on planting exactly one seed You do not have to work on planting the same seed on consecutive days but the planting of a seed is not complete until you have worked plantTime i days on planting it in total growTime i is the number of full days it takes the ith seed to grow after being completely planted After the last day of its growth the flower blooms and stays bloomed forever From the beginning of day you can plant the seeds in any order Return the earliest possible day where all seeds are blooming Example Input plantTime growTime Output Explanation The grayed out pots represent planting days colored pots represent growing days and the flower represents the day it blooms One optimal way is On day plant the seed The seed grows for full days and blooms on day On days and plant the seed The seed grows for full days and blooms on day On days and plant the seed The seed grows for full day and blooms on day Thus on day all the seeds are blooming Example Input plantTime growTime Output Explanation The grayed out pots represent planting days colored pots represent growing days and the flower represents the day it blooms One optimal way is On day plant the seed The seed grows for full days and blooms on day On days and plant the seed The seed grows for full day and blooms on day On days and plant the seed The seed grows for full days and blooms on day On days and plant the seed The seed grows for full day and blooms on day Thus on day all the seeds are blooming Example Input plantTime growTime Output Explanation On day plant the seed The seed grows for full day and blooms on day Thus on day all the seeds are blooming Constraints n plantTime length growTime length n plantTime i growTime i
bulb switcher There are n bulbs that are initially off You first turn on all the bulbs then you turn off every second bulb On the third round you toggle every third bulb turning on if it s off or turning off if it s on For the ith round you toggle every i bulb For the nth round you only toggle the last bulb Return the number of bulbs that are on after n rounds Example Input n Output Explanation At first the three bulbs are off off off After the first round the three bulbs are on on on After the second round the three bulbs are on off on After the third round the three bulbs are on off off So you should return because there is only one bulb is on Example Input n Output Example Input n Output Constraints n
find duplicate file in system Given a list paths of directory info including the directory path and all the files with contents in this directory return all the duplicate files in the file system in terms of their paths You may return the answer in any order A group of duplicate files consists of at least two files that have the same content A single directory info string in the input list has the following format root dm txt txt fn txt It means there are n files txt txt fn txt with content respectively in the directory root dm Note that n and m If m it means the directory is just the root directory The output is a list of groups of duplicate file paths For each group it contains all the file paths of the files that have the same content A file path is a string that has the following format txt Example Input paths root a txt abcd txt efgh root c txt abcd root c d txt efgh root txt efgh Output root a txt root c d txt root txt root a txt root c txt Example Input paths root a txt abcd txt efgh root c txt abcd root c d txt efgh Output root a txt root c d txt root a txt root c txt Constraints paths length paths i length sum paths i length paths i consist of English letters digits and You may assume no files or directories share the same name in the same directory You may assume each given directory info represents a unique directory A single blank space separates the directory path and file info Follow up Imagine you are given a real file system how will you search files DFS or BFS If the file content is very large GB level how will you modify your solution If you can only read the file by each time how will you modify your solution What is the time complexity of your modified solution What is the most time consuming part and memory consuming part of it How to optimize How to make sure the duplicated files you find are not false positive
monthly transactions i SQL Schema Table Transactions Column Name Type id int country varchar state enum amount int date id is the primary key of this table The table has information about incoming transactions The state column is an enum of type approved declined Write an SQL query to find for each month and country the number of transactions and their total amount the number of approved transactions and their total amount Return the result table in any order The query result format is in the following example Example Input Transactions table id country state amount US approved US declined US approved DE approved Output month country US US DE
department top three salaries SQL Schema Table Employee Column Name Type id int name varchar salary int departmentId int id is the primary key column for this table departmentId is a foreign key of the ID from the Department table Each row of this table indicates the ID name and salary of an employee It also contains the ID of their department Table Department Column Name Type id int name varchar id is the primary key column for this table Each row of this table indicates the ID of a department and its name A company s executives are interested in seeing who earns the most money in each of the company s departments A high earner in a department is an employee who has a salary in the top three unique salaries for that department Write an SQL query to find the employees who are high earners in each of the departments Return the result table in any order The query result format is in the following example Example Input Employee table id name salary departmentId Joe Henry Sam Max Janet Randy Will Department table id name IT Sales Output Department Employee Salary IT Max IT Joe IT Randy IT Will Sales Henry Sales Sam Explanation In the IT department Max earns the highest unique salary Both Randy and Joe earn the second highest unique salary Will earns the third highest unique salary In the Sales department Henry earns the highest salary Sam earns the second highest salary There is no third highest salary as there are only two employees
number of ways where square of number is equal to product of two numbers Given two arrays of integers and return the number of triplets formed type and type under the following rules Type Triplet i j k if i j k where i length and j k length Type Triplet i j k if i j k where i length and j k length Example Input Output Explanation Type Example Input Output Explanation All Triplets are valid because Type i j k Type i j k Example Input Output Explanation There are valid triplets Type Type Constraints length length i i
left and right sum differences Given a indexed integer array nums find a indexed integer array answer where answer length nums length answer i leftSum i rightSum i Where leftSum i is the sum of elements to the left of the index i in the array nums If there is no such element leftSum i rightSum i is the sum of elements to the right of the index i in the array nums If there is no such element rightSum i Return the array answer Example Input nums Output Explanation The array leftSum is and the array rightSum is The array answer is Example Input nums Output Explanation The array leftSum is and the array rightSum is The array answer is Constraints nums length nums i
minimum domino rotations for equal row In a row of dominoes tops i and bottoms i represent the top and bottom halves of the ith domino A domino is a tile with two numbers from to one on each half of the tile We may rotate the ith domino so that tops i and bottoms i swap values Return the minimum number of rotations so that all the values in tops are the same or all the values in bottoms are the same If it cannot be done return Example Input tops bottoms Output Explanation The first figure represents the dominoes as given by tops and bottoms before we do any rotations If we rotate the second and fourth dominoes we can make every value in the top row equal to as indicated by the second figure Example Input tops bottoms Output Explanation In this case it is not possible to rotate the dominoes to make one row of values equal Constraints tops length bottoms length tops length tops i bottoms i
the time when the network becomes idle There is a network of n servers labeled from to n You are given a integer array edges where edges i ui vi indicates there is a message channel between servers ui and vi and they can pass any number of messages to each other directly in one second You are also given a indexed integer array patience of length n All servers are connected i e a message can be passed from one server to any other server s directly or indirectly through the message channels The server labeled is the master server The rest are data servers Each data server needs to send its message to the master server for processing and wait for a reply Messages move between servers optimally so every message takes the least amount of time to arrive at the master server The master server will process all newly arrived messages instantly and send a reply to the originating server via the reversed path the message had gone through At the beginning of second each data server sends its message to be processed Starting from second at the beginning of every second each data server will check if it has received a reply to the message it sent including any newly arrived replies from the master server If it has not it will resend the message periodically The data server i will resend the message every patience i second s i e the data server i will resend the message if patience i second s have elapsed since the last time the message was sent from this server Otherwise no more resending will occur from this server The network becomes idle when there are no messages passing between servers or arriving at servers Return the earliest second starting from which the network becomes idle Example Input edges patience Output Explanation At the beginning of second Data server sends its message denoted to the master server Data server sends its message denoted to the master server At second Message arrives at the master server Master server processes message instantly and sends a reply back Server has not received any reply second patience elapsed since this server has sent the message therefore it does not resend the message Server has not received any reply second patience elapsed since this server has sent the message therefore it resends the message denoted At second The reply arrives at server No more resending will occur from server Message arrives at the master server Master server processes message instantly and sends a reply back Server resends the message denoted At second The reply arrives at server No more resending will occur from server At second reply arrives at server Starting from the beginning of the second there are no messages passing between servers or arriving at servers This is the time when the network becomes idle Example Input edges patience Output Explanation Data servers and receive a reply back at the beginning of second From the beginning of the second the network becomes idle Constraints n patience length n patience patience i for i n edges length min n n edges i length ui vi n ui vi There are no duplicate edges Each server can directly or indirectly reach another server
count nodes with the highest score There is a binary tree rooted at consisting of n nodes The nodes are labeled from to n You are given a indexed integer array parents representing the tree where parents i is the parent of node i Since node is the root parents Each node has a score To find the score of a node consider if the node and the edges connected to it were removed The tree would become one or more non empty subtrees The size of a subtree is the number of the nodes in it The score of the node is the product of the sizes of all those subtrees Return the number of nodes that have the highest score Example Input parents Output Explanation The score of node is The score of node is The score of node is The score of node is The score of node is The highest score is and three nodes node node and node have the highest score Example Input parents Output Explanation The score of node is The score of node is The score of node is The highest score is and two nodes node and node have the highest score Constraints n parents length n parents parents i n for i parents represents a valid binary tree
maximum product subarray Given an integer array nums find a subarray that has the largest product and return the product The test cases are generated so that the answer will fit in a bit integer Example Input nums Output Explanation has the largest product Example Input nums Output Explanation The result cannot be because is not a subarray Constraints nums length nums i The product of any prefix or suffix of nums is guaranteed to fit in a bit integer
patients with a condition SQL Schema Table Patients Column Name Type int varchar conditions varchar is the primary key for this table conditions contains or more code separated by spaces This table contains information of the patients in the hospital Write an SQL query to report the and conditions of the patients who have Type I Diabetes Type I Diabetes always starts with prefix Return the result table in any order The query result format is in the following example Example Input Patients table conditions Daniel YFEV COUGH Alice Bob MYOP George ACNE Alain Output conditions Bob MYOP George ACNE Explanation Bob and George both have a condition that starts with
top k frequent words Given an array of strings words and an integer k return the k most frequent strings Return the answer sorted by the frequency from highest to lowest Sort the words with the same frequency by their lexicographical order Example Input words i love leetcode i love coding k Output i love Explanation i and love are the two most frequent words Note that i comes before love due to a lower alphabetical order Example Input words the day is sunny the the the sunny is is k Output the is sunny day Explanation the is sunny and day are the four most frequent words with the number of occurrence being and respectively Constraints words length words i length words i consists of lowercase English letters k is in the range The number of unique words i Follow up Could you solve it in O n log k time and O n extra space
meeting rooms iii You are given an integer n There are n rooms numbered from to n You are given a integer array meetings where meetings i starti endi means that a meeting will be held during the half closed time interval starti endi All the values of starti are unique Meetings are allocated to rooms in the following manner Each meeting will take place in the unused room with the lowest number If there are no available rooms the meeting will be delayed until a room becomes free The delayed meeting should have the same duration as the original meeting When a room becomes unused meetings that have an earlier original start time should be given the room Return the number of the room that held the most meetings If there are multiple rooms return the room with the lowest number A half closed interval a b is the interval between a and b including a and not including b Example Input n meetings Output Explanation At time both rooms are not being used The first meeting starts in room At time only room is not being used The second meeting starts in room At time both rooms are being used The third meeting is delayed At time both rooms are being used The fourth meeting is delayed At time the meeting in room finishes The third meeting starts in room for the time period At time the meetings in both rooms finish The fourth meeting starts in room for the time period Both rooms and held meetings so we return Example Input n meetings Output Explanation At time all three rooms are not being used The first meeting starts in room At time rooms and are not being used The second meeting starts in room At time only room is not being used The third meeting starts in room At time all three rooms are being used The fourth meeting is delayed At time the meeting in room finishes The fourth meeting starts in room for the time period At time all three rooms are being used The fifth meeting is delayed At time the meetings in rooms and finish The fifth meeting starts in room for the time period Room held meeting while rooms and each held meetings so we return Constraints n meetings length meetings i length starti endi All the values of starti are unique
step-by-step directions from a binary tree node to another You are given the root of a binary tree with n nodes Each node is uniquely assigned a value from to n You are also given an integer startValue representing the value of the start node s and a different integer destValue representing the value of the destination node t Find the shortest path starting from node s and ending at node t Generate step by step directions of such path as a string consisting of only the uppercase letters L R and U Each letter indicates a specific direction L means to go from a node to its left child node R means to go from a node to its right child node U means to go from a node to its parent node Return the step by step directions of the shortest path from node s to node t Example Input root null startValue destValue Output UURL Explanation The shortest path is Example Input root startValue destValue Output L Explanation The shortest path is Constraints The number of nodes in the tree is n n Node val n All the values in the tree are unique startValue destValue n startValue destValue
merge strings alternately You are given two strings and Merge the strings by adding letters in alternating order starting with If a string is longer than the other append the additional letters onto the end of the merged string Return the merged string Example Input abc pqr Output apbqcr Explanation The merged string will be merged as so a b c p q r merged a p b q c r Example Input ab pqrs Output apbqrs Explanation Notice that as is longer rs is appended to the end a b p q r s merged a p b q r s Example Input abcd pq Output apbqcd Explanation Notice that as is longer cd is appended to the end a b c d p q merged a p b q c d Constraints length length and consist of lowercase English letters
minimum size subarray sum Given an array of positive integers nums and a positive integer target return the minimal length of a subarray whose sum is greater than or equal to target If there is no such subarray return instead Example Input target nums Output Explanation The subarray has the minimal length under the problem constraint Example Input target nums Output Example Input target nums Output Constraints target nums length nums i Follow up If you have figured out the O n solution try coding another solution of which the time complexity is O n log n
construct binary tree from inorder and postorder traversal Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree construct and return the binary tree Example Input inorder postorder Output null null Example Input inorder postorder Output Constraints inorder length postorder length inorder length inorder i postorder i inorder and postorder consist of unique values Each value of postorder also appears in inorder inorder is guaranteed to be the inorder traversal of the tree postorder is guaranteed to be the postorder traversal of the tree
day of the week Given a date return the corresponding day of the week for that date The input is given as three integers representing the day month and year respectively Return the answer as one of the following values Sunday Monday Tuesday Wednesday Thursday Friday Saturday Example Input day month year Output Saturday Example Input day month year Output Sunday Example Input day month year Output Sunday Constraints The given dates are valid dates between the years and
max value of equation You are given an array points containing the coordinates of points on a plane sorted by the x values where points i xi yi such that xi xj for all i j points length You are also given an integer k Return the maximum value of the equation yi yj xi xj where xi xj k and i j points length It is guaranteed that there exists at least one pair of points that satisfy the constraint xi xj k Example Input points k Output Explanation The first two points satisfy the condition xi xj and if we calculate the equation we get Third and fourth points also satisfy the condition and give a value of No other pairs satisfy the condition so we return the max of and Example Input points k Output Explanation Only the first two points have an absolute difference of or less in the x values and give the value of Constraints points length points i length xi yi k xi xj for all i j points length xi form a strictly increasing sequence
evaluate the bracket pairs of a string You are given a string s that contains some bracket pairs with each pair containing a non empty key For example in the string name is age yearsold there are two bracket pairs that contain the keys name and age You know the values of a wide range of keys This is represented by a string array knowledge where each knowledge i keyi valuei indicates that key keyi has a value of valuei You are tasked to evaluate all of the bracket pairs When you evaluate a bracket pair that contains some key keyi you will Replace keyi and the bracket pair with the key s corresponding valuei If you do not know the value of the key you will replace keyi and the bracket pair with a question mark without the quotation marks Each key will appear at most once in your knowledge There will not be any nested brackets in s Return the resulting string after evaluating all of the bracket pairs Example Input s name is age yearsold knowledge name bob age two Output bobistwoyearsold Explanation The key name has a value of bob so replace name with bob The key age has a value of two so replace age with two Example Input s hi name knowledge a b Output hi Explanation As you do not know the value of the key name replace name with Example Input s a a a aaa knowledge a yes Output yesyesyesaaa Explanation The same key can appear multiple times The key a has a value of yes so replace all occurrences of a with yes Notice that the a s not in a bracket pair are not evaluated Constraints s length knowledge length knowledge i length keyi length valuei length s consists of lowercase English letters and round brackets and Every open bracket in s will have a corresponding close bracket The key in each bracket pair of s will be non empty There will not be any nested bracket pairs in s keyi and valuei consist of lowercase English letters Each keyi in knowledge is unique
non-overlapping intervals Given an array of intervals intervals where intervals i starti endi return the minimum number of intervals you need to remove to make the rest of the intervals non overlapping Example Input intervals Output Explanation can be removed and the rest of the intervals are non overlapping Example Input intervals Output Explanation You need to remove two to make the rest of the intervals non overlapping Example Input intervals Output Explanation You don t need to remove any of the intervals since they re already non overlapping Constraints intervals length intervals i length starti endi
contains duplicate Given an integer array nums return true if any value appears at least twice in the array and return false if every element is distinct Example Input nums Output true Example Input nums Output false Example Input nums Output true Constraints nums length nums i
last person to fit in the bus SQL Schema Table Queue Column Name Type int varchar weight int turn int is the primary key column for this table This table has the information about all people waiting for a bus The and turn columns will contain all numbers from to n where n is the number of rows in the table turn determines the order of which the people will board the bus where turn denotes the first person to board and turn n denotes the last person to board weight is the weight of the person in kilograms There is a queue of people waiting to board a bus However the bus has a weight limit of kilograms so there may be some people who cannot board Write an SQL query to find the of the last person that can fit on the bus without exceeding the weight limit The test cases are generated such that the first person does not exceed the weight limit The query result format is in the following example Example Input Queue table weight turn Alice Bob Alex John Cena Winston Marie Output John Cena Explanation The folowing table is ordered by the turn for simplicity Turn ID Name Weight Total Weight Alice Alex John Cena last person to board Marie cannot board Bob Winston
lexicographically smallest equivalent string You are given two strings of the same length and and a string baseStr We say i and i are equivalent characters For example if abc and cde then we have a c b d and c e Equivalent characters follow the usual rules of any equivalence relation Reflexivity a a Symmetry a b implies b a Transitivity a b and b c implies a c For example given the equivalency information from abc and cde acd and aab are equivalent strings of baseStr eed and aab is the lexicographically smallest equivalent string of baseStr Return the lexicographically smallest equivalent string of baseStr by using the equivalency information from and Example Input parker morris baseStr parser Output makkek Explanation Based on the equivalency information in and we can group their characters as m p a o k r s e i The characters in each group are equivalent and sorted in lexicographical order So the answer is makkek Example Input hello world baseStr hold Output hdld Explanation Based on the equivalency information in and we can group their characters as h w d e o l r So only the second letter o in baseStr is changed to d the answer is hdld Example Input leetcode programs baseStr sourcecode Output aauaaaaada Explanation We group the equivalent characters in and as a o e r s c l p g t and d m thus all letters in baseStr except u and d are transformed to a the answer is aauaaaaada Constraints length length baseStr length length and baseStr consist of lowercase English letters
parsing a boolean expression A boolean expression is an expression that evaluates to either true or false It can be in one of the following shapes t that evaluates to true f that evaluates to false subExpr that evaluates to the logical NOT of the inner expression subExpr subExprn that evaluates to the logical AND of the inner expressions subExprn where n subExprn that evaluates to the logical OR of the inner expressions subExprn where n Given a string expression that represents a boolean expression return the evaluation of that expression It is guaranteed that the given expression is valid and follows the given rules Example Input expression f Output false Explanation First evaluate f f The expression is now f Then evaluate f f The expression is now f Finally return false Example Input expression f f f t Output true Explanation The evaluation of false OR false OR false OR true is true Example Input expression f t Output true Explanation First evaluate f t false AND true false f The expression is now f Then evaluate f NOT false true We return true Constraints expression length expression i is one following characters t f and
merge k sorted lists You are given an array of k linked lists lists each linked list is sorted in ascending order Merge all the linked lists into one sorted linked list and return it Example Input lists Output Explanation The linked lists are merging them into one sorted list Example Input lists Output Example Input lists Output Constraints k lists length k lists i length lists i j lists i is sorted in ascending order The sum of lists i length will not exceed
delete operation for two strings Given two strings and return the minimum number of steps required to make and the same In one step you can delete exactly one character in either string Example Input sea eat Output Explanation You need one step to make sea to ea and another step to make eat to ea Example Input leetcode etco Output Constraints length length and consist of only lowercase English letters
longest subsequence with limited sum You are given an integer array nums of length n and an integer array queries of length m Return an array answer of length m where answer i is the maximum size of a subsequence that you can take from nums such that the sum of its elements is less than or equal to queries i A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements Example Input nums queries Output Explanation We answer the queries as follows The subsequence has a sum less than or equal to It can be proven that is the maximum size of such a subsequence so answer The subsequence has a sum less than or equal to It can be proven that is the maximum size of such a subsequence so answer The subsequence has a sum less than or equal to It can be proven that is the maximum size of such a subsequence so answer Example Input nums queries Output Explanation The empty subsequence is the only subsequence that has a sum less than or equal to so answer Constraints n nums length m queries length n m nums i queries i
create maximum number You are given two integer arrays and of lengths m and n respectively and represent the digits of two numbers You are also given an integer k Create the maximum number of length k m n from digits of the two numbers The relative order of the digits from the same array must be preserved Return an array of the k digits representing the answer Example Input k Output Example Input k Output Example Input k Output Constraints m length n length m n i i k m n
distinct prime factors of product of array Given an array of positive integers nums return the number of distinct prime factors in the product of the elements of nums Note that A number greater than is called prime if it is divisible by only and itself An integer is a factor of another integer if is an integer Example Input nums Output Explanation The product of all the elements in nums is There are distinct prime factors so we return Example Input nums Output Explanation The product of all the elements in nums is There is distinct prime factor so we return Constraints nums length nums i
employee importance You have a data structure of employee information including the employee s unique ID importance value and direct subordinates IDs You are given an array of employees employees where employees i id is the ID of the ith employee employees i importance is the importance value of the ith employee employees i subordinates is a list of the IDs of the direct subordinates of the ith employee Given an integer id that represents an employee s ID return the total importance value of this employee and all their direct and indirect subordinates Example Input employees id Output Explanation Employee has an importance value of and has two direct subordinates employee and employee They both have an importance value of Thus the total importance value of employee is Example Input employees id Output Explanation Employee has an importance value of and has no direct subordinates Thus the total importance value of employee is Constraints employees length employees i id All employees i id are unique employees i importance One employee has at most one direct leader and may have several subordinates The IDs in employees i subordinates are valid IDs
linked list components You are given the head of a linked list containing unique integer values and an integer array nums that is a subset of the linked list values Return the number of connected components in nums where two values are connected if they appear consecutively in the linked list Example Input head nums Output Explanation and are connected so and are the two connected components Example Input head nums Output Explanation and are connected and are connected so and are the two connected components Constraints The number of nodes in the linked list is n n Node val n All the values Node val are unique nums length n nums i n All the values of nums are unique
maximum product of two elements in an array Given the array of integers nums you will choose two different indices i and j of that array Return the maximum value of nums i nums j Example Input nums Output Explanation If you choose the indices i and j indexed from you will get the maximum value that is nums nums Example Input nums Output Explanation Choosing the indices i and j indexed from you will get the maximum value of Example Input nums Output Constraints nums length nums i
linked list random node Given a singly linked list return a random node s value from the linked list Each node must have the same probability of being chosen Implement the Solution class Solution ListNode head Initializes the object with the head of the singly linked list head int getRandom Chooses a node randomly from the list and returns its value All the nodes of the list should be equally likely to be chosen Example Input Solution getRandom getRandom getRandom getRandom getRandom Output null Explanation Solution solution new Solution solution getRandom return solution getRandom return solution getRandom return solution getRandom return solution getRandom return getRandom should return either or randomly Each element should have equal probability of returning Constraints The number of nodes in the linked list will be in the range Node val At most calls will be made to getRandom Follow up What if the linked list is extremely large and its length is unknown to you Could you solve this efficiently without using extra space
divide array in sets of k consecutive numbers Given an array of integers nums and a positive integer k check whether it is possible to divide this array into sets of k consecutive numbers Return true if it is possible Otherwise return false Example Input nums k Output true Explanation Array can be divided into and Example Input nums k Output true Explanation Array can be divided into and Example Input nums k Output false Explanation Each array should be divided in subarrays of size Constraints k nums length nums i Note This question is the same as https leetcode com problems hand of straights
find the k-beauty of a number The k beauty of an integer num is defined as the number of substrings of num when it is read as a string that meet the following conditions It has a length of k It is a divisor of num Given integers num and k return the k beauty of num Note Leading zeros are allowed is not a divisor of any value A substring is a contiguous sequence of characters in a string Example Input num k Output Explanation The following are the substrings of num of length k from is a divisor of from is a divisor of Therefore the k beauty is Example Input num k Output Explanation The following are the substrings of num of length k from is a divisor of from is not a divisor of from is not a divisor of from is not a divisor of from is a divisor of Therefore the k beauty is Constraints num k num length taking num as a string
expression add operators Given a string num that contains only digits and an integer target return all possibilities to insert the binary operators and or between the digits of num so that the resultant expression evaluates to the target value Note that operands in the returned expressions should not contain leading zeros Example Input num target Output Explanation Both and evaluate to Example Input num target Output Explanation Both and evaluate to Example Input num target Output Explanation There are no expressions that can be created from to evaluate to Constraints num length num consists of only digits target
count numbers with unique digits Given an integer n return the count of all numbers with unique digits x where x Example Input n Output Explanation The answer should be the total numbers in the range of x excluding Example Input n Output Constraints n
parse lisp expression You are given a string expression representing a Lisp like expression to return the integer value of The syntax for these expressions is given as follows An expression is either an integer let expression add expression mult expression or an assigned variable Expressions always evaluate to a single integer An integer could be positive or negative A let expression takes the form let vn en expr where let is always the string let then there are one or more pairs of alternating variables and expressions meaning that the first variable is assigned the value of the expression the second variable is assigned the value of the expression and so on sequentially and then the value of this let expression is the value of the expression expr An add expression takes the form add where add is always the string add there are always two expressions and the result is the addition of the evaluation of and the evaluation of A mult expression takes the form mult where mult is always the string mult there are always two expressions and the result is the multiplication of the evaluation of and the evaluation of For this question we will use a smaller subset of variable names A variable starts with a lowercase letter then zero or more lowercase letters or digits Additionally for your convenience the names add let and mult are protected and will never be used as variable names Finally there is the concept of scope When an expression of a variable name is evaluated within the context of that evaluation the innermost scope in terms of parentheses is checked first for the value of that variable and then outer scopes are checked sequentially It is guaranteed that every expression is legal Please see the examples for more details on the scope Example Input expression let x mult x let x y add x y Output Explanation In the expression add x y when checking for the value of the variable x we check from the innermost scope to the outermost in the context of the variable we are trying to evaluate Since x is found first the value of x is Example Input expression let x x x Output Explanation Assignment in let statements is processed sequentially Example Input expression let x y x add x y add x y Output Explanation The first add x y evaluates as and is assigned to x The second add x y evaluates as Constraints expression length There are no leading or trailing spaces in expression All tokens are separated by a single space in expression The answer and all intermediate calculations of that answer are guaranteed to fit in a bit integer The expression is guaranteed to be legal and evaluate to an integer
longest string chain You are given an array of words where each word consists of lowercase English letters wordA is a predecessor of wordB if and only if we can insert exactly one letter anywhere in wordA without changing the order of the other characters to make it equal to wordB For example abc is a predecessor of abac while cba is not a predecessor of bcad A word chain is a sequence of words wordk with k where is a predecessor of is a predecessor of and so on A single word is trivially a word chain with k Return the length of the longest possible word chain with words chosen from the given list of words Example Input words a b ba bca bda bdca Output Explanation One of the longest word chains is a ba bda bdca Example Input words xbc pcxbcf xb cxbc pcxbc Output Explanation All the words can be put in a word chain xb xbc cxbc pcxbc pcxbcf Example Input words abcd dbqca Output Explanation The trivial word chain abcd is one of the longest word chains abcd dbqca is not a valid word chain because the ordering of the letters is changed Constraints words length words i length words i only consists of lowercase English letters
intersection of two linked lists Given the heads of two singly linked lists headA and headB return the node at which the two lists intersect If the two linked lists have no intersection at all return null For example the following two linked lists begin to intersect at node The test cases are generated such that there are no cycles anywhere in the entire linked structure Note that the linked lists must retain their original structure after the function returns Custom Judge The inputs to the judge are given as follows your program is not given these inputs intersectVal The value of the node where the intersection occurs This is if there is no intersected node listA The first linked list listB The second linked list skipA The number of nodes to skip ahead in listA starting from the head to get to the intersected node skipB The number of nodes to skip ahead in listB starting from the head to get to the intersected node The judge will then create the linked structure based on these inputs and pass the two heads headA and headB to your program If you correctly return the intersected node then your solution will be accepted Example Input intersectVal listA listB skipA skipB Output Intersected at Explanation The intersected node s value is note that this must not be if the two lists intersect From the head of A it reads as From the head of B it reads as There are nodes before the intersected node in A There are nodes before the intersected node in B Note that the intersected node s value is not because the nodes with value in A and B node in A and node in B are different node references In other words they point to two different locations in memory while the nodes with value in A and B node in A and node in B point to the same location in memory Example Input intersectVal listA listB skipA skipB Output Intersected at Explanation The intersected node s value is note that this must not be if the two lists intersect From the head of A it reads as From the head of B it reads as There are nodes before the intersected node in A There are node before the intersected node in B Example Input intersectVal listA listB skipA skipB Output No intersection Explanation From the head of A it reads as From the head of B it reads as Since the two lists do not intersect intersectVal must be while skipA and skipB can be arbitrary values Explanation The two lists do not intersect so return null Constraints The number of nodes of listA is in the m The number of nodes of listB is in the n m n Node val skipA m skipB n intersectVal is if listA and listB do not intersect intersectVal listA skipA listB skipB if listA and listB intersect Follow up Could you write a solution that runs in O m n time and use only O memory
possible bipartition We want to split a group of n people labeled from to n into two groups of any size Each person may dislike some other people and they should not go into the same group Given the integer n and the array dislikes where dislikes i ai bi indicates that the person labeled ai does not like the person labeled bi return true if it is possible to split everyone into two groups in this way Example Input n dislikes Output true Explanation The first group has and the second group has Example Input n dislikes Output false Explanation We need at least groups to divide them We cannot put them in two groups Constraints n dislikes length dislikes i length ai bi n All the pairs of dislikes are unique
stickers to spell word We are given n different types of stickers Each sticker has a lowercase English word on it You would like to spell out the given string target by cutting individual letters from your collection of stickers and rearranging them You can use each sticker more than once if you want and you have infinite quantities of each sticker Return the minimum number of stickers that you need to spell out target If the task is impossible return Note In all test cases all words were chosen randomly from the most common US English words and target was chosen as a concatenation of two random words Example Input stickers with example science target thehat Output Explanation We can use with stickers and example sticker After cutting and rearrange the letters of those stickers we can form the target thehat Also this is the minimum number of stickers necessary to form the target string Example Input stickers notice possible target basicbasic Output Explanation We cannot form the target basicbasic from cutting letters from the given stickers Constraints n stickers length n stickers i length target length stickers i and target consist of lowercase English letters
longest palindromic substring Given a string s return the longest palindromic substring in s Example Input s babad Output bab Explanation aba is also a valid answer Example Input s cbbd Output bb Constraints s length s consist of only digits and English letters
score of parentheses Given a balanced parentheses string s return the score of the string The score of a balanced parentheses string is based on the following rule has score AB has score A B where A and B are balanced parentheses strings A has score A where A is a balanced parentheses string Example Input s Output Example Input s Output Example Input s Output Constraints s length s consists of only and s is a balanced parentheses string
consecutive characters The power of the string is the maximum length of a non empty substring that contains only one unique character Given a string s return the power of s Example Input s leetcode Output Explanation The substring ee is of length with the character e only Example Input s abbcccddddeeeeedcba Output Explanation The substring eeeee is of length with the character e only Constraints s length s consists of only lowercase English letters
restore the array A program was supposed to print an array of integers The program forgot to print whitespaces and the array is printed as a string of digits s and all we know is that all integers in the array were in the range k and there are no leading zeros in the array Given the string s and the integer k return the number of the possible arrays that can be printed as s using the mentioned program Since the answer may be very large return it modulo Example Input s k Output Explanation The only possible array is Example Input s k Output Explanation There cannot be an array that was printed this way and has all integer and Example Input s k Output Explanation Possible arrays are Constraints s length s consists of only digits and does not contain leading zeros k
crawler log folder The Leetcode file system keeps a log each time some user performs a change folder operation The operations are described below Move to the parent folder of the current folder If you are already in the main folder remain in the same folder Remain in the same folder x Move to the child folder named x This folder is guaranteed to always exist You are given a list of strings logs where logs i is the operation performed by the user at the ith step The file system starts in the main folder then the operations in logs are performed Return the minimum number of operations needed to go back to the main folder after the change folder operations Example Input logs Output Explanation Use this change folder operation times and go back to the main folder Example Input logs Output Example Input logs Output Constraints logs length logs i length logs i contains lowercase English letters digits and logs i follows the format described in the statement Folder names consist of lowercase English letters and digits
adding two negabinary numbers Given two numbers and in base return the result of adding them together Each number is given in array format as an array of and from most significant bit to least significant bit For example arr represents the number A number arr in array format is also guaranteed to have no leading zeros either arr or arr Return the result of adding and in the same format as an array of and with no leading zeros Example Input Output Explanation represents represents the output represents Example Input Output Example Input Output Constraints length length i and i are or and have no leading zeros
power of three Given an integer n return true if it is a power of three Otherwise return false An integer n is a power of three if there exists an integer x such that n Example Input n Output true Explanation Example Input n Output false Explanation There is no x where Example Input n Output false Explanation There is no x where Constraints n Follow up Could you solve it without loops recursion
trim a binary search tree Given the root of a binary search tree and the lowest and highest boundaries as low and high trim the tree so that all its elements lies in low high Trimming the tree should not change the relative structure of the elements that will remain in the tree i e any node s descendant should remain a descendant It can be proven that there is a unique answer Return the root of the trimmed binary search tree Note that the root may change depending on the given bounds Example Input root low high Output null Example Input root null null null low high Output null Constraints The number of nodes in the tree is in the range Node val The value of each node in the tree is unique root is guaranteed to be a valid binary search tree low high
pascal's triangle ii Given an integer rowIndex return the rowIndexth indexed row of the Pascal s triangle In Pascal s triangle each number is the sum of the two numbers directly above it as shown Example Input rowIndex Output Example Input rowIndex Output Example Input rowIndex Output Constraints rowIndex Follow up Could you optimize your algorithm to use only O rowIndex extra space
random point in non-overlapping rectangles You are given an array of non overlapping axis aligned rectangles rects where rects i ai bi xi yi indicates that ai bi is the bottom left corner point of the ith rectangle and xi yi is the top right corner point of the ith rectangle Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles A point on the perimeter of a rectangle is included in the space covered by the rectangle Any integer point inside the space covered by one of the given rectangles should be equally likely to be returned Note that an integer point is a point that has integer coordinates Implement the Solution class Solution int rects Initializes the object with the given rectangles rects int pick Returns a random integer point u v inside the space covered by one of the given rectangles Example Input Solution pick pick pick pick pick Output null Explanation Solution solution new Solution solution pick return solution pick return solution pick return solution pick return solution pick return Constraints rects length rects i length ai xi bi yi xi ai yi bi All the rectangles do not overlap At most calls will be made to pick
sum of two integers Given two integers a and b return the sum of the two integers without using the operators and Example Input a b Output Example Input a b Output Constraints a b
minimum cost to move chips to the same position We have n chips where the position of the ith chip is position i We need to move all the chips to the same position In one step we can change the position of the ith chip from position i to position i or position i with cost position i or position i with cost Return the minimum cost needed to move all the chips to the same position Example Input position Output Explanation First step Move the chip at position to position with cost Second step Move the chip at position to position with cost Total cost is Example Input position Output Explanation We can move the two chips at position to position Each move has cost The total cost Example Input position Output Constraints position length position i
shortest path to get all keys You are given an m x n grid grid where is an empty cell is a wall is the starting point Lowercase letters represent keys Uppercase letters represent locks You start at the starting point and one move consists of walking one space in one of the four cardinal directions You cannot walk outside the grid or walk into a wall If you walk over a key you can pick it up and you cannot walk over a lock unless you have its corresponding key For some k there is exactly one lowercase and one uppercase letter of the first k letters of the English alphabet in the grid This means that there is exactly one key for each lock and one lock for each key and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet Return the lowest number of moves to acquire all keys If it is impossible return Example Input grid a b A B Output Explanation Note that the goal is to obtain all the keys not to open all the locks Example Input grid aA B b Output Example Input grid Aa Output Constraints m grid length n grid i length m n grid i j is either an English letter or The number of keys in the grid is in the range Each key in the grid is unique Each key in the grid has a matching lock
count ways to make array with product You are given a integer array queries For each queries i where queries i ni ki find the number of different ways you can place positive integers into an array of size ni such that the product of the integers is ki As the number of ways may be too large the answer to the ith query is the number of ways modulo Return an integer array answer where answer length queries length and answer i is the answer to the ith query Example Input queries Output Explanation Each query is independent There are ways to fill an array of size that multiply to There is way to fill an array of size that multiply to There are ways to fill an array of size that multiply to modulo Example Input queries Output Constraints queries length ni ki
shortest subarray with sum at least k Given an integer array nums and an integer k return the length of the shortest non empty subarray of nums with a sum of at least k If there is no such subarray return A subarray is a contiguous part of an array Example Input nums k Output Example Input nums k Output Example Input nums k Output Constraints nums length nums i k
closest nodes queries in a binary search tree You are given the root of a binary search tree and an array queries of size n consisting of positive integers Find a array answer of size n where answer i mini maxi mini is the largest value in the tree that is smaller than or equal to queries i If a such value does not exist add instead maxi is the smallest value in the tree that is greater than or equal to queries i If a such value does not exist add instead Return the array answer Example Input root null null null null null null queries Output Explanation We answer the queries in the following way The largest number that is smaller or equal than in the tree is and the smallest number that is greater or equal than is still So the answer for the first query is The largest number that is smaller or equal than in the tree is and the smallest number that is greater or equal than is So the answer for the second query is The largest number that is smaller or equal than in the tree is and the smallest number that is greater or equal than does not exist So the answer for the third query is Example Input root null queries Output Explanation The largest number that is smaller or equal to in the tree does not exist and the smallest number that is greater or equal to is So the answer for the query is Constraints The number of nodes in the tree is in the range Node val n queries length n queries i
maximum equal frequency Given an array nums of positive integers return the longest possible length of an array prefix of nums such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences If after removing one element there are no remaining elements it s still considered that every appeared number has the same number of ocurrences Example Input nums Output Explanation For the subarray of length if we remove nums we will get so that each number will appear exactly twice Example Input nums Output Constraints nums length nums i
spiral matrix iv You are given two integers m and n which represent the dimensions of a matrix You are also given the head of a linked list of integers Generate an m x n matrix that contains the integers in the linked list presented in spiral order clockwise starting from the top left of the matrix If there are remaining empty spaces fill them with Return the generated matrix Example Input m n head Output Explanation The diagram above shows how the values are printed in the matrix Note that the remaining spaces in the matrix are filled with Example Input m n head Output Explanation The diagram above shows how the values are printed from left to right in the matrix The last space in the matrix is set to Constraints m n m n The number of nodes in the list is in the range m n Node val
sliding puzzle On an x board there are five tiles labeled from to and an empty square represented by A move consists of choosing and a directionally adjacent number and swapping it The state of the board is solved if and only if the board is Given the puzzle board board return the least number of moves required so that the state of the board is solved If it is impossible for the state of the board to be solved return Example Input board Output Explanation Swap the and the in one move Example Input board Output Explanation No number of moves will make the board solved Example Input board Output Explanation is the smallest number of moves that solves the board An example path After move After move After move After move After move After move Constraints board length board i length board i j Each value board i j is unique
flower planting with no adjacent You have n gardens labeled from to n and an array paths where paths i xi yi describes a bidirectional path between garden xi to garden yi In each garden you want to plant one of types of flowers All gardens have at most paths coming into or leaving it Your task is to choose a flower type for each garden such that for any two gardens connected by a path they have different types of flowers Return any such a choice as an array answer where answer i is the type of flower planted in the i th garden The flower types are denoted or It is guaranteed an answer exists Example Input n paths Output Explanation Gardens and have different types Gardens and have different types Gardens and have different types Hence is a valid answer Other valid answers include and Example Input n paths Output Example Input n paths Output Constraints n paths length paths i length xi yi n xi yi Every garden has at most paths coming into or leaving it
knight probability in chessboard On an n x n chessboard a knight starts at the cell row column and attempts to make exactly k moves The rows and columns are indexed so the top left cell is and the bottom right cell is n n A chess knight has eight possible moves it can make as illustrated below Each move is two cells in a cardinal direction then one cell in an orthogonal direction Each time the knight is to move it chooses one of eight possible moves uniformly at random even if the piece would go off the chessboard and moves there The knight continues moving until it has made exactly k moves or has moved off the chessboard Return the probability that the knight remains on the board after it has stopped moving Example Input n k row column Output Explanation There are two moves to that will keep the knight on the board From each of those positions there are also two moves that will keep the knight on the board The total probability the knight stays on the board is Example Input n k row column Output Constraints n k row column n
watering plants You want to water n plants in your garden with a watering can The plants are arranged in a row and are labeled from to n from left to right where the ith plant is located at x i There is a river at x that you can refill your watering can at Each plant needs a specific amount of water You will water the plants in the following way Water the plants in order from left to right After watering the current plant if you do not have enough water to completely water the next plant return to the river to fully refill the watering can You cannot refill the watering can early You are initially at the river i e x It takes one step to move one unit on the x axis Given a indexed integer array plants of n integers where plants i is the amount of water the ith plant needs and an integer capacity representing the watering can capacity return the number of steps needed to water all the plants Example Input plants capacity Output Explanation Start at the river with a full watering can Walk to plant step and water it Watering can has units of water Walk to plant step and water it Watering can has unit of water Since you cannot completely water plant walk back to the river to refill steps Walk to plant steps and water it Watering can has units of water Since you cannot completely water plant walk back to the river to refill steps Walk to plant steps and water it Steps needed Example Input plants capacity Output Explanation Start at the river with a full watering can Water plants and steps Return to river steps Water plant steps Return to river steps Water plant steps Return to river steps Water plant steps Steps needed Example Input plants capacity Output Explanation You have to refill before watering each plant Steps needed Constraints n plants length n plants i max plants i capacity
invert binary tree Given the root of a binary tree invert the tree and return its root Example Input root Output Example Input root Output Example Input root Output Constraints The number of nodes in the tree is in the range Node val
all paths from source to target Given a directed acyclic graph DAG of n nodes labeled from to n find all possible paths from node to node n and return them in any order The graph is given as follows graph i is a list of all nodes you can visit from node i i e there is a directed edge from node i to node graph i j Example Input graph Output Explanation There are two paths and Example Input graph Output Constraints n graph length n graph i j n graph i j i i e there will be no self loops All the elements of graph i are unique The input graph is guaranteed to be a DAG
check if every row and column contains all numbers An n x n matrix is valid if every row and every column contains all the integers from to n inclusive Given an n x n integer matrix matrix return true if the matrix is valid Otherwise return false Example Input matrix Output true Explanation In this case n and every row and column contains the numbers and Hence we return true Example Input matrix Output false Explanation In this case n but the first row and the first column do not contain the numbers or Hence we return false Constraints n matrix length matrix i length n matrix i j n
search a 2d matrix You are given an m x n integer matrix matrix with the following two properties Each row is sorted in non decreasing order The first integer of each row is greater than the last integer of the previous row Given an integer target return true if target is in matrix or false otherwise You must write a solution in O log m n time complexity Example Input matrix target Output true Example Input matrix target Output false Constraints m matrix length n matrix i length m n matrix i j target
increasing decreasing string You are given a string s Reorder the string using the following algorithm Pick the smallest character from s and append it to the result Pick the smallest character from s which is greater than the last appended character to the result and append it Repeat step until you cannot pick more characters Pick the largest character from s and append it to the result Pick the largest character from s which is smaller than the last appended character to the result and append it Repeat step until you cannot pick more characters Repeat the steps from to until you pick all characters from s In each step If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result Return the result string after sorting s with this algorithm Example Input s aaaabbbbcccc Output abccbaabccba Explanation After steps and of the first iteration result abc After steps and of the first iteration result abccba First iteration is done Now s aabbcc and we go back to step After steps and of the second iteration result abccbaabc After steps and of the second iteration result abccbaabccba Example Input s rat Output art Explanation The word rat becomes art after re ordering it with the mentioned algorithm Constraints s length s consists of only lowercase English letters
minimum cost homecoming of a robot in a grid There is an m x n grid where is the top left cell and m n is the bottom right cell You are given an integer array startPos where startPos startrow startcol indicates that initially a robot is at the cell startrow startcol You are also given an integer array homePos where homePos homerow homecol indicates that its home is at the cell homerow homecol The robot needs to go to its home It can move one cell in four directions left right up or down and it can not move outside the boundary Every move incurs some cost You are further given two indexed integer arrays rowCosts of length m and colCosts of length n If the robot moves up or down into a cell whose row is r then this move costs rowCosts r If the robot moves left or right into a cell whose column is c then this move costs colCosts c Return the minimum total cost for this robot to return home Example Input startPos homePos rowCosts colCosts Output Explanation One optimal path is that Starting from It goes down to This move costs rowCosts It goes right to This move costs colCosts It goes right to This move costs colCosts It goes right to This move costs colCosts The total cost is Example Input startPos homePos rowCosts colCosts Output Explanation The robot is already at its home Since no moves occur the total cost is Constraints m rowCosts length n colCosts length m n rowCosts r colCosts c startPos length homePos length startrow homerow m startcol homecol n
count the digits that divide a number Given an integer num return the number of digits in num that divide num An integer val divides nums if nums val Example Input num Output Explanation divides itself hence the answer is Example Input num Output Explanation is divisible by but not Since occurs twice as a digit we return Example Input num Output Explanation is divisible by all of its digits hence the answer is Constraints num num does not contain as one of its digits
best poker hand You are given an integer array ranks and a character array suits You have cards where the ith card has a rank of ranks i and a suit of suits i The following are the types of poker hands you can make from best to worst Flush Five cards of the same suit Three of a Kind Three cards of the same rank Pair Two cards of the same rank High Card Any single card Return a string representing the best type of poker hand you can make with the given cards Note that the return values are case sensitive Example Input ranks suits a a a a a Output Flush Explanation The hand with all the cards consists of cards with the same suit so we have a Flush Example Input ranks suits d a a b c Output Three of a Kind Explanation The hand with the first second and fourth card consists of cards with the same rank so we have a Three of a Kind Note that we could also make a Pair hand but Three of a Kind is a better hand Also note that other cards could be used to make the Three of a Kind hand Example Input ranks suits a b c a d Output Pair Explanation The hand with the first and second card consists of cards with the same rank so we have a Pair Note that we cannot make a Flush or a Three of a Kind Constraints ranks length suits length ranks i a suits i d No two cards have the same rank and suit
frequency of the most frequent element The frequency of an element is the number of times it occurs in an array You are given an integer array nums and an integer k In one operation you can choose an index of nums and increment the element at that index by Return the maximum possible frequency of an element after performing at most k operations Example Input nums k Output Explanation Increment the first element three times and the second element two times to make nums has a frequency of Example Input nums k Output Explanation There are multiple optimal solutions Increment the first element three times to make nums has a frequency of Increment the second element four times to make nums has a frequency of Increment the third element five times to make nums has a frequency of Example Input nums k Output Constraints nums length nums i k
repeated string match Given two strings a and b return the minimum number of times you should repeat string a so that string b is a substring of it If it is impossible for b to be a substring of a after repeating it return Notice string abc repeated times is repeated time is abc and repeated times is abcabc Example Input a abcd b cdabcdab Output Explanation We return because by repeating a three times abcdabcdabcd b is a substring of it Example Input a a b aa Output Constraints a length b length a and b consist of lowercase English letters
capacity to ship packages within d days A conveyor belt has packages that must be shipped from one port to another within days days The ith package on the conveyor belt has a weight of weights i Each day we load the ship with packages on the conveyor belt in the order given by weights We may not load more weight than the maximum weight capacity of the ship Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days Example Input weights days Output Explanation A ship capacity of is the minimum to ship all the packages in days like this day day day day day Note that the cargo must be shipped in the order given so using a ship of capacity and splitting the packages into parts like is not allowed Example Input weights days Output Explanation A ship capacity of is the minimum to ship all the packages in days like this day day day Example Input weights days Output Explanation day day day day Constraints days weights length weights i
handling sum queries after update You are given two indexed arrays and and a array queries of queries There are three types of queries For a query of type queries i l r Flip the values from to and from to in from index l to index r Both l and r are indexed For a query of type queries i p For every index i n set i i i p For a query of type queries i Find the sum of the elements in Return an array containing all the answers to the third type queries Example Input queries Output Explanation After the first query becomes After the second query becomes so the answer to the third query is Thus is returned Example Input queries Output Explanation After the first query remains so the answer to the second query is Thus is returned Constraints length length length length queries length queries i length l r length p i i
trapping rain water ii Given an m x n integer matrix heightMap representing the height of each unit cell in a elevation map return the volume of water it can trap after raining Example Input heightMap Output Explanation After the rain water is trapped between the blocks We have two small ponds and units trapped The total volume of water trapped is Example Input heightMap Output Constraints m heightMap length n heightMap i length m n heightMap i j
self crossing
apply operations to an array You are given a indexed array nums of size n consisting of non negative integers You need to apply n operations to this array where in the ith operation indexed you will apply the following on the ith element of nums If nums i nums i then multiply nums i by and set nums i to Otherwise you skip this operation After performing all the operations shift all the s to the end of the array For example the array after shifting all its s to the end is Return the resulting array Note that the operations are applied sequentially not all at once Example Input nums Output Explanation We do the following operations i nums and nums are not equal so we skip this operation i nums and nums are equal we multiply nums by and change nums to The array becomes i nums and nums are not equal so we skip this operation i nums and nums are equal we multiply nums by and change nums to The array becomes i nums and nums are equal we multiply nums by and change nums to The array becomes After that we shift the s to the end which gives the array Example Input nums Output Explanation No operation can be applied we just shift the to the end Constraints nums length nums i
minimum sum of squared difference You are given two positive indexed integer arrays and both of length n The sum of squared difference of arrays and is defined as the sum of i i for each i n You are also given two positive integers and You can modify any of the elements of by or at most times Similarly you can modify any of the elements of by or at most times Return the minimum sum of squared difference after modifying array at most times and modifying array at most times Note You are allowed to modify the array elements to become negative integers Example Input Output Explanation The elements in and cannot be modified because and The sum of square difference will be Example Input Output Explanation One way to obtain the minimum sum of square difference is Increase once Increase once The minimum of the sum of square difference will be Note that there are other ways to obtain the minimum of the sum of square difference but there is no way to obtain a sum smaller than Constraints n length length n i i
number of atoms Given a string formula representing a chemical formula return the count of each atom The atomic element always starts with an uppercase character then zero or more lowercase letters representing the name One or more digits representing that element s count may follow if the count is greater than If the count is no digits will follow For example and are possible but is impossible Two formulas are concatenated together to produce another formula For example is also a formula A formula placed in parentheses and a count optionally added is also a formula For example and are formulas Return the count of all elements as a string in the following form the first name in sorted order followed by its count if that count is more than followed by the second name in sorted order followed by its count if that count is more than and so on The test cases are generated so that all the values in the output fit in a bit integer Example Input formula Output Explanation The count of elements are H O Example Input formula Mg OH Output Explanation The count of elements are H Mg O Example Input formula ON Output Explanation The count of elements are K N O S Constraints formula length formula consists of English letters digits and formula is always valid
substring with largest variance The variance of a string is defined as the largest difference between the number of occurrences of any characters present in the string Note the two characters may or may not be the same Given a string s consisting of lowercase English letters only return the largest variance possible among all substrings of s A substring is a contiguous sequence of characters within a string Example Input s aababbb Output Explanation All possible variances along with their respective substrings are listed below Variance for substrings a aa ab abab aababb ba b bb and bbb Variance for substrings aab aba abb aabab ababb aababbb and bab Variance for substrings aaba ababbb abbb and babb Variance for substring babbb Since the largest possible variance is we return it Example Input s abcde Output Explanation No letter occurs more than once in s so the variance of every substring is Constraints s length s consists of lowercase English letters
count triplets that can form two arrays of equal xor Given an array of integers arr We want to select three indices i j and k where i j k arr length Let s define a and b as follows a arr i arr i arr j b arr j arr j arr k Note that denotes the bitwise xor operation Return the number of triplets i j and k Where a b Example Input arr Output Explanation The triplets are and Example Input arr Output Constraints arr length arr i
dice roll simulation A die simulator generates a random number from to for each roll You introduced a constraint to the generator such that it cannot roll the number i more than rollMax i indexed consecutive times Given an array of integers rollMax and an integer n return the number of distinct sequences that can be obtained with exact n rolls Since the answer may be too large return it modulo Two sequences are considered different if at least one element differs from each other Example Input n rollMax Output Explanation There will be rolls of die if there are no constraints on the die there are possible combinations In this case looking at rollMax array the numbers and appear at most once consecutively therefore sequences and cannot occur so the final answer is Example Input n rollMax Output Example Input n rollMax Output Constraints n rollMax length rollMax i
number of smooth descent periods of a stock You are given an integer array prices representing the daily price history of a stock where prices i is the stock price on the ith day A smooth descent period of a stock consists of one or more contiguous days such that the price on each day is lower than the price on the preceding day by exactly The first day of the period is exempted from this rule Return the number of smooth descent periods Example Input prices Output Explanation There are smooth descent periods and Note that a period with one day is a smooth descent period by the definition Example Input prices Output Explanation There are smooth descent periods and Note that is not a smooth descent period as Example Input prices Output Explanation There is smooth descent period Constraints prices length prices i
minimum time to collect all apples in a tree Given an undirected tree consisting of n vertices numbered from to n which has some apples in their vertices You spend second to walk over one edge of the tree Return the minimum time in seconds you have to spend to collect all apples in the tree starting at vertex and coming back to this vertex The edges of the undirected tree are given in the array edges where edges i ai bi means that exists an edge connecting the vertices ai and bi Additionally there is a boolean array hasApple where hasApple i true means that vertex i has an apple otherwise it does not have any apple Example Input n edges hasApple false false true false true true false Output Explanation The figure above represents the given tree where red vertices have an apple One optimal path to collect all apples is shown by the green arrows Example Input n edges hasApple false false true false false true false Output Explanation The figure above represents the given tree where red vertices have an apple One optimal path to collect all apples is shown by the green arrows Example Input n edges hasApple false false false false false false false Output Constraints n edges length n edges i length ai bi n hasApple length n
ways to split array into three subarrays A split of an integer array is good if The array is split into three non empty contiguous subarrays named left mid right respectively from left to right The sum of the elements in left is less than or equal to the sum of the elements in mid and the sum of the elements in mid is less than or equal to the sum of the elements in right Given nums an array of non negative integers return the number of good ways to split nums As the number may be too large return it modulo Example Input nums Output Explanation The only good way to split nums is Example Input nums Output Explanation There are three good ways of splitting nums Example Input nums Output Explanation There is no good way to split nums Constraints nums length nums i
calculate delayed arrival time You are given a positive integer arrivalTime denoting the arrival time of a train in hours and another positive integer delayedTime denoting the amount of delay in hours Return the time when the train will arrive at the station Note that the time in this problem is in hours format Example Input arrivalTime delayedTime Output Explanation Arrival time of the train was hours It is delayed by hours Now it will reach at hours Example Input arrivalTime delayedTime Output Explanation Arrival time of the train was hours It is delayed by hours Now it will reach at Which is denoted by in hours format so return Constraints arrivaltime delayedTime
number of ways to form a target string given a dictionary You are given a list of strings of the same length words and a string target Your task is to form target using the given words under the following rules target should be formed from left to right To form the ith character indexed of target you can choose the kth character of the jth string in words if target i words j k Once you use the kth character of the jth string of words you can no longer use the xth character of any string in words where x k In other words all characters to the left of or at index k become unusuable for every string Repeat the process until you form the string target Notice that you can use multiple characters from the same string in words provided the conditions above are met Return the number of ways to form target from words Since the answer may be too large return it modulo Example Input words acca bbbb caca target aba Output Explanation There are ways to form target aba index acca index bbbb index caca aba index acca index bbbb index caca aba index acca index bbbb index acca aba index acca index bbbb index acca aba index caca index bbbb index acca aba index caca index bbbb index caca Example Input words abba baab target bab Output Explanation There are ways to form target bab index baab index baab index abba bab index baab index baab index baab bab index baab index baab index baab bab index abba index baab index baab Constraints words length words i length All strings in words have the same length target length words i and target contain only lowercase English letters
find the student that will replace the chalk There are n students in a class numbered from to n The teacher will give each student a problem starting with the student number then the student number and so on until the teacher reaches the student number n After that the teacher will restart the process starting with the student number again You are given a indexed integer array chalk and an integer k There are initially k pieces of chalk When the student number i is given a problem to solve they will use chalk i pieces of chalk to solve that problem However if the current number of chalk pieces is strictly less than chalk i then the student number i will be asked to replace the chalk Return the index of the student that will replace the chalk pieces Example Input chalk k Output Explanation The students go in turns as follows Student number uses chalk so k Student number uses chalk so k Student number uses chalk so k Student number uses chalk so k Student number uses chalk so k Student number uses chalk so k Student number does not have enough chalk so they will have to replace it Example Input chalk k Output Explanation The students go in turns as follows Student number uses chalk so k Student number uses chalk so k Student number uses chalk so k Student number uses chalk so k Student number uses chalk so k Student number uses chalk so k Student number uses chalk so k Student number uses chalk so k Student number uses chalk so k Student number does not have enough chalk so they will have to replace it Constraints chalk length n n chalk i k
maximum number of pairs in array You are given a indexed integer array nums In one operation you may do the following Choose two integers in nums that are equal Remove both integers from nums forming a pair The operation is done on nums as many times as possible Return a indexed integer array answer of size where answer is the number of pairs that are formed and answer is the number of leftover integers in nums after doing the operation as many times as possible Example Input nums Output Explanation Form a pair with nums and nums and remove them from nums Now nums Form a pair with nums and nums and remove them from nums Now nums Form a pair with nums and nums and remove them from nums Now nums No more pairs can be formed A total of pairs have been formed and there is number leftover in nums Example Input nums Output Explanation Form a pair with nums and nums and remove them from nums Now nums No more pairs can be formed A total of pair has been formed and there are numbers leftover in nums Example Input nums Output Explanation No pairs can be formed and there is number leftover in nums Constraints nums length nums i
minimum index sum of two lists Given two arrays of strings and find the common strings with the least index sum A common string is a string that appeared in both and A common string with the least index sum is a common string such that if it appeared at i and j then i j should be the minimum value among all the other common strings Return all the common strings with the least index sum Return the answer in any order Example Input Shogun Tapioca Express Burger King KFC Piatti The Grill at Torrey Pines Hungry Hunter Steakhouse Shogun Output Shogun Explanation The only common string is Shogun Example Input Shogun Tapioca Express Burger King KFC KFC Shogun Burger King Output Shogun Explanation The common string with the least index sum is Shogun with index sum Example Input happy sad good sad happy good Output sad happy Explanation There are three common strings happy with index sum sad with index sum good with index sum The strings with the least index sum are sad and happy Constraints length length i length i length i and i consist of spaces and English letters All the strings of are unique All the strings of are unique There is at least a common string between and
defanging an ip address Given a valid IP address return a defanged version of that IP address A defanged IP address replaces every period with Example Input address Output Example Input address Output Constraints The given address is a valid address
next greater element i The next greater element of some element x in an array is the first greater element that is to the right of x in the same array You are given two distinct indexed integer arrays and where is a subset of For each i length find the index j such that i j and determine the next greater element of j in If there is no next greater element then the answer for this query is Return an array ans of length length such that ans i is the next greater element as described above Example Input Output Explanation The next greater element for each value of is as follows is underlined in There is no next greater element so the answer is is underlined in The next greater element is is underlined in There is no next greater element so the answer is Example Input Output Explanation The next greater element for each value of is as follows is underlined in The next greater element is is underlined in There is no next greater element so the answer is Constraints length length i i All integers in and are unique All the integers of also appear in Follow up Could you find an O length length solution
minimum number of food buckets to feed the hamsters You are given a indexed string hamsters where hamsters i is either H indicating that there is a hamster at index i or indicating that index i is empty You will add some number of food buckets at the empty indices in order to feed the hamsters A hamster can be fed if there is at least one food bucket to its left or to its right More formally a hamster at index i can be fed if you place a food bucket at index i and or at index i Return the minimum number of food buckets you should place at empty indices to feed all the hamsters or if it is impossible to feed all of them Example Input hamsters H H Output Explanation We place two food buckets at indices and It can be shown that if we place only one food bucket one of the hamsters will not be fed Example Input hamsters H H Output Explanation We place one food bucket at index Example Input hamsters HHH Output Explanation If we place a food bucket at every empty index as shown the hamster at index will not be able to eat Constraints hamsters length hamsters i is either H or
remove trailing zeros from a string Given a positive integer num represented as a string return the integer num without trailing zeros as a string Example Input num Output Explanation Integer has trailing zeros we remove them and return integer Example Input num Output Explanation Integer has no trailing zeros we return integer Constraints num length num consists of only digits num doesn t have any leading zeros
minimum lines to represent a line chart You are given a integer array stockPrices where stockPrices i dayi pricei indicates the price of the stock on day dayi is pricei A line chart is created from the array by plotting the points on an XY plane with the X axis representing the day and the Y axis representing the price and connecting adjacent points One such example is shown below Return the minimum number of lines needed to represent the line chart Example Input stockPrices Output Explanation The diagram above represents the input with the X axis representing the day and Y axis representing the price The following lines can be drawn to represent the line chart Line in red from to passing through and Line in blue from to Line in green from to passing through and It can be shown that it is not possible to represent the line chart using less than lines Example Input stockPrices Output Explanation As shown in the diagram above the line chart can be represented with a single line Constraints stockPrices length stockPrices i length dayi pricei All dayi are distinct
partition array for maximum sum Given an integer array arr partition the array into contiguous subarrays of length at most k After partitioning each subarray has their values changed to become the maximum value of that subarray Return the largest sum of the given array after partitioning Test cases are generated so that the answer fits in a bit integer Example Input arr k Output Explanation arr becomes Example Input arr k Output Example Input arr k Output Constraints arr length arr i k arr length
network delay time You are given a network of n nodes labeled from to n You are also given times a list of travel times as directed edges times i ui vi wi where ui is the source node vi is the target node and wi is the time it takes for a signal to travel from source to target We will send a signal from a given node k Return the minimum time it takes for all the n nodes to receive the signal If it is impossible for all the n nodes to receive the signal return Example Input times n k Output Example Input times n k Output Example Input times n k Output Constraints k n times length times i length ui vi n ui vi wi All the pairs ui vi are unique i e no multiple edges
magic squares in grid A x magic square is a x grid filled with distinct numbers from to such that each row column and both diagonals all have the same sum Given a row x col grid of integers how many x magic square subgrids are there Each subgrid is contiguous Example Input grid Output Explanation The following subgrid is a x magic square while this one is not In total there is only one magic square inside the given grid Example Input grid Output Constraints row grid length col grid i length row col grid i j
super washing machines You have n super washing machines on a line Initially each washing machine has some dresses or is empty For each move you could choose any m m n washing machines and pass one dress of each washing machine to one of its adjacent washing machines at the same time Given an integer array machines representing the number of dresses in each washing machine from left to right on the line return the minimum number of moves to make all the washing machines have the same number of dresses If it is not possible to do it return Example Input machines Output Explanation move move move Example Input machines Output Explanation move move Example Input machines Output Explanation It s impossible to make all three washing machines have the same number of dresses Constraints n machines length n machines i
combination sum Given an array of distinct integers candidates and a target integer target return a list of all unique combinations of candidates where the chosen numbers sum to target You may return the combinations in any order The same number may be chosen from candidates an unlimited number of times Two combinations are unique if the frequency of at least one of the chosen numbers is different The test cases are generated such that the number of unique combinations that sum up to target is less than combinations for the given input Example Input candidates target Output Explanation and are candidates and Note that can be used multiple times is a candidate and These are the only two combinations Example Input candidates target Output Example Input candidates target Output Constraints candidates length candidates i All elements of candidates are distinct target
image overlap You are given two images and represented as binary square matrices of size n x n A binary matrix has only and as values We translate one image however we choose by sliding all the bits left right up and or down any number of units We then place it on top of the other image We can then calculate the overlap by counting the number of positions that have a in both images Note also that a translation does not include any kind of rotation Any bits that are translated outside of the matrix borders are erased Return the largest possible overlap Example Input Output Explanation We translate to right by unit and down by unit The number of positions that have a in both images is shown in red Example Input Output Example Input Output Constraints n length i length n length i length n i j is either or i j is either or
shortest subarray to be removed to make array sorted Given an integer array arr remove a subarray can be empty from arr such that the remaining elements in arr are non decreasing Return the length of the shortest subarray to remove A subarray is a contiguous subsequence of the array Example Input arr Output Explanation The shortest subarray we can remove is of length The remaining elements after that will be which are sorted Another correct solution is to remove the subarray Example Input arr Output Explanation Since the array is strictly decreasing we can only keep a single element Therefore we need to remove a subarray of length either or Example Input arr Output Explanation The array is already non decreasing We do not need to remove any elements Constraints arr length arr i
swap for longest repeated character substring You are given a string text You can swap two of the characters in the text Return the length of the longest substring with repeated characters Example Input text ababa Output Explanation We can swap the first b with the last a or the last b with the first a Then the longest repeated character substring is aaa with length Example Input text aaabaaa Output Explanation Swap b with the last a or the first a and we get longest repeated character substring aaaaaa with length Example Input text aaaaa Output Explanation No need to swap longest repeated character substring is aaaaa with length is Constraints text length text consist of lowercase English characters only
lucky numbers in a matrix Given an m x n matrix of distinct numbers return all lucky numbers in the matrix in any order A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column Example Input matrix Output Explanation is the only lucky number since it is the minimum in its row and the maximum in its column Example Input matrix Output Explanation is the only lucky number since it is the minimum in its row and the maximum in its column Example Input matrix Output Explanation is the only lucky number since it is the minimum in its row and the maximum in its column Constraints m mat length n mat i length n m matrix i j All elements in the matrix are distinct
check distances between same letters You are given a indexed string s consisting of only lowercase English letters where each letter in s appears exactly twice You are also given a indexed integer array distance of length Each letter in the alphabet is numbered from to i e a b c z In a well spaced string the number of letters between the two occurrences of the ith letter is distance i If the ith letter does not appear in s then distance i can be ignored Return true if s is a well spaced string otherwise return false Example Input s abaccb distance Output true Explanation a appears at indices and so it satisfies distance b appears at indices and so it satisfies distance c appears at indices and so it satisfies distance Note that distance but since d does not appear in s it can be ignored Return true because s is a well spaced string Example Input s aa distance Output false Explanation a appears at indices and so there are zero letters between them Because distance s is not a well spaced string Constraints s length s consists only of lowercase English letters Each letter appears in s exactly twice distance length distance i
add to array-form of integer The array form of an integer num is an array representing its digits in left to right order For example for num the array form is Given num the array form of an integer and an integer k return the array form of the integer num k Example Input num k Output Explanation Example Input num k Output Explanation Example Input num k Output Explanation Constraints num length num i num does not contain any leading zeros except for the zero itself k
count square submatrices with all ones Given a m n matrix of ones and zeros return how many square submatrices have all ones Example Input matrix Output Explanation There are squares of side There are squares of side There is square of side Total number of squares Example Input matrix Output Explanation There are squares of side There is square of side Total number of squares Constraints arr length arr length arr i j
find the closest palindrome Given a string n representing an integer return the closest integer not including itself which is a palindrome If there is a tie return the smaller one The closest is defined as the absolute difference minimized between two integers Example Input n Output Example Input n Output Explanation and are the closest palindromes but we return the smallest which is Constraints n length n consists of only digits n does not have leading zeros n is representing an integer in the range
minimum elements to add to form a given sum You are given an integer array nums and two integers limit and goal The array nums has an interesting property that abs nums i limit Return the minimum number of elements you need to add to make the sum of the array equal to goal The array must maintain its property that abs nums i limit Note that abs x equals x if x and x otherwise Example Input nums limit goal Output Explanation You can add and then the sum of the array will be Example Input nums limit goal Output Constraints nums length limit limit nums i limit goal
decode the slanted ciphertext A string originalText is encoded using a slanted transposition cipher to a string encodedText with the help of a matrix having a fixed number of rows rows originalText is placed first in a top left to bottom right manner The blue cells are filled first followed by the red cells then the yellow cells and so on until we reach the end of originalText The arrow indicates the order in which the cells are filled All empty cells are filled with The number of columns is chosen such that the rightmost column will not be empty after filling in originalText encodedText is then formed by appending all characters of the matrix in a row wise fashion The characters in the blue cells are appended first to encodedText then the red cells and so on and finally the yellow cells The arrow indicates the order in which the cells are accessed For example if originalText cipher and rows then we encode it in the following manner The blue arrows depict how originalText is placed in the matrix and the red arrows denote the order in which encodedText is formed In the above example encodedText ch ie pr Given the encoded string encodedText and number of rows rows return the original string originalText Note originalText does not have any trailing spaces The test cases are generated such that there is only one possible originalText Example Input encodedText ch ie pr rows Output cipher Explanation This is the same example described in the problem description Example Input encodedText iveo eed l te olc rows Output i love leetcode Explanation The figure above denotes the matrix that was used to encode originalText The blue arrows show how we can find originalText from encodedText Example Input encodedText coding rows Output coding Explanation Since there is only row both originalText and encodedText are the same Constraints encodedText length encodedText consists of lowercase English letters and only encodedText is a valid encoding of some originalText that does not have trailing spaces rows The testcases are generated such that there is only one possible originalText
split the array to make coprime products You are given a indexed integer array nums of length n A split at an index i where i n is called valid if the product of the first i elements and the product of the remaining elements are coprime For example if nums then a split at the index i is valid because and are coprime while a split at the index i is not valid because and are not coprime A split at the index i is not valid because i n Return the smallest index i at which the array can be split validly or if there is no such split Two values and are coprime if gcd where gcd is the greatest common divisor of and Example Input nums Output Explanation The table above shows the values of the product of the first i elements the remaining elements and their gcd at each index i The only valid split is at index Example Input nums Output Explanation The table above shows the values of the product of the first i elements the remaining elements and their gcd at each index i There is no valid split Constraints n nums length n nums i
reconstruct itinerary You are given a list of airline tickets where tickets i fromi toi represent the departure and the arrival airports of one flight Reconstruct the itinerary in order and return it All of the tickets belong to a man who departs from JFK thus the itinerary must begin with JFK If there are multiple valid itineraries you should return the itinerary that has the smallest lexical order when read as a single string For example the itinerary JFK LGA has a smaller lexical order than JFK LGB You may assume all tickets form at least one valid itinerary You must use all the tickets once and only once Example Input tickets MUC LHR JFK MUC SFO SJC LHR SFO Output JFK MUC LHR SFO SJC Example Input tickets JFK SFO JFK ATL SFO ATL ATL JFK ATL SFO Output JFK ATL JFK SFO ATL SFO Explanation Another possible reconstruction is JFK SFO ATL JFK ATL SFO but it is larger in lexical order Constraints tickets length tickets i length fromi length toi length fromi and toi consist of uppercase English letters fromi toi
group the people given the group size they belong to There are n people that are split into some unknown number of groups Each person is labeled with a unique ID from to n You are given an integer array groupSizes where groupSizes i is the size of the group that person i is in For example if groupSizes then person must be in a group of size Return a list of groups such that each person i is in a group of size groupSizes i Each person should appear in exactly one group and every person must be in a group If there are multiple answers return any of them It is guaranteed that there will be at least one valid solution for the given input Example Input groupSizes Output Explanation The first group is The size is and groupSizes The second group is The size is and groupSizes groupSizes groupSizes The third group is The size is and groupSizes groupSizes groupSizes Other possible solutions are and Example Input groupSizes Output Constraints groupSizes length n n groupSizes i n
range sum query - mutable Given an integer array nums handle multiple queries of the following types Update the value of an element in nums Calculate the sum of the elements of nums between indices left and right inclusive where left right Implement the NumArray class NumArray int nums Initializes the object with the integer array nums void update int index int val Updates the value of nums index to be val int sumRange int left int right Returns the sum of the elements of nums between indices left and right inclusive i e nums left nums left nums right Example Input NumArray sumRange update sumRange Output null null Explanation NumArray numArray new NumArray numArray sumRange return numArray update nums numArray sumRange return Constraints nums length nums i index nums length val left right nums length At most calls will be made to update and sumRange
valid anagram Given two strings s and t return true if t is an anagram of s and false otherwise An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase typically using all the original letters exactly once Example Input s anagram t nagaram Output true Example Input s rat t car Output false Constraints s length t length s and t consist of lowercase English letters Follow up What if the inputs contain Unicode characters How would you adapt your solution to such a case
random pick with blacklist You are given an integer n and an array of unique integers blacklist Design an algorithm to pick a random integer in the range n that is not in blacklist Any integer that is in the mentioned range and not in blacklist should be equally likely to be returned Optimize your algorithm such that it minimizes the number of calls to the built in random function of your language Implement the Solution class Solution int n int blacklist Initializes the object with the integer n and the blacklisted integers blacklist int pick Returns a random integer in the range n and not in blacklist Example Input Solution pick pick pick pick pick pick pick Output null Explanation Solution solution new Solution solution pick return any integer from should be ok Note that for every call of pick and must be equally likely to be returned i e with probability solution pick return solution pick return solution pick return solution pick return solution pick return solution pick return Constraints n blacklist length min n blacklist i n All the values of blacklist are unique At most calls will be made to pick
set mismatch You have a set of integers s which originally contains all the numbers from to n Unfortunately due to some error one of the numbers in s got duplicated to another number in the set which results in repetition of one number and loss of another number You are given an integer array nums representing the data status of this set after the error Find the number that occurs twice and the number that is missing and return them in the form of an array Example Input nums Output Example Input nums Output Constraints nums length nums i
